print('''

# -*- coding: utf-8 -*-
"""bi6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ROL9imrwvki3H46scvicut5SV18Ui6r9
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

iris = load_iris()
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

WCSS = []  # Initialize an empty list to store WCSS values
K_range = range(1, 11)  # Define the range of K (number of clusters)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)  # Create KMeans model with k clusters
    kmeans.fit(scaled_data)  # Fit the model to the scaled data
    WCSS.append(kmeans.inertia_)  # Append the inertia (WCSS) to the list

plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), WCSS, marker='o', linestyle='-', color='b')
plt.title('Elbow Method for Optimal k', fontsize=14)
plt.xlabel('Number of Clusters (k)', fontsize=12)
plt.ylabel('WCSS (Within-Cluster Sum of Squares)', fontsize=12)
plt.grid(True)
plt.show()

# Perform KMeans clustering with 3 clusters
kmeans = KMeans(n_clusters=3, random_state=42)

# Predict the clusters for each data point
clusters = kmeans.fit_predict(scaled_data)

df['Cluster'] = clusters  # Add cluster labels to the DataFrame

print(df.head())  # Display the first 5 rows of the DataFrame

plt.figure(figsize=(8, 5))  # Set the figure size
sns.scatterplot(x=df[iris.feature_names[0]],
                y=df[iris.feature_names[1]],
                hue=df['Cluster'],
                palette='Set2')  # Use 'Set2' color palette for clusters
plt.title("K-Means Clustering Results", fontsize=14)
plt.xlabel(iris.feature_names[0])  # Label for the x-axis (first feature)
plt.ylabel(iris.feature_names[1])  # Label for the y-axis (second feature)
plt.legend(title='Cluster', loc='upper right')
plt.show()

# Calculate the silhouette score
score = silhouette_score(scaled_data, clusters)

# Print the silhouette score
print("Silhouette Score:", score)



      ''')
