"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from glean import errors, models, utils
from glean._hooks import HookContext
from glean.types import OptionalNullable, UNSET
from glean.utils import get_security_from_env
from typing import List, Mapping, Optional, Union


class Summarize(BaseSDK):
    def generate(
        self,
        *,
        document_specs: Union[
            List[models.DocumentSpecUnion], List[models.DocumentSpecUnionTypedDict]
        ],
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        timestamp: Optional[datetime] = None,
        query: Optional[str] = None,
        preferred_summary_length: Optional[int] = None,
        tracking_token: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SummarizeResponse:
        r"""Summarize documents

        Generate an AI summary of the requested documents.

        :param document_specs: Specifications of documents to summarize
        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param timestamp: The ISO 8601 timestamp associated with the client request.
        :param query: Optional query that the summary should be about
        :param preferred_summary_length: Optional length of summary output. If not given, defaults to 500 chars.
        :param tracking_token: An opaque token that represents this particular result. To be used for /feedback reporting.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SummarizeRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            summarize_request=models.SummarizeRequest(
                timestamp=timestamp,
                query=query,
                preferred_summary_length=preferred_summary_length,
                document_specs=utils.get_pydantic_model(
                    document_specs, List[models.DocumentSpecUnion]
                ),
                tracking_token=tracking_token,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/summarize",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.summarize_request, False, False, "json", models.SummarizeRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="summarize",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SummarizeResponse)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def generate_async(
        self,
        *,
        document_specs: Union[
            List[models.DocumentSpecUnion], List[models.DocumentSpecUnionTypedDict]
        ],
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        timestamp: Optional[datetime] = None,
        query: Optional[str] = None,
        preferred_summary_length: Optional[int] = None,
        tracking_token: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SummarizeResponse:
        r"""Summarize documents

        Generate an AI summary of the requested documents.

        :param document_specs: Specifications of documents to summarize
        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param timestamp: The ISO 8601 timestamp associated with the client request.
        :param query: Optional query that the summary should be about
        :param preferred_summary_length: Optional length of summary output. If not given, defaults to 500 chars.
        :param tracking_token: An opaque token that represents this particular result. To be used for /feedback reporting.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SummarizeRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            summarize_request=models.SummarizeRequest(
                timestamp=timestamp,
                query=query,
                preferred_summary_length=preferred_summary_length,
                document_specs=utils.get_pydantic_model(
                    document_specs, List[models.DocumentSpecUnion]
                ),
                tracking_token=tracking_token,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/summarize",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.summarize_request, False, False, "json", models.SummarizeRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="summarize",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SummarizeResponse)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
