"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from glean import errors, models, utils
from glean._hooks import HookContext
from glean.types import OptionalNullable, UNSET
from glean.utils import get_security_from_env
from typing import Any, List, Mapping, Optional, Union


class Search(BaseSDK):
    def admin(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        search_request: Optional[
            Union[models.SearchRequest, models.SearchRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchResponse:
        r"""Search the index (admin)

        Retrieves results for search query without respect for permissions. This is available only to privileged users.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param search_request: Admin search request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AdminsearchRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            search_request=utils.get_pydantic_model(
                search_request, Optional[models.SearchRequest]
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/adminsearch",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.search_request,
                False,
                True,
                "json",
                Optional[models.SearchRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="adminsearch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchResponse)
        if utils.match_response(http_res, ["403", "422"], "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.GleanDataErrorData
            )
            raise errors.GleanDataError(data=response_data)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def admin_async(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        search_request: Optional[
            Union[models.SearchRequest, models.SearchRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchResponse:
        r"""Search the index (admin)

        Retrieves results for search query without respect for permissions. This is available only to privileged users.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param search_request: Admin search request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AdminsearchRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            search_request=utils.get_pydantic_model(
                search_request, Optional[models.SearchRequest]
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/adminsearch",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.search_request,
                False,
                True,
                "json",
                Optional[models.SearchRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="adminsearch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchResponse)
        if utils.match_response(http_res, ["403", "422"], "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.GleanDataErrorData
            )
            raise errors.GleanDataError(data=response_data)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def autocomplete(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        query: Optional[str] = None,
        datasources_filter: Optional[List[str]] = None,
        datasource: Optional[str] = None,
        result_types: Optional[List[models.AutocompleteRequestResultType]] = None,
        result_size: Optional[int] = None,
        auth_tokens: Optional[
            Union[List[models.AuthToken], List[models.AuthTokenTypedDict]]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AutocompleteResponse:
        r"""Autocomplete

        Retrieve query suggestions, operators and documents for the given partially typed query.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param tracking_token:
        :param session_info:
        :param query: Partially typed query.
        :param datasources_filter: Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing.
        :param datasource: Filter to only return results relevant to the given datasource.
        :param result_types: Filter to only return results of the given type(s). All types may be returned if omitted.
        :param result_size: Maximum number of results to be returned. If no value is provided, the backend will cap at 200.
        :param auth_tokens: Auth tokens which may be used for federated results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AutocompleteRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            autocomplete_request=models.AutocompleteRequest(
                tracking_token=tracking_token,
                session_info=utils.get_pydantic_model(
                    session_info, Optional[models.SessionInfo]
                ),
                query=query,
                datasources_filter=datasources_filter,
                datasource=datasource,
                result_types=result_types,
                result_size=result_size,
                auth_tokens=utils.get_pydantic_model(
                    auth_tokens, Optional[List[models.AuthToken]]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/autocomplete",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.autocomplete_request,
                False,
                False,
                "json",
                models.AutocompleteRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="autocomplete",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.AutocompleteResponse)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def autocomplete_async(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        query: Optional[str] = None,
        datasources_filter: Optional[List[str]] = None,
        datasource: Optional[str] = None,
        result_types: Optional[List[models.AutocompleteRequestResultType]] = None,
        result_size: Optional[int] = None,
        auth_tokens: Optional[
            Union[List[models.AuthToken], List[models.AuthTokenTypedDict]]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AutocompleteResponse:
        r"""Autocomplete

        Retrieve query suggestions, operators and documents for the given partially typed query.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param tracking_token:
        :param session_info:
        :param query: Partially typed query.
        :param datasources_filter: Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing.
        :param datasource: Filter to only return results relevant to the given datasource.
        :param result_types: Filter to only return results of the given type(s). All types may be returned if omitted.
        :param result_size: Maximum number of results to be returned. If no value is provided, the backend will cap at 200.
        :param auth_tokens: Auth tokens which may be used for federated results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AutocompleteRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            autocomplete_request=models.AutocompleteRequest(
                tracking_token=tracking_token,
                session_info=utils.get_pydantic_model(
                    session_info, Optional[models.SessionInfo]
                ),
                query=query,
                datasources_filter=datasources_filter,
                datasource=datasource,
                result_types=result_types,
                result_size=result_size,
                auth_tokens=utils.get_pydantic_model(
                    auth_tokens, Optional[List[models.AuthToken]]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/autocomplete",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.autocomplete_request,
                False,
                False,
                "json",
                models.AutocompleteRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="autocomplete",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.AutocompleteResponse)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_feed(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        categories: Optional[List[models.FeedRequestCategory]] = None,
        request_options: Optional[
            Union[models.FeedRequestOptions, models.FeedRequestOptionsTypedDict]
        ] = None,
        timeout_millis: Optional[int] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.FeedResponse:
        r"""Feed of documents and events

        The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param categories: Categories of content requested. An allowlist gives flexibility to request content separately or together.
        :param request_options:
        :param timeout_millis: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
        :param session_info:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.FeedRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            feed_request=models.FeedRequest(
                categories=categories,
                request_options=utils.get_pydantic_model(
                    request_options, Optional[models.FeedRequestOptions]
                ),
                timeout_millis=timeout_millis,
                session_info=utils.get_pydantic_model(
                    session_info, Optional[models.SessionInfo]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/feed",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.feed_request, False, False, "json", models.FeedRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="feed",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "408", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.FeedResponse)
        if utils.match_response(http_res, ["400", "401", "408", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_feed_async(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        categories: Optional[List[models.FeedRequestCategory]] = None,
        request_options: Optional[
            Union[models.FeedRequestOptions, models.FeedRequestOptionsTypedDict]
        ] = None,
        timeout_millis: Optional[int] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.FeedResponse:
        r"""Feed of documents and events

        The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param categories: Categories of content requested. An allowlist gives flexibility to request content separately or together.
        :param request_options:
        :param timeout_millis: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
        :param session_info:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.FeedRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            feed_request=models.FeedRequest(
                categories=categories,
                request_options=utils.get_pydantic_model(
                    request_options, Optional[models.FeedRequestOptions]
                ),
                timeout_millis=timeout_millis,
                session_info=utils.get_pydantic_model(
                    session_info, Optional[models.SessionInfo]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/feed",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.feed_request, False, False, "json", models.FeedRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="feed",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "408", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.FeedResponse)
        if utils.match_response(http_res, ["400", "401", "408", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def recommendations(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        recommendations_request: Optional[
            Union[models.RecommendationsRequest, models.RecommendationsRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ResultsResponse]:
        r"""Recommend documents

        Retrieve recommended documents for the given URL or Glean Document ID.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param recommendations_request: Recommendations request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RecommendationsRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            recommendations_request=utils.get_pydantic_model(
                recommendations_request, Optional[models.RecommendationsRequest]
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/recommendations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.recommendations_request,
                False,
                True,
                "json",
                Optional[models.RecommendationsRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="recommendations",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ResultsResponse)
        if utils.match_response(http_res, ["202", "204"], "*"):
            return None
        if utils.match_response(http_res, ["400", "401", "403", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def recommendations_async(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        recommendations_request: Optional[
            Union[models.RecommendationsRequest, models.RecommendationsRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ResultsResponse]:
        r"""Recommend documents

        Retrieve recommended documents for the given URL or Glean Document ID.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param recommendations_request: Recommendations request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RecommendationsRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            recommendations_request=utils.get_pydantic_model(
                recommendations_request, Optional[models.RecommendationsRequest]
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/recommendations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.recommendations_request,
                False,
                True,
                "json",
                Optional[models.RecommendationsRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="recommendations",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ResultsResponse)
        if utils.match_response(http_res, ["202", "204"], "*"):
            return None
        if utils.match_response(http_res, ["400", "401", "403", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def execute(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        search_request: Optional[
            Union[models.SearchRequest, models.SearchRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchResponse:
        r"""Search

        Retrieve results from the index for the given query and filters.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param search_request: Search request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            search_request=utils.get_pydantic_model(
                search_request, Optional[models.SearchRequest]
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/search",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.search_request,
                False,
                True,
                "json",
                Optional[models.SearchRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="search",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "408", "422", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchResponse)
        if utils.match_response(http_res, ["403", "422"], "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.GleanDataErrorData
            )
            raise errors.GleanDataError(data=response_data)
        if utils.match_response(http_res, ["400", "401", "408", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def execute_async(
        self,
        *,
        x_glean_act_as: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        search_request: Optional[
            Union[models.SearchRequest, models.SearchRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchResponse:
        r"""Search

        Retrieve results from the index for the given query and filters.

        :param x_glean_act_as: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param search_request: Search request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchRequestRequest(
            x_glean_act_as=x_glean_act_as,
            x_glean_auth_type=x_glean_auth_type,
            search_request=utils.get_pydantic_model(
                search_request, Optional[models.SearchRequest]
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/search",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.search_request,
                False,
                True,
                "json",
                Optional[models.SearchRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="search",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "408", "422", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchResponse)
        if utils.match_response(http_res, ["403", "422"], "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.GleanDataErrorData
            )
            raise errors.GleanDataError(data=response_data)
        if utils.match_response(http_res, ["400", "401", "408", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
