# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.1/language-python/ for more details
#
# https://github.com/Cadair/giles
# giles only need "Job Completed" events.
# https://giles.cadair.dev/circleci/v2
#
# “run-ci” label added to PR
---
version: 2.1

##########################################
# Here is where the real jobs are defined.
##########################################

# Aliases to reuse
_defaults: &defaults
  ## https://circleci.com/docs/install-machine-runner-3-on-linux/
  # machine: true
  ## https://circleci.com/docs/container-runner-installation/
  docker:
    # CircleCI maintains a library of pre-built images
    # - image: cimg/base:current-22.04
    # documented at https://circleci.com/developer/images/image/cimg/python
    - image: cimg/python:3.11
  # environment:
  #   - MKL_NUM_THREADS: 2
  #   - OPENBLAS_NUM_THREADS: 2
  #   - CONDA_ENV_NAME: testenv
  #   - LOCK_FILE: build_tools/circle/doc_linux-64_conda.lock
  #   # Make sure that we fail if the documentation build generates warnings with
  #   # recent versions of the dependencies.
  #   - SKLEARN_WARNINGS_AS_ERRORS: '1'
  working_directory: ~/repo
  ## https://circleci.com/docs/configuration-reference/#resourceclass
  # resource_class: scikit-plots/documentation  # large

commands:
  check-skip:
    description: Check if commit message contains skip keyword
    steps:
      - run:
          name: Check skip
          command: |
            if [ ! -d "scikitplot" ]; then
              echo "Build was not run due to skip, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              # Exit early without error — skip the rest of the job if condition is met.
              circleci-agent step halt;
            fi

            export GIT_LOG=$(git log --max-count=1 --pretty=format:"%B" | tr "\n" " ")
            echo "Got commit message:"
            echo "${GIT_LOG}"
            if [[ -v CIRCLE_PULL_REQUEST ]] && \
               ([[ "$GIT_LOG" == *"[skip circle]"* ]] || \
                [[ "$GIT_LOG" == *"[circle skip]"* ]] || \
                [[ "$GIT_LOG" == *"[lint only]"* ]] \
               ); then
              echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              # Exit early without error — skip the rest of the job if condition is met.
              circleci-agent step halt;
            fi
  merge:
    description: Merge with upstream
    steps:
      - run:
          name: Merge with upstream
          command: |
            echo $(git log -1 --pretty=%B)    | tee gitlog.txt

            echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
            if [[ $(cat merge.txt) != "" ]]; then
              echo "Merging $(cat merge.txt)";
              if ! git remote -v | grep upstream; then
                git remote add upstream https://github.com/scikit-plots/scikit-plots.git;
              fi
              git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
              git fetch upstream main;
            fi
  submodules:
    description: update submodules
    steps:
      - run:
          name: update submodules
          command: |
            ## download submodules
            # git submodule init
            # git submodule update
            git submodule update --init --recursive
  apt-install:
    description: Install system dependencies
    steps:
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              ninja-build \
              ccache \
              cm-super \
              graphviz \
              ffmpeg \
              inkscape \
              make \
              gfortran \
              libopenblas-dev \
              libgmp-dev \
              libmpfr-dev
  pip-install:
    description: Upgrade pip and setuptools and wheel to get as clean an install as possible
    steps:
      - run:
          name: setup Python venv upgrade pip, setuptools, wheel
          command: |
            # python -m pip install --upgrade --user --progress-bar=off --pre pip
            # pip install -r ./requirements/build.txt
            pip install -r ./requirements/all.txt
  build-skplt:
    description: build scikit-plots
    steps:
      - run:
          name: build scikit-plots
          command: |
            # cpu: tensorflow
            pip install --no-cache-dir .[build,dev,test,doc,cpu]
  build-docs:
    description: build documentation scikit-plots
    steps:
      - attach_workspace:
          at: ~/
      - check-skip  # This calls your custom command
      - apt-install  # This calls your custom command
      - run:
          name: build docs
          # no_output_timeout: 25m
          command: |
            export PYTHONPATH=$PWD/build-install/lib/python3.11/site-packages
            cd docs && make html 2>&1 | tee sphinx_log.txt
      - run:
          name: Check sphinx log for warnings (which are treated as errors)
          when: always
          command: |
            ! grep "^.* WARNING: .*$" sphinx_log.txt
      - store_artifacts:
          path: ~/sphinx_log.txt
          destination: sphinx_log.txt
      - store_artifacts:
          path: docs/build/html/stable
          destination: docs
        # Persists generated documentation so that it can be attached and deployed
        # in the 'deploy' step.
      - persist_to_workspace:
          # root: ~/repo
          root: docs/build/html
          paths:
            # - docs/build/html/stable
            - .
  # Run benchmarks
  # Reference guide checking

##########################################
# Here is where the real jobs are defined.
##########################################

jobs:
  ## Build scikit-plots from source
  build_skplt:
    <<: *defaults
    description: "Build new docs"
    steps:
      - run: echo "Hi I'm on a Container Runner!"
      ## run built-in
      - checkout
      - run: ./tools/circle/checkout_merge_commit.sh

      ## run commands
      - check-skip  # This calls your custom command
      - merge
      - submodules
      - apt-install

      - restore_cache:
          keys:
            - deps_ccache-{{ .Branch }}
            - deps_ccache

      - pip-install
      - build-skplt

      - save_cache:
          key: deps_ccache-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - ~/.ccache
            - ~/.cache/pip
      - run:
          name: ccache performance
          command: |
            ccache -vs
      ## Persists generated files
      - persist_to_workspace:
          root: ~/
          paths:
            - .
  ## Build scikit-plots docs from source
  build_docs:
    <<: *defaults
    description: "Build new docs"
    steps:
      - run: echo "Hi I'm on a Container Runner!"
      - build-docs

  # Upload build output to scipy/devdocs repository, using SSH deploy keys.
  # The keys are only available for builds on main branch.
  # https://developer.github.com/guides/managing-deploy-keys/
  # https://circleci.com/docs/2.0/configuration-reference/#add_ssh_keys
  deploy:
    <<: *defaults
    description: "Deploy new docs"
    steps:
      - run: echo "Hi I'm on Runners!"

      - checkout
      - run: ./tools/circle/checkout_merge_commit.sh

      # Attach documentation generated in the 'docs' step so that it can be
      # deployed.
      - attach_workspace:
          at: docs/build/html
      - run: ls -ltrh docs/build/html/stable

      ## Add the SSH key to the environment (this step tells CircleCI to use the private key from the SSH Key settings)
      - add_ssh_keys:
          fingerprints:
            ## ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
            ## Generate the ED25519 SSH Key Pair (with custom name id_ed25519_circleci):
            ## ssh-keygen -t ed25519 -C "your_email@example.com" -f ~/.ssh/id_ed25519_circleci
            ## apply chmod 600 to the private key (not the public key) in order to ensure that only the owner can read and write the private key
            ## chmod 600 ~/.ssh/id_ed25519_circleci
            ## cat ~/.ssh/id_ed25519_circleci
            ## public key can have more relaxed permissions, but chmod 644 is commonly used.
            ## chmod 644 ~/.ssh/id_ed25519_circleci.pub
            ## cat ~/.ssh/id_ed25519_circleci.pub
            ## Only add the public key to GitHub (id_ed25519_circleci.pub), not the private key (id_ed25519_circleci).
            ## ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICIo9OIfO9BdffgYEKxyg5Zkj7hlX00yV3w1cH2JKpQz your_email@example.com
            ## This will give you the MD5 fingerprint that you need for CircleCI.
            ## ssh-keygen -E md5 -lf ~/.ssh/id_ed25519_circleci.pub
            ## 256 MD5:1d:47:cf:2e:ea:7c:15:cf:ec:bb:1f:44:e2:56:16:d3 (ED25519)
            ## you’ve added the private key to CircleCI’s project settings,
            ## is for identifying the correct private key that CircleCI will use during the build process.
            ## Fingerprint: Used to tell CircleCI which private key to use for SSH connections.
            # "1d:47:cf:2e:ea:7c:15:cf:ec:bb:1f:44:e2:56:16:d3"  # Add your SSH private key fingerprint here
            - "04:ae:1a:89:65:e9:2c:7d:a2:87:7e:9f:3a:23:cc:19"  # Replace with your public key's fingerprint

      ## Add GitHub's SSH key to the known_hosts to avoid verification prompts
      - run:
          name: Trust GitHub SSH key
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts  # This step ensures GitHub's public key is trusted.
            ## Ensure the SSH config file (if used) is only accessible by the user
            chmod og= ~/.ssh/config  # Set permissions to only allow the user to access the config file.

      # Optionally, you could disable host key checking if you want to bypass the verification (not recommended for security reasons):
      # - run:
      #     name: Disable SSH StrictHostKeyChecking
      #     command: |
      #       echo -e "Host *\nStrictHostKeyChecking no" > ~/.ssh/config  # Disables SSH host key verification.
      #       chmod og= ~/.ssh/config  # Ensures the SSH config file is only accessible by the user (security).

      ## Use SSH to clone the repository
      - run:
          name: upload new docs to cloned the repo over SSH
          command: |
            ## if [[ "${CIRCLE_BRANCH}" =~ ^main$|^[0-9]+\.[0-9]+\.X$ ]]; then
            if [[ "${CIRCLE_BRANCH}" =~ ^main$|^((maintenance|release)/)?[0-9]+\.[0-9]+(\.x|\.[0-9]+)?$ ]]; then
              bash ./tools/circle/push_doc.sh docs/build/html/stable
            fi

      ## Use SSH to clone the repository
      # - run:
      #     name: upload new docs via ssh
      #     command: |
      #       set -ex;
      #       mkdir -p ~/.ssh
      #       echo -e "Host *\nStrictHostKeyChecking no" > ~/.ssh/config
      #       chmod og= ~/.ssh/config
      #       git clone git@github.com:scipy/devdocs.git devdocs;
      #       cd devdocs;
      #       (git checkout --orphan tmp && git branch -D gh-pages || true);
      #       git checkout --orphan gh-pages;
      #       git reset --hard;
      #       cp -R /tmp/build/html/. .;
      #       touch .nojekyll;
      #       git config --global user.email "scipy-circleci-bot@nomail";
      #       git config --global user.name "scipy-circleci-bot";
      #       git config --global push.default simple;
      #       git add . > /dev/null;
      #       git commit -m "Docs build of $CIRCLE_SHA1";
      #       git push --set-upstream origin gh-pages --force

#########################################
# Defining workflows gets us parallelism.
#########################################

workflows:
  # version: 2
  default:
    jobs:
      # NOTE: If you rename this job, then you must update the `if` condition
      # and `circleci-jobs` option in `.github/workflows/circleci.yml`.
      - build_skplt
      - build_docs:
          requires:
            - build_skplt
      # - run_benchmarks:
      #   requires:
      #     - build_skplt
      # - refguide_check:
      #     requires:
      #       - build_skplt
      - deploy:
          requires:
            - build_docs
          filters:
            branches:
              only: main
