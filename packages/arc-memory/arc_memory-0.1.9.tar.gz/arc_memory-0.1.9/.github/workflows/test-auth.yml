name: Test Authentication

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-auth:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-mock

    - name: Run authentication tests
      run: |
        python -m pytest tests/auth/test_github_auth.py -v

    - name: Test device flow initialization
      run: |
        cat > test_device_flow.py << 'EOF'
        import sys
        from unittest.mock import patch
        from arc_memory.auth.github import start_device_flow

        # Mock the requests.post function
        with patch('arc_memory.auth.github.requests.post') as mock_post:
            # Set up the mock response
            mock_post.return_value.json.return_value = {
                'device_code': 'test-device-code',
                'user_code': 'TEST-CODE',
                'verification_uri': 'https://github.com/login/device',
                'interval': 5
            }

            # Call the function with a test client ID
            device_code, verification_uri, interval = start_device_flow('test-client-id')

            # Verify the results
            assert device_code == 'test-device-code'
            assert verification_uri == 'https://github.com/login/device'
            assert interval == 5

            # Verify the request was made correctly
            mock_post.assert_called_once()
            args, kwargs = mock_post.call_args
            assert args[0] == 'https://api.github.com/login/device/code'
            assert kwargs['json']['client_id'] == 'test-client-id'

            print('Device flow initialization test passed!')
        EOF
        python test_device_flow.py

    - name: Verify documentation
      run: |
        # Check that the documentation doesn't mention client_secret
        if grep -q "client_secret" docs/cli/auth.md; then
          if grep -q "client_secret is not required" docs/cli/auth.md; then
            echo "Documentation correctly explains that client_secret is not required"
          else
            echo "Documentation mentions client_secret but doesn't explain that it's not required"
            exit 1
          fi
        fi

        # Check that the documentation mentions Device Flow
        if grep -q "Device Flow" docs/cli/auth.md; then
          echo "Documentation mentions Device Flow"
        else
          echo "Documentation doesn't mention Device Flow"
          exit 1
        fi

        echo "Documentation verification passed!"
