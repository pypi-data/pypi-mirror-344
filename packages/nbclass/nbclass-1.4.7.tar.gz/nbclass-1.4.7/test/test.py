# -*- coding: utf-8 -*-
"""
@ Created on 2024-09-04 15:48
---------
@summary: 
---------
@author: XiaoBai
"""

import pyotp

from nbclass import tools

# 生成pypi登录的第二重身份验证应用程序代码
key = '6ZKWQI4LZFBN27S7MHLYY5M3O3HZU4Z3'
totp = pyotp.TOTP(key)
print(totp.now())
"""
打包 python setup.py sdist bdist_wheel
发布 twine upload dist/* --repository nbclass
发布 twine upload dist/* --repository pygeocoding
pypi-AgEIcHlwaS5vcmcCJDAyMjI2MDVlLTgxMzEtNDlkMS1hYTFjLWFjY2M0NjM1ZDI4OQACD1sxLFsibmJjbGFzcyJdXQACLFsyLFsiOGYzYWQxNTUtMTY5ZS00ZDhiLWEwMWUtMjVkNzM1YTNlMjcxIl1dAAAGID_EjCEnf5IY5SZ97y1rKzAcSXWJXxWpipIj-Ee7LlyK  nbclass
pypi-AgEIcHlwaS5vcmcCJDQ2YTI4Y2MwLWY4NTQtNGViMy04M2FmLWE5ZDc1NTBjMDkwOAACKlszLCI5YWZhZjA2NS1kYmIxLTQ3YzAtYmRlOC05ZmVhZjY3NWFiY2UiXQAABiB-P4o-OTZY4NJAwa8kVLiDii7ZIbY9OJB_WHS9tNoSFA  geocoding
"""


# 示例用法
ciphertext = """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
"""

# AES 密钥和 IV
key = "42366163af1c3413"  # 16 字节密钥
iv = "d2a3ebe310bc1945"

decrypted_data = tools.aes_decrypt_ctr(key=key, ciphertext=ciphertext, nonce=iv)

# 输出解密结果
print("Decrypted Data:", eval(decrypted_data))
