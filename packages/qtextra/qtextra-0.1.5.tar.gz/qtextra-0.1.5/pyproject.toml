[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.sdist]
include = ["src", "tests", "CHANGELOG.md"]

# https://peps.python.org/pep-0621/
[project]
name = "qtextra"
description = "Extra widgets for Qt"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "BSD 3-Clause License" }
authors = [
    { email = "lukas.migas@yahoo.com", name = "Lukasz G. Migas" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
    "qtpy",
    "superqt>=0.7.1",
    "qtawesome",
    "koyo",
    "numpy",
    "appdirs",
    "psygnal",
    "pydantic>2",
    "pydantic-extra-types"
]

# extras
# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
[project.optional-dependencies]
all = ["console", "sentry", "pyqt6"]
#notify = ["pyqt-toast-notification"]
sentry = ["sentry-sdk>2"]
console = [
    "qtconsole>=4.5.1,!=4.7.6,!=5.4.2",
    "ipykernel>=5.2.0",
]
palette = ["qt-command-palette"]
reload = ["qtreload"]
pyside2 = ["pyside2"]
pyside6 = ["pyside6"]
pyqt5 = ["pyqt5"]
pyqt6 = ["pyqt6"]
test = [
    "pytest>=8.1",
    "pytest-cov",
    "pytest-qt",
    "pytest-pretty",
]
dev = [
    "ipython",
    "mypy",
    "pdbpp",
    "pre-commit",
    "rich",
    "ruff",
    "check-manifest",
    "qtextra[test,reload]",
]
docs = [
    "mkdocs-macros-plugin ==1.3.7",
    "mkdocs-material ==9.6.12",
    "mkdocstrings ==0.29.1",
    "mkdocstrings-python ==1.16.10",
    "qtextra[console,sentry]",
]

[project.urls]
homepage = "https://github.com/lukasz-migas/qtextra"
repository = "https://github.com/lukasz-migas/qtextra"

# same as console_scripts entry point
# [project.scripts]
# spam-cli = "spam:main_cli"

# Entry points
# https://peps.python.org/pep-0621/#entry-points
# [project.entry-points."spam.magical"]
# tomatoes = "spam:main_tomatoes"

# https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 120
target-version = "py39"
src = ["src", "tests"]

# https://beta.ruff.rs/docs/rules/
[tool.ruff.lint]
extend-select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "D",    # pydocstyle
    "I",    # isort
    "U",    # pyupgrade
    # "S",    # bandit
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
]
# I do this to get numpy-style docstrings AND retain
# D417 (Missing argument descriptions in the docstring)
# otherwise, see:
# https://beta.ruff.rs/docs/faq/#does-ruff-support-numpy-or-google-style-docstrings
# https://github.com/charliermarsh/ruff/issues/2606
extend-ignore = [
    "D100", # Missing docstring in public module
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D401", # First line should be in imperative mood
    "D404", # First word of the docstring should not be This
    "D413", # Missing blank line after last section
    "D416", # Section name should end with a colon
    "E501",
    "UP006",
    "UP007",
    "TC001",
    "TC002",
    "TC003",
    "S101",  # Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
    "B019",
    "S311",
    "C901", # too complex
    "S603",
    # temporary
    "D205", # 1 blank line required between summary line and description
    "S606",
    "S607",
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "S"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

# https://docs.astral.sh/ruff/formatter/
[tool.ruff.format]
docstring-code-format = true

# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "8"
console_output_style = "count"
testpaths = ["qtextra", "tests"]
xfail_strict = true
# options so that we can see the stdout and loguru logs
addopts = [
    "-ras",
    "-vv",
    "--maxfail=10",
    "--durations=10",
    "--log-cli-level=DEBUG",
    "--log-cli-format=%(asctime)s - %(levelname)s - %(message)s",
]
filterwarnings = [
  "error:::qtextra", # turn warnings from qtextra into errors
  "error:::test_.*", # turn warnings in our own tests into errors
  "ignore::DeprecationWarning:shibokensupport",
  "ignore::DeprecationWarning:ipykernel",
  "ignore:numpy.ufunc size changed:RuntimeWarning",
  "ignore:There is no current event loop:DeprecationWarning:",
]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.run]
source = ["src"]
omit = [
    "**/*_version.py"
]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
]
# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true

# # module specific overrides
# [[tool.mypy.overrides]]
# module = ["numpy.*",]
# ignore_errors = true


# https://github.com/mgedmin/check-manifest#configuration
[tool.check-manifest]
ignore = [
    ".github_changelog_generator",
    ".pre-commit-config.yaml",
    ".ruff_cache/**/*",
    "setup.py",
    "tests/**/*",
    ".idea/**/*",
    "_version.py",
    "venv*/**/*",
    "tox.ini",
    "codecov.yml",
    "mkdocs.yml",
    "renovate.json",
    "docs/**/*",
    "examples/**/*",
    "MANIFEST.in",
]
