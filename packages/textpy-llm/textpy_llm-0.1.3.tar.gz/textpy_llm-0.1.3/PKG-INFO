Metadata-Version: 2.4
Name: textpy_llm
Version: 0.1.3
Summary: TextPy: Collaborative Agent Workflow through Programming and Prompting
Author-email: Zhengmao Ye <yezhengmaolove@gmail.com>
Maintainer-email: Zhengmao Ye <yezhengmaolove@gmail.com>
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: litellm==1.66.0

<p align="center">
  <picture>
    <img alt="TextPy" src="docs/logo.png" width=50%>
  </picture>
</p>

# TextPy ── Collaborative Agent Workflow through Programming and Prompting

### 🚀 Core Philosophy

```
P1: Workflow = Programming + Prompting
P2: Programming <-> Prompting
P3: Workflow = Function Signature with Comment
```


### ⚡ Revolutionary Features
- **Mixed-Execution**: Seamlessly integrates with legacy code
- **AICompiler**: Just write function signatures, our powerful compiler will automatically generate natural language instructions or code instructions just in time
- **Self-Replication**: Easier implementation of recursive workflows

### 🔧 Usage

#### Installation
```bash
$ pip install textpy-llm
```
In your python script, include the line
```python
import textpy
```
Or use the image to run your code
```bash
$ docker pull ghcr.io/yezhengmao1/textpy:latest
```

### 🛠️ Quick Start - Simple Example

```python
# examples/write_poem.py
from textpy import code, text

# the text/code will auto-generated by AICompiler(Just in Time)
# we use the litellm to call large language model, default model is deepseek/deepseek-chat
# if you want to use different large language model, @code(api_key="", base_url="", model="")

@text
def generate_poem(*, theme: str, style: str) -> str: ...

@code
# text should in center of the SVG, use a white background, add visually striking elements
def create_svg_from_text_with_svgwrite(*, text: str) -> str: ...

@code
def save_svg_to_file(*, svg: str, path: str): ...

# execute this code
poem = generate_poem(theme="Quantum Physics and Romance", style="haiku")
svg = create_svg_from_text_with_svgwrite(text=poem)
save_svg_to_file(svg=svg, path="poem.svg")
```

### 👾 Quick Start - Amazing Example

**Example**: Daily updates from arxiv via RSS link, filter the paper, translate the abstracts into Chinese, store them in a database, and generate a markdown file to display these contents.

😊: I also use **TextPy** to periodically push the generated markdown files (if there are new ones) to my blog.

Visit this in: [Daily Arxiv](https://yezhem.com/docs/Daily%20Arxiv/)

**Highlight**: We only need to define the function and use it. The powerful `AICompiler` will recognize its functionality and automatically generate code for it and execute it, or generate a prompt for it and invoke a large language model. 

see `examples/daily_arxiv.py` for details.

```python
@code
def get_the_rss_xml_file_str(*, url: str) -> str: ...

@code(pypi=[get_the_rss_xml_file_str(url=ARXIV_URL)])
def get_all_item_in_the_rss_file(*, xml_file_str: str) -> list[dict]: ...

@text
def check_topic_is_satisfactory(*, abstrct: str, topic: str) -> bool: ...

@text
def translate_the_en_abstract_to_zh(*, abstract: str) -> str: ...

@code
def check_link_in_db(*, db_path: str, link: str) -> bool: ...

@code
def save_article_to_db(*, db_path: str, item: dict): ...
```

### 🤩 Quick Start - Awesome Example

**Example**: Download pdf from arxiv using the arxiv id, extract text from the papers, and summarize them. What makes it powerful is that it can recursively read all cited references and perform the same operations on them. Then it displays the relationships between them in an HTML file.
When the script is running, visit `localhost:31108` to check if the script is executing correctly, and visit `localhost:31108/arxiv.html` to view the results.

**Highlight**: All the functionalities in these workflows are generated by **AICompiler** in **TextPy** (including calling and installing other Python packages), while all you do is write function definitions (function signatures) and ... provide comments!!

**NOTE**: We strongly recommend running this script within a container, as our powerful **AICompiler** manipulates the external environment during compilation, which can affect your system.
You can still run the script directly, refer to `examples/arxiv_search.sh` for details.
```bash
cd ./examples
DEEPSEEK_API=xxx CACHE_DIR="/workspace/.cache" ARXIV_ID=<xxxx.xxxx> ./arxiv_search.sh
```

**Example Video**



### 📌 Contributing
Community contributions are more than welcome, whether it be to fix bugs or to add new features at github.

### 📜 Citation
```latex
@misc{ye2025textpy,
  author = {Zhengmao Ye, Shuyun Yang, Zelong Huang, Jie Zuo, Mingjie Tang},
  title = {TextPy: Collaborative Agent Workflow through Programming and Prompting},
  year = {2025},
  howpublished = {\url{https://github.com/yezhengmao1/TextPy}}
}
```
