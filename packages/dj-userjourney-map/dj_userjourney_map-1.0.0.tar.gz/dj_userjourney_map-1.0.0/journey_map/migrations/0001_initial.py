# Generated by Django 5.2 on 2025-04-24 07:01

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("persona_manager", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="JourneyStage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stage_name",
                    models.CharField(
                        db_comment="The title of the stage in the user journey.",
                        help_text="Name of the stage (e.g., 'Consider', 'Explore', 'Compare', 'Test').",
                        max_length=255,
                        verbose_name="Stage Name",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_comment="Determines the sequence of the stage within the journey.",
                        help_text="Order of the stage in the journey (e.g., 1 for first stage, 2 for second).",
                        verbose_name="Order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Journey Stage",
                "verbose_name_plural": "Journey Stages",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="JourneyAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_description",
                    models.TextField(
                        db_comment="Details what the user does during this action.",
                        help_text="Description of the action (e.g., 'Sees TV commercial', 'Visits website').",
                        verbose_name="Action Description",
                    ),
                ),
                (
                    "touchpoint",
                    models.CharField(
                        blank=True,
                        db_comment="Optional field for the specific interaction point.",
                        help_text="Point of interaction (e.g., 'Sign-up button', 'Email link').",
                        max_length=255,
                        null=True,
                        verbose_name="Touchpoint",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_comment="Determines the sequence of the action within the stage.",
                        help_text="Order of the action within the stage (e.g., 1 for first action).",
                        verbose_name="Order",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        db_comment="Foreign key linking to the parent journey stage.",
                        help_text="The stage this action occurs within.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="actions",
                        to="journey_map.journeystage",
                        verbose_name="Stage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Journey Action",
                "verbose_name_plural": "Journey Actions",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Opportunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        db_comment="Details the proposed enhancement for the user experience.",
                        help_text="Suggested improvement or opportunity (e.g., 'Add a tooltip to clarify').",
                        verbose_name="Description",
                    ),
                ),
                (
                    "action",
                    models.ForeignKey(
                        db_comment="Foreign key linking to the parent journey action.",
                        help_text="The action this opportunity is associated with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="opportunities",
                        to="journey_map.journeyaction",
                        verbose_name="Action",
                    ),
                ),
            ],
            options={
                "verbose_name": "Opportunity",
                "verbose_name_plural": "Opportunities",
            },
        ),
        migrations.CreateModel(
            name="PainPoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        db_comment="Details the issue or frustration encountered.",
                        help_text="Description of the pain point (e.g., 'Unclear error message').",
                        verbose_name="Description",
                    ),
                ),
                (
                    "severity",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        db_comment="The impact level of the pain point.",
                        default=1,
                        help_text="Severity of the pain point on a scale of 1 to 5 (1 = minor, 5 = critical).",
                        verbose_name="Severity",
                    ),
                ),
                (
                    "action",
                    models.ForeignKey(
                        db_comment="Foreign key linking to the parent journey action.",
                        help_text="The action where this pain point occurs.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pain_points",
                        to="journey_map.journeyaction",
                        verbose_name="Action",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pain Point",
                "verbose_name_plural": "Pain Points",
            },
        ),
        migrations.CreateModel(
            name="UserFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feedback_text",
                    models.TextField(
                        db_comment="The user’s feedback or emotional response.",
                        help_text="User's feedback or emotion (e.g., 'I like that I can save cars').",
                        verbose_name="Feedback Text",
                    ),
                ),
                (
                    "emotion",
                    models.CharField(
                        choices=[
                            ("happy", "Happy"),
                            ("frustrated", "Frustrated"),
                            ("confused", "Confused"),
                            ("neutral", "Neutral"),
                            ("excited", "Excited"),
                        ],
                        db_comment="The emotional category of the feedback.",
                        default="neutral",
                        help_text="The user’s emotional state (e.g., 'Happy', 'Frustrated').",
                        max_length=50,
                        verbose_name="Emotion",
                    ),
                ),
                (
                    "intensity",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        db_comment="The strength of the user’s emotional response.",
                        default=1,
                        help_text="Intensity of the emotion on a scale of 1 to 5 (1 = low, 5 = high).",
                        verbose_name="Emotion Intensity",
                    ),
                ),
                (
                    "is_positive",
                    models.BooleanField(
                        db_comment="Flag to categorize feedback as positive or negative.",
                        default=True,
                        help_text="Indicates whether the feedback is positive (True) or negative (False).",
                        verbose_name="Is Positive",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_comment="Automatically set to the creation date and time.",
                        help_text="Timestamp when the feedback was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "action",
                    models.ForeignKey(
                        db_comment="Foreign key linking to the parent journey action.",
                        help_text="The action this feedback relates to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedbacks",
                        to="journey_map.journeyaction",
                        verbose_name="Action",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Feedback",
                "verbose_name_plural": "User Feedback",
            },
        ),
        migrations.CreateModel(
            name="UserJourney",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="The title or identifier of the user journey.",
                        help_text="Name of the user journey (e.g., 'New User Onboarding').",
                        max_length=255,
                        verbose_name="Journey Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        db_comment="Optional description providing context for the user journey.",
                        help_text="A detailed description of the journey's purpose and context.",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_comment="Automatically set to the creation date and time.",
                        help_text="Timestamp when the journey was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_comment="Automatically updated to the last modification date and time.",
                        help_text="Timestamp when the journey was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "persona",
                    models.ForeignKey(
                        blank=True,
                        db_comment="Links to a specific user persona, nullable for flexibility.",
                        help_text="The user persona this journey is designed for (e.g., 'Sarah the Project Manager').",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="journeys",
                        to="persona_manager.userpersona",
                        verbose_name="Persona",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Journey",
                "verbose_name_plural": "User Journeys",
                "ordering": ["created_at"],
            },
        ),
        migrations.AddField(
            model_name="journeystage",
            name="journey",
            field=models.ForeignKey(
                db_comment="Foreign key linking to the parent user journey.",
                help_text="The user journey this stage is part of.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stages",
                to="journey_map.userjourney",
                verbose_name="Journey",
            ),
        ),
    ]
