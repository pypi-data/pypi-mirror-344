# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CloudflareV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key_id': 'str',
        'account_id': 'str',
        'api_token_id': 'str',
        'r2_endpoint': 'str',
        'secret_access_key': 'str'
    }

    attribute_map = {
        'access_key_id': 'accessKeyId',
        'account_id': 'accountId',
        'api_token_id': 'apiTokenId',
        'r2_endpoint': 'r2Endpoint',
        'secret_access_key': 'secretAccessKey'
    }

    def __init__(self, access_key_id: 'str' =None, account_id: 'str' =None, api_token_id: 'str' =None, r2_endpoint: 'str' =None, secret_access_key: 'str' =None):  # noqa: E501
        """V1CloudflareV1 - a model defined in Swagger"""  # noqa: E501
        self._access_key_id = None
        self._account_id = None
        self._api_token_id = None
        self._r2_endpoint = None
        self._secret_access_key = None
        self.discriminator = None
        if access_key_id is not None:
            self.access_key_id = access_key_id
        if account_id is not None:
            self.account_id = account_id
        if api_token_id is not None:
            self.api_token_id = api_token_id
        if r2_endpoint is not None:
            self.r2_endpoint = r2_endpoint
        if secret_access_key is not None:
            self.secret_access_key = secret_access_key

    @property
    def access_key_id(self) -> 'str':
        """Gets the access_key_id of this V1CloudflareV1.  # noqa: E501


        :return: The access_key_id of this V1CloudflareV1.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id: 'str'):
        """Sets the access_key_id of this V1CloudflareV1.


        :param access_key_id: The access_key_id of this V1CloudflareV1.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def account_id(self) -> 'str':
        """Gets the account_id of this V1CloudflareV1.  # noqa: E501


        :return: The account_id of this V1CloudflareV1.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: 'str'):
        """Sets the account_id of this V1CloudflareV1.


        :param account_id: The account_id of this V1CloudflareV1.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def api_token_id(self) -> 'str':
        """Gets the api_token_id of this V1CloudflareV1.  # noqa: E501


        :return: The api_token_id of this V1CloudflareV1.  # noqa: E501
        :rtype: str
        """
        return self._api_token_id

    @api_token_id.setter
    def api_token_id(self, api_token_id: 'str'):
        """Sets the api_token_id of this V1CloudflareV1.


        :param api_token_id: The api_token_id of this V1CloudflareV1.  # noqa: E501
        :type: str
        """

        self._api_token_id = api_token_id

    @property
    def r2_endpoint(self) -> 'str':
        """Gets the r2_endpoint of this V1CloudflareV1.  # noqa: E501


        :return: The r2_endpoint of this V1CloudflareV1.  # noqa: E501
        :rtype: str
        """
        return self._r2_endpoint

    @r2_endpoint.setter
    def r2_endpoint(self, r2_endpoint: 'str'):
        """Sets the r2_endpoint of this V1CloudflareV1.


        :param r2_endpoint: The r2_endpoint of this V1CloudflareV1.  # noqa: E501
        :type: str
        """

        self._r2_endpoint = r2_endpoint

    @property
    def secret_access_key(self) -> 'str':
        """Gets the secret_access_key of this V1CloudflareV1.  # noqa: E501


        :return: The secret_access_key of this V1CloudflareV1.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key: 'str'):
        """Sets the secret_access_key of this V1CloudflareV1.


        :param secret_access_key: The secret_access_key of this V1CloudflareV1.  # noqa: E501
        :type: str
        """

        self._secret_access_key = secret_access_key

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CloudflareV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CloudflareV1') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CloudflareV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CloudflareV1') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
