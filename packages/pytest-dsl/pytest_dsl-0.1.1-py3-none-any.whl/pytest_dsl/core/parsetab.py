
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightEQUALSAUTHOR_KEYWORD COLON COMMA DATA_KEYWORD DATE DATE_KEYWORD DESCRIPTION_KEYWORD DO END EQUALS FALSE FOR ID IN LBRACKET LPAREN NAME_KEYWORD NUMBER PLACEHOLDER RANGE RBRACKET RPAREN STRING TAGS_KEYWORD TEARDOWN_KEYWORD TRUE USINGstart : metadata statements teardown\n             | metadata statementsmetadata : metadata_itemsmetadata_items : metadata_item metadata_items\n                     | metadata_itemmetadata_item : NAME_KEYWORD COLON metadata_value\n                    | DESCRIPTION_KEYWORD COLON metadata_value\n                    | TAGS_KEYWORD COLON LBRACKET tags RBRACKET\n                    | AUTHOR_KEYWORD COLON metadata_value\n                    | DATE_KEYWORD COLON DATE\n                    | DATA_KEYWORD COLON data_sourcemetadata_value : STRING\n                     | IDtags : tag COMMA tags\n            | tagtag : STRING\n           | IDstatements : statement statements\n                  | statementstatement : assignment\n                | keyword_call\n                | loopassignment : ID EQUALS expression\n                 | ID EQUALS keyword_callexpression : NUMBER\n                  | STRING\n                  | PLACEHOLDER\n                  | ID\n                  | boolean_expr\n                  | list_exprboolean_expr : TRUE\n                    | FALSElist_expr : LBRACKET list_items RBRACKET\n                 | LBRACKET RBRACKETlist_items : list_item\n                  | list_item COMMA list_itemslist_item : expressionloop : FOR ID IN RANGE LPAREN expression COMMA expression RPAREN DO statements ENDkeyword_call : LBRACKET ID RBRACKET COMMA parameter_list\n                   | LBRACKET ID RBRACKETparameter_list : parameter_itemsparameter_items : parameter_item COMMA parameter_items\n                     | parameter_itemparameter_item : ID COLON expressionteardown : TEARDOWN_KEYWORD DO statements ENDdata_source : STRING USING ID'
    
_lr_action_items = {'NAME_KEYWORD':([0,4,32,33,34,35,37,38,39,69,71,],[5,5,-6,-12,-13,-7,-9,-10,-11,-8,-46,]),'DESCRIPTION_KEYWORD':([0,4,32,33,34,35,37,38,39,69,71,],[6,6,-6,-12,-13,-7,-9,-10,-11,-8,-46,]),'TAGS_KEYWORD':([0,4,32,33,34,35,37,38,39,69,71,],[7,7,-6,-12,-13,-7,-9,-10,-11,-8,-46,]),'AUTHOR_KEYWORD':([0,4,32,33,34,35,37,38,39,69,71,],[8,8,-6,-12,-13,-7,-9,-10,-11,-8,-46,]),'DATE_KEYWORD':([0,4,32,33,34,35,37,38,39,69,71,],[9,9,-6,-12,-13,-7,-9,-10,-11,-8,-46,]),'DATA_KEYWORD':([0,4,32,33,34,35,37,38,39,69,71,],[10,10,-6,-12,-13,-7,-9,-10,-11,-8,-46,]),'$end':([1,11,12,13,14,15,26,28,42,43,44,45,46,47,48,49,51,52,53,63,72,73,76,77,78,85,86,92,],[0,-2,-19,-20,-21,-22,-1,-18,-28,-23,-24,-25,-26,-27,-29,-30,-31,-32,-40,-34,-45,-33,-39,-41,-43,-44,-42,-38,]),'ID':([2,3,4,12,13,14,15,17,18,19,20,21,23,29,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,59,61,63,67,69,70,71,73,74,76,77,78,79,82,83,85,86,87,90,92,],[16,-3,-5,16,-20,-21,-22,30,31,-4,34,34,34,42,-6,-12,-13,-7,58,-9,-10,-11,16,-28,-23,-24,-25,-26,-27,-29,-30,62,-31,-32,-40,71,42,-34,75,-8,58,-46,-33,42,-39,-41,-43,42,42,75,-44,-42,42,16,-38,]),'LBRACKET':([2,3,4,12,13,14,15,19,22,29,32,33,34,35,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,61,63,69,71,73,74,76,77,78,79,82,85,86,87,90,92,],[17,-3,-5,17,-20,-21,-22,-4,36,50,-6,-12,-13,-7,-9,-10,-11,17,-28,-23,-24,-25,-26,-27,-29,-30,61,-31,-32,-40,61,-34,-8,-46,-33,61,-39,-41,-43,61,61,-44,-42,61,17,-38,]),'FOR':([2,3,4,12,13,14,15,19,32,33,34,35,37,38,39,41,42,43,44,45,46,47,48,49,51,52,53,63,69,71,73,76,77,78,85,86,90,92,],[18,-3,-5,18,-20,-21,-22,-4,-6,-12,-13,-7,-9,-10,-11,18,-28,-23,-24,-25,-26,-27,-29,-30,-31,-32,-40,-34,-8,-46,-33,-39,-41,-43,-44,-42,18,-38,]),'COLON':([5,6,7,8,9,10,75,],[20,21,22,23,24,25,82,]),'TEARDOWN_KEYWORD':([11,12,13,14,15,28,42,43,44,45,46,47,48,49,51,52,53,63,73,76,77,78,85,86,92,],[27,-19,-20,-21,-22,-18,-28,-23,-24,-25,-26,-27,-29,-30,-31,-32,-40,-34,-33,-39,-41,-43,-44,-42,-38,]),'END':([12,13,14,15,28,42,43,44,45,46,47,48,49,51,52,53,60,63,73,76,77,78,85,86,91,92,],[-19,-20,-21,-22,-18,-28,-23,-24,-25,-26,-27,-29,-30,-31,-32,-40,72,-34,-33,-39,-41,-43,-44,-42,92,-38,]),'EQUALS':([16,],[29,]),'STRING':([20,21,23,25,29,36,50,61,70,74,79,82,87,],[33,33,33,40,46,57,46,46,57,46,46,46,46,]),'DATE':([24,],[38,]),'DO':([27,89,],[41,90,]),'NUMBER':([29,50,61,74,79,82,87,],[45,45,45,45,45,45,45,]),'PLACEHOLDER':([29,50,61,74,79,82,87,],[47,47,47,47,47,47,47,]),'TRUE':([29,50,61,74,79,82,87,],[51,51,51,51,51,51,51,]),'FALSE':([29,50,61,74,79,82,87,],[52,52,52,52,52,52,52,]),'RBRACKET':([30,42,45,46,47,48,49,50,51,52,55,56,57,58,61,62,63,64,65,66,73,80,81,],[53,-28,-25,-26,-27,-29,-30,63,-31,-32,69,-15,-16,-17,63,53,-34,73,-35,-37,-33,-14,-36,]),'IN':([31,],[54,]),'USING':([40,],[59,]),'COMMA':([42,45,46,47,48,49,51,52,53,56,57,58,62,63,65,66,73,78,84,85,],[-28,-25,-26,-27,-29,-30,-31,-32,67,70,-16,-17,-28,-34,74,-37,-33,83,87,-44,]),'RPAREN':([42,45,46,47,48,49,51,52,63,73,88,],[-28,-25,-26,-27,-29,-30,-31,-32,-34,-33,89,]),'RANGE':([54,],[68,]),'LPAREN':([68,],[79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'metadata':([0,],[2,]),'metadata_items':([0,4,],[3,19,]),'metadata_item':([0,4,],[4,4,]),'statements':([2,12,41,90,],[11,28,60,91,]),'statement':([2,12,41,90,],[12,12,12,12,]),'assignment':([2,12,41,90,],[13,13,13,13,]),'keyword_call':([2,12,29,41,90,],[14,14,44,14,14,]),'loop':([2,12,41,90,],[15,15,15,15,]),'teardown':([11,],[26,]),'metadata_value':([20,21,23,],[32,35,37,]),'data_source':([25,],[39,]),'expression':([29,50,61,74,79,82,87,],[43,66,66,66,84,85,88,]),'boolean_expr':([29,50,61,74,79,82,87,],[48,48,48,48,48,48,48,]),'list_expr':([29,50,61,74,79,82,87,],[49,49,49,49,49,49,49,]),'tags':([36,70,],[55,80,]),'tag':([36,70,],[56,56,]),'list_items':([50,61,74,],[64,64,81,]),'list_item':([50,61,74,],[65,65,65,]),'parameter_list':([67,],[76,]),'parameter_items':([67,83,],[77,86,]),'parameter_item':([67,83,],[78,78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> metadata statements teardown','start',3,'p_start','parser.py',20),
  ('start -> metadata statements','start',2,'p_start','parser.py',21),
  ('metadata -> metadata_items','metadata',1,'p_metadata','parser.py',30),
  ('metadata_items -> metadata_item metadata_items','metadata_items',2,'p_metadata_items','parser.py',35),
  ('metadata_items -> metadata_item','metadata_items',1,'p_metadata_items','parser.py',36),
  ('metadata_item -> NAME_KEYWORD COLON metadata_value','metadata_item',3,'p_metadata_item','parser.py',44),
  ('metadata_item -> DESCRIPTION_KEYWORD COLON metadata_value','metadata_item',3,'p_metadata_item','parser.py',45),
  ('metadata_item -> TAGS_KEYWORD COLON LBRACKET tags RBRACKET','metadata_item',5,'p_metadata_item','parser.py',46),
  ('metadata_item -> AUTHOR_KEYWORD COLON metadata_value','metadata_item',3,'p_metadata_item','parser.py',47),
  ('metadata_item -> DATE_KEYWORD COLON DATE','metadata_item',3,'p_metadata_item','parser.py',48),
  ('metadata_item -> DATA_KEYWORD COLON data_source','metadata_item',3,'p_metadata_item','parser.py',49),
  ('metadata_value -> STRING','metadata_value',1,'p_metadata_value','parser.py',61),
  ('metadata_value -> ID','metadata_value',1,'p_metadata_value','parser.py',62),
  ('tags -> tag COMMA tags','tags',3,'p_tags','parser.py',67),
  ('tags -> tag','tags',1,'p_tags','parser.py',68),
  ('tag -> STRING','tag',1,'p_tag','parser.py',76),
  ('tag -> ID','tag',1,'p_tag','parser.py',77),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',82),
  ('statements -> statement','statements',1,'p_statements','parser.py',83),
  ('statement -> assignment','statement',1,'p_statement','parser.py',91),
  ('statement -> keyword_call','statement',1,'p_statement','parser.py',92),
  ('statement -> loop','statement',1,'p_statement','parser.py',93),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','parser.py',98),
  ('assignment -> ID EQUALS keyword_call','assignment',3,'p_assignment','parser.py',99),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',107),
  ('expression -> STRING','expression',1,'p_expression','parser.py',108),
  ('expression -> PLACEHOLDER','expression',1,'p_expression','parser.py',109),
  ('expression -> ID','expression',1,'p_expression','parser.py',110),
  ('expression -> boolean_expr','expression',1,'p_expression','parser.py',111),
  ('expression -> list_expr','expression',1,'p_expression','parser.py',112),
  ('boolean_expr -> TRUE','boolean_expr',1,'p_boolean_expr','parser.py',117),
  ('boolean_expr -> FALSE','boolean_expr',1,'p_boolean_expr','parser.py',118),
  ('list_expr -> LBRACKET list_items RBRACKET','list_expr',3,'p_list_expr','parser.py',123),
  ('list_expr -> LBRACKET RBRACKET','list_expr',2,'p_list_expr','parser.py',124),
  ('list_items -> list_item','list_items',1,'p_list_items','parser.py',132),
  ('list_items -> list_item COMMA list_items','list_items',3,'p_list_items','parser.py',133),
  ('list_item -> expression','list_item',1,'p_list_item','parser.py',141),
  ('loop -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN DO statements END','loop',12,'p_loop','parser.py',146),
  ('keyword_call -> LBRACKET ID RBRACKET COMMA parameter_list','keyword_call',5,'p_keyword_call','parser.py',151),
  ('keyword_call -> LBRACKET ID RBRACKET','keyword_call',3,'p_keyword_call','parser.py',152),
  ('parameter_list -> parameter_items','parameter_list',1,'p_parameter_list','parser.py',160),
  ('parameter_items -> parameter_item COMMA parameter_items','parameter_items',3,'p_parameter_items','parser.py',165),
  ('parameter_items -> parameter_item','parameter_items',1,'p_parameter_items','parser.py',166),
  ('parameter_item -> ID COLON expression','parameter_item',3,'p_parameter_item','parser.py',174),
  ('teardown -> TEARDOWN_KEYWORD DO statements END','teardown',4,'p_teardown','parser.py',179),
  ('data_source -> STRING USING ID','data_source',3,'p_data_source','parser.py',184),
]
