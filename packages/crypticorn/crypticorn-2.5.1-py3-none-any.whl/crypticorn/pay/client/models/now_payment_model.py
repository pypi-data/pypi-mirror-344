# coding: utf-8

"""
Payment API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from crypticorn.pay.client.models.now_payment_status import NowPaymentStatus
from typing import Optional, Set
from typing_extensions import Self


class NowPaymentModel(BaseModel):
    """
    NowPaymentModel
    """  # noqa: E501

    id: StrictStr = Field(description="Product ID")
    payment_id: StrictInt = Field(description="Unique payment identifier")
    invoice_id: StrictInt = Field(description="Associated invoice ID")
    product_id: StrictStr = Field(description="Product ID")
    user_id: StrictStr = Field(description="User ID")
    order_id: StrictStr = Field(description="Internal order ID")
    paid_amount: Union[StrictFloat, StrictInt] = Field(
        description="Actually paid amount"
    )
    pay_amount: Union[StrictFloat, StrictInt] = Field(description="Amount to pay")
    pay_currency: StrictStr = Field(description="Payment currency")
    status: NowPaymentStatus = Field(description="Current payment status")
    updated_at: StrictInt = Field(
        description="Payment last update timestamp in milliseconds"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "payment_id",
        "invoice_id",
        "product_id",
        "user_id",
        "order_id",
        "paid_amount",
        "pay_amount",
        "pay_currency",
        "status",
        "updated_at",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NowPaymentModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NowPaymentModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "payment_id": obj.get("payment_id"),
                "invoice_id": obj.get("invoice_id"),
                "product_id": obj.get("product_id"),
                "user_id": obj.get("user_id"),
                "order_id": obj.get("order_id"),
                "paid_amount": obj.get("paid_amount"),
                "pay_amount": obj.get("pay_amount"),
                "pay_currency": obj.get("pay_currency"),
                "status": obj.get("status"),
                "updated_at": obj.get("updated_at"),
            }
        )
        return _obj
