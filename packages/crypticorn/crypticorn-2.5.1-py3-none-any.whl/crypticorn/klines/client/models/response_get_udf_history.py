# coding: utf-8

"""
Klines Service API

     API for retrieving OHLCV data, funding rates, and symbol information from Binance.          ## WebSocket Support     Connect to `/ws` to receive real-time OHLCV updates.          Example subscription message:     ```json     {         \"action\": \"subscribe\",         \"market\": \"spot\",         \"symbol\": \"BTCUSDT\",         \"timeframe\": \"15m\"     }     ```

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing import Optional
from crypticorn.klines.client.models.history_error_response import HistoryErrorResponse
from crypticorn.klines.client.models.history_no_data_response import (
    HistoryNoDataResponse,
)
from crypticorn.klines.client.models.history_success_response import (
    HistorySuccessResponse,
)
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

RESPONSEGETUDFHISTORY_ANY_OF_SCHEMAS = [
    "HistoryErrorResponse",
    "HistoryNoDataResponse",
    "HistorySuccessResponse",
]


class ResponseGetUdfHistory(BaseModel):
    """
    ResponseGetUdfHistory
    """

    # data type: HistorySuccessResponse
    anyof_schema_1_validator: Optional[HistorySuccessResponse] = None
    # data type: HistoryNoDataResponse
    anyof_schema_2_validator: Optional[HistoryNoDataResponse] = None
    # data type: HistoryErrorResponse
    anyof_schema_3_validator: Optional[HistoryErrorResponse] = None
    if TYPE_CHECKING:
        actual_instance: Optional[
            Union[HistoryErrorResponse, HistoryNoDataResponse, HistorySuccessResponse]
        ] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = {
        "HistoryErrorResponse",
        "HistoryNoDataResponse",
        "HistorySuccessResponse",
    }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = ResponseGetUdfHistory.model_construct()
        error_messages = []
        # validate data type: HistorySuccessResponse
        if not isinstance(v, HistorySuccessResponse):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `HistorySuccessResponse`"
            )
        else:
            return v

        # validate data type: HistoryNoDataResponse
        if not isinstance(v, HistoryNoDataResponse):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `HistoryNoDataResponse`"
            )
        else:
            return v

        # validate data type: HistoryErrorResponse
        if not isinstance(v, HistoryErrorResponse):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `HistoryErrorResponse`"
            )
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in ResponseGetUdfHistory with anyOf schemas: HistoryErrorResponse, HistoryNoDataResponse, HistorySuccessResponse. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[HistorySuccessResponse] = None
        try:
            instance.actual_instance = HistorySuccessResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[HistoryNoDataResponse] = None
        try:
            instance.actual_instance = HistoryNoDataResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[HistoryErrorResponse] = None
        try:
            instance.actual_instance = HistoryErrorResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into ResponseGetUdfHistory with anyOf schemas: HistoryErrorResponse, HistoryNoDataResponse, HistorySuccessResponse. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
            self.actual_instance.to_json
        ):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            HistoryErrorResponse,
            HistoryNoDataResponse,
            HistorySuccessResponse,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
            self.actual_instance.to_dict
        ):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
