# coding: utf-8

"""
Hive AI API

API for Hive AI model training and evaluation

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from crypticorn.hive.client.models.coins import Coins
from crypticorn.hive.client.models.data_value_value_value_inner import (
    DataValueValueValueInner,
)
from crypticorn.hive.client.models.data_version import DataVersion
from crypticorn.hive.client.models.feature_size import FeatureSize
from crypticorn.hive.client.models.target_type import TargetType
from typing import Optional, Set
from typing_extensions import Self


class DataInfo(BaseModel):
    """
    DataInfo
    """  # noqa: E501

    data: Dict[str, Dict[str, Dict[str, List[DataValueValueValueInner]]]]
    coins: List[Coins]
    feature_sizes: List[FeatureSize]
    targets: Dict[str, TargetType]
    versions: Dict[str, Union[StrictFloat, StrictInt]]
    latest_version: DataVersion
    __properties: ClassVar[List[str]] = [
        "data",
        "coins",
        "feature_sizes",
        "targets",
        "versions",
        "latest_version",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "data": obj.get("data"),
                "coins": obj.get("coins"),
                "feature_sizes": obj.get("feature_sizes"),
                "targets": (
                    dict((_k, _v) for _k, _v in obj.get("targets").items())
                    if obj.get("targets") is not None
                    else None
                ),
                "versions": obj.get("versions"),
                "latest_version": obj.get("latest_version"),
            }
        )
        return _obj
