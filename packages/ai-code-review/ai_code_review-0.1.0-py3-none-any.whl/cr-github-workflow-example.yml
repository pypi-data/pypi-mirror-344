# Use this template as base for your own workflow.
name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write   # to leave the summary comment

    steps:
    # 1️⃣  Check out the repo (full history for git diff)
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2️⃣  Minimal Python setup (cache pip to speed repeats)
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: "pip"

    # 3️⃣  Clone the tool and install its pinned deps
    - name: Install AI Code Review tool
      run: |
        git clone --depth 1 --branch v0.1.0 https://github.com/Nayjest/github-ai-code-review reviewer
        python -m pip install --upgrade pip
        pip install -r reviewer/requirements.txt

    # 4️⃣  Build a patch of the PR versus its base branch
    - name: Generate patch file
      shell: bash
      run: |
        git fetch origin "${{ github.base_ref }}"
        mkdir -p reviewer/storage/out
        git diff "origin/${{ github.base_ref }}"...HEAD > reviewer/storage/pr.patch
        echo "Patch size: $(wc -l reviewer/storage/pr.patch) lines"

    # 5️⃣  Run the reviewer (writes reports to reviewer/out/)
    - name: Run AI code review
      env:
        LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
        LLM_API_TYPE: openai
        MODEL: "gpt-4.1"
      run: |
        cd reviewer; python cr.py pr.patch

    # 6️⃣  Upload full results so they’re downloadable
    - uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-results
        path: reviewer/storage/out/
    # 7️⃣  Post a readable summary to the pull-request
    - name: Comment on PR with review
      uses: actions/github-script@v7
      env:
        MAX_COMMENT_BYTES: "65000"
      with:
        script: |
          const fs   = require('fs');
          const path = require('path');

          const DIR = 'reviewer/storage/out';
          if (!fs.existsSync(DIR)) {
            core.info('No review output produced.');
            return;
          }

          let body = '## 🤖 AI Code Review\n\n';

          for (const entry of fs.readdirSync(DIR, { withFileTypes: true })) {
            if (entry.isDirectory()) continue;                // skip folders
            const filePath = path.join(DIR, entry.name);
            let text = fs.readFileSync(filePath, 'utf8');

            if (text.length > +process.env.MAX_COMMENT_BYTES) {
              text = text.slice(0, +process.env.MAX_COMMENT_BYTES) + '\n…(truncated)…';
            }

            const title = entry.name.replace(/\.txt$/, '');
            body += `### ${title}\n\`\`\`\n${text}\n\`\`\`\n`;
          }

          if (body.trim() === '## 🤖 AI Code Review') {
            core.info('Review output directory contains no files.');
            return;
          }

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo:  context.repo.repo,
            issue_number: context.issue.number,   // ✅ correct param name
            body
          });