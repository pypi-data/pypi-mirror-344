# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm

    The version of the OpenAPI document: Slurm-24.05.4&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_slurm_rest_v2.models.dbv0039_set_config import Dbv0039SetConfig

class TestDbv0039SetConfig(unittest.TestCase):
    """Dbv0039SetConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dbv0039SetConfig:
        """Test Dbv0039SetConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dbv0039SetConfig`
        """
        model = Dbv0039SetConfig()
        if include_optional:
            return Dbv0039SetConfig(
                clusters = [
                    aind_slurm_rest_v2.models.v0/0/39_cluster_rec.v0.0.39_cluster_rec(
                        controller = aind_slurm_rest_v2.models.v0_0_39_cluster_rec_controller.v0_0_39_cluster_rec_controller(
                            host = '', 
                            port = 56, ), 
                        flags = [
                            'REGISTERING'
                            ], 
                        name = '', 
                        nodes = '', 
                        select_plugin = '', 
                        associations = aind_slurm_rest_v2.models.v0_0_39_cluster_rec_associations.v0_0_39_cluster_rec_associations(
                            root = aind_slurm_rest_v2.models.v0/0/39_assoc_short.v0.0.39_assoc_short(
                                account = '', 
                                cluster = '', 
                                partition = '', 
                                user = '', ), ), 
                        rpc_version = 56, 
                        tres = [
                            aind_slurm_rest_v2.models.v0/0/39_tres.v0.0.39_tres(
                                type = '', 
                                name = '', 
                                id = 56, 
                                count = 56, )
                            ], )
                    ],
                tres = [
                    [
                        aind_slurm_rest_v2.models.v0/0/39_tres.v0.0.39_tres(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ]
                    ],
                accounts = [
                    aind_slurm_rest_v2.models.v0/0/39_account.v0.0.39_account(
                        associations = [
                            aind_slurm_rest_v2.models.v0/0/39_assoc_short.v0.0.39_assoc_short(
                                account = '', 
                                cluster = '', 
                                partition = '', 
                                user = '', )
                            ], 
                        coordinators = [
                            aind_slurm_rest_v2.models.v0/0/39_coord.v0.0.39_coord(
                                name = '', 
                                direct = True, )
                            ], 
                        description = '', 
                        name = '', 
                        organization = '', 
                        flags = [
                            'DELETED'
                            ], )
                    ],
                users = [
                    aind_slurm_rest_v2.models.v0/0/39_user.v0.0.39_user(
                        administrator_level = [
                            'Not Set'
                            ], 
                        associations = [
                            aind_slurm_rest_v2.models.v0/0/39_assoc_short.v0.0.39_assoc_short(
                                account = '', 
                                cluster = '', 
                                partition = '', 
                                user = '', )
                            ], 
                        coordinators = [
                            aind_slurm_rest_v2.models.v0/0/39_coord.v0.0.39_coord(
                                name = '', 
                                direct = True, )
                            ], 
                        default = aind_slurm_rest_v2.models.v0_0_39_user_default.v0_0_39_user_default(
                            account = '', 
                            wckey = '', ), 
                        flags = [
                            'NONE'
                            ], 
                        name = '', 
                        old_name = '', 
                        wckeys = [
                            aind_slurm_rest_v2.models.v0/0/39_wckey.v0.0.39_wckey(
                                accounting = [
                                    aind_slurm_rest_v2.models.v0/0/39_accounting.v0.0.39_accounting(
                                        allocated = aind_slurm_rest_v2.models.v0_0_39_accounting_allocated.v0_0_39_accounting_allocated(
                                            seconds = 56, ), 
                                        id = 56, 
                                        start = 56, 
                                        tres = aind_slurm_rest_v2.models.v0/0/39_tres.v0.0.39_tres(
                                            type = '', 
                                            name = '', 
                                            id = 56, 
                                            count = 56, ), )
                                    ], 
                                cluster = '', 
                                id = 56, 
                                name = '', 
                                user = '', )
                            ], )
                    ],
                qos = [
                    aind_slurm_rest_v2.models.v0/0/39_qos.v0.0.39_qos(
                        description = '', 
                        flags = [
                            'NOT_SET'
                            ], 
                        id = 56, 
                        limits = aind_slurm_rest_v2.models.v0_0_39_qos_limits.v0_0_39_qos_limits(
                            grace_time = aind_slurm_rest_v2.models.v0/0/39_uint32_no_val.v0.0.39_uint32_no_val(
                                set = True, 
                                infinite = True, 
                                number = 56, ), 
                            max = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max.v0_0_39_qos_limits_max(
                                active_jobs = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_active_jobs.v0_0_39_qos_limits_max_active_jobs(
                                    accruing = aind_slurm_rest_v2.models.v0/0/39_uint32_no_val.v0.0.39_uint32_no_val(
                                        set = True, 
                                        infinite = True, 
                                        number = 56, ), 
                                    count = , ), 
                                tres = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_tres.v0_0_39_qos_limits_max_tres(
                                    total = [
                                        aind_slurm_rest_v2.models.v0/0/39_tres.v0.0.39_tres(
                                            type = '', 
                                            name = '', 
                                            id = 56, )
                                        ], 
                                    minutes = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_tres_minutes.v0_0_39_qos_limits_max_tres_minutes(
                                        per = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_tres_minutes_per.v0_0_39_qos_limits_max_tres_minutes_per(
                                            qos = [
                                                aind_slurm_rest_v2.models.v0/0/39_tres.v0.0.39_tres(
                                                    type = '', 
                                                    name = '', 
                                                    id = 56, )
                                                ], 
                                            job = , 
                                            account = , 
                                            user = , ), ), 
                                    per = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_tres_per.v0_0_39_qos_limits_max_tres_per(
                                        node = , ), ), 
                                wall_clock = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_wall_clock.v0_0_39_qos_limits_max_wall_clock(), 
                                jobs = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_jobs.v0_0_39_qos_limits_max_jobs(), 
                                accruing = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_jobs_active_jobs.v0_0_39_qos_limits_max_jobs_active_jobs(), ), 
                            factor = 1.337, 
                            min = aind_slurm_rest_v2.models.v0_0_39_qos_limits_min.v0_0_39_qos_limits_min(
                                priority_threshold = , ), ), 
                        name = '', 
                        preempt = aind_slurm_rest_v2.models.v0_0_39_qos_preempt.v0_0_39_qos_preempt(
                            list = [
                                ''
                                ], 
                            mode = [
                                'DISABLED'
                                ], 
                            exempt_time = , ), 
                        priority = , 
                        usage_factor = aind_slurm_rest_v2.models.v0/0/39_float64_no_val.v0.0.39_float64_no_val(
                            set = True, 
                            infinite = True, 
                            number = 1.337, ), 
                        usage_threshold = aind_slurm_rest_v2.models.v0/0/39_float64_no_val.v0.0.39_float64_no_val(
                            set = True, 
                            infinite = True, 
                            number = 1.337, ), )
                    ],
                wckeys = [
                    aind_slurm_rest_v2.models.v0/0/39_wckey.v0.0.39_wckey(
                        accounting = [
                            aind_slurm_rest_v2.models.v0/0/39_accounting.v0.0.39_accounting(
                                allocated = aind_slurm_rest_v2.models.v0_0_39_accounting_allocated.v0_0_39_accounting_allocated(
                                    seconds = 56, ), 
                                id = 56, 
                                start = 56, 
                                tres = aind_slurm_rest_v2.models.v0/0/39_tres.v0.0.39_tres(
                                    type = '', 
                                    name = '', 
                                    id = 56, 
                                    count = 56, ), )
                            ], 
                        cluster = '', 
                        id = 56, 
                        name = '', 
                        user = '', 
                        flags = [
                            'DELETED'
                            ], )
                    ],
                associations = [
                    aind_slurm_rest_v2.models.v0/0/39_assoc.v0.0.39_assoc(
                        account = '', 
                        cluster = '', 
                        default = aind_slurm_rest_v2.models.v0_0_39_assoc_default.v0_0_39_assoc_default(
                            qos = '', ), 
                        flags = [
                            'DELETED'
                            ], 
                        max = aind_slurm_rest_v2.models.v0_0_39_assoc_max.v0_0_39_assoc_max(
                            jobs = aind_slurm_rest_v2.models.v0_0_39_assoc_max_jobs.v0_0_39_assoc_max_jobs(
                                per = aind_slurm_rest_v2.models.v0_0_39_assoc_max_jobs_per.v0_0_39_assoc_max_jobs_per(
                                    count = aind_slurm_rest_v2.models.v0/0/39_uint32_no_val.v0.0.39_uint32_no_val(
                                        set = True, 
                                        infinite = True, 
                                        number = 56, ), 
                                    accruing = aind_slurm_rest_v2.models.v0/0/39_uint32_no_val.v0.0.39_uint32_no_val(
                                        set = True, 
                                        infinite = True, 
                                        number = 56, ), 
                                    submitted = , 
                                    wall_clock = , ), 
                                active = , 
                                accruing = , 
                                total = , ), 
                            tres = aind_slurm_rest_v2.models.v0_0_39_assoc_max_tres.v0_0_39_assoc_max_tres(
                                minutes = aind_slurm_rest_v2.models.v0_0_39_assoc_max_tres_minutes.v0_0_39_assoc_max_tres_minutes(), 
                                group = aind_slurm_rest_v2.models.v0_0_39_assoc_max_tres_group.v0_0_39_assoc_max_tres_group(), ), 
                            per = aind_slurm_rest_v2.models.v0_0_39_assoc_max_per.v0_0_39_assoc_max_per(
                                account = aind_slurm_rest_v2.models.v0_0_39_assoc_max_per_account.v0_0_39_assoc_max_per_account(), ), ), 
                        is_default = True, 
                        min = aind_slurm_rest_v2.models.v0_0_39_assoc_min.v0_0_39_assoc_min(
                            priority_threshold = , ), 
                        parent_account = '', 
                        partition = '', 
                        priority = , 
                        qos = [
                            ''
                            ], 
                        shares_raw = 56, 
                        usage = aind_slurm_rest_v2.models.v0/0/39_assoc_usage.v0.0.39_assoc_usage(
                            accrue_job_count = 56, 
                            group_used_wallclock = 1.337, 
                            fairshare_factor = 1.337, 
                            fairshare_shares = 56, 
                            normalized_priority = 1.337, 
                            normalized_shares = 1.337, 
                            effective_normalized_usage = 1.337, 
                            normalized_usage = 1.337, 
                            raw_usage = 1.337, 
                            active_jobs = 56, 
                            job_count = 56, 
                            fairshare_level = 1.337, ), 
                        user = '', )
                    ]
            )
        else:
            return Dbv0039SetConfig(
        )
        """

    def testDbv0039SetConfig(self):
        """Test Dbv0039SetConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
