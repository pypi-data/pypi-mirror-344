# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm

    The version of the OpenAPI document: Slurm-24.05.4&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition import SlurmdbV0041PostUsersAssociationRequestAssociationCondition

class TestSlurmdbV0041PostUsersAssociationRequestAssociationCondition(unittest.TestCase):
    """SlurmdbV0041PostUsersAssociationRequestAssociationCondition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SlurmdbV0041PostUsersAssociationRequestAssociationCondition:
        """Test SlurmdbV0041PostUsersAssociationRequestAssociationCondition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SlurmdbV0041PostUsersAssociationRequestAssociationCondition`
        """
        model = SlurmdbV0041PostUsersAssociationRequestAssociationCondition()
        if include_optional:
            return SlurmdbV0041PostUsersAssociationRequestAssociationCondition(
                accounts = [
                    ''
                    ],
                association = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association.slurmdb_v0041_post_users_association_request_association_condition_association(
                    comment = '', 
                    defaultqos = '', 
                    grpjobs = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_grpjobs.slurmdb_v0041_post_users_association_request_association_condition_association_grpjobs(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    grpjobsaccrue = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_grpjobsaccrue.slurmdb_v0041_post_users_association_request_association_condition_association_grpjobsaccrue(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    grpsubmitjobs = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_grpsubmitjobs.slurmdb_v0041_post_users_association_request_association_condition_association_grpsubmitjobs(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    grptres = [
                        aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_grptres_inner.slurmdb_v0041_post_users_association_request_association_condition_association_grptres_inner(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ], 
                    grptresmins = [
                        aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_grptres_inner.slurmdb_v0041_post_users_association_request_association_condition_association_grptres_inner(
                            type = '', 
                            name = '', 
                            id = 56, 
                            count = 56, )
                        ], 
                    grptresrunmins = [
                        
                        ], 
                    grpwall = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_grpwall.slurmdb_v0041_post_users_association_request_association_condition_association_grpwall(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    maxjobs = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_maxjobs.slurmdb_v0041_post_users_association_request_association_condition_association_maxjobs(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    maxjobsaccrue = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_maxjobsaccrue.slurmdb_v0041_post_users_association_request_association_condition_association_maxjobsaccrue(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    maxsubmitjobs = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_maxsubmitjobs.slurmdb_v0041_post_users_association_request_association_condition_association_maxsubmitjobs(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    maxtresminsperjob = [
                        
                        ], 
                    maxtresrunmins = [
                        
                        ], 
                    maxtresperjob = [
                        
                        ], 
                    maxtrespernode = [
                        
                        ], 
                    maxwalldurationperjob = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_maxwalldurationperjob.slurmdb_v0041_post_users_association_request_association_condition_association_maxwalldurationperjob(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    minpriothresh = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_minpriothresh.slurmdb_v0041_post_users_association_request_association_condition_association_minpriothresh(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    parent = '', 
                    priority = aind_slurm_rest_v2.models.slurmdb_v0041_post_users_association_request_association_condition_association_priority.slurmdb_v0041_post_users_association_request_association_condition_association_priority(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    qoslevel = [
                        ''
                        ], 
                    fairshare = 56, ),
                clusters = [
                    ''
                    ],
                partitions = [
                    ''
                    ],
                users = [
                    ''
                    ],
                wckeys = [
                    ''
                    ]
            )
        else:
            return SlurmdbV0041PostUsersAssociationRequestAssociationCondition(
                users = [
                    ''
                    ],
        )
        """

    def testSlurmdbV0041PostUsersAssociationRequestAssociationCondition(self):
        """Test SlurmdbV0041PostUsersAssociationRequestAssociationCondition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
