# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm

    The version of the OpenAPI document: Slurm-24.05.4&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_slurm_rest_v2.models.dbv0039_update_qos import Dbv0039UpdateQos

class TestDbv0039UpdateQos(unittest.TestCase):
    """Dbv0039UpdateQos unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dbv0039UpdateQos:
        """Test Dbv0039UpdateQos
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dbv0039UpdateQos`
        """
        model = Dbv0039UpdateQos()
        if include_optional:
            return Dbv0039UpdateQos(
                qos = [
                    aind_slurm_rest_v2.models.v0/0/39_qos.v0.0.39_qos(
                        description = '', 
                        flags = [
                            'NOT_SET'
                            ], 
                        id = 56, 
                        limits = aind_slurm_rest_v2.models.v0_0_39_qos_limits.v0_0_39_qos_limits(
                            grace_time = aind_slurm_rest_v2.models.v0/0/39_uint32_no_val.v0.0.39_uint32_no_val(
                                set = True, 
                                infinite = True, 
                                number = 56, ), 
                            max = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max.v0_0_39_qos_limits_max(
                                active_jobs = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_active_jobs.v0_0_39_qos_limits_max_active_jobs(
                                    accruing = aind_slurm_rest_v2.models.v0/0/39_uint32_no_val.v0.0.39_uint32_no_val(
                                        set = True, 
                                        infinite = True, 
                                        number = 56, ), 
                                    count = , ), 
                                tres = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_tres.v0_0_39_qos_limits_max_tres(
                                    total = [
                                        aind_slurm_rest_v2.models.v0/0/39_tres.v0.0.39_tres(
                                            type = '', 
                                            name = '', 
                                            id = 56, )
                                        ], 
                                    minutes = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_tres_minutes.v0_0_39_qos_limits_max_tres_minutes(
                                        per = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_tres_minutes_per.v0_0_39_qos_limits_max_tres_minutes_per(
                                            qos = [
                                                aind_slurm_rest_v2.models.v0/0/39_tres.v0.0.39_tres(
                                                    type = '', 
                                                    name = '', 
                                                    id = 56, )
                                                ], 
                                            job = , 
                                            account = , 
                                            user = , ), ), 
                                    per = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_tres_per.v0_0_39_qos_limits_max_tres_per(
                                        node = , ), ), 
                                wall_clock = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_wall_clock.v0_0_39_qos_limits_max_wall_clock(), 
                                jobs = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_jobs.v0_0_39_qos_limits_max_jobs(), 
                                accruing = aind_slurm_rest_v2.models.v0_0_39_qos_limits_max_jobs_active_jobs.v0_0_39_qos_limits_max_jobs_active_jobs(), ), 
                            factor = 1.337, 
                            min = aind_slurm_rest_v2.models.v0_0_39_qos_limits_min.v0_0_39_qos_limits_min(
                                priority_threshold = , ), ), 
                        name = '', 
                        preempt = aind_slurm_rest_v2.models.v0_0_39_qos_preempt.v0_0_39_qos_preempt(
                            list = [
                                ''
                                ], 
                            mode = [
                                'DISABLED'
                                ], 
                            exempt_time = , ), 
                        priority = , 
                        usage_factor = aind_slurm_rest_v2.models.v0/0/39_float64_no_val.v0.0.39_float64_no_val(
                            set = True, 
                            infinite = True, 
                            number = 1.337, ), 
                        usage_threshold = aind_slurm_rest_v2.models.v0/0/39_float64_no_val.v0.0.39_float64_no_val(
                            set = True, 
                            infinite = True, 
                            number = 1.337, ), )
                    ]
            )
        else:
            return Dbv0039UpdateQos(
        )
        """

    def testDbv0039UpdateQos(self):
        """Test Dbv0039UpdateQos"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
