# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm

    The version of the OpenAPI document: Slurm-24.05.4&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from aind_slurm_rest_v2.models.v0039_assoc_default import V0039AssocDefault
from aind_slurm_rest_v2.models.v0039_assoc_max import V0039AssocMax
from aind_slurm_rest_v2.models.v0039_assoc_min import V0039AssocMin
from aind_slurm_rest_v2.models.v0039_assoc_usage import V0039AssocUsage
from aind_slurm_rest_v2.models.v0039_uint32_no_val import V0039Uint32NoVal
from typing import Optional, Set
from typing_extensions import Self

class V0039Assoc(BaseModel):
    """
    V0039Assoc
    """ # noqa: E501
    account: Optional[StrictStr] = None
    cluster: Optional[StrictStr] = None
    default: Optional[V0039AssocDefault] = None
    flags: Optional[List[StrictStr]] = None
    max: Optional[V0039AssocMax] = None
    is_default: Optional[StrictBool] = None
    min: Optional[V0039AssocMin] = None
    parent_account: Optional[StrictStr] = None
    partition: Optional[StrictStr] = None
    priority: Optional[V0039Uint32NoVal] = None
    qos: Optional[List[StrictStr]] = Field(default=None, description="List of QOS names")
    shares_raw: Optional[StrictInt] = None
    usage: Optional[V0039AssocUsage] = None
    user: StrictStr
    __properties: ClassVar[List[str]] = ["account", "cluster", "default", "flags", "max", "is_default", "min", "parent_account", "partition", "priority", "qos", "shares_raw", "usage", "user"]

    @field_validator('flags')
    def flags_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DELETED']):
                raise ValueError("each list item must be one of ('DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V0039Assoc from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict['default'] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max
        if self.max:
            _dict['max'] = self.max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min
        if self.min:
            _dict['min'] = self.min.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V0039Assoc from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "cluster": obj.get("cluster"),
            "default": V0039AssocDefault.from_dict(obj["default"]) if obj.get("default") is not None else None,
            "flags": obj.get("flags"),
            "max": V0039AssocMax.from_dict(obj["max"]) if obj.get("max") is not None else None,
            "is_default": obj.get("is_default"),
            "min": V0039AssocMin.from_dict(obj["min"]) if obj.get("min") is not None else None,
            "parent_account": obj.get("parent_account"),
            "partition": obj.get("partition"),
            "priority": V0039Uint32NoVal.from_dict(obj["priority"]) if obj.get("priority") is not None else None,
            "qos": obj.get("qos"),
            "shares_raw": obj.get("shares_raw"),
            "usage": V0039AssocUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "user": obj.get("user")
        })
        return _obj


