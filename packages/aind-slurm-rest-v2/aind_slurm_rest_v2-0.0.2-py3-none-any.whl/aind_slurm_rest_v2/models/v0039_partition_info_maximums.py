# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm

    The version of the OpenAPI document: Slurm-24.05.4&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from aind_slurm_rest_v2.models.v0039_uint16_no_val import V0039Uint16NoVal
from aind_slurm_rest_v2.models.v0039_uint32_no_val import V0039Uint32NoVal
from typing import Optional, Set
from typing_extensions import Self

class V0039PartitionInfoMaximums(BaseModel):
    """
    V0039PartitionInfoMaximums
    """ # noqa: E501
    cpus_per_node: Optional[V0039Uint32NoVal] = None
    cpus_per_socket: Optional[V0039Uint32NoVal] = None
    memory_per_cpu: Optional[StrictInt] = None
    nodes: Optional[V0039Uint32NoVal] = None
    shares: Optional[StrictInt] = None
    time: Optional[V0039Uint32NoVal] = None
    over_time_limit: Optional[V0039Uint16NoVal] = None
    __properties: ClassVar[List[str]] = ["cpus_per_node", "cpus_per_socket", "memory_per_cpu", "nodes", "shares", "time", "over_time_limit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V0039PartitionInfoMaximums from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpus_per_node
        if self.cpus_per_node:
            _dict['cpus_per_node'] = self.cpus_per_node.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpus_per_socket
        if self.cpus_per_socket:
            _dict['cpus_per_socket'] = self.cpus_per_socket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nodes
        if self.nodes:
            _dict['nodes'] = self.nodes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time
        if self.time:
            _dict['time'] = self.time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of over_time_limit
        if self.over_time_limit:
            _dict['over_time_limit'] = self.over_time_limit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V0039PartitionInfoMaximums from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpus_per_node": V0039Uint32NoVal.from_dict(obj["cpus_per_node"]) if obj.get("cpus_per_node") is not None else None,
            "cpus_per_socket": V0039Uint32NoVal.from_dict(obj["cpus_per_socket"]) if obj.get("cpus_per_socket") is not None else None,
            "memory_per_cpu": obj.get("memory_per_cpu"),
            "nodes": V0039Uint32NoVal.from_dict(obj["nodes"]) if obj.get("nodes") is not None else None,
            "shares": obj.get("shares"),
            "time": V0039Uint32NoVal.from_dict(obj["time"]) if obj.get("time") is not None else None,
            "over_time_limit": V0039Uint16NoVal.from_dict(obj["over_time_limit"]) if obj.get("over_time_limit") is not None else None
        })
        return _obj


