# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm

    The version of the OpenAPI document: Slurm-24.05.4&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from aind_slurm_rest_v2.models.v0040_account import V0040Account
from aind_slurm_rest_v2.models.v0040_assoc import V0040Assoc
from aind_slurm_rest_v2.models.v0040_cluster_rec import V0040ClusterRec
from aind_slurm_rest_v2.models.v0040_instance import V0040Instance
from aind_slurm_rest_v2.models.v0040_openapi_error import V0040OpenapiError
from aind_slurm_rest_v2.models.v0040_openapi_meta import V0040OpenapiMeta
from aind_slurm_rest_v2.models.v0040_openapi_warning import V0040OpenapiWarning
from aind_slurm_rest_v2.models.v0040_qos import V0040Qos
from aind_slurm_rest_v2.models.v0040_tres import V0040Tres
from aind_slurm_rest_v2.models.v0040_user import V0040User
from aind_slurm_rest_v2.models.v0040_wckey import V0040Wckey
from typing import Optional, Set
from typing_extensions import Self

class V0040OpenapiSlurmdbdConfigResp(BaseModel):
    """
    V0040OpenapiSlurmdbdConfigResp
    """ # noqa: E501
    clusters: Optional[List[V0040ClusterRec]] = None
    tres: Optional[List[V0040Tres]] = None
    accounts: Optional[List[V0040Account]] = None
    users: Optional[List[V0040User]] = None
    qos: Optional[List[V0040Qos]] = None
    wckeys: Optional[List[V0040Wckey]] = None
    associations: Optional[List[V0040Assoc]] = None
    instances: Optional[List[V0040Instance]] = None
    meta: Optional[V0040OpenapiMeta] = None
    errors: Optional[List[V0040OpenapiError]] = None
    warnings: Optional[List[V0040OpenapiWarning]] = None
    __properties: ClassVar[List[str]] = ["clusters", "tres", "accounts", "users", "qos", "wckeys", "associations", "instances", "meta", "errors", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V0040OpenapiSlurmdbdConfigResp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clusters (list)
        _items = []
        if self.clusters:
            for _item_clusters in self.clusters:
                if _item_clusters:
                    _items.append(_item_clusters.to_dict())
            _dict['clusters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tres (list)
        _items = []
        if self.tres:
            for _item_tres in self.tres:
                if _item_tres:
                    _items.append(_item_tres.to_dict())
            _dict['tres'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item_accounts in self.accounts:
                if _item_accounts:
                    _items.append(_item_accounts.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in qos (list)
        _items = []
        if self.qos:
            for _item_qos in self.qos:
                if _item_qos:
                    _items.append(_item_qos.to_dict())
            _dict['qos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wckeys (list)
        _items = []
        if self.wckeys:
            for _item_wckeys in self.wckeys:
                if _item_wckeys:
                    _items.append(_item_wckeys.to_dict())
            _dict['wckeys'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associations (list)
        _items = []
        if self.associations:
            for _item_associations in self.associations:
                if _item_associations:
                    _items.append(_item_associations.to_dict())
            _dict['associations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item_instances in self.instances:
                if _item_instances:
                    _items.append(_item_instances.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V0040OpenapiSlurmdbdConfigResp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusters": [V0040ClusterRec.from_dict(_item) for _item in obj["clusters"]] if obj.get("clusters") is not None else None,
            "tres": [V0040Tres.from_dict(_item) for _item in obj["tres"]] if obj.get("tres") is not None else None,
            "accounts": [V0040Account.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "users": [V0040User.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None,
            "qos": [V0040Qos.from_dict(_item) for _item in obj["qos"]] if obj.get("qos") is not None else None,
            "wckeys": [V0040Wckey.from_dict(_item) for _item in obj["wckeys"]] if obj.get("wckeys") is not None else None,
            "associations": [V0040Assoc.from_dict(_item) for _item in obj["associations"]] if obj.get("associations") is not None else None,
            "instances": [V0040Instance.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None,
            "meta": V0040OpenapiMeta.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "errors": [V0040OpenapiError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "warnings": [V0040OpenapiWarning.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


