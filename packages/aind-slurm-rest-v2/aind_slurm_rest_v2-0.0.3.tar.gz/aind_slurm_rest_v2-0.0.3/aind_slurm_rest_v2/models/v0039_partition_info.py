# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm

    The version of the OpenAPI document: Slurm-24.05.4&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aind_slurm_rest_v2.models.v0039_partition_info_accounts import V0039PartitionInfoAccounts
from aind_slurm_rest_v2.models.v0039_partition_info_cpus import V0039PartitionInfoCpus
from aind_slurm_rest_v2.models.v0039_partition_info_defaults import V0039PartitionInfoDefaults
from aind_slurm_rest_v2.models.v0039_partition_info_groups import V0039PartitionInfoGroups
from aind_slurm_rest_v2.models.v0039_partition_info_maximums import V0039PartitionInfoMaximums
from aind_slurm_rest_v2.models.v0039_partition_info_minimums import V0039PartitionInfoMinimums
from aind_slurm_rest_v2.models.v0039_partition_info_nodes import V0039PartitionInfoNodes
from aind_slurm_rest_v2.models.v0039_partition_info_priority import V0039PartitionInfoPriority
from aind_slurm_rest_v2.models.v0039_partition_info_qos import V0039PartitionInfoQos
from aind_slurm_rest_v2.models.v0039_partition_info_timeouts import V0039PartitionInfoTimeouts
from aind_slurm_rest_v2.models.v0039_partition_info_tres import V0039PartitionInfoTres
from aind_slurm_rest_v2.models.v0039_uint32_no_val import V0039Uint32NoVal
from typing import Optional, Set
from typing_extensions import Self

class V0039PartitionInfo(BaseModel):
    """
    V0039PartitionInfo
    """ # noqa: E501
    nodes: Optional[V0039PartitionInfoNodes] = None
    accounts: Optional[V0039PartitionInfoAccounts] = None
    groups: Optional[V0039PartitionInfoGroups] = None
    qos: Optional[V0039PartitionInfoQos] = None
    alternate: Optional[StrictStr] = None
    tres: Optional[V0039PartitionInfoTres] = None
    cluster: Optional[StrictStr] = None
    cpus: Optional[V0039PartitionInfoCpus] = None
    defaults: Optional[V0039PartitionInfoDefaults] = None
    grace_time: Optional[StrictInt] = None
    maximums: Optional[V0039PartitionInfoMaximums] = None
    minimums: Optional[V0039PartitionInfoMinimums] = None
    name: Optional[StrictStr] = None
    node_sets: Optional[StrictStr] = None
    priority: Optional[V0039PartitionInfoPriority] = None
    timeouts: Optional[V0039PartitionInfoTimeouts] = None
    suspend_time: Optional[V0039Uint32NoVal] = None
    __properties: ClassVar[List[str]] = ["nodes", "accounts", "groups", "qos", "alternate", "tres", "cluster", "cpus", "defaults", "grace_time", "maximums", "minimums", "name", "node_sets", "priority", "timeouts", "suspend_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V0039PartitionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nodes
        if self.nodes:
            _dict['nodes'] = self.nodes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounts
        if self.accounts:
            _dict['accounts'] = self.accounts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of groups
        if self.groups:
            _dict['groups'] = self.groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qos
        if self.qos:
            _dict['qos'] = self.qos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tres
        if self.tres:
            _dict['tres'] = self.tres.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpus
        if self.cpus:
            _dict['cpus'] = self.cpus.to_dict()
        # override the default output from pydantic by calling `to_dict()` of defaults
        if self.defaults:
            _dict['defaults'] = self.defaults.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximums
        if self.maximums:
            _dict['maximums'] = self.maximums.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimums
        if self.minimums:
            _dict['minimums'] = self.minimums.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeouts
        if self.timeouts:
            _dict['timeouts'] = self.timeouts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspend_time
        if self.suspend_time:
            _dict['suspend_time'] = self.suspend_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V0039PartitionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nodes": V0039PartitionInfoNodes.from_dict(obj["nodes"]) if obj.get("nodes") is not None else None,
            "accounts": V0039PartitionInfoAccounts.from_dict(obj["accounts"]) if obj.get("accounts") is not None else None,
            "groups": V0039PartitionInfoGroups.from_dict(obj["groups"]) if obj.get("groups") is not None else None,
            "qos": V0039PartitionInfoQos.from_dict(obj["qos"]) if obj.get("qos") is not None else None,
            "alternate": obj.get("alternate"),
            "tres": V0039PartitionInfoTres.from_dict(obj["tres"]) if obj.get("tres") is not None else None,
            "cluster": obj.get("cluster"),
            "cpus": V0039PartitionInfoCpus.from_dict(obj["cpus"]) if obj.get("cpus") is not None else None,
            "defaults": V0039PartitionInfoDefaults.from_dict(obj["defaults"]) if obj.get("defaults") is not None else None,
            "grace_time": obj.get("grace_time"),
            "maximums": V0039PartitionInfoMaximums.from_dict(obj["maximums"]) if obj.get("maximums") is not None else None,
            "minimums": V0039PartitionInfoMinimums.from_dict(obj["minimums"]) if obj.get("minimums") is not None else None,
            "name": obj.get("name"),
            "node_sets": obj.get("node_sets"),
            "priority": V0039PartitionInfoPriority.from_dict(obj["priority"]) if obj.get("priority") is not None else None,
            "timeouts": V0039PartitionInfoTimeouts.from_dict(obj["timeouts"]) if obj.get("timeouts") is not None else None,
            "suspend_time": V0039Uint32NoVal.from_dict(obj["suspend_time"]) if obj.get("suspend_time") is not None else None
        })
        return _obj


