# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePortalDocumentTypeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant': 'str',
        'document_number': 'str',
        'document_type': 'str'
    }

    attribute_map = {
        'participant': 'participant',
        'document_number': 'documentNumber',
        'document_type': 'documentType'
    }

    def __init__(self, participant=None, document_number=None, document_type=None):  # noqa: E501
        """UpdatePortalDocumentTypeRequest - a model defined in Swagger"""  # noqa: E501
        self._participant = None
        self._document_number = None
        self._document_type = None
        self.discriminator = None
        self.participant = participant
        self.document_number = document_number
        self.document_type = document_type

    @property
    def participant(self):
        """Gets the participant of this UpdatePortalDocumentTypeRequest.  # noqa: E501

        Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.)  # noqa: E501

        :return: The participant of this UpdatePortalDocumentTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this UpdatePortalDocumentTypeRequest.

        Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.)  # noqa: E501

        :param participant: The participant of this UpdatePortalDocumentTypeRequest.  # noqa: E501
        :type: str
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def document_number(self):
        """Gets the document_number of this UpdatePortalDocumentTypeRequest.  # noqa: E501

        Alphanumerical unique identifier of a document (always end with \"-B\") (in german: Beleg-Nr.)  # noqa: E501

        :return: The document_number of this UpdatePortalDocumentTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this UpdatePortalDocumentTypeRequest.

        Alphanumerical unique identifier of a document (always end with \"-B\") (in german: Beleg-Nr.)  # noqa: E501

        :param document_number: The document_number of this UpdatePortalDocumentTypeRequest.  # noqa: E501
        :type: str
        """
        if document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")  # noqa: E501

        self._document_number = document_number

    @property
    def document_type(self):
        """Gets the document_type of this UpdatePortalDocumentTypeRequest.  # noqa: E501

        Type of the document (e.g. order, delivery note, goods receipt) (in german: Belegtyp)  # noqa: E501

        :return: The document_type of this UpdatePortalDocumentTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this UpdatePortalDocumentTypeRequest.

        Type of the document (e.g. order, delivery note, goods receipt) (in german: Belegtyp)  # noqa: E501

        :param document_type: The document_type of this UpdatePortalDocumentTypeRequest.  # noqa: E501
        :type: str
        """
        if document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")  # noqa: E501

        self._document_type = document_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePortalDocumentTypeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePortalDocumentTypeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
