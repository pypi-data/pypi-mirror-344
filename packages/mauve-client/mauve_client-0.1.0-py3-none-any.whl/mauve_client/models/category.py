# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Category(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'int',
        'parent_category_id': 'int',
        'name': 'str',
        'internet_publish': 'bool',
        'webshop_publish': 'bool',
        'translations': 'list[CategoryTranslation]'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'parent_category_id': 'parentCategoryId',
        'name': 'name',
        'internet_publish': 'internetPublish',
        'webshop_publish': 'webshopPublish',
        'translations': 'translations'
    }

    def __init__(self, category_id=None, parent_category_id=None, name=None, internet_publish=None, webshop_publish=None, translations=None):  # noqa: E501
        """Category - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._parent_category_id = None
        self._name = None
        self._internet_publish = None
        self._webshop_publish = None
        self._translations = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if parent_category_id is not None:
            self.parent_category_id = parent_category_id
        if name is not None:
            self.name = name
        if internet_publish is not None:
            self.internet_publish = internet_publish
        if webshop_publish is not None:
            self.webshop_publish = webshop_publish
        if translations is not None:
            self.translations = translations

    @property
    def category_id(self):
        """Gets the category_id of this Category.  # noqa: E501

        Numerical unique identifier of a category  # noqa: E501

        :return: The category_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Category.

        Numerical unique identifier of a category  # noqa: E501

        :param category_id: The category_id of this Category.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def parent_category_id(self):
        """Gets the parent_category_id of this Category.  # noqa: E501

        Parent category Id of a category  # noqa: E501

        :return: The parent_category_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._parent_category_id

    @parent_category_id.setter
    def parent_category_id(self, parent_category_id):
        """Sets the parent_category_id of this Category.

        Parent category Id of a category  # noqa: E501

        :param parent_category_id: The parent_category_id of this Category.  # noqa: E501
        :type: int
        """

        self._parent_category_id = parent_category_id

    @property
    def name(self):
        """Gets the name of this Category.  # noqa: E501

        Name of a category  # noqa: E501

        :return: The name of this Category.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.

        Name of a category  # noqa: E501

        :param name: The name of this Category.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def internet_publish(self):
        """Gets the internet_publish of this Category.  # noqa: E501

        Whether to publish the category in the webshop (deprecated, please use \"WebshopPublish\")  # noqa: E501

        :return: The internet_publish of this Category.  # noqa: E501
        :rtype: bool
        """
        return self._internet_publish

    @internet_publish.setter
    def internet_publish(self, internet_publish):
        """Sets the internet_publish of this Category.

        Whether to publish the category in the webshop (deprecated, please use \"WebshopPublish\")  # noqa: E501

        :param internet_publish: The internet_publish of this Category.  # noqa: E501
        :type: bool
        """

        self._internet_publish = internet_publish

    @property
    def webshop_publish(self):
        """Gets the webshop_publish of this Category.  # noqa: E501

        Whether to publish the category in the webshop  # noqa: E501

        :return: The webshop_publish of this Category.  # noqa: E501
        :rtype: bool
        """
        return self._webshop_publish

    @webshop_publish.setter
    def webshop_publish(self, webshop_publish):
        """Sets the webshop_publish of this Category.

        Whether to publish the category in the webshop  # noqa: E501

        :param webshop_publish: The webshop_publish of this Category.  # noqa: E501
        :type: bool
        """

        self._webshop_publish = webshop_publish

    @property
    def translations(self):
        """Gets the translations of this Category.  # noqa: E501

        List of translations of the catogory (requires include parameter \"translations\")  # noqa: E501

        :return: The translations of this Category.  # noqa: E501
        :rtype: list[CategoryTranslation]
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this Category.

        List of translations of the catogory (requires include parameter \"translations\")  # noqa: E501

        :param translations: The translations of this Category.  # noqa: E501
        :type: list[CategoryTranslation]
        """

        self._translations = translations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Category, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
