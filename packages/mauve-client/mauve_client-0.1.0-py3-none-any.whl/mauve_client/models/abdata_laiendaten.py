# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbdataLaiendaten(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wichtige_hinweise': 'str',
        'anwendungshinweise': 'str',
        'gegenanzeigen': 'str',
        'nebenwirkungen': 'str',
        'wirkungsweise': 'str',
        'aufbewahrung': 'str',
        'anwendungsgebiete': 'str',
        'zusammensetzung': 'str',
        'darreichungsform': 'str',
        'wirksubstanz': 'str',
        'monopraeparat': 'bool'
    }

    attribute_map = {
        'wichtige_hinweise': 'wichtigeHinweise',
        'anwendungshinweise': 'anwendungshinweise',
        'gegenanzeigen': 'gegenanzeigen',
        'nebenwirkungen': 'nebenwirkungen',
        'wirkungsweise': 'wirkungsweise',
        'aufbewahrung': 'aufbewahrung',
        'anwendungsgebiete': 'anwendungsgebiete',
        'zusammensetzung': 'zusammensetzung',
        'darreichungsform': 'darreichungsform',
        'wirksubstanz': 'wirksubstanz',
        'monopraeparat': 'monopraeparat'
    }

    def __init__(self, wichtige_hinweise=None, anwendungshinweise=None, gegenanzeigen=None, nebenwirkungen=None, wirkungsweise=None, aufbewahrung=None, anwendungsgebiete=None, zusammensetzung=None, darreichungsform=None, wirksubstanz=None, monopraeparat=None):  # noqa: E501
        """AbdataLaiendaten - a model defined in Swagger"""  # noqa: E501
        self._wichtige_hinweise = None
        self._anwendungshinweise = None
        self._gegenanzeigen = None
        self._nebenwirkungen = None
        self._wirkungsweise = None
        self._aufbewahrung = None
        self._anwendungsgebiete = None
        self._zusammensetzung = None
        self._darreichungsform = None
        self._wirksubstanz = None
        self._monopraeparat = None
        self.discriminator = None
        if wichtige_hinweise is not None:
            self.wichtige_hinweise = wichtige_hinweise
        if anwendungshinweise is not None:
            self.anwendungshinweise = anwendungshinweise
        if gegenanzeigen is not None:
            self.gegenanzeigen = gegenanzeigen
        if nebenwirkungen is not None:
            self.nebenwirkungen = nebenwirkungen
        if wirkungsweise is not None:
            self.wirkungsweise = wirkungsweise
        if aufbewahrung is not None:
            self.aufbewahrung = aufbewahrung
        if anwendungsgebiete is not None:
            self.anwendungsgebiete = anwendungsgebiete
        if zusammensetzung is not None:
            self.zusammensetzung = zusammensetzung
        if darreichungsform is not None:
            self.darreichungsform = darreichungsform
        if wirksubstanz is not None:
            self.wirksubstanz = wirksubstanz
        if monopraeparat is not None:
            self.monopraeparat = monopraeparat

    @property
    def wichtige_hinweise(self):
        """Gets the wichtige_hinweise of this AbdataLaiendaten.  # noqa: E501


        :return: The wichtige_hinweise of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._wichtige_hinweise

    @wichtige_hinweise.setter
    def wichtige_hinweise(self, wichtige_hinweise):
        """Sets the wichtige_hinweise of this AbdataLaiendaten.


        :param wichtige_hinweise: The wichtige_hinweise of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._wichtige_hinweise = wichtige_hinweise

    @property
    def anwendungshinweise(self):
        """Gets the anwendungshinweise of this AbdataLaiendaten.  # noqa: E501


        :return: The anwendungshinweise of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._anwendungshinweise

    @anwendungshinweise.setter
    def anwendungshinweise(self, anwendungshinweise):
        """Sets the anwendungshinweise of this AbdataLaiendaten.


        :param anwendungshinweise: The anwendungshinweise of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._anwendungshinweise = anwendungshinweise

    @property
    def gegenanzeigen(self):
        """Gets the gegenanzeigen of this AbdataLaiendaten.  # noqa: E501


        :return: The gegenanzeigen of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._gegenanzeigen

    @gegenanzeigen.setter
    def gegenanzeigen(self, gegenanzeigen):
        """Sets the gegenanzeigen of this AbdataLaiendaten.


        :param gegenanzeigen: The gegenanzeigen of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._gegenanzeigen = gegenanzeigen

    @property
    def nebenwirkungen(self):
        """Gets the nebenwirkungen of this AbdataLaiendaten.  # noqa: E501


        :return: The nebenwirkungen of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._nebenwirkungen

    @nebenwirkungen.setter
    def nebenwirkungen(self, nebenwirkungen):
        """Sets the nebenwirkungen of this AbdataLaiendaten.


        :param nebenwirkungen: The nebenwirkungen of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._nebenwirkungen = nebenwirkungen

    @property
    def wirkungsweise(self):
        """Gets the wirkungsweise of this AbdataLaiendaten.  # noqa: E501


        :return: The wirkungsweise of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._wirkungsweise

    @wirkungsweise.setter
    def wirkungsweise(self, wirkungsweise):
        """Sets the wirkungsweise of this AbdataLaiendaten.


        :param wirkungsweise: The wirkungsweise of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._wirkungsweise = wirkungsweise

    @property
    def aufbewahrung(self):
        """Gets the aufbewahrung of this AbdataLaiendaten.  # noqa: E501


        :return: The aufbewahrung of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._aufbewahrung

    @aufbewahrung.setter
    def aufbewahrung(self, aufbewahrung):
        """Sets the aufbewahrung of this AbdataLaiendaten.


        :param aufbewahrung: The aufbewahrung of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._aufbewahrung = aufbewahrung

    @property
    def anwendungsgebiete(self):
        """Gets the anwendungsgebiete of this AbdataLaiendaten.  # noqa: E501


        :return: The anwendungsgebiete of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._anwendungsgebiete

    @anwendungsgebiete.setter
    def anwendungsgebiete(self, anwendungsgebiete):
        """Sets the anwendungsgebiete of this AbdataLaiendaten.


        :param anwendungsgebiete: The anwendungsgebiete of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._anwendungsgebiete = anwendungsgebiete

    @property
    def zusammensetzung(self):
        """Gets the zusammensetzung of this AbdataLaiendaten.  # noqa: E501


        :return: The zusammensetzung of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._zusammensetzung

    @zusammensetzung.setter
    def zusammensetzung(self, zusammensetzung):
        """Sets the zusammensetzung of this AbdataLaiendaten.


        :param zusammensetzung: The zusammensetzung of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._zusammensetzung = zusammensetzung

    @property
    def darreichungsform(self):
        """Gets the darreichungsform of this AbdataLaiendaten.  # noqa: E501


        :return: The darreichungsform of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._darreichungsform

    @darreichungsform.setter
    def darreichungsform(self, darreichungsform):
        """Sets the darreichungsform of this AbdataLaiendaten.


        :param darreichungsform: The darreichungsform of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._darreichungsform = darreichungsform

    @property
    def wirksubstanz(self):
        """Gets the wirksubstanz of this AbdataLaiendaten.  # noqa: E501


        :return: The wirksubstanz of this AbdataLaiendaten.  # noqa: E501
        :rtype: str
        """
        return self._wirksubstanz

    @wirksubstanz.setter
    def wirksubstanz(self, wirksubstanz):
        """Sets the wirksubstanz of this AbdataLaiendaten.


        :param wirksubstanz: The wirksubstanz of this AbdataLaiendaten.  # noqa: E501
        :type: str
        """

        self._wirksubstanz = wirksubstanz

    @property
    def monopraeparat(self):
        """Gets the monopraeparat of this AbdataLaiendaten.  # noqa: E501


        :return: The monopraeparat of this AbdataLaiendaten.  # noqa: E501
        :rtype: bool
        """
        return self._monopraeparat

    @monopraeparat.setter
    def monopraeparat(self, monopraeparat):
        """Sets the monopraeparat of this AbdataLaiendaten.


        :param monopraeparat: The monopraeparat of this AbdataLaiendaten.  # noqa: E501
        :type: bool
        """

        self._monopraeparat = monopraeparat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbdataLaiendaten, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbdataLaiendaten):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
