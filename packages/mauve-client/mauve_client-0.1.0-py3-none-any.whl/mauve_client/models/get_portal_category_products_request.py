# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetPortalCategoryProductsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant': 'str',
        'category_id': 'int',
        'include': 'str',
        'shop_id': 'int',
        'offset': 'int',
        'limit': 'int'
    }

    attribute_map = {
        'participant': 'participant',
        'category_id': 'categoryId',
        'include': 'include',
        'shop_id': 'shopId',
        'offset': 'offset',
        'limit': 'limit'
    }

    def __init__(self, participant=None, category_id=None, include=None, shop_id=None, offset=None, limit=None):  # noqa: E501
        """GetPortalCategoryProductsRequest - a model defined in Swagger"""  # noqa: E501
        self._participant = None
        self._category_id = None
        self._include = None
        self._shop_id = None
        self._offset = None
        self._limit = None
        self.discriminator = None
        self.participant = participant
        self.category_id = category_id
        if include is not None:
            self.include = include
        if shop_id is not None:
            self.shop_id = shop_id
        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit

    @property
    def participant(self):
        """Gets the participant of this GetPortalCategoryProductsRequest.  # noqa: E501

        Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.)  # noqa: E501

        :return: The participant of this GetPortalCategoryProductsRequest.  # noqa: E501
        :rtype: str
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this GetPortalCategoryProductsRequest.

        Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.)  # noqa: E501

        :param participant: The participant of this GetPortalCategoryProductsRequest.  # noqa: E501
        :type: str
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def category_id(self):
        """Gets the category_id of this GetPortalCategoryProductsRequest.  # noqa: E501

        The unique identifier of a category  # noqa: E501

        :return: The category_id of this GetPortalCategoryProductsRequest.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this GetPortalCategoryProductsRequest.

        The unique identifier of a category  # noqa: E501

        :param category_id: The category_id of this GetPortalCategoryProductsRequest.  # noqa: E501
        :type: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    @property
    def include(self):
        """Gets the include of this GetPortalCategoryProductsRequest.  # noqa: E501

        Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").  # noqa: E501

        :return: The include of this GetPortalCategoryProductsRequest.  # noqa: E501
        :rtype: str
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this GetPortalCategoryProductsRequest.

        Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").  # noqa: E501

        :param include: The include of this GetPortalCategoryProductsRequest.  # noqa: E501
        :type: str
        """

        self._include = include

    @property
    def shop_id(self):
        """Gets the shop_id of this GetPortalCategoryProductsRequest.  # noqa: E501

        The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)  # noqa: E501

        :return: The shop_id of this GetPortalCategoryProductsRequest.  # noqa: E501
        :rtype: int
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this GetPortalCategoryProductsRequest.

        The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)  # noqa: E501

        :param shop_id: The shop_id of this GetPortalCategoryProductsRequest.  # noqa: E501
        :type: int
        """

        self._shop_id = shop_id

    @property
    def offset(self):
        """Gets the offset of this GetPortalCategoryProductsRequest.  # noqa: E501

        The (zero-based) offset of the first item in the collection to return (default: 0)  # noqa: E501

        :return: The offset of this GetPortalCategoryProductsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetPortalCategoryProductsRequest.

        The (zero-based) offset of the first item in the collection to return (default: 0)  # noqa: E501

        :param offset: The offset of this GetPortalCategoryProductsRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this GetPortalCategoryProductsRequest.  # noqa: E501

        The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)  # noqa: E501

        :return: The limit of this GetPortalCategoryProductsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetPortalCategoryProductsRequest.

        The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)  # noqa: E501

        :param limit: The limit of this GetPortalCategoryProductsRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPortalCategoryProductsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPortalCategoryProductsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
