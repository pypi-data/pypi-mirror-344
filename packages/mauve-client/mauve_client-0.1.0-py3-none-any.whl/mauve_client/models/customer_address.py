# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'street': 'str',
        'house_no': 'str',
        'postal_code': 'str',
        'city': 'str',
        'additional_addressinformation': 'str',
        'country_code': 'str',
        'district': 'str',
        'state': 'str',
        'company': 'str',
        'title': 'str',
        'salutation': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'street': 'street',
        'house_no': 'houseNo',
        'postal_code': 'postalCode',
        'city': 'city',
        'additional_addressinformation': 'additionalAddressinformation',
        'country_code': 'countryCode',
        'district': 'district',
        'state': 'state',
        'company': 'company',
        'title': 'title',
        'salutation': 'salutation',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'phone': 'phone'
    }

    def __init__(self, street=None, house_no=None, postal_code=None, city=None, additional_addressinformation=None, country_code=None, district=None, state=None, company=None, title=None, salutation=None, first_name=None, last_name=None, email=None, phone=None):  # noqa: E501
        """CustomerAddress - a model defined in Swagger"""  # noqa: E501
        self._street = None
        self._house_no = None
        self._postal_code = None
        self._city = None
        self._additional_addressinformation = None
        self._country_code = None
        self._district = None
        self._state = None
        self._company = None
        self._title = None
        self._salutation = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._phone = None
        self.discriminator = None
        if street is not None:
            self.street = street
        if house_no is not None:
            self.house_no = house_no
        if postal_code is not None:
            self.postal_code = postal_code
        if city is not None:
            self.city = city
        if additional_addressinformation is not None:
            self.additional_addressinformation = additional_addressinformation
        if country_code is not None:
            self.country_code = country_code
        if district is not None:
            self.district = district
        if state is not None:
            self.state = state
        if company is not None:
            self.company = company
        if title is not None:
            self.title = title
        if salutation is not None:
            self.salutation = salutation
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone

    @property
    def street(self):
        """Gets the street of this CustomerAddress.  # noqa: E501


        :return: The street of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this CustomerAddress.


        :param street: The street of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def house_no(self):
        """Gets the house_no of this CustomerAddress.  # noqa: E501


        :return: The house_no of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._house_no

    @house_no.setter
    def house_no(self, house_no):
        """Sets the house_no of this CustomerAddress.


        :param house_no: The house_no of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._house_no = house_no

    @property
    def postal_code(self):
        """Gets the postal_code of this CustomerAddress.  # noqa: E501


        :return: The postal_code of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CustomerAddress.


        :param postal_code: The postal_code of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def city(self):
        """Gets the city of this CustomerAddress.  # noqa: E501


        :return: The city of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CustomerAddress.


        :param city: The city of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def additional_addressinformation(self):
        """Gets the additional_addressinformation of this CustomerAddress.  # noqa: E501


        :return: The additional_addressinformation of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._additional_addressinformation

    @additional_addressinformation.setter
    def additional_addressinformation(self, additional_addressinformation):
        """Sets the additional_addressinformation of this CustomerAddress.


        :param additional_addressinformation: The additional_addressinformation of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._additional_addressinformation = additional_addressinformation

    @property
    def country_code(self):
        """Gets the country_code of this CustomerAddress.  # noqa: E501

        The country code (ISO 3166-2) (e.g. DE, CH)  # noqa: E501

        :return: The country_code of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CustomerAddress.

        The country code (ISO 3166-2) (e.g. DE, CH)  # noqa: E501

        :param country_code: The country_code of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def district(self):
        """Gets the district of this CustomerAddress.  # noqa: E501

        The district of the customers primary address (in german: Stadtteil) (requires include parameter \"extended_address_information\")  # noqa: E501

        :return: The district of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this CustomerAddress.

        The district of the customers primary address (in german: Stadtteil) (requires include parameter \"extended_address_information\")  # noqa: E501

        :param district: The district of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def state(self):
        """Gets the state of this CustomerAddress.  # noqa: E501

        The state of the customers primary address (e.g. Hessen) (in german: Bundesland) (requires include parameter \"extended_address_information\")  # noqa: E501

        :return: The state of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CustomerAddress.

        The state of the customers primary address (e.g. Hessen) (in german: Bundesland) (requires include parameter \"extended_address_information\")  # noqa: E501

        :param state: The state of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def company(self):
        """Gets the company of this CustomerAddress.  # noqa: E501

        The company name if a different entry is specified in the delivery address  # noqa: E501

        :return: The company of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CustomerAddress.

        The company name if a different entry is specified in the delivery address  # noqa: E501

        :param company: The company of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def title(self):
        """Gets the title of this CustomerAddress.  # noqa: E501

        The title if a different entry is specified in the delivery address  # noqa: E501

        :return: The title of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomerAddress.

        The title if a different entry is specified in the delivery address  # noqa: E501

        :param title: The title of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def salutation(self):
        """Gets the salutation of this CustomerAddress.  # noqa: E501

        The salutation if a different entry is specified in the delivery address  # noqa: E501

        :return: The salutation of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this CustomerAddress.

        The salutation if a different entry is specified in the delivery address  # noqa: E501

        :param salutation: The salutation of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._salutation = salutation

    @property
    def first_name(self):
        """Gets the first_name of this CustomerAddress.  # noqa: E501

        The firstname if a different entry is specified in the delivery address  # noqa: E501

        :return: The first_name of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CustomerAddress.

        The firstname if a different entry is specified in the delivery address  # noqa: E501

        :param first_name: The first_name of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CustomerAddress.  # noqa: E501

        The lastname if a different entry is specified in the delivery address  # noqa: E501

        :return: The last_name of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CustomerAddress.

        The lastname if a different entry is specified in the delivery address  # noqa: E501

        :param last_name: The last_name of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this CustomerAddress.  # noqa: E501

        The email address if a different entry is specified in the delivery address  # noqa: E501

        :return: The email of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerAddress.

        The email address if a different entry is specified in the delivery address  # noqa: E501

        :param email: The email of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this CustomerAddress.  # noqa: E501

        The telephone number if a different entry is specified in the delivery address  # noqa: E501

        :return: The phone of this CustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerAddress.

        The telephone number if a different entry is specified in the delivery address  # noqa: E501

        :param phone: The phone of this CustomerAddress.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
