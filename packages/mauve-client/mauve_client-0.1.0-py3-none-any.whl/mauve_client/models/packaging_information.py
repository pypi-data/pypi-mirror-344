# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PackagingInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'packaging_unit': 'PackagingUnit',
        'measuring_unit': 'MeasuringUnit',
        'measuring_amount': 'float',
        'content_unit': 'ContentUnit',
        'content_amount': 'float'
    }

    attribute_map = {
        'packaging_unit': 'packagingUnit',
        'measuring_unit': 'measuringUnit',
        'measuring_amount': 'measuringAmount',
        'content_unit': 'contentUnit',
        'content_amount': 'contentAmount'
    }

    def __init__(self, packaging_unit=None, measuring_unit=None, measuring_amount=None, content_unit=None, content_amount=None):  # noqa: E501
        """PackagingInformation - a model defined in Swagger"""  # noqa: E501
        self._packaging_unit = None
        self._measuring_unit = None
        self._measuring_amount = None
        self._content_unit = None
        self._content_amount = None
        self.discriminator = None
        if packaging_unit is not None:
            self.packaging_unit = packaging_unit
        if measuring_unit is not None:
            self.measuring_unit = measuring_unit
        if measuring_amount is not None:
            self.measuring_amount = measuring_amount
        if content_unit is not None:
            self.content_unit = content_unit
        if content_amount is not None:
            self.content_amount = content_amount

    @property
    def packaging_unit(self):
        """Gets the packaging_unit of this PackagingInformation.  # noqa: E501


        :return: The packaging_unit of this PackagingInformation.  # noqa: E501
        :rtype: PackagingUnit
        """
        return self._packaging_unit

    @packaging_unit.setter
    def packaging_unit(self, packaging_unit):
        """Sets the packaging_unit of this PackagingInformation.


        :param packaging_unit: The packaging_unit of this PackagingInformation.  # noqa: E501
        :type: PackagingUnit
        """

        self._packaging_unit = packaging_unit

    @property
    def measuring_unit(self):
        """Gets the measuring_unit of this PackagingInformation.  # noqa: E501


        :return: The measuring_unit of this PackagingInformation.  # noqa: E501
        :rtype: MeasuringUnit
        """
        return self._measuring_unit

    @measuring_unit.setter
    def measuring_unit(self, measuring_unit):
        """Sets the measuring_unit of this PackagingInformation.


        :param measuring_unit: The measuring_unit of this PackagingInformation.  # noqa: E501
        :type: MeasuringUnit
        """

        self._measuring_unit = measuring_unit

    @property
    def measuring_amount(self):
        """Gets the measuring_amount of this PackagingInformation.  # noqa: E501

        (e.g. 500 => <b>500</b> ml)  # noqa: E501

        :return: The measuring_amount of this PackagingInformation.  # noqa: E501
        :rtype: float
        """
        return self._measuring_amount

    @measuring_amount.setter
    def measuring_amount(self, measuring_amount):
        """Sets the measuring_amount of this PackagingInformation.

        (e.g. 500 => <b>500</b> ml)  # noqa: E501

        :param measuring_amount: The measuring_amount of this PackagingInformation.  # noqa: E501
        :type: float
        """

        self._measuring_amount = measuring_amount

    @property
    def content_unit(self):
        """Gets the content_unit of this PackagingInformation.  # noqa: E501


        :return: The content_unit of this PackagingInformation.  # noqa: E501
        :rtype: ContentUnit
        """
        return self._content_unit

    @content_unit.setter
    def content_unit(self, content_unit):
        """Sets the content_unit of this PackagingInformation.


        :param content_unit: The content_unit of this PackagingInformation.  # noqa: E501
        :type: ContentUnit
        """

        self._content_unit = content_unit

    @property
    def content_amount(self):
        """Gets the content_amount of this PackagingInformation.  # noqa: E501

        The amount of content units (e.g. 24 => <b>24</b> bottles in a crate)  # noqa: E501

        :return: The content_amount of this PackagingInformation.  # noqa: E501
        :rtype: float
        """
        return self._content_amount

    @content_amount.setter
    def content_amount(self, content_amount):
        """Sets the content_amount of this PackagingInformation.

        The amount of content units (e.g. 24 => <b>24</b> bottles in a crate)  # noqa: E501

        :param content_amount: The content_amount of this PackagingInformation.  # noqa: E501
        :type: float
        """

        self._content_amount = content_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackagingInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackagingInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
