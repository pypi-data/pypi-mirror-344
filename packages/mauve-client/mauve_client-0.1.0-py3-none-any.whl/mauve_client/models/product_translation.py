# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductTranslation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language_code': 'str',
        'name': 'str',
        'description': 'str',
        'description_short': 'str',
        'additional_description': 'str',
        'note': 'str'
    }

    attribute_map = {
        'language_code': 'languageCode',
        'name': 'name',
        'description': 'description',
        'description_short': 'descriptionShort',
        'additional_description': 'additionalDescription',
        'note': 'note'
    }

    def __init__(self, language_code=None, name=None, description=None, description_short=None, additional_description=None, note=None):  # noqa: E501
        """ProductTranslation - a model defined in Swagger"""  # noqa: E501
        self._language_code = None
        self._name = None
        self._description = None
        self._description_short = None
        self._additional_description = None
        self._note = None
        self.discriminator = None
        self.language_code = language_code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if description_short is not None:
            self.description_short = description_short
        if additional_description is not None:
            self.additional_description = additional_description
        if note is not None:
            self.note = note

    @property
    def language_code(self):
        """Gets the language_code of this ProductTranslation.  # noqa: E501

        The language code (ISO-639-1) (i.E. de, en)  # noqa: E501

        :return: The language_code of this ProductTranslation.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this ProductTranslation.

        The language code (ISO-639-1) (i.E. de, en)  # noqa: E501

        :param language_code: The language_code of this ProductTranslation.  # noqa: E501
        :type: str
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")  # noqa: E501

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this ProductTranslation.  # noqa: E501

        The product name in a specific language  # noqa: E501

        :return: The name of this ProductTranslation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductTranslation.

        The product name in a specific language  # noqa: E501

        :param name: The name of this ProductTranslation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProductTranslation.  # noqa: E501

        The product description in a specific language  # noqa: E501

        :return: The description of this ProductTranslation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductTranslation.

        The product description in a specific language  # noqa: E501

        :param description: The description of this ProductTranslation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_short(self):
        """Gets the description_short of this ProductTranslation.  # noqa: E501

        The product short description in a specific language  # noqa: E501

        :return: The description_short of this ProductTranslation.  # noqa: E501
        :rtype: str
        """
        return self._description_short

    @description_short.setter
    def description_short(self, description_short):
        """Sets the description_short of this ProductTranslation.

        The product short description in a specific language  # noqa: E501

        :param description_short: The description_short of this ProductTranslation.  # noqa: E501
        :type: str
        """

        self._description_short = description_short

    @property
    def additional_description(self):
        """Gets the additional_description of this ProductTranslation.  # noqa: E501

        The product additional description in a specific language  # noqa: E501

        :return: The additional_description of this ProductTranslation.  # noqa: E501
        :rtype: str
        """
        return self._additional_description

    @additional_description.setter
    def additional_description(self, additional_description):
        """Sets the additional_description of this ProductTranslation.

        The product additional description in a specific language  # noqa: E501

        :param additional_description: The additional_description of this ProductTranslation.  # noqa: E501
        :type: str
        """

        self._additional_description = additional_description

    @property
    def note(self):
        """Gets the note of this ProductTranslation.  # noqa: E501

        The product note in a specific language  # noqa: E501

        :return: The note of this ProductTranslation.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ProductTranslation.

        The product note in a specific language  # noqa: E501

        :param note: The note of this ProductTranslation.  # noqa: E501
        :type: str
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductTranslation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductTranslation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
