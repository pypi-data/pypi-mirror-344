# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'str',
        'name': 'str',
        'number': 'int',
        'quantity': 'float',
        'vat_rate': 'float',
        'gross_price': 'float',
        'purchase_net_price': 'float',
        'discount_percentage': 'float',
        'comment': 'str',
        'e_prescription_task_id': 'str',
        'e_prescription_access_code': 'str',
        'bundle_sku': 'str',
        'external_reference_number': 'str',
        'substitution_sku': 'str',
        'substitution_reason': 'str',
        'prescription_type': 'int',
        'prescription_status': 'int',
        'copayment': 'float',
        'is_shipping_item': 'bool',
        'abda_artikelstamm': 'AbdaArtikelstamm'
    }

    attribute_map = {
        'sku': 'sku',
        'name': 'name',
        'number': 'number',
        'quantity': 'quantity',
        'vat_rate': 'vatRate',
        'gross_price': 'grossPrice',
        'purchase_net_price': 'purchaseNetPrice',
        'discount_percentage': 'discountPercentage',
        'comment': 'comment',
        'e_prescription_task_id': 'ePrescriptionTaskId',
        'e_prescription_access_code': 'ePrescriptionAccessCode',
        'bundle_sku': 'bundleSku',
        'external_reference_number': 'externalReferenceNumber',
        'substitution_sku': 'substitutionSku',
        'substitution_reason': 'substitutionReason',
        'prescription_type': 'prescriptionType',
        'prescription_status': 'prescriptionStatus',
        'copayment': 'copayment',
        'is_shipping_item': 'isShippingItem',
        'abda_artikelstamm': 'abdaArtikelstamm'
    }

    def __init__(self, sku=None, name=None, number=None, quantity=None, vat_rate=None, gross_price=None, purchase_net_price=None, discount_percentage=None, comment=None, e_prescription_task_id=None, e_prescription_access_code=None, bundle_sku=None, external_reference_number=None, substitution_sku=None, substitution_reason=None, prescription_type=None, prescription_status=None, copayment=None, is_shipping_item=None, abda_artikelstamm=None):  # noqa: E501
        """DocumentLine - a model defined in Swagger"""  # noqa: E501
        self._sku = None
        self._name = None
        self._number = None
        self._quantity = None
        self._vat_rate = None
        self._gross_price = None
        self._purchase_net_price = None
        self._discount_percentage = None
        self._comment = None
        self._e_prescription_task_id = None
        self._e_prescription_access_code = None
        self._bundle_sku = None
        self._external_reference_number = None
        self._substitution_sku = None
        self._substitution_reason = None
        self._prescription_type = None
        self._prescription_status = None
        self._copayment = None
        self._is_shipping_item = None
        self._abda_artikelstamm = None
        self.discriminator = None
        self.sku = sku
        self.name = name
        if number is not None:
            self.number = number
        self.quantity = quantity
        self.vat_rate = vat_rate
        if gross_price is not None:
            self.gross_price = gross_price
        if purchase_net_price is not None:
            self.purchase_net_price = purchase_net_price
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if comment is not None:
            self.comment = comment
        if e_prescription_task_id is not None:
            self.e_prescription_task_id = e_prescription_task_id
        if e_prescription_access_code is not None:
            self.e_prescription_access_code = e_prescription_access_code
        if bundle_sku is not None:
            self.bundle_sku = bundle_sku
        if external_reference_number is not None:
            self.external_reference_number = external_reference_number
        if substitution_sku is not None:
            self.substitution_sku = substitution_sku
        if substitution_reason is not None:
            self.substitution_reason = substitution_reason
        if prescription_type is not None:
            self.prescription_type = prescription_type
        if prescription_status is not None:
            self.prescription_status = prescription_status
        if copayment is not None:
            self.copayment = copayment
        if is_shipping_item is not None:
            self.is_shipping_item = is_shipping_item
        if abda_artikelstamm is not None:
            self.abda_artikelstamm = abda_artikelstamm

    @property
    def sku(self):
        """Gets the sku of this DocumentLine.  # noqa: E501

        Stock Keeping Unit (e.g. PZN)  # noqa: E501

        :return: The sku of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this DocumentLine.

        Stock Keeping Unit (e.g. PZN)  # noqa: E501

        :param sku: The sku of this DocumentLine.  # noqa: E501
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def name(self):
        """Gets the name of this DocumentLine.  # noqa: E501

        The product name  # noqa: E501

        :return: The name of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentLine.

        The product name  # noqa: E501

        :param name: The name of this DocumentLine.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def number(self):
        """Gets the number of this DocumentLine.  # noqa: E501

        A consecutive number for each document line  # noqa: E501

        :return: The number of this DocumentLine.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DocumentLine.

        A consecutive number for each document line  # noqa: E501

        :param number: The number of this DocumentLine.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def quantity(self):
        """Gets the quantity of this DocumentLine.  # noqa: E501

        Product's quantity for the order line  # noqa: E501

        :return: The quantity of this DocumentLine.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this DocumentLine.

        Product's quantity for the order line  # noqa: E501

        :param quantity: The quantity of this DocumentLine.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def vat_rate(self):
        """Gets the vat_rate of this DocumentLine.  # noqa: E501

        Value added tax rate applied on product price  # noqa: E501

        :return: The vat_rate of this DocumentLine.  # noqa: E501
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this DocumentLine.

        Value added tax rate applied on product price  # noqa: E501

        :param vat_rate: The vat_rate of this DocumentLine.  # noqa: E501
        :type: float
        """
        if vat_rate is None:
            raise ValueError("Invalid value for `vat_rate`, must not be `None`")  # noqa: E501

        self._vat_rate = vat_rate

    @property
    def gross_price(self):
        """Gets the gross_price of this DocumentLine.  # noqa: E501

        Order line's gross price  # noqa: E501

        :return: The gross_price of this DocumentLine.  # noqa: E501
        :rtype: float
        """
        return self._gross_price

    @gross_price.setter
    def gross_price(self, gross_price):
        """Sets the gross_price of this DocumentLine.

        Order line's gross price  # noqa: E501

        :param gross_price: The gross_price of this DocumentLine.  # noqa: E501
        :type: float
        """

        self._gross_price = gross_price

    @property
    def purchase_net_price(self):
        """Gets the purchase_net_price of this DocumentLine.  # noqa: E501

        The purchase price of the item, representing the cost incurred by the retailer or business when acquiring the product from a supplier or manufacturer.  # noqa: E501

        :return: The purchase_net_price of this DocumentLine.  # noqa: E501
        :rtype: float
        """
        return self._purchase_net_price

    @purchase_net_price.setter
    def purchase_net_price(self, purchase_net_price):
        """Sets the purchase_net_price of this DocumentLine.

        The purchase price of the item, representing the cost incurred by the retailer or business when acquiring the product from a supplier or manufacturer.  # noqa: E501

        :param purchase_net_price: The purchase_net_price of this DocumentLine.  # noqa: E501
        :type: float
        """

        self._purchase_net_price = purchase_net_price

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this DocumentLine.  # noqa: E501

        Order line's discount rate in percentage  # noqa: E501

        :return: The discount_percentage of this DocumentLine.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this DocumentLine.

        Order line's discount rate in percentage  # noqa: E501

        :param discount_percentage: The discount_percentage of this DocumentLine.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def comment(self):
        """Gets the comment of this DocumentLine.  # noqa: E501


        :return: The comment of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DocumentLine.


        :param comment: The comment of this DocumentLine.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def e_prescription_task_id(self):
        """Gets the e_prescription_task_id of this DocumentLine.  # noqa: E501

        Task-ID of an e-prescription  # noqa: E501

        :return: The e_prescription_task_id of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._e_prescription_task_id

    @e_prescription_task_id.setter
    def e_prescription_task_id(self, e_prescription_task_id):
        """Sets the e_prescription_task_id of this DocumentLine.

        Task-ID of an e-prescription  # noqa: E501

        :param e_prescription_task_id: The e_prescription_task_id of this DocumentLine.  # noqa: E501
        :type: str
        """

        self._e_prescription_task_id = e_prescription_task_id

    @property
    def e_prescription_access_code(self):
        """Gets the e_prescription_access_code of this DocumentLine.  # noqa: E501

        AccessCode of an e-prescription  # noqa: E501

        :return: The e_prescription_access_code of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._e_prescription_access_code

    @e_prescription_access_code.setter
    def e_prescription_access_code(self, e_prescription_access_code):
        """Sets the e_prescription_access_code of this DocumentLine.

        AccessCode of an e-prescription  # noqa: E501

        :param e_prescription_access_code: The e_prescription_access_code of this DocumentLine.  # noqa: E501
        :type: str
        """

        self._e_prescription_access_code = e_prescription_access_code

    @property
    def bundle_sku(self):
        """Gets the bundle_sku of this DocumentLine.  # noqa: E501

        Stock Keeping Unit of the bundle containing this item  # noqa: E501

        :return: The bundle_sku of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._bundle_sku

    @bundle_sku.setter
    def bundle_sku(self, bundle_sku):
        """Sets the bundle_sku of this DocumentLine.

        Stock Keeping Unit of the bundle containing this item  # noqa: E501

        :param bundle_sku: The bundle_sku of this DocumentLine.  # noqa: E501
        :type: str
        """

        self._bundle_sku = bundle_sku

    @property
    def external_reference_number(self):
        """Gets the external_reference_number of this DocumentLine.  # noqa: E501

        An additional,optional, external, alphanumerical number to identify document lines  # noqa: E501

        :return: The external_reference_number of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._external_reference_number

    @external_reference_number.setter
    def external_reference_number(self, external_reference_number):
        """Sets the external_reference_number of this DocumentLine.

        An additional,optional, external, alphanumerical number to identify document lines  # noqa: E501

        :param external_reference_number: The external_reference_number of this DocumentLine.  # noqa: E501
        :type: str
        """

        self._external_reference_number = external_reference_number

    @property
    def substitution_sku(self):
        """Gets the substitution_sku of this DocumentLine.  # noqa: E501

        Exchanged Stock Keeping Unit (e.g. PZN)  # noqa: E501

        :return: The substitution_sku of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._substitution_sku

    @substitution_sku.setter
    def substitution_sku(self, substitution_sku):
        """Sets the substitution_sku of this DocumentLine.

        Exchanged Stock Keeping Unit (e.g. PZN)  # noqa: E501

        :param substitution_sku: The substitution_sku of this DocumentLine.  # noqa: E501
        :type: str
        """

        self._substitution_sku = substitution_sku

    @property
    def substitution_reason(self):
        """Gets the substitution_reason of this DocumentLine.  # noqa: E501

        Textual reason for the exchange  # noqa: E501

        :return: The substitution_reason of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._substitution_reason

    @substitution_reason.setter
    def substitution_reason(self, substitution_reason):
        """Sets the substitution_reason of this DocumentLine.

        Textual reason for the exchange  # noqa: E501

        :param substitution_reason: The substitution_reason of this DocumentLine.  # noqa: E501
        :type: str
        """

        self._substitution_reason = substitution_reason

    @property
    def prescription_type(self):
        """Gets the prescription_type of this DocumentLine.  # noqa: E501

        Contains the information about the type of prescription. (possible values: 0 = PrivateInsurance (in german: Privatrezept (blau), 1 = StatuatoryHealthInsurance (in german: GKV-Rezept (rosa), 2 = Recommendation (in german: Arztempfehlung / OTC Rezept (grün))  # noqa: E501

        :return: The prescription_type of this DocumentLine.  # noqa: E501
        :rtype: int
        """
        return self._prescription_type

    @prescription_type.setter
    def prescription_type(self, prescription_type):
        """Sets the prescription_type of this DocumentLine.

        Contains the information about the type of prescription. (possible values: 0 = PrivateInsurance (in german: Privatrezept (blau), 1 = StatuatoryHealthInsurance (in german: GKV-Rezept (rosa), 2 = Recommendation (in german: Arztempfehlung / OTC Rezept (grün))  # noqa: E501

        :param prescription_type: The prescription_type of this DocumentLine.  # noqa: E501
        :type: int
        """

        self._prescription_type = prescription_type

    @property
    def prescription_status(self):
        """Gets the prescription_status of this DocumentLine.  # noqa: E501

        Contains additional information about the status of statuatory health insurance prescription. (possible values: 0 = ZuzahlungsfreiMehrkostenpflichtig, 1 = ZuzahlungspflichtigMehrkostenpflichtig, 2 = Sprechstundenbedarf, 9 = RezeptNach27aSGBV, 10 = ZuzahlungsfreiMehrkostenfrei, 11 = ZuzahlungspflichtigMehrkostenfreiHilfsmittelfrei, 12 = ZuzahlungsfreiMehrkostenpflichtigHilfsmittelpflichtig, 13 = ZuzahlungspflichtigMehrkostenfreiHilfsmittelpflichtig, 99 = Unknown)  # noqa: E501

        :return: The prescription_status of this DocumentLine.  # noqa: E501
        :rtype: int
        """
        return self._prescription_status

    @prescription_status.setter
    def prescription_status(self, prescription_status):
        """Sets the prescription_status of this DocumentLine.

        Contains additional information about the status of statuatory health insurance prescription. (possible values: 0 = ZuzahlungsfreiMehrkostenpflichtig, 1 = ZuzahlungspflichtigMehrkostenpflichtig, 2 = Sprechstundenbedarf, 9 = RezeptNach27aSGBV, 10 = ZuzahlungsfreiMehrkostenfrei, 11 = ZuzahlungspflichtigMehrkostenfreiHilfsmittelfrei, 12 = ZuzahlungsfreiMehrkostenpflichtigHilfsmittelpflichtig, 13 = ZuzahlungspflichtigMehrkostenfreiHilfsmittelpflichtig, 99 = Unknown)  # noqa: E501

        :param prescription_status: The prescription_status of this DocumentLine.  # noqa: E501
        :type: int
        """

        self._prescription_status = prescription_status

    @property
    def copayment(self):
        """Gets the copayment of this DocumentLine.  # noqa: E501

        Insured persons pay ten percent of the sales price per pack for each prescription drug, a maximum of ten euros and a minimum of five euros. (in german: Zuzahlung)  # noqa: E501

        :return: The copayment of this DocumentLine.  # noqa: E501
        :rtype: float
        """
        return self._copayment

    @copayment.setter
    def copayment(self, copayment):
        """Sets the copayment of this DocumentLine.

        Insured persons pay ten percent of the sales price per pack for each prescription drug, a maximum of ten euros and a minimum of five euros. (in german: Zuzahlung)  # noqa: E501

        :param copayment: The copayment of this DocumentLine.  # noqa: E501
        :type: float
        """

        self._copayment = copayment

    @property
    def is_shipping_item(self):
        """Gets the is_shipping_item of this DocumentLine.  # noqa: E501

        Indicates whether this entry is the shipping costs  # noqa: E501

        :return: The is_shipping_item of this DocumentLine.  # noqa: E501
        :rtype: bool
        """
        return self._is_shipping_item

    @is_shipping_item.setter
    def is_shipping_item(self, is_shipping_item):
        """Sets the is_shipping_item of this DocumentLine.

        Indicates whether this entry is the shipping costs  # noqa: E501

        :param is_shipping_item: The is_shipping_item of this DocumentLine.  # noqa: E501
        :type: bool
        """

        self._is_shipping_item = is_shipping_item

    @property
    def abda_artikelstamm(self):
        """Gets the abda_artikelstamm of this DocumentLine.  # noqa: E501


        :return: The abda_artikelstamm of this DocumentLine.  # noqa: E501
        :rtype: AbdaArtikelstamm
        """
        return self._abda_artikelstamm

    @abda_artikelstamm.setter
    def abda_artikelstamm(self, abda_artikelstamm):
        """Sets the abda_artikelstamm of this DocumentLine.


        :param abda_artikelstamm: The abda_artikelstamm of this DocumentLine.  # noqa: E501
        :type: AbdaArtikelstamm
        """

        self._abda_artikelstamm = abda_artikelstamm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
