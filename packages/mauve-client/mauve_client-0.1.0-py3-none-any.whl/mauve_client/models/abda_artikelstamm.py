# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbdaArtikelstamm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'verschreibungspflicht': 'bool',
        'apothekenpflicht': 'bool',
        'betaeubungsmittel': 'bool',
        'lagertemperatur_minimal_c': 'int',
        'lagertemperatur_maximal_c': 'int',
        'kuehlkette': 'bool',
        'packungsgroesse': 'str',
        'normgroesse': 'str'
    }

    attribute_map = {
        'verschreibungspflicht': 'verschreibungspflicht',
        'apothekenpflicht': 'apothekenpflicht',
        'betaeubungsmittel': 'betaeubungsmittel',
        'lagertemperatur_minimal_c': 'lagertemperaturMinimalC',
        'lagertemperatur_maximal_c': 'lagertemperaturMaximalC',
        'kuehlkette': 'kuehlkette',
        'packungsgroesse': 'packungsgroesse',
        'normgroesse': 'normgroesse'
    }

    def __init__(self, verschreibungspflicht=None, apothekenpflicht=None, betaeubungsmittel=None, lagertemperatur_minimal_c=None, lagertemperatur_maximal_c=None, kuehlkette=None, packungsgroesse=None, normgroesse=None):  # noqa: E501
        """AbdaArtikelstamm - a model defined in Swagger"""  # noqa: E501
        self._verschreibungspflicht = None
        self._apothekenpflicht = None
        self._betaeubungsmittel = None
        self._lagertemperatur_minimal_c = None
        self._lagertemperatur_maximal_c = None
        self._kuehlkette = None
        self._packungsgroesse = None
        self._normgroesse = None
        self.discriminator = None
        if verschreibungspflicht is not None:
            self.verschreibungspflicht = verschreibungspflicht
        if apothekenpflicht is not None:
            self.apothekenpflicht = apothekenpflicht
        if betaeubungsmittel is not None:
            self.betaeubungsmittel = betaeubungsmittel
        if lagertemperatur_minimal_c is not None:
            self.lagertemperatur_minimal_c = lagertemperatur_minimal_c
        if lagertemperatur_maximal_c is not None:
            self.lagertemperatur_maximal_c = lagertemperatur_maximal_c
        if kuehlkette is not None:
            self.kuehlkette = kuehlkette
        if packungsgroesse is not None:
            self.packungsgroesse = packungsgroesse
        if normgroesse is not None:
            self.normgroesse = normgroesse

    @property
    def verschreibungspflicht(self):
        """Gets the verschreibungspflicht of this AbdaArtikelstamm.  # noqa: E501


        :return: The verschreibungspflicht of this AbdaArtikelstamm.  # noqa: E501
        :rtype: bool
        """
        return self._verschreibungspflicht

    @verschreibungspflicht.setter
    def verschreibungspflicht(self, verschreibungspflicht):
        """Sets the verschreibungspflicht of this AbdaArtikelstamm.


        :param verschreibungspflicht: The verschreibungspflicht of this AbdaArtikelstamm.  # noqa: E501
        :type: bool
        """

        self._verschreibungspflicht = verschreibungspflicht

    @property
    def apothekenpflicht(self):
        """Gets the apothekenpflicht of this AbdaArtikelstamm.  # noqa: E501


        :return: The apothekenpflicht of this AbdaArtikelstamm.  # noqa: E501
        :rtype: bool
        """
        return self._apothekenpflicht

    @apothekenpflicht.setter
    def apothekenpflicht(self, apothekenpflicht):
        """Sets the apothekenpflicht of this AbdaArtikelstamm.


        :param apothekenpflicht: The apothekenpflicht of this AbdaArtikelstamm.  # noqa: E501
        :type: bool
        """

        self._apothekenpflicht = apothekenpflicht

    @property
    def betaeubungsmittel(self):
        """Gets the betaeubungsmittel of this AbdaArtikelstamm.  # noqa: E501


        :return: The betaeubungsmittel of this AbdaArtikelstamm.  # noqa: E501
        :rtype: bool
        """
        return self._betaeubungsmittel

    @betaeubungsmittel.setter
    def betaeubungsmittel(self, betaeubungsmittel):
        """Sets the betaeubungsmittel of this AbdaArtikelstamm.


        :param betaeubungsmittel: The betaeubungsmittel of this AbdaArtikelstamm.  # noqa: E501
        :type: bool
        """

        self._betaeubungsmittel = betaeubungsmittel

    @property
    def lagertemperatur_minimal_c(self):
        """Gets the lagertemperatur_minimal_c of this AbdaArtikelstamm.  # noqa: E501


        :return: The lagertemperatur_minimal_c of this AbdaArtikelstamm.  # noqa: E501
        :rtype: int
        """
        return self._lagertemperatur_minimal_c

    @lagertemperatur_minimal_c.setter
    def lagertemperatur_minimal_c(self, lagertemperatur_minimal_c):
        """Sets the lagertemperatur_minimal_c of this AbdaArtikelstamm.


        :param lagertemperatur_minimal_c: The lagertemperatur_minimal_c of this AbdaArtikelstamm.  # noqa: E501
        :type: int
        """

        self._lagertemperatur_minimal_c = lagertemperatur_minimal_c

    @property
    def lagertemperatur_maximal_c(self):
        """Gets the lagertemperatur_maximal_c of this AbdaArtikelstamm.  # noqa: E501


        :return: The lagertemperatur_maximal_c of this AbdaArtikelstamm.  # noqa: E501
        :rtype: int
        """
        return self._lagertemperatur_maximal_c

    @lagertemperatur_maximal_c.setter
    def lagertemperatur_maximal_c(self, lagertemperatur_maximal_c):
        """Sets the lagertemperatur_maximal_c of this AbdaArtikelstamm.


        :param lagertemperatur_maximal_c: The lagertemperatur_maximal_c of this AbdaArtikelstamm.  # noqa: E501
        :type: int
        """

        self._lagertemperatur_maximal_c = lagertemperatur_maximal_c

    @property
    def kuehlkette(self):
        """Gets the kuehlkette of this AbdaArtikelstamm.  # noqa: E501


        :return: The kuehlkette of this AbdaArtikelstamm.  # noqa: E501
        :rtype: bool
        """
        return self._kuehlkette

    @kuehlkette.setter
    def kuehlkette(self, kuehlkette):
        """Sets the kuehlkette of this AbdaArtikelstamm.


        :param kuehlkette: The kuehlkette of this AbdaArtikelstamm.  # noqa: E501
        :type: bool
        """

        self._kuehlkette = kuehlkette

    @property
    def packungsgroesse(self):
        """Gets the packungsgroesse of this AbdaArtikelstamm.  # noqa: E501


        :return: The packungsgroesse of this AbdaArtikelstamm.  # noqa: E501
        :rtype: str
        """
        return self._packungsgroesse

    @packungsgroesse.setter
    def packungsgroesse(self, packungsgroesse):
        """Sets the packungsgroesse of this AbdaArtikelstamm.


        :param packungsgroesse: The packungsgroesse of this AbdaArtikelstamm.  # noqa: E501
        :type: str
        """

        self._packungsgroesse = packungsgroesse

    @property
    def normgroesse(self):
        """Gets the normgroesse of this AbdaArtikelstamm.  # noqa: E501


        :return: The normgroesse of this AbdaArtikelstamm.  # noqa: E501
        :rtype: str
        """
        return self._normgroesse

    @normgroesse.setter
    def normgroesse(self, normgroesse):
        """Sets the normgroesse of this AbdaArtikelstamm.


        :param normgroesse: The normgroesse of this AbdaArtikelstamm.  # noqa: E501
        :type: str
        """

        self._normgroesse = normgroesse

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbdaArtikelstamm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbdaArtikelstamm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
