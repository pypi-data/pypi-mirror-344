# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateDocumentParcelLabelRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_number': 'str',
        'parcel_number': 'str',
        '_date': 'datetime',
        'weight': 'float'
    }

    attribute_map = {
        'document_number': 'documentNumber',
        'parcel_number': 'parcelNumber',
        '_date': 'date',
        'weight': 'weight'
    }

    def __init__(self, document_number=None, parcel_number=None, _date=None, weight=None):  # noqa: E501
        """CreateDocumentParcelLabelRequest - a model defined in Swagger"""  # noqa: E501
        self._document_number = None
        self._parcel_number = None
        self.__date = None
        self._weight = None
        self.discriminator = None
        self.document_number = document_number
        self.parcel_number = parcel_number
        if _date is not None:
            self._date = _date
        if weight is not None:
            self.weight = weight

    @property
    def document_number(self):
        """Gets the document_number of this CreateDocumentParcelLabelRequest.  # noqa: E501

        Alphanumerical unique identifier of a document (always end with \"-B\") (in german: Beleg-Nr.)  # noqa: E501

        :return: The document_number of this CreateDocumentParcelLabelRequest.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this CreateDocumentParcelLabelRequest.

        Alphanumerical unique identifier of a document (always end with \"-B\") (in german: Beleg-Nr.)  # noqa: E501

        :param document_number: The document_number of this CreateDocumentParcelLabelRequest.  # noqa: E501
        :type: str
        """
        if document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")  # noqa: E501

        self._document_number = document_number

    @property
    def parcel_number(self):
        """Gets the parcel_number of this CreateDocumentParcelLabelRequest.  # noqa: E501


        :return: The parcel_number of this CreateDocumentParcelLabelRequest.  # noqa: E501
        :rtype: str
        """
        return self._parcel_number

    @parcel_number.setter
    def parcel_number(self, parcel_number):
        """Sets the parcel_number of this CreateDocumentParcelLabelRequest.


        :param parcel_number: The parcel_number of this CreateDocumentParcelLabelRequest.  # noqa: E501
        :type: str
        """
        if parcel_number is None:
            raise ValueError("Invalid value for `parcel_number`, must not be `None`")  # noqa: E501

        self._parcel_number = parcel_number

    @property
    def _date(self):
        """Gets the _date of this CreateDocumentParcelLabelRequest.  # noqa: E501

        The date when the parcel label was printed (if empty the current time willl be taken)  # noqa: E501

        :return: The _date of this CreateDocumentParcelLabelRequest.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CreateDocumentParcelLabelRequest.

        The date when the parcel label was printed (if empty the current time willl be taken)  # noqa: E501

        :param _date: The _date of this CreateDocumentParcelLabelRequest.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def weight(self):
        """Gets the weight of this CreateDocumentParcelLabelRequest.  # noqa: E501

        The weight of the package in kg  # noqa: E501

        :return: The weight of this CreateDocumentParcelLabelRequest.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this CreateDocumentParcelLabelRequest.

        The weight of the package in kg  # noqa: E501

        :param weight: The weight of this CreateDocumentParcelLabelRequest.  # noqa: E501
        :type: float
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDocumentParcelLabelRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDocumentParcelLabelRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
