# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchProductsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include': 'str',
        'shop_id': 'int',
        'offset': 'int',
        'limit': 'int',
        'active_state': 'str',
        'abda_artikelstamm_states': 'str',
        'barcode': 'str'
    }

    attribute_map = {
        'include': 'include',
        'shop_id': 'shopId',
        'offset': 'offset',
        'limit': 'limit',
        'active_state': 'activeState',
        'abda_artikelstamm_states': 'abdaArtikelstammStates',
        'barcode': 'barcode'
    }

    def __init__(self, include=None, shop_id=None, offset=None, limit=None, active_state=None, abda_artikelstamm_states=None, barcode=None):  # noqa: E501
        """SearchProductsRequest - a model defined in Swagger"""  # noqa: E501
        self._include = None
        self._shop_id = None
        self._offset = None
        self._limit = None
        self._active_state = None
        self._abda_artikelstamm_states = None
        self._barcode = None
        self.discriminator = None
        if include is not None:
            self.include = include
        if shop_id is not None:
            self.shop_id = shop_id
        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if active_state is not None:
            self.active_state = active_state
        if abda_artikelstamm_states is not None:
            self.abda_artikelstamm_states = abda_artikelstamm_states
        if barcode is not None:
            self.barcode = barcode

    @property
    def include(self):
        """Gets the include of this SearchProductsRequest.  # noqa: E501

        Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").  # noqa: E501

        :return: The include of this SearchProductsRequest.  # noqa: E501
        :rtype: str
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this SearchProductsRequest.

        Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").  # noqa: E501

        :param include: The include of this SearchProductsRequest.  # noqa: E501
        :type: str
        """

        self._include = include

    @property
    def shop_id(self):
        """Gets the shop_id of this SearchProductsRequest.  # noqa: E501

        The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)  # noqa: E501

        :return: The shop_id of this SearchProductsRequest.  # noqa: E501
        :rtype: int
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this SearchProductsRequest.

        The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)  # noqa: E501

        :param shop_id: The shop_id of this SearchProductsRequest.  # noqa: E501
        :type: int
        """

        self._shop_id = shop_id

    @property
    def offset(self):
        """Gets the offset of this SearchProductsRequest.  # noqa: E501

        The (zero-based) offset of the first item in the collection to return (default: 0)  # noqa: E501

        :return: The offset of this SearchProductsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchProductsRequest.

        The (zero-based) offset of the first item in the collection to return (default: 0)  # noqa: E501

        :param offset: The offset of this SearchProductsRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this SearchProductsRequest.  # noqa: E501

        The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)  # noqa: E501

        :return: The limit of this SearchProductsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchProductsRequest.

        The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)  # noqa: E501

        :param limit: The limit of this SearchProductsRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def active_state(self):
        """Gets the active_state of this SearchProductsRequest.  # noqa: E501

        Return only products with the specified active state  # noqa: E501

        :return: The active_state of this SearchProductsRequest.  # noqa: E501
        :rtype: str
        """
        return self._active_state

    @active_state.setter
    def active_state(self, active_state):
        """Sets the active_state of this SearchProductsRequest.

        Return only products with the specified active state  # noqa: E501

        :param active_state: The active_state of this SearchProductsRequest.  # noqa: E501
        :type: str
        """

        self._active_state = active_state

    @property
    def abda_artikelstamm_states(self):
        """Gets the abda_artikelstamm_states of this SearchProductsRequest.  # noqa: E501

        Return only products which match all specified AbdaArtikelstamm states provided in comma-separated list (possible values: Verschreibungspflicht, OTC)  # noqa: E501

        :return: The abda_artikelstamm_states of this SearchProductsRequest.  # noqa: E501
        :rtype: str
        """
        return self._abda_artikelstamm_states

    @abda_artikelstamm_states.setter
    def abda_artikelstamm_states(self, abda_artikelstamm_states):
        """Sets the abda_artikelstamm_states of this SearchProductsRequest.

        Return only products which match all specified AbdaArtikelstamm states provided in comma-separated list (possible values: Verschreibungspflicht, OTC)  # noqa: E501

        :param abda_artikelstamm_states: The abda_artikelstamm_states of this SearchProductsRequest.  # noqa: E501
        :type: str
        """

        self._abda_artikelstamm_states = abda_artikelstamm_states

    @property
    def barcode(self):
        """Gets the barcode of this SearchProductsRequest.  # noqa: E501

        An alphanumeric code to identify the product (e.g. EAN, GTIN, ASIN, IBAN)  # noqa: E501

        :return: The barcode of this SearchProductsRequest.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this SearchProductsRequest.

        An alphanumeric code to identify the product (e.g. EAN, GTIN, ASIN, IBAN)  # noqa: E501

        :param barcode: The barcode of this SearchProductsRequest.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchProductsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchProductsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
