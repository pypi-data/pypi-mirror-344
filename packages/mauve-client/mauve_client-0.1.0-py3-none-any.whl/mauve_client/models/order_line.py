# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'str',
        'name': 'str',
        'quantity': 'float',
        'vat_rate': 'float',
        'gross_price': 'float',
        'discount_percentage': 'float',
        'comment': 'str',
        'e_prescription_task_id': 'str',
        'e_prescription_access_code': 'str'
    }

    attribute_map = {
        'sku': 'sku',
        'name': 'name',
        'quantity': 'quantity',
        'vat_rate': 'vatRate',
        'gross_price': 'grossPrice',
        'discount_percentage': 'discountPercentage',
        'comment': 'comment',
        'e_prescription_task_id': 'ePrescriptionTaskId',
        'e_prescription_access_code': 'ePrescriptionAccessCode'
    }

    def __init__(self, sku=None, name=None, quantity=None, vat_rate=None, gross_price=None, discount_percentage=None, comment=None, e_prescription_task_id=None, e_prescription_access_code=None):  # noqa: E501
        """OrderLine - a model defined in Swagger"""  # noqa: E501
        self._sku = None
        self._name = None
        self._quantity = None
        self._vat_rate = None
        self._gross_price = None
        self._discount_percentage = None
        self._comment = None
        self._e_prescription_task_id = None
        self._e_prescription_access_code = None
        self.discriminator = None
        self.sku = sku
        self.name = name
        self.quantity = quantity
        self.vat_rate = vat_rate
        if gross_price is not None:
            self.gross_price = gross_price
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if comment is not None:
            self.comment = comment
        if e_prescription_task_id is not None:
            self.e_prescription_task_id = e_prescription_task_id
        if e_prescription_access_code is not None:
            self.e_prescription_access_code = e_prescription_access_code

    @property
    def sku(self):
        """Gets the sku of this OrderLine.  # noqa: E501

        Stock Keeping Unit (e.g. PZN)  # noqa: E501

        :return: The sku of this OrderLine.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this OrderLine.

        Stock Keeping Unit (e.g. PZN)  # noqa: E501

        :param sku: The sku of this OrderLine.  # noqa: E501
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def name(self):
        """Gets the name of this OrderLine.  # noqa: E501

        The product name  # noqa: E501

        :return: The name of this OrderLine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderLine.

        The product name  # noqa: E501

        :param name: The name of this OrderLine.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this OrderLine.  # noqa: E501

        Product's quantity for the order line  # noqa: E501

        :return: The quantity of this OrderLine.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderLine.

        Product's quantity for the order line  # noqa: E501

        :param quantity: The quantity of this OrderLine.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def vat_rate(self):
        """Gets the vat_rate of this OrderLine.  # noqa: E501

        Value added tax rate applied on product price  # noqa: E501

        :return: The vat_rate of this OrderLine.  # noqa: E501
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this OrderLine.

        Value added tax rate applied on product price  # noqa: E501

        :param vat_rate: The vat_rate of this OrderLine.  # noqa: E501
        :type: float
        """
        if vat_rate is None:
            raise ValueError("Invalid value for `vat_rate`, must not be `None`")  # noqa: E501

        self._vat_rate = vat_rate

    @property
    def gross_price(self):
        """Gets the gross_price of this OrderLine.  # noqa: E501

        Order line's gross price  # noqa: E501

        :return: The gross_price of this OrderLine.  # noqa: E501
        :rtype: float
        """
        return self._gross_price

    @gross_price.setter
    def gross_price(self, gross_price):
        """Sets the gross_price of this OrderLine.

        Order line's gross price  # noqa: E501

        :param gross_price: The gross_price of this OrderLine.  # noqa: E501
        :type: float
        """

        self._gross_price = gross_price

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this OrderLine.  # noqa: E501

        Order line's discount rate in percentage  # noqa: E501

        :return: The discount_percentage of this OrderLine.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this OrderLine.

        Order line's discount rate in percentage  # noqa: E501

        :param discount_percentage: The discount_percentage of this OrderLine.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def comment(self):
        """Gets the comment of this OrderLine.  # noqa: E501


        :return: The comment of this OrderLine.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this OrderLine.


        :param comment: The comment of this OrderLine.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def e_prescription_task_id(self):
        """Gets the e_prescription_task_id of this OrderLine.  # noqa: E501

        Task-ID of an e-prescription  # noqa: E501

        :return: The e_prescription_task_id of this OrderLine.  # noqa: E501
        :rtype: str
        """
        return self._e_prescription_task_id

    @e_prescription_task_id.setter
    def e_prescription_task_id(self, e_prescription_task_id):
        """Sets the e_prescription_task_id of this OrderLine.

        Task-ID of an e-prescription  # noqa: E501

        :param e_prescription_task_id: The e_prescription_task_id of this OrderLine.  # noqa: E501
        :type: str
        """

        self._e_prescription_task_id = e_prescription_task_id

    @property
    def e_prescription_access_code(self):
        """Gets the e_prescription_access_code of this OrderLine.  # noqa: E501

        AccessCode of an e-prescription  # noqa: E501

        :return: The e_prescription_access_code of this OrderLine.  # noqa: E501
        :rtype: str
        """
        return self._e_prescription_access_code

    @e_prescription_access_code.setter
    def e_prescription_access_code(self, e_prescription_access_code):
        """Sets the e_prescription_access_code of this OrderLine.

        AccessCode of an e-prescription  # noqa: E501

        :param e_prescription_access_code: The e_prescription_access_code of this OrderLine.  # noqa: E501
        :type: str
        """

        self._e_prescription_access_code = e_prescription_access_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
