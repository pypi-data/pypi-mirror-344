# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PharmacyWholesalerAvailability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pharmacy_wholesaler': 'str',
        'product_availability': 'str'
    }

    attribute_map = {
        'pharmacy_wholesaler': 'pharmacyWholesaler',
        'product_availability': 'productAvailability'
    }

    def __init__(self, pharmacy_wholesaler=None, product_availability=None):  # noqa: E501
        """PharmacyWholesalerAvailability - a model defined in Swagger"""  # noqa: E501
        self._pharmacy_wholesaler = None
        self._product_availability = None
        self.discriminator = None
        if pharmacy_wholesaler is not None:
            self.pharmacy_wholesaler = pharmacy_wholesaler
        if product_availability is not None:
            self.product_availability = product_availability

    @property
    def pharmacy_wholesaler(self):
        """Gets the pharmacy_wholesaler of this PharmacyWholesalerAvailability.  # noqa: E501

        Name of the pharmacy wholesaler (e.g. ALLIANCE, PHOENIX, GEHE, SANACORP, NOWEDA)  # noqa: E501

        :return: The pharmacy_wholesaler of this PharmacyWholesalerAvailability.  # noqa: E501
        :rtype: str
        """
        return self._pharmacy_wholesaler

    @pharmacy_wholesaler.setter
    def pharmacy_wholesaler(self, pharmacy_wholesaler):
        """Sets the pharmacy_wholesaler of this PharmacyWholesalerAvailability.

        Name of the pharmacy wholesaler (e.g. ALLIANCE, PHOENIX, GEHE, SANACORP, NOWEDA)  # noqa: E501

        :param pharmacy_wholesaler: The pharmacy_wholesaler of this PharmacyWholesalerAvailability.  # noqa: E501
        :type: str
        """

        self._pharmacy_wholesaler = pharmacy_wholesaler

    @property
    def product_availability(self):
        """Gets the product_availability of this PharmacyWholesalerAvailability.  # noqa: E501

        The availibity status (list of possible values: Available, ConditionallyAvailable)  # noqa: E501

        :return: The product_availability of this PharmacyWholesalerAvailability.  # noqa: E501
        :rtype: str
        """
        return self._product_availability

    @product_availability.setter
    def product_availability(self, product_availability):
        """Sets the product_availability of this PharmacyWholesalerAvailability.

        The availibity status (list of possible values: Available, ConditionallyAvailable)  # noqa: E501

        :param product_availability: The product_availability of this PharmacyWholesalerAvailability.  # noqa: E501
        :type: str
        """

        self._product_availability = product_availability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PharmacyWholesalerAvailability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PharmacyWholesalerAvailability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
