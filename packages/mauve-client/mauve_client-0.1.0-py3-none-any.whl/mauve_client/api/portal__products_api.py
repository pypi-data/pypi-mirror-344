# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mauve_client.api_client import ApiClient


class PortalProductsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_portal_prices_request_participantprices_sku_delete(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Delete all prices of a specific product of a specific portal participant.  # noqa: E501

        Delete all prices of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_portal_prices_request_participantprices_sku_delete(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_portal_prices_request_participantprices_sku_delete_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_portal_prices_request_participantprices_sku_delete_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
            return data

    def delete_portal_prices_request_participantprices_sku_delete_with_http_info(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Delete all prices of a specific product of a specific portal participant.  # noqa: E501

        Delete all prices of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_portal_prices_request_participantprices_sku_delete_with_http_info(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'sku']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_portal_prices_request_participantprices_sku_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `delete_portal_prices_request_participantprices_sku_delete`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `delete_portal_prices_request_participantprices_sku_delete`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `delete_portal_prices_request_participantprices_sku_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/prices/{Sku}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_availibity_request_participantavailabilities_sku_get(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Retrieve the availability information of a specific product of a specific portal participant.  # noqa: E501

        Retrieve the availability information of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_availibity_request_participantavailabilities_sku_get(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetPortalAvailibityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_availibity_request_participantavailabilities_sku_get_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_availibity_request_participantavailabilities_sku_get_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
            return data

    def get_portal_availibity_request_participantavailabilities_sku_get_with_http_info(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Retrieve the availability information of a specific product of a specific portal participant.  # noqa: E501

        Retrieve the availability information of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_availibity_request_participantavailabilities_sku_get_with_http_info(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetPortalAvailibityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'sku']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_availibity_request_participantavailabilities_sku_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_portal_availibity_request_participantavailabilities_sku_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `get_portal_availibity_request_participantavailabilities_sku_get`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `get_portal_availibity_request_participantavailabilities_sku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/availabilities/{Sku}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPortalAvailibityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_price_fallback_request_participantprices_fallback_sku_get(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Retrieve the fallback price of a specific product of a specific portal participant.  # noqa: E501

        Retrieve the fallback price of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_price_fallback_request_participantprices_fallback_sku_get(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetPortalPriceFallbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_price_fallback_request_participantprices_fallback_sku_get_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_price_fallback_request_participantprices_fallback_sku_get_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
            return data

    def get_portal_price_fallback_request_participantprices_fallback_sku_get_with_http_info(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Retrieve the fallback price of a specific product of a specific portal participant.  # noqa: E501

        Retrieve the fallback price of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_price_fallback_request_participantprices_fallback_sku_get_with_http_info(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetPortalPriceFallbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'sku']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_price_fallback_request_participantprices_fallback_sku_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_portal_price_fallback_request_participantprices_fallback_sku_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `get_portal_price_fallback_request_participantprices_fallback_sku_get`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `get_portal_price_fallback_request_participantprices_fallback_sku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/prices_fallback/{Sku}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPortalPriceFallbackResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_price_request_participantprices_sku_get(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Retrieve the price of a specific product of a specific portal participant.  # noqa: E501

        Retrieve the price of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_price_request_participantprices_sku_get(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetPortalPriceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_price_request_participantprices_sku_get_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_price_request_participantprices_sku_get_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
            return data

    def get_portal_price_request_participantprices_sku_get_with_http_info(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Retrieve the price of a specific product of a specific portal participant.  # noqa: E501

        Retrieve the price of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_price_request_participantprices_sku_get_with_http_info(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetPortalPriceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'sku']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_price_request_participantprices_sku_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_portal_price_request_participantprices_sku_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `get_portal_price_request_participantprices_sku_get`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `get_portal_price_request_participantprices_sku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/prices/{Sku}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPortalPriceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_stock_request_participantstocks_sku_get(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Retrieve the stock of a specific product of a specific portal participant.  # noqa: E501

        Retrieve the stock of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_stock_request_participantstocks_sku_get(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetPortalStockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_stock_request_participantstocks_sku_get_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_stock_request_participantstocks_sku_get_with_http_info(accept, participant, sku, **kwargs)  # noqa: E501
            return data

    def get_portal_stock_request_participantstocks_sku_get_with_http_info(self, accept, participant, sku, **kwargs):  # noqa: E501
        """Retrieve the stock of a specific product of a specific portal participant.  # noqa: E501

        Retrieve the stock of a specific product of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_stock_request_participantstocks_sku_get_with_http_info(accept, participant, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetPortalStockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'sku']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_stock_request_participantstocks_sku_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_portal_stock_request_participantstocks_sku_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `get_portal_stock_request_participantstocks_sku_get`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `get_portal_stock_request_participantstocks_sku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/stocks/{Sku}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPortalStockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_portal_availabilities_request_participantavailabilities_get(self, accept, participant, **kwargs):  # noqa: E501
        """Retrieve a list of availability informations of a specific portal participant.  # noqa: E501

        Retrieve a list of availability informations of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_portal_availabilities_request_participantavailabilities_get(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :return: SearchPortalAvailabilitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_portal_availabilities_request_participantavailabilities_get_with_http_info(accept, participant, **kwargs)  # noqa: E501
        else:
            (data) = self.search_portal_availabilities_request_participantavailabilities_get_with_http_info(accept, participant, **kwargs)  # noqa: E501
            return data

    def search_portal_availabilities_request_participantavailabilities_get_with_http_info(self, accept, participant, **kwargs):  # noqa: E501
        """Retrieve a list of availability informations of a specific portal participant.  # noqa: E501

        Retrieve a list of availability informations of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_portal_availabilities_request_participantavailabilities_get_with_http_info(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :return: SearchPortalAvailabilitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_portal_availabilities_request_participantavailabilities_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `search_portal_availabilities_request_participantavailabilities_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `search_portal_availabilities_request_participantavailabilities_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/availabilities/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchPortalAvailabilitiesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_portal_prices_fallback_request_participantprices_fallback_get(self, accept, participant, **kwargs):  # noqa: E501
        """Retrieve a list of fallback prices of a specific portal participant.  # noqa: E501

        Retrieve a list of fallback prices of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_portal_prices_fallback_request_participantprices_fallback_get(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :return: SearchPortalPricesFallbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_portal_prices_fallback_request_participantprices_fallback_get_with_http_info(accept, participant, **kwargs)  # noqa: E501
        else:
            (data) = self.search_portal_prices_fallback_request_participantprices_fallback_get_with_http_info(accept, participant, **kwargs)  # noqa: E501
            return data

    def search_portal_prices_fallback_request_participantprices_fallback_get_with_http_info(self, accept, participant, **kwargs):  # noqa: E501
        """Retrieve a list of fallback prices of a specific portal participant.  # noqa: E501

        Retrieve a list of fallback prices of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_portal_prices_fallback_request_participantprices_fallback_get_with_http_info(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :return: SearchPortalPricesFallbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_portal_prices_fallback_request_participantprices_fallback_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `search_portal_prices_fallback_request_participantprices_fallback_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `search_portal_prices_fallback_request_participantprices_fallback_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/prices_fallback/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchPortalPricesFallbackResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_portal_prices_request_participantprices_get(self, accept, participant, **kwargs):  # noqa: E501
        """Retrieve a list of prices of a specific portal participant.  # noqa: E501

        Retrieve a list of prices of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_portal_prices_request_participantprices_get(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :return: SearchPortalPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_portal_prices_request_participantprices_get_with_http_info(accept, participant, **kwargs)  # noqa: E501
        else:
            (data) = self.search_portal_prices_request_participantprices_get_with_http_info(accept, participant, **kwargs)  # noqa: E501
            return data

    def search_portal_prices_request_participantprices_get_with_http_info(self, accept, participant, **kwargs):  # noqa: E501
        """Retrieve a list of prices of a specific portal participant.  # noqa: E501

        Retrieve a list of prices of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_portal_prices_request_participantprices_get_with_http_info(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :return: SearchPortalPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_portal_prices_request_participantprices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `search_portal_prices_request_participantprices_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `search_portal_prices_request_participantprices_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/prices/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchPortalPricesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_portal_stocks_request_participantstocks_get(self, accept, participant, **kwargs):  # noqa: E501
        """Retrieve a list of stocks of a specific portal participant.  # noqa: E501

        Retrieve a list of stocks of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_portal_stocks_request_participantstocks_get(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :return: SearchPortalStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_portal_stocks_request_participantstocks_get_with_http_info(accept, participant, **kwargs)  # noqa: E501
        else:
            (data) = self.search_portal_stocks_request_participantstocks_get_with_http_info(accept, participant, **kwargs)  # noqa: E501
            return data

    def search_portal_stocks_request_participantstocks_get_with_http_info(self, accept, participant, **kwargs):  # noqa: E501
        """Retrieve a list of stocks of a specific portal participant.  # noqa: E501

        Retrieve a list of stocks of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_portal_stocks_request_participantstocks_get_with_http_info(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :return: SearchPortalStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_portal_stocks_request_participantstocks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `search_portal_stocks_request_participantstocks_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `search_portal_stocks_request_participantstocks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/stocks/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchPortalStocksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_portal_prices_request_participantprices_create(self, accept, participant, **kwargs):  # noqa: E501
        """Update or create prices of a specific portal participant.  # noqa: E501

        Update or create prices of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portal_prices_request_participantprices_create(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param UpdatePortalPricesRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_portal_prices_request_participantprices_create_with_http_info(accept, participant, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portal_prices_request_participantprices_create_with_http_info(accept, participant, **kwargs)  # noqa: E501
            return data

    def update_portal_prices_request_participantprices_create_with_http_info(self, accept, participant, **kwargs):  # noqa: E501
        """Update or create prices of a specific portal participant.  # noqa: E501

        Update or create prices of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portal_prices_request_participantprices_create_with_http_info(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param UpdatePortalPricesRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_portal_prices_request_participantprices_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `update_portal_prices_request_participantprices_create`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `update_portal_prices_request_participantprices_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/prices/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_portal_stocks_request_participantstocks_create(self, accept, participant, **kwargs):  # noqa: E501
        """Update stocks of a specific portal participant.  # noqa: E501

        Update stocks of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portal_stocks_request_participantstocks_create(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param UpdatePortalStocksRequest body:
        :param bool replace: ...
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_portal_stocks_request_participantstocks_create_with_http_info(accept, participant, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portal_stocks_request_participantstocks_create_with_http_info(accept, participant, **kwargs)  # noqa: E501
            return data

    def update_portal_stocks_request_participantstocks_create_with_http_info(self, accept, participant, **kwargs):  # noqa: E501
        """Update stocks of a specific portal participant.  # noqa: E501

        Update stocks of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portal_stocks_request_participantstocks_create_with_http_info(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param UpdatePortalStocksRequest body:
        :param bool replace: ...
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'body', 'replace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_portal_stocks_request_participantstocks_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `update_portal_stocks_request_participantstocks_create`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `update_portal_stocks_request_participantstocks_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501

        query_params = []
        if 'replace' in params:
            query_params.append(('Replace', params['replace']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/stocks/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
