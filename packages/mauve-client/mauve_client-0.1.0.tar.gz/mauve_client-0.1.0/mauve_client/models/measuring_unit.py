# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeasuringUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'abbreviation': 'str',
        'base_amount': 'float'
    }

    attribute_map = {
        'name': 'name',
        'abbreviation': 'abbreviation',
        'base_amount': 'baseAmount'
    }

    def __init__(self, name=None, abbreviation=None, base_amount=None):  # noqa: E501
        """MeasuringUnit - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._abbreviation = None
        self._base_amount = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if base_amount is not None:
            self.base_amount = base_amount

    @property
    def name(self):
        """Gets the name of this MeasuringUnit.  # noqa: E501

        Name of the measuring unit (e.g. gram, kilogram, liter, centimeter, meter)  # noqa: E501

        :return: The name of this MeasuringUnit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MeasuringUnit.

        Name of the measuring unit (e.g. gram, kilogram, liter, centimeter, meter)  # noqa: E501

        :param name: The name of this MeasuringUnit.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this MeasuringUnit.  # noqa: E501

        Abbreviation of the measuring unit (e.g. g, kg, l, cm, m)  # noqa: E501

        :return: The abbreviation of this MeasuringUnit.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this MeasuringUnit.

        Abbreviation of the measuring unit (e.g. g, kg, l, cm, m)  # noqa: E501

        :param abbreviation: The abbreviation of this MeasuringUnit.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def base_amount(self):
        """Gets the base_amount of this MeasuringUnit.  # noqa: E501

        Base amount for base price calculation (e.g. 100 => 1,99€ / <b>100</b> ml)  # noqa: E501

        :return: The base_amount of this MeasuringUnit.  # noqa: E501
        :rtype: float
        """
        return self._base_amount

    @base_amount.setter
    def base_amount(self, base_amount):
        """Sets the base_amount of this MeasuringUnit.

        Base amount for base price calculation (e.g. 100 => 1,99€ / <b>100</b> ml)  # noqa: E501

        :param base_amount: The base_amount of this MeasuringUnit.  # noqa: E501
        :type: float
        """

        self._base_amount = base_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeasuringUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeasuringUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
