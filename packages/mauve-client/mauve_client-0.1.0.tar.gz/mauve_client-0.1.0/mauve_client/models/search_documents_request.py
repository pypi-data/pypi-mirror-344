# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchDocumentsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_number': 'str',
        'order_number': 'str',
        'customer_number': 'str',
        'document_type_ids': 'list[int]',
        'document_types': 'list[str]',
        'shipment_method_ids': 'list[int]',
        'shipment_methods': 'list[str]',
        'document_date_min': 'datetime',
        'document_date_max': 'datetime',
        'include': 'str',
        'offset': 'int',
        'limit': 'int'
    }

    attribute_map = {
        'document_number': 'documentNumber',
        'order_number': 'orderNumber',
        'customer_number': 'customerNumber',
        'document_type_ids': 'documentTypeIds',
        'document_types': 'documentTypes',
        'shipment_method_ids': 'shipmentMethodIds',
        'shipment_methods': 'shipmentMethods',
        'document_date_min': 'documentDateMin',
        'document_date_max': 'documentDateMax',
        'include': 'include',
        'offset': 'offset',
        'limit': 'limit'
    }

    def __init__(self, document_number=None, order_number=None, customer_number=None, document_type_ids=None, document_types=None, shipment_method_ids=None, shipment_methods=None, document_date_min=None, document_date_max=None, include=None, offset=None, limit=None):  # noqa: E501
        """SearchDocumentsRequest - a model defined in Swagger"""  # noqa: E501
        self._document_number = None
        self._order_number = None
        self._customer_number = None
        self._document_type_ids = None
        self._document_types = None
        self._shipment_method_ids = None
        self._shipment_methods = None
        self._document_date_min = None
        self._document_date_max = None
        self._include = None
        self._offset = None
        self._limit = None
        self.discriminator = None
        if document_number is not None:
            self.document_number = document_number
        if order_number is not None:
            self.order_number = order_number
        if customer_number is not None:
            self.customer_number = customer_number
        if document_type_ids is not None:
            self.document_type_ids = document_type_ids
        if document_types is not None:
            self.document_types = document_types
        if shipment_method_ids is not None:
            self.shipment_method_ids = shipment_method_ids
        if shipment_methods is not None:
            self.shipment_methods = shipment_methods
        if document_date_min is not None:
            self.document_date_min = document_date_min
        if document_date_max is not None:
            self.document_date_max = document_date_max
        if include is not None:
            self.include = include
        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit

    @property
    def document_number(self):
        """Gets the document_number of this SearchDocumentsRequest.  # noqa: E501

        Alphanumerical unique identifier of a document (always end with \"-B\") (in german: Beleg-Nr.)  # noqa: E501

        :return: The document_number of this SearchDocumentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this SearchDocumentsRequest.

        Alphanumerical unique identifier of a document (always end with \"-B\") (in german: Beleg-Nr.)  # noqa: E501

        :param document_number: The document_number of this SearchDocumentsRequest.  # noqa: E501
        :type: str
        """

        self._document_number = document_number

    @property
    def order_number(self):
        """Gets the order_number of this SearchDocumentsRequest.  # noqa: E501

        An alphanumerical order number (in german: Auftrags-Nr.)  # noqa: E501

        :return: The order_number of this SearchDocumentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this SearchDocumentsRequest.

        An alphanumerical order number (in german: Auftrags-Nr.)  # noqa: E501

        :param order_number: The order_number of this SearchDocumentsRequest.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def customer_number(self):
        """Gets the customer_number of this SearchDocumentsRequest.  # noqa: E501

        Alphanumerical unique identifier of a customer (always end with \"-K\") (in german: Kunden-Nr.))  # noqa: E501

        :return: The customer_number of this SearchDocumentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this SearchDocumentsRequest.

        Alphanumerical unique identifier of a customer (always end with \"-K\") (in german: Kunden-Nr.))  # noqa: E501

        :param customer_number: The customer_number of this SearchDocumentsRequest.  # noqa: E501
        :type: str
        """

        self._customer_number = customer_number

    @property
    def document_type_ids(self):
        """Gets the document_type_ids of this SearchDocumentsRequest.  # noqa: E501

        A list of document type IDs (e.g. order, delivery note, goods receipt) (in german: Belegtyp)  # noqa: E501

        :return: The document_type_ids of this SearchDocumentsRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._document_type_ids

    @document_type_ids.setter
    def document_type_ids(self, document_type_ids):
        """Sets the document_type_ids of this SearchDocumentsRequest.

        A list of document type IDs (e.g. order, delivery note, goods receipt) (in german: Belegtyp)  # noqa: E501

        :param document_type_ids: The document_type_ids of this SearchDocumentsRequest.  # noqa: E501
        :type: list[int]
        """

        self._document_type_ids = document_type_ids

    @property
    def document_types(self):
        """Gets the document_types of this SearchDocumentsRequest.  # noqa: E501

        A list of document type names (e.g. order, delivery note, goods receipt) (in german: Belegtyp)  # noqa: E501

        :return: The document_types of this SearchDocumentsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._document_types

    @document_types.setter
    def document_types(self, document_types):
        """Sets the document_types of this SearchDocumentsRequest.

        A list of document type names (e.g. order, delivery note, goods receipt) (in german: Belegtyp)  # noqa: E501

        :param document_types: The document_types of this SearchDocumentsRequest.  # noqa: E501
        :type: list[str]
        """

        self._document_types = document_types

    @property
    def shipment_method_ids(self):
        """Gets the shipment_method_ids of this SearchDocumentsRequest.  # noqa: E501

        A list of shipment method IDs (e.g. courier service, pickup) (in german: Versandart)  # noqa: E501

        :return: The shipment_method_ids of this SearchDocumentsRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._shipment_method_ids

    @shipment_method_ids.setter
    def shipment_method_ids(self, shipment_method_ids):
        """Sets the shipment_method_ids of this SearchDocumentsRequest.

        A list of shipment method IDs (e.g. courier service, pickup) (in german: Versandart)  # noqa: E501

        :param shipment_method_ids: The shipment_method_ids of this SearchDocumentsRequest.  # noqa: E501
        :type: list[int]
        """

        self._shipment_method_ids = shipment_method_ids

    @property
    def shipment_methods(self):
        """Gets the shipment_methods of this SearchDocumentsRequest.  # noqa: E501

        A list of shipment method names (e.g. courier service, pickup) (in german: Versandart)  # noqa: E501

        :return: The shipment_methods of this SearchDocumentsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._shipment_methods

    @shipment_methods.setter
    def shipment_methods(self, shipment_methods):
        """Sets the shipment_methods of this SearchDocumentsRequest.

        A list of shipment method names (e.g. courier service, pickup) (in german: Versandart)  # noqa: E501

        :param shipment_methods: The shipment_methods of this SearchDocumentsRequest.  # noqa: E501
        :type: list[str]
        """

        self._shipment_methods = shipment_methods

    @property
    def document_date_min(self):
        """Gets the document_date_min of this SearchDocumentsRequest.  # noqa: E501

        ...  # noqa: E501

        :return: The document_date_min of this SearchDocumentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._document_date_min

    @document_date_min.setter
    def document_date_min(self, document_date_min):
        """Sets the document_date_min of this SearchDocumentsRequest.

        ...  # noqa: E501

        :param document_date_min: The document_date_min of this SearchDocumentsRequest.  # noqa: E501
        :type: datetime
        """

        self._document_date_min = document_date_min

    @property
    def document_date_max(self):
        """Gets the document_date_max of this SearchDocumentsRequest.  # noqa: E501

        ...  # noqa: E501

        :return: The document_date_max of this SearchDocumentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._document_date_max

    @document_date_max.setter
    def document_date_max(self, document_date_max):
        """Sets the document_date_max of this SearchDocumentsRequest.

        ...  # noqa: E501

        :param document_date_max: The document_date_max of this SearchDocumentsRequest.  # noqa: E501
        :type: datetime
        """

        self._document_date_max = document_date_max

    @property
    def include(self):
        """Gets the include of this SearchDocumentsRequest.  # noqa: E501

        Return additional data specified by a comma-separated list of values (current possible values: \"billing_address\", \"shipping_address\", \"document_lines\", \"document_lines\", \"document_lines_abda_artikelstamm\", \"payments\"\", \"parcel_labels\", \"prescription_images\",\"courier_service_delivery_slot\").  # noqa: E501

        :return: The include of this SearchDocumentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this SearchDocumentsRequest.

        Return additional data specified by a comma-separated list of values (current possible values: \"billing_address\", \"shipping_address\", \"document_lines\", \"document_lines\", \"document_lines_abda_artikelstamm\", \"payments\"\", \"parcel_labels\", \"prescription_images\",\"courier_service_delivery_slot\").  # noqa: E501

        :param include: The include of this SearchDocumentsRequest.  # noqa: E501
        :type: str
        """

        self._include = include

    @property
    def offset(self):
        """Gets the offset of this SearchDocumentsRequest.  # noqa: E501

        The (zero-based) offset of the first item in the collection to return (default: 0)  # noqa: E501

        :return: The offset of this SearchDocumentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchDocumentsRequest.

        The (zero-based) offset of the first item in the collection to return (default: 0)  # noqa: E501

        :param offset: The offset of this SearchDocumentsRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this SearchDocumentsRequest.  # noqa: E501

        The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)  # noqa: E501

        :return: The limit of this SearchDocumentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchDocumentsRequest.

        The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)  # noqa: E501

        :param limit: The limit of this SearchDocumentsRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchDocumentsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchDocumentsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
