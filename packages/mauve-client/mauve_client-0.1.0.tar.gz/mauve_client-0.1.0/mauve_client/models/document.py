# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_number': 'str',
        'document_date': 'datetime',
        'order_number': 'str',
        'order_date': 'datetime',
        'delivery_date': 'datetime',
        'customer_number': 'str',
        'document_type': 'str',
        'payment_method': 'str',
        'sales_channel': 'str',
        'shipment_method': 'str',
        'waehrung_symbol': 'str',
        'comment': 'str',
        'discount_percentage': 'float',
        'vat_identification_number': 'str',
        'billing_address': 'DocumentAddress',
        'shipping_address': 'DocumentAddress',
        'document_lines': 'list[DocumentLine]',
        'payments': 'list[Payment]',
        'parcel_labels': 'list[ParcelLabel]',
        'prescription_images': 'list[PrescriptionImage]',
        'courier_service_slot': 'CourierServiceSlot',
        'total_gross_price': 'float',
        'outstanding_gross_price': 'float'
    }

    attribute_map = {
        'document_number': 'documentNumber',
        'document_date': 'documentDate',
        'order_number': 'orderNumber',
        'order_date': 'orderDate',
        'delivery_date': 'deliveryDate',
        'customer_number': 'customerNumber',
        'document_type': 'documentType',
        'payment_method': 'paymentMethod',
        'sales_channel': 'salesChannel',
        'shipment_method': 'shipmentMethod',
        'waehrung_symbol': 'waehrungSymbol',
        'comment': 'comment',
        'discount_percentage': 'discountPercentage',
        'vat_identification_number': 'vatIdentificationNumber',
        'billing_address': 'billingAddress',
        'shipping_address': 'shippingAddress',
        'document_lines': 'documentLines',
        'payments': 'payments',
        'parcel_labels': 'parcelLabels',
        'prescription_images': 'prescriptionImages',
        'courier_service_slot': 'courierServiceSlot',
        'total_gross_price': 'totalGrossPrice',
        'outstanding_gross_price': 'outstandingGrossPrice'
    }

    def __init__(self, document_number=None, document_date=None, order_number=None, order_date=None, delivery_date=None, customer_number=None, document_type=None, payment_method=None, sales_channel=None, shipment_method=None, waehrung_symbol=None, comment=None, discount_percentage=None, vat_identification_number=None, billing_address=None, shipping_address=None, document_lines=None, payments=None, parcel_labels=None, prescription_images=None, courier_service_slot=None, total_gross_price=None, outstanding_gross_price=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        self._document_number = None
        self._document_date = None
        self._order_number = None
        self._order_date = None
        self._delivery_date = None
        self._customer_number = None
        self._document_type = None
        self._payment_method = None
        self._sales_channel = None
        self._shipment_method = None
        self._waehrung_symbol = None
        self._comment = None
        self._discount_percentage = None
        self._vat_identification_number = None
        self._billing_address = None
        self._shipping_address = None
        self._document_lines = None
        self._payments = None
        self._parcel_labels = None
        self._prescription_images = None
        self._courier_service_slot = None
        self._total_gross_price = None
        self._outstanding_gross_price = None
        self.discriminator = None
        if document_number is not None:
            self.document_number = document_number
        if document_date is not None:
            self.document_date = document_date
        if order_number is not None:
            self.order_number = order_number
        if order_date is not None:
            self.order_date = order_date
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if customer_number is not None:
            self.customer_number = customer_number
        if document_type is not None:
            self.document_type = document_type
        if payment_method is not None:
            self.payment_method = payment_method
        if sales_channel is not None:
            self.sales_channel = sales_channel
        if shipment_method is not None:
            self.shipment_method = shipment_method
        if waehrung_symbol is not None:
            self.waehrung_symbol = waehrung_symbol
        if comment is not None:
            self.comment = comment
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if vat_identification_number is not None:
            self.vat_identification_number = vat_identification_number
        if billing_address is not None:
            self.billing_address = billing_address
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if document_lines is not None:
            self.document_lines = document_lines
        if payments is not None:
            self.payments = payments
        if parcel_labels is not None:
            self.parcel_labels = parcel_labels
        if prescription_images is not None:
            self.prescription_images = prescription_images
        if courier_service_slot is not None:
            self.courier_service_slot = courier_service_slot
        if total_gross_price is not None:
            self.total_gross_price = total_gross_price
        if outstanding_gross_price is not None:
            self.outstanding_gross_price = outstanding_gross_price

    @property
    def document_number(self):
        """Gets the document_number of this Document.  # noqa: E501

        Alphanumerical unique identifier of a document (always end with \"-B\") (in german: Beleg-Nr.)  # noqa: E501

        :return: The document_number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this Document.

        Alphanumerical unique identifier of a document (always end with \"-B\") (in german: Beleg-Nr.)  # noqa: E501

        :param document_number: The document_number of this Document.  # noqa: E501
        :type: str
        """

        self._document_number = document_number

    @property
    def document_date(self):
        """Gets the document_date of this Document.  # noqa: E501

        Date of the document (in german: Belegdatum)  # noqa: E501

        :return: The document_date of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this Document.

        Date of the document (in german: Belegdatum)  # noqa: E501

        :param document_date: The document_date of this Document.  # noqa: E501
        :type: datetime
        """

        self._document_date = document_date

    @property
    def order_number(self):
        """Gets the order_number of this Document.  # noqa: E501

        An optional external, alphanumerical order number (in german: Auftrags-Nr.)  # noqa: E501

        :return: The order_number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Document.

        An optional external, alphanumerical order number (in german: Auftrags-Nr.)  # noqa: E501

        :param order_number: The order_number of this Document.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def order_date(self):
        """Gets the order_date of this Document.  # noqa: E501

        Order date of the document (in german: Auftragsdatum)  # noqa: E501

        :return: The order_date of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this Document.

        Order date of the document (in german: Auftragsdatum)  # noqa: E501

        :param order_date: The order_date of this Document.  # noqa: E501
        :type: datetime
        """

        self._order_date = order_date

    @property
    def delivery_date(self):
        """Gets the delivery_date of this Document.  # noqa: E501

        Optional deliverydate of the document (in german: Lieferdatum)  # noqa: E501

        :return: The delivery_date of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this Document.

        Optional deliverydate of the document (in german: Lieferdatum)  # noqa: E501

        :param delivery_date: The delivery_date of this Document.  # noqa: E501
        :type: datetime
        """

        self._delivery_date = delivery_date

    @property
    def customer_number(self):
        """Gets the customer_number of this Document.  # noqa: E501

        Alphanumerical unique identifier of documents customer (always end with \"-K\") (in german: Kunden-Nr.)  # noqa: E501

        :return: The customer_number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this Document.

        Alphanumerical unique identifier of documents customer (always end with \"-K\") (in german: Kunden-Nr.)  # noqa: E501

        :param customer_number: The customer_number of this Document.  # noqa: E501
        :type: str
        """

        self._customer_number = customer_number

    @property
    def document_type(self):
        """Gets the document_type of this Document.  # noqa: E501

        Type of the document (e.g. order, delivery note, goods receipt) (in german: Belegtyp)  # noqa: E501

        :return: The document_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Document.

        Type of the document (e.g. order, delivery note, goods receipt) (in german: Belegtyp)  # noqa: E501

        :param document_type: The document_type of this Document.  # noqa: E501
        :type: str
        """

        self._document_type = document_type

    @property
    def payment_method(self):
        """Gets the payment_method of this Document.  # noqa: E501

        Paymentmethod of the document (e.g. cash on delivery, debit, creditcard, PayPal) (in german: Zahlungsweise)  # noqa: E501

        :return: The payment_method of this Document.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Document.

        Paymentmethod of the document (e.g. cash on delivery, debit, creditcard, PayPal) (in german: Zahlungsweise)  # noqa: E501

        :param payment_method: The payment_method of this Document.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def sales_channel(self):
        """Gets the sales_channel of this Document.  # noqa: E501

        Sales-Channel of the document (in german: Verkaufskanal)  # noqa: E501

        :return: The sales_channel of this Document.  # noqa: E501
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this Document.

        Sales-Channel of the document (in german: Verkaufskanal)  # noqa: E501

        :param sales_channel: The sales_channel of this Document.  # noqa: E501
        :type: str
        """

        self._sales_channel = sales_channel

    @property
    def shipment_method(self):
        """Gets the shipment_method of this Document.  # noqa: E501

        Shipmentmethod of the document (e.g. standard, express) (in german: Versandart)  # noqa: E501

        :return: The shipment_method of this Document.  # noqa: E501
        :rtype: str
        """
        return self._shipment_method

    @shipment_method.setter
    def shipment_method(self, shipment_method):
        """Sets the shipment_method of this Document.

        Shipmentmethod of the document (e.g. standard, express) (in german: Versandart)  # noqa: E501

        :param shipment_method: The shipment_method of this Document.  # noqa: E501
        :type: str
        """

        self._shipment_method = shipment_method

    @property
    def waehrung_symbol(self):
        """Gets the waehrung_symbol of this Document.  # noqa: E501

        Currency code (ISO 4217) (e.g. EUR, USD)  # noqa: E501

        :return: The waehrung_symbol of this Document.  # noqa: E501
        :rtype: str
        """
        return self._waehrung_symbol

    @waehrung_symbol.setter
    def waehrung_symbol(self, waehrung_symbol):
        """Sets the waehrung_symbol of this Document.

        Currency code (ISO 4217) (e.g. EUR, USD)  # noqa: E501

        :param waehrung_symbol: The waehrung_symbol of this Document.  # noqa: E501
        :type: str
        """

        self._waehrung_symbol = waehrung_symbol

    @property
    def comment(self):
        """Gets the comment of this Document.  # noqa: E501


        :return: The comment of this Document.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Document.


        :param comment: The comment of this Document.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this Document.  # noqa: E501

        Document discount rate in percentage  # noqa: E501

        :return: The discount_percentage of this Document.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this Document.

        Document discount rate in percentage  # noqa: E501

        :param discount_percentage: The discount_percentage of this Document.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def vat_identification_number(self):
        """Gets the vat_identification_number of this Document.  # noqa: E501

        Value added tax identification number (e.g. DE999999999)  # noqa: E501

        :return: The vat_identification_number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._vat_identification_number

    @vat_identification_number.setter
    def vat_identification_number(self, vat_identification_number):
        """Sets the vat_identification_number of this Document.

        Value added tax identification number (e.g. DE999999999)  # noqa: E501

        :param vat_identification_number: The vat_identification_number of this Document.  # noqa: E501
        :type: str
        """

        self._vat_identification_number = vat_identification_number

    @property
    def billing_address(self):
        """Gets the billing_address of this Document.  # noqa: E501


        :return: The billing_address of this Document.  # noqa: E501
        :rtype: DocumentAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Document.


        :param billing_address: The billing_address of this Document.  # noqa: E501
        :type: DocumentAddress
        """

        self._billing_address = billing_address

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Document.  # noqa: E501


        :return: The shipping_address of this Document.  # noqa: E501
        :rtype: DocumentAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Document.


        :param shipping_address: The shipping_address of this Document.  # noqa: E501
        :type: DocumentAddress
        """

        self._shipping_address = shipping_address

    @property
    def document_lines(self):
        """Gets the document_lines of this Document.  # noqa: E501


        :return: The document_lines of this Document.  # noqa: E501
        :rtype: list[DocumentLine]
        """
        return self._document_lines

    @document_lines.setter
    def document_lines(self, document_lines):
        """Sets the document_lines of this Document.


        :param document_lines: The document_lines of this Document.  # noqa: E501
        :type: list[DocumentLine]
        """

        self._document_lines = document_lines

    @property
    def payments(self):
        """Gets the payments of this Document.  # noqa: E501


        :return: The payments of this Document.  # noqa: E501
        :rtype: list[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this Document.


        :param payments: The payments of this Document.  # noqa: E501
        :type: list[Payment]
        """

        self._payments = payments

    @property
    def parcel_labels(self):
        """Gets the parcel_labels of this Document.  # noqa: E501


        :return: The parcel_labels of this Document.  # noqa: E501
        :rtype: list[ParcelLabel]
        """
        return self._parcel_labels

    @parcel_labels.setter
    def parcel_labels(self, parcel_labels):
        """Sets the parcel_labels of this Document.


        :param parcel_labels: The parcel_labels of this Document.  # noqa: E501
        :type: list[ParcelLabel]
        """

        self._parcel_labels = parcel_labels

    @property
    def prescription_images(self):
        """Gets the prescription_images of this Document.  # noqa: E501


        :return: The prescription_images of this Document.  # noqa: E501
        :rtype: list[PrescriptionImage]
        """
        return self._prescription_images

    @prescription_images.setter
    def prescription_images(self, prescription_images):
        """Sets the prescription_images of this Document.


        :param prescription_images: The prescription_images of this Document.  # noqa: E501
        :type: list[PrescriptionImage]
        """

        self._prescription_images = prescription_images

    @property
    def courier_service_slot(self):
        """Gets the courier_service_slot of this Document.  # noqa: E501


        :return: The courier_service_slot of this Document.  # noqa: E501
        :rtype: CourierServiceSlot
        """
        return self._courier_service_slot

    @courier_service_slot.setter
    def courier_service_slot(self, courier_service_slot):
        """Sets the courier_service_slot of this Document.


        :param courier_service_slot: The courier_service_slot of this Document.  # noqa: E501
        :type: CourierServiceSlot
        """

        self._courier_service_slot = courier_service_slot

    @property
    def total_gross_price(self):
        """Gets the total_gross_price of this Document.  # noqa: E501

        Order's gross price  # noqa: E501

        :return: The total_gross_price of this Document.  # noqa: E501
        :rtype: float
        """
        return self._total_gross_price

    @total_gross_price.setter
    def total_gross_price(self, total_gross_price):
        """Sets the total_gross_price of this Document.

        Order's gross price  # noqa: E501

        :param total_gross_price: The total_gross_price of this Document.  # noqa: E501
        :type: float
        """

        self._total_gross_price = total_gross_price

    @property
    def outstanding_gross_price(self):
        """Gets the outstanding_gross_price of this Document.  # noqa: E501


        :return: The outstanding_gross_price of this Document.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_gross_price

    @outstanding_gross_price.setter
    def outstanding_gross_price(self, outstanding_gross_price):
        """Sets the outstanding_gross_price of this Document.


        :param outstanding_gross_price: The outstanding_gross_price of this Document.  # noqa: E501
        :type: float
        """

        self._outstanding_gross_price = outstanding_gross_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
