# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePortalOrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant': 'str',
        'order': 'Order'
    }

    attribute_map = {
        'participant': 'participant',
        'order': 'order'
    }

    def __init__(self, participant=None, order=None):  # noqa: E501
        """CreatePortalOrderRequest - a model defined in Swagger"""  # noqa: E501
        self._participant = None
        self._order = None
        self.discriminator = None
        self.participant = participant
        self.order = order

    @property
    def participant(self):
        """Gets the participant of this CreatePortalOrderRequest.  # noqa: E501

        Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.)  # noqa: E501

        :return: The participant of this CreatePortalOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this CreatePortalOrderRequest.

        Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.)  # noqa: E501

        :param participant: The participant of this CreatePortalOrderRequest.  # noqa: E501
        :type: str
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def order(self):
        """Gets the order of this CreatePortalOrderRequest.  # noqa: E501


        :return: The order of this CreatePortalOrderRequest.  # noqa: E501
        :rtype: Order
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CreatePortalOrderRequest.


        :param order: The order of this CreatePortalOrderRequest.  # noqa: E501
        :type: Order
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePortalOrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePortalOrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
