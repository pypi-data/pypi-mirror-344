# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Price(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'str',
        'net': 'float',
        'gross': 'float',
        'currency': 'str',
        'group': 'int',
        'valid_from': 'datetime',
        'valid_until': 'datetime'
    }

    attribute_map = {
        'sku': 'sku',
        'net': 'net',
        'gross': 'gross',
        'currency': 'currency',
        'group': 'group',
        'valid_from': 'validFrom',
        'valid_until': 'validUntil'
    }

    def __init__(self, sku=None, net=None, gross=None, currency=None, group=None, valid_from=None, valid_until=None):  # noqa: E501
        """Price - a model defined in Swagger"""  # noqa: E501
        self._sku = None
        self._net = None
        self._gross = None
        self._currency = None
        self._group = None
        self._valid_from = None
        self._valid_until = None
        self.discriminator = None
        self.sku = sku
        if net is not None:
            self.net = net
        if gross is not None:
            self.gross = gross
        if currency is not None:
            self.currency = currency
        if group is not None:
            self.group = group
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_until is not None:
            self.valid_until = valid_until

    @property
    def sku(self):
        """Gets the sku of this Price.  # noqa: E501

        Stock Keeping Unit (e.g. PZN)  # noqa: E501

        :return: The sku of this Price.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Price.

        Stock Keeping Unit (e.g. PZN)  # noqa: E501

        :param sku: The sku of this Price.  # noqa: E501
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def net(self):
        """Gets the net of this Price.  # noqa: E501

        Net price (e.g. 19.99 for 19,99 €)  # noqa: E501

        :return: The net of this Price.  # noqa: E501
        :rtype: float
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this Price.

        Net price (e.g. 19.99 for 19,99 €)  # noqa: E501

        :param net: The net of this Price.  # noqa: E501
        :type: float
        """

        self._net = net

    @property
    def gross(self):
        """Gets the gross of this Price.  # noqa: E501

        Gross price (e.g. 19.99 for 19,99 €)  # noqa: E501

        :return: The gross of this Price.  # noqa: E501
        :rtype: float
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this Price.

        Gross price (e.g. 19.99 for 19,99 €)  # noqa: E501

        :param gross: The gross of this Price.  # noqa: E501
        :type: float
        """

        self._gross = gross

    @property
    def currency(self):
        """Gets the currency of this Price.  # noqa: E501


        :return: The currency of this Price.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Price.


        :param currency: The currency of this Price.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def group(self):
        """Gets the group of this Price.  # noqa: E501

        The price group (usually 1 = Endverbraucher Preis, 2 = Lieferanten Preis, 5 = Unverbindliche Preisempfehlung)  # noqa: E501

        :return: The group of this Price.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Price.

        The price group (usually 1 = Endverbraucher Preis, 2 = Lieferanten Preis, 5 = Unverbindliche Preisempfehlung)  # noqa: E501

        :param group: The group of this Price.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def valid_from(self):
        """Gets the valid_from of this Price.  # noqa: E501


        :return: The valid_from of this Price.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this Price.


        :param valid_from: The valid_from of this Price.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_until(self):
        """Gets the valid_until of this Price.  # noqa: E501


        :return: The valid_until of this Price.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this Price.


        :param valid_until: The valid_until of this Price.  # noqa: E501
        :type: datetime
        """

        self._valid_until = valid_until

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Price, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Price):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
