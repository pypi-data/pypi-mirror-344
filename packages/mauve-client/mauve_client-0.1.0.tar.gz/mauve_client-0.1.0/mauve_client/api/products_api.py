# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mauve_client.api_client import ApiClient


class ProductsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_prices_request_sku_delete(self, accept, sku, **kwargs):  # noqa: E501
        """Delete prices of a specific product.  # noqa: E501

        Delete prices of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_prices_request_sku_delete(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :param int group: The price group (usually 1 = Endverbraucher Preis, 2 = Lieferanten Preis, 5 = Unverbindliche Preisempfehlung)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_prices_request_sku_delete_with_http_info(accept, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_prices_request_sku_delete_with_http_info(accept, sku, **kwargs)  # noqa: E501
            return data

    def delete_prices_request_sku_delete_with_http_info(self, accept, sku, **kwargs):  # noqa: E501
        """Delete prices of a specific product.  # noqa: E501

        Delete prices of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_prices_request_sku_delete_with_http_info(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :param int group: The price group (usually 1 = Endverbraucher Preis, 2 = Lieferanten Preis, 5 = Unverbindliche Preisempfehlung)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'sku', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_prices_request_sku_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `delete_prices_request_sku_delete`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `delete_prices_request_sku_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []
        if 'group' in params:
            query_params.append(('Group', params['group']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/prices/{Sku}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_availibity_request_sku_get(self, accept, sku, **kwargs):  # noqa: E501
        """Retrieve the availability information of a specific product.  # noqa: E501

        Retrieve the availability information of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_availibity_request_sku_get(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetAvailibityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_availibity_request_sku_get_with_http_info(accept, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.get_availibity_request_sku_get_with_http_info(accept, sku, **kwargs)  # noqa: E501
            return data

    def get_availibity_request_sku_get_with_http_info(self, accept, sku, **kwargs):  # noqa: E501
        """Retrieve the availability information of a specific product.  # noqa: E501

        Retrieve the availability information of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_availibity_request_sku_get_with_http_info(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetAvailibityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'sku']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_availibity_request_sku_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_availibity_request_sku_get`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `get_availibity_request_sku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/availabilities/{Sku}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAvailibityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prices_request_sku_get(self, accept, sku, **kwargs):  # noqa: E501
        """Retrieve the prices of a specific product.  # noqa: E501

        Retrieve the prices of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prices_request_sku_get(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :param int group: The price group (usually 1 = Endverbraucher Preis, 2 = Lieferanten Preis, 5 = Unverbindliche Preisempfehlung)
        :return: GetPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_prices_request_sku_get_with_http_info(accept, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.get_prices_request_sku_get_with_http_info(accept, sku, **kwargs)  # noqa: E501
            return data

    def get_prices_request_sku_get_with_http_info(self, accept, sku, **kwargs):  # noqa: E501
        """Retrieve the prices of a specific product.  # noqa: E501

        Retrieve the prices of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prices_request_sku_get_with_http_info(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :param int group: The price group (usually 1 = Endverbraucher Preis, 2 = Lieferanten Preis, 5 = Unverbindliche Preisempfehlung)
        :return: GetPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'sku', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prices_request_sku_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_prices_request_sku_get`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `get_prices_request_sku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []
        if 'group' in params:
            query_params.append(('Group', params['group']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/prices/{Sku}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPricesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_request_sku_get(self, accept, sku, **kwargs):  # noqa: E501
        """Retrieve a specific product  # noqa: E501

        Retrieve a specific product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_request_sku_get(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").
        :param int shop_id: The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)
        :return: GetProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_request_sku_get_with_http_info(accept, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_request_sku_get_with_http_info(accept, sku, **kwargs)  # noqa: E501
            return data

    def get_product_request_sku_get_with_http_info(self, accept, sku, **kwargs):  # noqa: E501
        """Retrieve a specific product  # noqa: E501

        Retrieve a specific product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_request_sku_get_with_http_info(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").
        :param int shop_id: The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)
        :return: GetProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'sku', 'include', 'shop_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_request_sku_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_product_request_sku_get`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `get_product_request_sku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('Include', params['include']))  # noqa: E501
        if 'shop_id' in params:
            query_params.append(('ShopId', params['shop_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/products/{Sku}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetProductResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stock_request_sku_get(self, accept, sku, **kwargs):  # noqa: E501
        """Retrieve the stock and the external product stock of a specific product.  # noqa: E501

        Retrieve the stock and the external product stock of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stock_request_sku_get(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetStockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stock_request_sku_get_with_http_info(accept, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stock_request_sku_get_with_http_info(accept, sku, **kwargs)  # noqa: E501
            return data

    def get_stock_request_sku_get_with_http_info(self, accept, sku, **kwargs):  # noqa: E501
        """Retrieve the stock and the external product stock of a specific product.  # noqa: E501

        Retrieve the stock and the external product stock of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stock_request_sku_get_with_http_info(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :return: GetStockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'sku']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stock_request_sku_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_stock_request_sku_get`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `get_stock_request_sku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/stocks/{Sku}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_availabilities_request_get(self, accept, **kwargs):  # noqa: E501
        """Retrieve a list of availability informations.  # noqa: E501

        Retrieve a list of availability informations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_availabilities_request_get(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str active_state: Return only products with the specified active state (default = ActiveState.Active)
        :param int offset: The (zero-based) offset of the first item in the collection to return (default: 0)
        :param int limit: The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1.000.000, maximum: 1.000.000)
        :return: SearchAvailabilitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_availabilities_request_get_with_http_info(accept, **kwargs)  # noqa: E501
        else:
            (data) = self.search_availabilities_request_get_with_http_info(accept, **kwargs)  # noqa: E501
            return data

    def search_availabilities_request_get_with_http_info(self, accept, **kwargs):  # noqa: E501
        """Retrieve a list of availability informations.  # noqa: E501

        Retrieve a list of availability informations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_availabilities_request_get_with_http_info(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str active_state: Return only products with the specified active state (default = ActiveState.Active)
        :param int offset: The (zero-based) offset of the first item in the collection to return (default: 0)
        :param int limit: The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1.000.000, maximum: 1.000.000)
        :return: SearchAvailabilitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'active_state', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_availabilities_request_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `search_availabilities_request_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'active_state' in params:
            query_params.append(('ActiveState', params['active_state']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('Offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('Limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/availabilities/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchAvailabilitiesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_prices_request_get(self, accept, **kwargs):  # noqa: E501
        """Retrieve product prices of a list of products.  # noqa: E501

        Retrieve product prices of a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_prices_request_get(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param int group: The price group (usually 1 = Endverbraucher Preis, 2 = Lieferanten Preis, 5 = Unverbindliche Preisempfehlung)
        :return: SearchPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_prices_request_get_with_http_info(accept, **kwargs)  # noqa: E501
        else:
            (data) = self.search_prices_request_get_with_http_info(accept, **kwargs)  # noqa: E501
            return data

    def search_prices_request_get_with_http_info(self, accept, **kwargs):  # noqa: E501
        """Retrieve product prices of a list of products.  # noqa: E501

        Retrieve product prices of a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_prices_request_get_with_http_info(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param int group: The price group (usually 1 = Endverbraucher Preis, 2 = Lieferanten Preis, 5 = Unverbindliche Preisempfehlung)
        :return: SearchPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_prices_request_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `search_prices_request_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group' in params:
            query_params.append(('Group', params['group']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/prices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchPricesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_products_request_get(self, accept, **kwargs):  # noqa: E501
        """Retrieve a list of products.  # noqa: E501

        Retrieve a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_products_request_get(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").
        :param int shop_id: The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)
        :param int offset: The (zero-based) offset of the first item in the collection to return (default: 0)
        :param int limit: The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)
        :param str active_state: Return only products with the specified active state
        :param str abda_artikelstamm_states: Return only products which match all specified AbdaArtikelstamm states provided in comma-separated list (possible values: Verschreibungspflicht, OTC)
        :param str barcode: An alphanumeric code to identify the product (e.g. EAN, GTIN, ASIN, IBAN)
        :return: SearchProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_products_request_get_with_http_info(accept, **kwargs)  # noqa: E501
        else:
            (data) = self.search_products_request_get_with_http_info(accept, **kwargs)  # noqa: E501
            return data

    def search_products_request_get_with_http_info(self, accept, **kwargs):  # noqa: E501
        """Retrieve a list of products.  # noqa: E501

        Retrieve a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_products_request_get_with_http_info(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").
        :param int shop_id: The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)
        :param int offset: The (zero-based) offset of the first item in the collection to return (default: 0)
        :param int limit: The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)
        :param str active_state: Return only products with the specified active state
        :param str abda_artikelstamm_states: Return only products which match all specified AbdaArtikelstamm states provided in comma-separated list (possible values: Verschreibungspflicht, OTC)
        :param str barcode: An alphanumeric code to identify the product (e.g. EAN, GTIN, ASIN, IBAN)
        :return: SearchProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'include', 'shop_id', 'offset', 'limit', 'active_state', 'abda_artikelstamm_states', 'barcode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_products_request_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `search_products_request_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('Include', params['include']))  # noqa: E501
        if 'shop_id' in params:
            query_params.append(('ShopId', params['shop_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('Offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('Limit', params['limit']))  # noqa: E501
        if 'active_state' in params:
            query_params.append(('ActiveState', params['active_state']))  # noqa: E501
        if 'abda_artikelstamm_states' in params:
            query_params.append(('AbdaArtikelstammStates', params['abda_artikelstamm_states']))  # noqa: E501
        if 'barcode' in params:
            query_params.append(('Barcode', params['barcode']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/products/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchProductsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_stocks_request_get(self, accept, **kwargs):  # noqa: E501
        """Retrieve the stock and external product stock of a list of products.  # noqa: E501

        Retrieve the stock and external product stock of a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_stocks_request_get(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :return: SearchStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_stocks_request_get_with_http_info(accept, **kwargs)  # noqa: E501
        else:
            (data) = self.search_stocks_request_get_with_http_info(accept, **kwargs)  # noqa: E501
            return data

    def search_stocks_request_get_with_http_info(self, accept, **kwargs):  # noqa: E501
        """Retrieve the stock and external product stock of a list of products.  # noqa: E501

        Retrieve the stock and external product stock of a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_stocks_request_get_with_http_info(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :return: SearchStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_stocks_request_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `search_stocks_request_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/stocks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchStocksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_prices_request_create(self, accept, **kwargs):  # noqa: E501
        """Update or create prices of a list of products.  # noqa: E501

        Update or create prices of a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_prices_request_create(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param UpdatePricesRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_prices_request_create_with_http_info(accept, **kwargs)  # noqa: E501
        else:
            (data) = self.update_prices_request_create_with_http_info(accept, **kwargs)  # noqa: E501
            return data

    def update_prices_request_create_with_http_info(self, accept, **kwargs):  # noqa: E501
        """Update or create prices of a list of products.  # noqa: E501

        Update or create prices of a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_prices_request_create_with_http_info(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param UpdatePricesRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_prices_request_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `update_prices_request_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/prices/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_product_request_sku_update(self, accept, sku, **kwargs):  # noqa: E501
        """Update a product.  # noqa: E501

        Update a product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_request_sku_update(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :param UpdateProductRequest body:
        :param str name: The product name in the base language
        :param str description: The product description in the base language
        :param str description_short: The product short description in the base language
        :param str additional_description: The product additional description in the base language
        :param str note: The product note in the base language
        :return: UpdateProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_product_request_sku_update_with_http_info(accept, sku, **kwargs)  # noqa: E501
        else:
            (data) = self.update_product_request_sku_update_with_http_info(accept, sku, **kwargs)  # noqa: E501
            return data

    def update_product_request_sku_update_with_http_info(self, accept, sku, **kwargs):  # noqa: E501
        """Update a product.  # noqa: E501

        Update a product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_request_sku_update_with_http_info(accept, sku, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str sku: Stock Keeping Unit (e.g. PZN) (required)
        :param UpdateProductRequest body:
        :param str name: The product name in the base language
        :param str description: The product description in the base language
        :param str description_short: The product short description in the base language
        :param str additional_description: The product additional description in the base language
        :param str note: The product note in the base language
        :return: UpdateProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'sku', 'body', 'name', 'description', 'description_short', 'additional_description', 'note']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product_request_sku_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `update_product_request_sku_update`")  # noqa: E501
        # verify the required parameter 'sku' is set
        if ('sku' not in params or
                params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `update_product_request_sku_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sku' in params:
            path_params['Sku'] = params['sku']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('Description', params['description']))  # noqa: E501
        if 'description_short' in params:
            query_params.append(('DescriptionShort', params['description_short']))  # noqa: E501
        if 'additional_description' in params:
            query_params.append(('AdditionalDescription', params['additional_description']))  # noqa: E501
        if 'note' in params:
            query_params.append(('Note', params['note']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/products/{Sku}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateProductResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_stocks_request_create(self, accept, **kwargs):  # noqa: E501
        """Updates the external stocks of a list of products.  # noqa: E501

        Updates the external stocks of a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stocks_request_create(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param UpdateStocksRequest body:
        :param bool replace: ...
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_stocks_request_create_with_http_info(accept, **kwargs)  # noqa: E501
        else:
            (data) = self.update_stocks_request_create_with_http_info(accept, **kwargs)  # noqa: E501
            return data

    def update_stocks_request_create_with_http_info(self, accept, **kwargs):  # noqa: E501
        """Updates the external stocks of a list of products.  # noqa: E501

        Updates the external stocks of a list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stocks_request_create_with_http_info(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param UpdateStocksRequest body:
        :param bool replace: ...
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'body', 'replace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_stocks_request_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `update_stocks_request_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'replace' in params:
            query_params.append(('Replace', params['replace']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/stocks/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
