# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mauve_client.api_client import ApiClient


class CategoriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_category_products_request_category_idproducts_get(self, accept, category_id, **kwargs):  # noqa: E501
        """Retrieve products listed in a specific category.  # noqa: E501

        Retrieve products listed in a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_category_products_request_category_idproducts_get(accept, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param int category_id: The unique identifier of a category (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").
        :param int shop_id: The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)
        :param int offset: The (zero-based) offset of the first item in the collection to return (default: 0)
        :param int limit: The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)
        :return: GetCategoryProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_category_products_request_category_idproducts_get_with_http_info(accept, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_category_products_request_category_idproducts_get_with_http_info(accept, category_id, **kwargs)  # noqa: E501
            return data

    def get_category_products_request_category_idproducts_get_with_http_info(self, accept, category_id, **kwargs):  # noqa: E501
        """Retrieve products listed in a specific category.  # noqa: E501

        Retrieve products listed in a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_category_products_request_category_idproducts_get_with_http_info(accept, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param int category_id: The unique identifier of a category (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"packaginginformation\", \"producer\", \"images\", \"prices\", \"prices_current\", \"pharmacy_wholesaler_availabilities\", \"categories\", \"abda_artikelstamm\", \"abdata_laiendaten\", \"abda_other_pack_sizes\", \"bundles\"\", \"translations\").
        :param int shop_id: The unique identifier of a shop which is used to determine the shop and image urls (if not specified, the first available shop will be used)
        :param int offset: The (zero-based) offset of the first item in the collection to return (default: 0)
        :param int limit: The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used. (default: 1000, maximum: 1000)
        :return: GetCategoryProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'category_id', 'include', 'shop_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_category_products_request_category_idproducts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_category_products_request_category_idproducts_get`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `get_category_products_request_category_idproducts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_id' in params:
            path_params['CategoryId'] = params['category_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('Include', params['include']))  # noqa: E501
        if 'shop_id' in params:
            query_params.append(('ShopId', params['shop_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('Offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('Limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/categories/{CategoryId}/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCategoryProductsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_category_request_category_id_get(self, accept, category_id, **kwargs):  # noqa: E501
        """Retrieve a specific category.  # noqa: E501

        Retrieve a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_category_request_category_id_get(accept, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param int category_id: Numerical unique identifier of a category (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"translations\").
        :return: GetCategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_category_request_category_id_get_with_http_info(accept, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_category_request_category_id_get_with_http_info(accept, category_id, **kwargs)  # noqa: E501
            return data

    def get_category_request_category_id_get_with_http_info(self, accept, category_id, **kwargs):  # noqa: E501
        """Retrieve a specific category.  # noqa: E501

        Retrieve a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_category_request_category_id_get_with_http_info(accept, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param int category_id: Numerical unique identifier of a category (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"translations\").
        :return: GetCategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'category_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_category_request_category_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_category_request_category_id_get`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `get_category_request_category_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_id' in params:
            path_params['CategoryId'] = params['category_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('Include', params['include']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/categories/{CategoryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCategoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_child_categories_request_category_idchildren_get(self, accept, category_id, **kwargs):  # noqa: E501
        """Retrieve child categories of a specific category.  # noqa: E501

        Retrieve child categories of a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_categories_request_category_idchildren_get(accept, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param int category_id: Numerical unique identifier of a category (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"translations\").
        :return: GetChildCategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_child_categories_request_category_idchildren_get_with_http_info(accept, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_child_categories_request_category_idchildren_get_with_http_info(accept, category_id, **kwargs)  # noqa: E501
            return data

    def get_child_categories_request_category_idchildren_get_with_http_info(self, accept, category_id, **kwargs):  # noqa: E501
        """Retrieve child categories of a specific category.  # noqa: E501

        Retrieve child categories of a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_categories_request_category_idchildren_get_with_http_info(accept, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param int category_id: Numerical unique identifier of a category (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"translations\").
        :return: GetChildCategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'category_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_child_categories_request_category_idchildren_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_child_categories_request_category_idchildren_get`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `get_child_categories_request_category_idchildren_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_id' in params:
            path_params['CategoryId'] = params['category_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('Include', params['include']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/categories/{CategoryId}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetChildCategoriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_categories_request_get(self, accept, **kwargs):  # noqa: E501
        """Retrieve a list of categories.  # noqa: E501

        Retrieve a list of categories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_categories_request_get(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"translations\").
        :return: SearchCategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_categories_request_get_with_http_info(accept, **kwargs)  # noqa: E501
        else:
            (data) = self.search_categories_request_get_with_http_info(accept, **kwargs)  # noqa: E501
            return data

    def search_categories_request_get_with_http_info(self, accept, **kwargs):  # noqa: E501
        """Retrieve a list of categories.  # noqa: E501

        Retrieve a list of categories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_categories_request_get_with_http_info(accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str include: Return additional data specified by a comma-separated list of values (current possible values: \"translations\").
        :return: SearchCategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_categories_request_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `search_categories_request_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('Include', params['include']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/categories/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchCategoriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
