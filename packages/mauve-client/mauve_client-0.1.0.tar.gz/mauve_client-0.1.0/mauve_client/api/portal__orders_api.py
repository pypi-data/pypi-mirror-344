# coding: utf-8

"""
    Mauve Admin API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mauve_client.api_client import ApiClient


class PortalOrdersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_portal_order_payment_request_participantorders_order_numberpayments_post(self, accept, participant, order_number, **kwargs):  # noqa: E501
        """Create a payment for a specific order for a specific portal participant.  # noqa: E501

        Create a payment for a specific order for a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portal_order_payment_request_participantorders_order_numberpayments_post(accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :param CreatePortalOrderPaymentRequest body:
        :return: CreatePortalOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_portal_order_payment_request_participantorders_order_numberpayments_post_with_http_info(accept, participant, order_number, **kwargs)  # noqa: E501
        else:
            (data) = self.create_portal_order_payment_request_participantorders_order_numberpayments_post_with_http_info(accept, participant, order_number, **kwargs)  # noqa: E501
            return data

    def create_portal_order_payment_request_participantorders_order_numberpayments_post_with_http_info(self, accept, participant, order_number, **kwargs):  # noqa: E501
        """Create a payment for a specific order for a specific portal participant.  # noqa: E501

        Create a payment for a specific order for a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portal_order_payment_request_participantorders_order_numberpayments_post_with_http_info(accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :param CreatePortalOrderPaymentRequest body:
        :return: CreatePortalOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'order_number', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_portal_order_payment_request_participantorders_order_numberpayments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `create_portal_order_payment_request_participantorders_order_numberpayments_post`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `create_portal_order_payment_request_participantorders_order_numberpayments_post`")  # noqa: E501
        # verify the required parameter 'order_number' is set
        if ('order_number' not in params or
                params['order_number'] is None):
            raise ValueError("Missing the required parameter `order_number` when calling `create_portal_order_payment_request_participantorders_order_numberpayments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'order_number' in params:
            path_params['OrderNumber'] = params['order_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/orders/{OrderNumber}/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePortalOrderPaymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post(self, image_data, accept, participant, order_number, **kwargs):  # noqa: E501
        """Create a prescription image for a specific order for a specific portal participant.  # noqa: E501

        Create a prescription image for a specific order for a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post(image_data, accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_data: (required)
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :return: CreatePortalOrderPrescriptionImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post_with_http_info(image_data, accept, participant, order_number, **kwargs)  # noqa: E501
        else:
            (data) = self.create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post_with_http_info(image_data, accept, participant, order_number, **kwargs)  # noqa: E501
            return data

    def create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post_with_http_info(self, image_data, accept, participant, order_number, **kwargs):  # noqa: E501
        """Create a prescription image for a specific order for a specific portal participant.  # noqa: E501

        Create a prescription image for a specific order for a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post_with_http_info(image_data, accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_data: (required)
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :return: CreatePortalOrderPrescriptionImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_data', 'accept', 'participant', 'order_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_data' is set
        if ('image_data' not in params or
                params['image_data'] is None):
            raise ValueError("Missing the required parameter `image_data` when calling `create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post`")  # noqa: E501
        # verify the required parameter 'order_number' is set
        if ('order_number' not in params or
                params['order_number'] is None):
            raise ValueError("Missing the required parameter `order_number` when calling `create_portal_order_prescription_image_request_participantorders_order_numberprescription_images_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'order_number' in params:
            path_params['OrderNumber'] = params['order_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'image_data' in params:
            form_params.append(('ImageData', params['image_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/orders/{OrderNumber}/prescription_images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePortalOrderPrescriptionImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_portal_order_request_participantorders_post(self, accept, participant, **kwargs):  # noqa: E501
        """Create a order for a specific portal participant.  # noqa: E501

        Create a order for a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portal_order_request_participantorders_post(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param CreatePortalOrderRequest body:
        :return: CreatePortalOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_portal_order_request_participantorders_post_with_http_info(accept, participant, **kwargs)  # noqa: E501
        else:
            (data) = self.create_portal_order_request_participantorders_post_with_http_info(accept, participant, **kwargs)  # noqa: E501
            return data

    def create_portal_order_request_participantorders_post_with_http_info(self, accept, participant, **kwargs):  # noqa: E501
        """Create a order for a specific portal participant.  # noqa: E501

        Create a order for a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portal_order_request_participantorders_post_with_http_info(accept, participant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param CreatePortalOrderRequest body:
        :return: CreatePortalOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_portal_order_request_participantorders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `create_portal_order_request_participantorders_post`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `create_portal_order_request_participantorders_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/orders/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePortalOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_order_payment_request_participantorders_order_numberpayments_get(self, accept, participant, order_number, **kwargs):  # noqa: E501
        """Retrieve the payments of a specific order of a specific portal participant.  # noqa: E501

        Retrieve the payments of a specific order of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_order_payment_request_participantorders_order_numberpayments_get(accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :return: GetPortalOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_order_payment_request_participantorders_order_numberpayments_get_with_http_info(accept, participant, order_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_order_payment_request_participantorders_order_numberpayments_get_with_http_info(accept, participant, order_number, **kwargs)  # noqa: E501
            return data

    def get_portal_order_payment_request_participantorders_order_numberpayments_get_with_http_info(self, accept, participant, order_number, **kwargs):  # noqa: E501
        """Retrieve the payments of a specific order of a specific portal participant.  # noqa: E501

        Retrieve the payments of a specific order of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_order_payment_request_participantorders_order_numberpayments_get_with_http_info(accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :return: GetPortalOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'order_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_order_payment_request_participantorders_order_numberpayments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_portal_order_payment_request_participantorders_order_numberpayments_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `get_portal_order_payment_request_participantorders_order_numberpayments_get`")  # noqa: E501
        # verify the required parameter 'order_number' is set
        if ('order_number' not in params or
                params['order_number'] is None):
            raise ValueError("Missing the required parameter `order_number` when calling `get_portal_order_payment_request_participantorders_order_numberpayments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'order_number' in params:
            path_params['OrderNumber'] = params['order_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/orders/{OrderNumber}/payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPortalOrderPaymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_order_request_participantorders_order_number_get(self, accept, participant, order_number, **kwargs):  # noqa: E501
        """Retrieve a specific order of a specific portal participant.  # noqa: E501

        Retrieve a specific order of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_order_request_participantorders_order_number_get(accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :return: GetPortalOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_order_request_participantorders_order_number_get_with_http_info(accept, participant, order_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_order_request_participantorders_order_number_get_with_http_info(accept, participant, order_number, **kwargs)  # noqa: E501
            return data

    def get_portal_order_request_participantorders_order_number_get_with_http_info(self, accept, participant, order_number, **kwargs):  # noqa: E501
        """Retrieve a specific order of a specific portal participant.  # noqa: E501

        Retrieve a specific order of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_order_request_participantorders_order_number_get_with_http_info(accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :return: GetPortalOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'order_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_order_request_participantorders_order_number_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_portal_order_request_participantorders_order_number_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `get_portal_order_request_participantorders_order_number_get`")  # noqa: E501
        # verify the required parameter 'order_number' is set
        if ('order_number' not in params or
                params['order_number'] is None):
            raise ValueError("Missing the required parameter `order_number` when calling `get_portal_order_request_participantorders_order_number_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'order_number' in params:
            path_params['OrderNumber'] = params['order_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/orders/{OrderNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPortalOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_order_status_request_participantorders_order_numberstatus_get(self, accept, participant, order_number, **kwargs):  # noqa: E501
        """Retrieve the current status of a specific order of a specific portal participant.  # noqa: E501

        Retrieve the current status of a specific order of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_order_status_request_participantorders_order_numberstatus_get(accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :return: GetPortalOrderStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_order_status_request_participantorders_order_numberstatus_get_with_http_info(accept, participant, order_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_order_status_request_participantorders_order_numberstatus_get_with_http_info(accept, participant, order_number, **kwargs)  # noqa: E501
            return data

    def get_portal_order_status_request_participantorders_order_numberstatus_get_with_http_info(self, accept, participant, order_number, **kwargs):  # noqa: E501
        """Retrieve the current status of a specific order of a specific portal participant.  # noqa: E501

        Retrieve the current status of a specific order of a specific portal participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_order_status_request_participantorders_order_numberstatus_get_with_http_info(accept, participant, order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Accept Header (required)
        :param str participant: Alphanumerical customer number of a portal participiant (always end with \"-K\") (in german: Kunden-Nr.) (required)
        :param str order_number: Alphanumerical order number (in german: Auftrags-Nr.) (required)
        :return: GetPortalOrderStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'participant', 'order_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_order_status_request_participantorders_order_numberstatus_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `get_portal_order_status_request_participantorders_order_numberstatus_get`")  # noqa: E501
        # verify the required parameter 'participant' is set
        if ('participant' not in params or
                params['participant'] is None):
            raise ValueError("Missing the required parameter `participant` when calling `get_portal_order_status_request_participantorders_order_numberstatus_get`")  # noqa: E501
        # verify the required parameter 'order_number' is set
        if ('order_number' not in params or
                params['order_number'] is None):
            raise ValueError("Missing the required parameter `order_number` when calling `get_portal_order_status_request_participantorders_order_numberstatus_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant' in params:
            path_params['Participant'] = params['participant']  # noqa: E501
        if 'order_number' in params:
            path_params['OrderNumber'] = params['order_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/portal/{Participant}/orders/{OrderNumber}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPortalOrderStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
