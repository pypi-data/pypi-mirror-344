# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class ListBillOverviewByProdRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'base': 'BaseForListBillOverviewByProdInput',
        'bill_category_parent': 'list[str]',
        'bill_period': 'str',
        'billing_mode': 'list[str]',
        'hide_zero_discount_bill': 'str',
        'ignore_zero': 'int',
        'limit': 'int',
        'need_record_num': 'int',
        'offset': 'int',
        'order_by': 'str',
        'order_type': 'int',
        'owner_id': 'list[int]',
        'payer_id': 'list[int]',
        'product': 'list[str]',
        'subject_no': 'str'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'base': 'Base',
        'bill_category_parent': 'BillCategoryParent',
        'bill_period': 'BillPeriod',
        'billing_mode': 'BillingMode',
        'hide_zero_discount_bill': 'HideZeroDiscountBill',
        'ignore_zero': 'IgnoreZero',
        'limit': 'Limit',
        'need_record_num': 'NeedRecordNum',
        'offset': 'Offset',
        'order_by': 'OrderBy',
        'order_type': 'OrderType',
        'owner_id': 'OwnerID',
        'payer_id': 'PayerID',
        'product': 'Product',
        'subject_no': 'SubjectNo'
    }

    def __init__(self, account_id=None, base=None, bill_category_parent=None, bill_period=None, billing_mode=None, hide_zero_discount_bill=None, ignore_zero=None, limit=None, need_record_num=None, offset=None, order_by=None, order_type=None, owner_id=None, payer_id=None, product=None, subject_no=None, _configuration=None):  # noqa: E501
        """ListBillOverviewByProdRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._base = None
        self._bill_category_parent = None
        self._bill_period = None
        self._billing_mode = None
        self._hide_zero_discount_bill = None
        self._ignore_zero = None
        self._limit = None
        self._need_record_num = None
        self._offset = None
        self._order_by = None
        self._order_type = None
        self._owner_id = None
        self._payer_id = None
        self._product = None
        self._subject_no = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if base is not None:
            self.base = base
        if bill_category_parent is not None:
            self.bill_category_parent = bill_category_parent
        if bill_period is not None:
            self.bill_period = bill_period
        if billing_mode is not None:
            self.billing_mode = billing_mode
        if hide_zero_discount_bill is not None:
            self.hide_zero_discount_bill = hide_zero_discount_bill
        if ignore_zero is not None:
            self.ignore_zero = ignore_zero
        self.limit = limit
        if need_record_num is not None:
            self.need_record_num = need_record_num
        if offset is not None:
            self.offset = offset
        if order_by is not None:
            self.order_by = order_by
        if order_type is not None:
            self.order_type = order_type
        if owner_id is not None:
            self.owner_id = owner_id
        if payer_id is not None:
            self.payer_id = payer_id
        if product is not None:
            self.product = product
        if subject_no is not None:
            self.subject_no = subject_no

    @property
    def account_id(self):
        """Gets the account_id of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The account_id of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ListBillOverviewByProdRequest.


        :param account_id: The account_id of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def base(self):
        """Gets the base of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The base of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: BaseForListBillOverviewByProdInput
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this ListBillOverviewByProdRequest.


        :param base: The base of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: BaseForListBillOverviewByProdInput
        """

        self._base = base

    @property
    def bill_category_parent(self):
        """Gets the bill_category_parent of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The bill_category_parent of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._bill_category_parent

    @bill_category_parent.setter
    def bill_category_parent(self, bill_category_parent):
        """Sets the bill_category_parent of this ListBillOverviewByProdRequest.


        :param bill_category_parent: The bill_category_parent of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: list[str]
        """

        self._bill_category_parent = bill_category_parent

    @property
    def bill_period(self):
        """Gets the bill_period of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The bill_period of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: str
        """
        return self._bill_period

    @bill_period.setter
    def bill_period(self, bill_period):
        """Sets the bill_period of this ListBillOverviewByProdRequest.


        :param bill_period: The bill_period of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: str
        """

        self._bill_period = bill_period

    @property
    def billing_mode(self):
        """Gets the billing_mode of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The billing_mode of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._billing_mode

    @billing_mode.setter
    def billing_mode(self, billing_mode):
        """Sets the billing_mode of this ListBillOverviewByProdRequest.


        :param billing_mode: The billing_mode of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: list[str]
        """

        self._billing_mode = billing_mode

    @property
    def hide_zero_discount_bill(self):
        """Gets the hide_zero_discount_bill of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The hide_zero_discount_bill of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: str
        """
        return self._hide_zero_discount_bill

    @hide_zero_discount_bill.setter
    def hide_zero_discount_bill(self, hide_zero_discount_bill):
        """Sets the hide_zero_discount_bill of this ListBillOverviewByProdRequest.


        :param hide_zero_discount_bill: The hide_zero_discount_bill of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: str
        """

        self._hide_zero_discount_bill = hide_zero_discount_bill

    @property
    def ignore_zero(self):
        """Gets the ignore_zero of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The ignore_zero of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: int
        """
        return self._ignore_zero

    @ignore_zero.setter
    def ignore_zero(self, ignore_zero):
        """Sets the ignore_zero of this ListBillOverviewByProdRequest.


        :param ignore_zero: The ignore_zero of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: int
        """

        self._ignore_zero = ignore_zero

    @property
    def limit(self):
        """Gets the limit of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The limit of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListBillOverviewByProdRequest.


        :param limit: The limit of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def need_record_num(self):
        """Gets the need_record_num of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The need_record_num of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: int
        """
        return self._need_record_num

    @need_record_num.setter
    def need_record_num(self, need_record_num):
        """Sets the need_record_num of this ListBillOverviewByProdRequest.


        :param need_record_num: The need_record_num of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: int
        """

        self._need_record_num = need_record_num

    @property
    def offset(self):
        """Gets the offset of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The offset of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ListBillOverviewByProdRequest.


        :param offset: The offset of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def order_by(self):
        """Gets the order_by of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The order_by of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ListBillOverviewByProdRequest.


        :param order_by: The order_by of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    @property
    def order_type(self):
        """Gets the order_type of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The order_type of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: int
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this ListBillOverviewByProdRequest.


        :param order_type: The order_type of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: int
        """

        self._order_type = order_type

    @property
    def owner_id(self):
        """Gets the owner_id of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The owner_id of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this ListBillOverviewByProdRequest.


        :param owner_id: The owner_id of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: list[int]
        """

        self._owner_id = owner_id

    @property
    def payer_id(self):
        """Gets the payer_id of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The payer_id of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._payer_id

    @payer_id.setter
    def payer_id(self, payer_id):
        """Sets the payer_id of this ListBillOverviewByProdRequest.


        :param payer_id: The payer_id of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: list[int]
        """

        self._payer_id = payer_id

    @property
    def product(self):
        """Gets the product of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The product of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ListBillOverviewByProdRequest.


        :param product: The product of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: list[str]
        """

        self._product = product

    @property
    def subject_no(self):
        """Gets the subject_no of this ListBillOverviewByProdRequest.  # noqa: E501


        :return: The subject_no of this ListBillOverviewByProdRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject_no

    @subject_no.setter
    def subject_no(self, subject_no):
        """Sets the subject_no of this ListBillOverviewByProdRequest.


        :param subject_no: The subject_no of this ListBillOverviewByProdRequest.  # noqa: E501
        :type: str
        """

        self._subject_no = subject_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListBillOverviewByProdRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListBillOverviewByProdRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListBillOverviewByProdRequest):
            return True

        return self.to_dict() != other.to_dict()
