# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class BaseForListBillDetailInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr': 'str',
        'caller': 'str',
        'client': 'str',
        'extra': 'str',
        'log_id': 'str',
        'traffic_env': 'TrafficEnvForListBillDetailInput'
    }

    attribute_map = {
        'addr': 'Addr',
        'caller': 'Caller',
        'client': 'Client',
        'extra': 'Extra',
        'log_id': 'LogID',
        'traffic_env': 'TrafficEnv'
    }

    def __init__(self, addr=None, caller=None, client=None, extra=None, log_id=None, traffic_env=None, _configuration=None):  # noqa: E501
        """BaseForListBillDetailInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._addr = None
        self._caller = None
        self._client = None
        self._extra = None
        self._log_id = None
        self._traffic_env = None
        self.discriminator = None

        if addr is not None:
            self.addr = addr
        if caller is not None:
            self.caller = caller
        if client is not None:
            self.client = client
        if extra is not None:
            self.extra = extra
        if log_id is not None:
            self.log_id = log_id
        if traffic_env is not None:
            self.traffic_env = traffic_env

    @property
    def addr(self):
        """Gets the addr of this BaseForListBillDetailInput.  # noqa: E501


        :return: The addr of this BaseForListBillDetailInput.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this BaseForListBillDetailInput.


        :param addr: The addr of this BaseForListBillDetailInput.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def caller(self):
        """Gets the caller of this BaseForListBillDetailInput.  # noqa: E501


        :return: The caller of this BaseForListBillDetailInput.  # noqa: E501
        :rtype: str
        """
        return self._caller

    @caller.setter
    def caller(self, caller):
        """Sets the caller of this BaseForListBillDetailInput.


        :param caller: The caller of this BaseForListBillDetailInput.  # noqa: E501
        :type: str
        """

        self._caller = caller

    @property
    def client(self):
        """Gets the client of this BaseForListBillDetailInput.  # noqa: E501


        :return: The client of this BaseForListBillDetailInput.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this BaseForListBillDetailInput.


        :param client: The client of this BaseForListBillDetailInput.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def extra(self):
        """Gets the extra of this BaseForListBillDetailInput.  # noqa: E501


        :return: The extra of this BaseForListBillDetailInput.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this BaseForListBillDetailInput.


        :param extra: The extra of this BaseForListBillDetailInput.  # noqa: E501
        :type: str
        """

        self._extra = extra

    @property
    def log_id(self):
        """Gets the log_id of this BaseForListBillDetailInput.  # noqa: E501


        :return: The log_id of this BaseForListBillDetailInput.  # noqa: E501
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this BaseForListBillDetailInput.


        :param log_id: The log_id of this BaseForListBillDetailInput.  # noqa: E501
        :type: str
        """

        self._log_id = log_id

    @property
    def traffic_env(self):
        """Gets the traffic_env of this BaseForListBillDetailInput.  # noqa: E501


        :return: The traffic_env of this BaseForListBillDetailInput.  # noqa: E501
        :rtype: TrafficEnvForListBillDetailInput
        """
        return self._traffic_env

    @traffic_env.setter
    def traffic_env(self, traffic_env):
        """Sets the traffic_env of this BaseForListBillDetailInput.


        :param traffic_env: The traffic_env of this BaseForListBillDetailInput.  # noqa: E501
        :type: TrafficEnvForListBillDetailInput
        """

        self._traffic_env = traffic_env

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseForListBillDetailInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseForListBillDetailInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseForListBillDetailInput):
            return True

        return self.to_dict() != other.to_dict()
