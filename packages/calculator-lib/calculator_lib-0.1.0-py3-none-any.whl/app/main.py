from fastapi import FastAPI, HTTPException
from app.models import OperationRequest, OperationResponse
from calculadora_lib.operations import add, subtract, multiply, divide

app = FastAPI(
    title="FastAPI Calculator",
    description="üìü Uma API de Calculadora Simples feita com FastAPI.\n\nSuporta opera√ß√µes de adi√ß√£o, subtra√ß√£o, multiplica√ß√£o e divis√£o.",
    version="1.0.0"
)

example_request = {
    "a": 10,
    "b": 5
}

@app.post("/add", response_model=OperationResponse, summary="Adi√ß√£o", description="Soma dois n√∫meros.")
def add_numbers(request: OperationRequest):
    """
    Soma dois n√∫meros enviados na requisi√ß√£o.
    """
    result = add(request.a, request.b)
    return OperationResponse(result=result)

@app.post("/subtract", response_model=OperationResponse, summary="Subtra√ß√£o", description="Subtrai dois n√∫meros.")
def subtract_numbers(request: OperationRequest):
    """
    Subtrai dois n√∫meros enviados na requisi√ß√£o.
    """
    result = subtract(request.a, request.b)
    return OperationResponse(result=result)

@app.post("/multiply", response_model=OperationResponse, summary="Multiplica√ß√£o", description="Multiplica dois n√∫meros.")
def multiply_numbers(request: OperationRequest):
    """
    Multiplica dois n√∫meros enviados na requisi√ß√£o.
    """
    result = multiply(request.a, request.b)
    return OperationResponse(result=result)

@app.post("/divide", response_model=OperationResponse, summary="Divis√£o", description="Divide dois n√∫meros.")
def divide_numbers(request: OperationRequest):
    """
    Divide dois n√∫meros enviados na requisi√ß√£o.
    """
    try:
        result = divide(request.a, request.b)
        return OperationResponse(result=result)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
