image: "python:slim"

stages:
  - pages
  - build
  - publish

variables:
  PACKAGE_NAME: "heros"
  PYPI_URL: "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi"


####################################
# build script for docker images
.build-docker-image:
  tags:
    - gitlab-org-docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --cleanup
      --destination "${CI_REGISTRY_IMAGE}:${TAG_NAME}"
      --destination "${CI_REGISTRY_IMAGE}:latest"


####################################
# build
build-package:
  stage: build
  tags:
    - gitlab-org-docker
  parallel:
    matrix:
      - IMAGE: ["quay.io/pypa/manylinux_2_28_x86_64"]
  image: $IMAGE
  script:
    - pipx install poetry twine
    - poetry build  # Builds source tarball and wheel
  artifacts:
    paths:
      - dist/
  rules:
    - when: always


####################################
# publish package
publish-package:
  stage: publish
  tags:
    - gitlab-org-docker
  needs: ["build-package"]  # Ensure package is built before publishing
  before_script:
    - pip install --upgrade pip poetry twine
  script:
    - poetry config repositories.gitlab $PYPI_URL
    - poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
    - poetry publish --repository gitlab
  rules:
    - if: '$CI_COMMIT_TAG'

# publish docker image for tag
build-docker-tag:
  stage: publish
  extends: .build-docker-image
  needs: ["publish-package"]  # Ensure package is built before publishing
  variables:
    TAG_NAME: "$CI_COMMIT_TAG"
  rules:
    - if: '$CI_COMMIT_TAG'

# docker image git commit sha with last commit from master (not on tag)
build-docker:
  stage: publish
  extends: .build-docker-image
  variables:
    TAG_NAME: "$CI_COMMIT_SHORT_SHA"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'


####################################
# publish pages
pages:
  stage: pages
  tags:
    - gitlab-org-docker
  script:
    - "apt-get update && apt-get install -y make"
    - "pip install sphinx sphinx-argparse sphinx-autoapi sphinx-autodoc-typehints furo"
    - "pip install -e .[dev]"
    - "cd docs"
    - "make clean && make html"
    - "mkdir ../public"
    - "mv _build/html/* ../public"
  artifacts:
    paths:
    - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  when: always
