# ========================================================================================
# ðŸ”¹ Build System
# ========================================================================================
[build-system]
requires = ["setuptools>=61", "setuptools_scm"]
build-backend = "setuptools.build_meta"


[tool.setuptools_scm]
version_scheme = "post-release"
local_scheme = "node-and-date"

# ========================================================================================
# ðŸ”¹ PROJECT METADATA
# ========================================================================================
[project]
name = "python-build-utils"
dynamic = ["version"]

description = "Small collection of command line utilities to assist with building your python wheels"
authors = [{ name = "Eelco van Vliet", email = "eelco@davelab.nl" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.10,<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "click>=8.1.8",
    "rich>=13.9.4",
]

# Adding them here ensure that pyd are rebuild
[project.optional-dependencies]
all = [
    "pipdeptree>=2.26.0", # Used in the collect_deps_package CLI tool for collecting the dependencies
    "setuptools>=79.0.0",
    "cython>=3.0.12",
]

dep = [
    "pipdeptree>=2.26.0", # Used in the collect_deps_package CLI tool for collecting the dependencies
]

setup = [
    "setuptools>=79.0.0",
    "cython>=3.0.12",
]

[project.urls]
Repository = "https://github.com/dave-Lab-and-Engineering/python-build-utils"

[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pytest-cov>=6.0.0",
    "coverage[toml]>=7.6.1",
    "pytest-pretty>=1.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "mypy>=0.991",
    "ruff>=0.9.2",
    "deptry>=0.22.0",
    "coveralls>=4.0.1",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "mkdocstrings-python>=1.16.0",
    "pipdeptree>=2.26.0",
]
uv = [
    "uv>=0.5.29",
]

[project.scripts]
# this script can be called as `python-build-utils rename-wheel-files [args]` and
# python-build-utils remove-tarballs [args]
python-build-utils = "python_build_utils.cli_tools:cli"


# ========================================================================================
# ðŸ”¹ FORMATTING & LINTING
# ========================================================================================

# === mypy ===

[tool.mypy]
files = ["src"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true


# === ruff ===

[tool.flake8]
max-line-length = 120

[tool.pylint."MESSAGES CONTROL"]
max-line-length = 120

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # `subprocess` call: check for execution of untrusted input 
    "S603",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"src/python_build_utils/cythonized_setup.py" = []

[tool.ruff.format]
preview = true

[tool.deptry.ignore]
# Ignore pipdeptree as it is used as a CLI tool, not imported in the codebase
ignored_dependencies = [
    "python_build_utils",
]

[tool.deptry.package_module_name_map]
cython = "Cython"
setuptools = "setuptools"

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "tests/*",  # Exclude all files in the tests directory
]

# === pytest  ===
[tool.pytest.ini_options]
addopts = [
    "--cov=python-build-utils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--verbose",
    "--import-mode=importlib",
]
testpaths = [
    "tests",
]
norecursedirs = [
    "dist",
    "build",
    ".tox",
]


# ========================================================================================
# ðŸ”¹ TOX
# ========================================================================================

[tool.tox]
requires = ["tox>4", "tox-uv>=1.11.3"]
isolated_build = true
# environment other then the py environment don't work yet as they are # just running pytest
# (inherit from env_run_base), in stead of overriding with the command
# as an example, only the 'fix' environment is added here, but in stead of running pre-commit
# as defined in the commands, it is just running pytest with python version 3.13 (the default)
env_list = ["py310", "py311",  "py312", "py313", "fix", "dev", "type", "build"]

# === testenv to run pytest over all your environment ===
[tool.tox.env_run_base]
# this section runs the python tests using pytest, and coverage fo the python version given in your env_list
# to run one of the environments, use `tox -e py39` for example
# to run all environments, use `tox`
description = "Invoke pytest to run automated tests under {env_name} with coverage"
changedir = "{toxinidir}"
allowlist_externals = ["pytest", "uv"]
dependency_groups = ["dev"]
commands = [
    ["pytest", "--cov={toxinidir}", "--cov-report=xml", "--cov-report=html", "--cov-report=json:coverage.json"]
]

[tool.tox.env.build]
description = "Build the package using uv"
changedir = "{toxinidir}"
commands = [["uv",  "build"]]
allowlist_externals = ["uv"]

[tool.tox.env.fix]
runner = "uv-venv-runner"
description = "run code formatter and linter (auto-fix)"
skip_install = true
dependency_groups = ["dev"]
deps = ["pre-commit-uv >= 4.1.1"]
commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure"]]

[tool.tox.env.type]
runner = "uv-venv-lock-runner"
description = "run type checker via mypy"
dependency_groups = [
    "dev",
]
commands = [["mypy",  "{posargs:src}"]]

[tool.tox.env.dev]
runner = "uv-venv-lock-runner"
description = "dev environment"
dependency_groups = [
    "dev",
]
commands = [["uv", "pip", "tree"]]
