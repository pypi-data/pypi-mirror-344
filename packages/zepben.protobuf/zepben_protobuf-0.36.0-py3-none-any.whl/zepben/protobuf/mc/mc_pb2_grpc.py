# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from zepben.protobuf.mc import mc_requests_pb2 as zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2
from zepben.protobuf.mc import mc_responses_pb2 as zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in zepben/protobuf/mc/mc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MeasurementConsumerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAccumulatorValues = channel.unary_stream(
                '/zepben.protobuf.mc.MeasurementConsumer/getAccumulatorValues',
                request_serializer=zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2.GetAccumulatorValueRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2.GetAccumulatorValueResponse.FromString,
                _registered_method=True)
        self.getAnalogValues = channel.unary_stream(
                '/zepben.protobuf.mc.MeasurementConsumer/getAnalogValues',
                request_serializer=zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2.GetAnalogValueRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2.GetAnalogValueResponse.FromString,
                _registered_method=True)
        self.getDiscreteValues = channel.unary_stream(
                '/zepben.protobuf.mc.MeasurementConsumer/getDiscreteValues',
                request_serializer=zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2.GetDiscreteValueRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2.GetDiscreteValueResponse.FromString,
                _registered_method=True)


class MeasurementConsumerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAccumulatorValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAnalogValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDiscreteValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeasurementConsumerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAccumulatorValues': grpc.unary_stream_rpc_method_handler(
                    servicer.getAccumulatorValues,
                    request_deserializer=zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2.GetAccumulatorValueRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2.GetAccumulatorValueResponse.SerializeToString,
            ),
            'getAnalogValues': grpc.unary_stream_rpc_method_handler(
                    servicer.getAnalogValues,
                    request_deserializer=zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2.GetAnalogValueRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2.GetAnalogValueResponse.SerializeToString,
            ),
            'getDiscreteValues': grpc.unary_stream_rpc_method_handler(
                    servicer.getDiscreteValues,
                    request_deserializer=zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2.GetDiscreteValueRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2.GetDiscreteValueResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zepben.protobuf.mc.MeasurementConsumer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('zepben.protobuf.mc.MeasurementConsumer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MeasurementConsumer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAccumulatorValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/zepben.protobuf.mc.MeasurementConsumer/getAccumulatorValues',
            zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2.GetAccumulatorValueRequest.SerializeToString,
            zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2.GetAccumulatorValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAnalogValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/zepben.protobuf.mc.MeasurementConsumer/getAnalogValues',
            zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2.GetAnalogValueRequest.SerializeToString,
            zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2.GetAnalogValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getDiscreteValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/zepben.protobuf.mc.MeasurementConsumer/getDiscreteValues',
            zepben_dot_protobuf_dot_mc_dot_mc__requests__pb2.GetDiscreteValueRequest.SerializeToString,
            zepben_dot_protobuf_dot_mc_dot_mc__responses__pb2.GetDiscreteValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
