Metadata-Version: 2.4
Name: animact
Version: 1.1.0
Summary: Anime-themed action and reaction image API wrapper for Python
Home-page: https://github.com/monabborhossain/animact
Author: Monabbor Hossain
Author-email: Monabbor Hossain <monabborhossain@gmail.com>
License: MIT License
        
        Copyright (c) 2025 Monabbor Hossain
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/monabborhossain/animact
Project-URL: Documentation, https://github.com/monabborhossain/animact#readme
Project-URL: Repository, https://github.com/monabborhossain/animact.git
Project-URL: Issues, https://github.com/monabborhossain/animact/issues
Keywords: anime,reaction,image,api,async
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: httpx>=0.24.0
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# animact

Anime-themed action and reaction image API wrapper for Python.

![PyPI](https://img.shields.io/pypi/v/animact)
![License](https://img.shields.io/github/license/monabborhossain/animact)

---

## ‚ú® Features

- Simple API to fetch anime reaction/action images
- Over 50+ categories: hug, pat, slap, wave, etc.
- Both synchronous and asynchronous support
- Minimal dependencies
- Simple and easy-to-use
- Multiple import patterns for flexibility

---

## üöÄ Installation

```bash
pip install animact
```

---

## üìñ Usage

### Synchronous Usage

There are three ways to use the synchronous API:

1. **Direct Function Import** (Simplest)
```python
from animact import hug, pat
url = hug()
pat_url = pat()
```

2. **Using Default Instance**
```python
from animact import animact
url = animact.hug()
pat_url = animact.pat()
```

3. **Creating Custom Instance**
```python
from animact import Animact
client = Animact()
url = client.hug()
pat_url = client.pat()
```

### Asynchronous Usage

There are two ways to use the asynchronous API:

1. **Using Default Async Instance** (Recommended)
```python
import asyncio
from animact import async_animact

async def main():
    url = await async_animact.hug()
    pat_url = await async_animact.pat()

asyncio.run(main())
```

2. **Creating Custom Async Instance**
```python
import asyncio
from animact import AsyncAnimact

async def main():
    client = AsyncAnimact()
    url = await client.hug()
    pat_url = await client.pat()

asyncio.run(main())
```

### Complete Example

```python
import asyncio
from animact import (
    # Sync imports
    hug, pat,  # Direct functions
    animact,   # Default sync instance
    Animact,   # Sync class
    # Async imports
    async_animact,  # Default async instance
    AsyncAnimact    # Async class
)

# Synchronous usage
print("Sync - Direct functions:")
print(hug())
print(pat())

print("\nSync - Default instance:")
print(animact.hug())
print(animact.pat())

# Asynchronous usage
async def main():
    print("\nAsync - Default instance:")
    print(await async_animact.hug())
    print(await async_animact.pat())
    
    print("\nAsync - Custom instance:")
    client = AsyncAnimact()
    print(await client.hug())
    print(await client.pat())

if __name__ == "__main__":
    asyncio.run(main())
```

---

## üìö Available Actions

All these actions are available in both synchronous and asynchronous versions:

- lurk
- shoot
- sleep
- shrug
- stare
- wave
- poke
- smile
- peck
- wink
- blush
- smug
- tickle
- yeet
- think
- highfive
- feed
- bite
- bored
- nom
- yawn
- facepalm
- cuddle
- kick
- happy
- hug
- baka
- pat
- angry
- run
- nod
- nope
- kiss
- dance
- punch
- handshake
- slap
- cry
- pout
- handhold
- thumbsup
- laugh
- bully
- lick
- bonk
- glomp
- kill
- cringe
- spank

---

## üåü Star This Project

If you like this project, please consider [starring it on GitHub](https://github.com/monabborhossain/animact) ‚Äî it really helps!

---

## üßë‚Äçüíª Contributing

Pull requests are welcome. For major changes, please open an issue first.

---

## üìÑ License

MIT License ‚Äî see `LICENSE` file for details.

---

## ‚òï Support Me

[![Buy Me a Coffee](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/monabborhossain)
