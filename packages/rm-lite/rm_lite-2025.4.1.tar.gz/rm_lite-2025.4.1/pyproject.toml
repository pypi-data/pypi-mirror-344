[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "rm-lite"
dynamic = ["version"]
description = "A mini versions of RM-Tools"
authors = [
    { name = "Alec Thomson", email = "alec.thomson@csiro.au" },
]
license.file = "LICENSE"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dependencies = [
    "numpy>=1.22",
    "scipy",
    "astropy>=6",
    "tdqm",
    "deprecation",
    "finufft",
    "uncertainties",
    "bilby>=1.1.5",
    "emcee",
    "nestle",
    "corner",
    "polars",
    "sigfig",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "ruff",
    "pytest",
    "pytest-cov",
    "nox",
    "nbconvert",
    "jupyter",
    "ipython",
    "pytest"
]
docs = [
    "sphinx>=7.0",
    "myst_parser>=0.13",
    "sphinx_copybutton",
    "sphinx_autodoc_typehints",
    "furo>=2023.08.17",
    "sphinx-autoapi",
    "nbsphinx",
    "jupyter",
    "matplotlib",
]

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "rm_lite/_version.py"

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"

[tool.ruff]
src = ["rm_lite"]

[tool.ruff.lint]
extend-select = [
    "B",        # flake8-bugbear
    "I",        # isort
    "ARG",      # flake8-unused-arguments
    "C4",       # flake8-comprehensions
    "EM",       # flake8-errmsg
    "ICN",      # flake8-import-conventions
    "G",        # flake8-logging-format
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "RET",      # flake8-return
    "RUF",      # Ruff-specific
    "SIM",      # flake8-simplify
    "T20",      # flake8-print
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "EXE",      # flake8-executable
    "NPY",      # NumPy specific rules
    "PD",       # pandas-vet
]
ignore = [
    "PLR09",    # Too many <...>
    "PLR2004",  # Magic value used in comparison
    "ISC001",   # Conflicts with formatter
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["cutout_fits._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.mypy]
files = ["rm_tools", "tests"]
python_version = "3.9"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "spinifex.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = ["astropy.*", "requests", "casacore.*", "unlzw3.*", "ppigrf.*", "PyIRI.*"]
ignore_missing_imports = true


[tool.typos.default.extend-identifiers]
arange = "arange"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    "error",
]
log_cli_level = "INFO"
testpaths = [
    "tests",
]


[tool.coverage]
run.source = ["rm_lite"]
report.exclude_also = [
    '\.\.\.',
    'if typing.TYPE_CHECKING:',
]
