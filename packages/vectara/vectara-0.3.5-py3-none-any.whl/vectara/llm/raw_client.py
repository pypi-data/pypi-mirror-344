# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from ..errors.forbidden_error import ForbiddenError
from ..types.bad_request_error_body import BadRequestErrorBody
from ..types.chat_completion_request_message import ChatCompletionRequestMessage
from ..types.create_chat_completion_response import CreateChatCompletionResponse
from ..types.error import Error

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawLlmClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def chat_completion(
        self,
        *,
        model: str,
        messages: typing.Sequence[ChatCompletionRequestMessage],
        request_timeout: typing.Optional[int] = None,
        request_timeout_millis: typing.Optional[int] = None,
        stream: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CreateChatCompletionResponse]:
        """
        OpenAI-compatible endpoint for chat completions. Creates a response for the given chat conversation.
        The chat completion API allows you to chat with Vectara's language models in a way that's compatible with OpenAI's specification.
        This makes it easy to integrate with applications already designed for OpenAI's API.

        Parameters
        ----------
        model : str
            The ID of the model to use. This field is required.

        messages : typing.Sequence[ChatCompletionRequestMessage]
            An ordered array of messages that represent the full context of the conversation to date. Each message includes a `role` and `content`.

        request_timeout : typing.Optional[int]
            The API will make a best effort to complete the request in the specified seconds or time out.

        request_timeout_millis : typing.Optional[int]
            The API will make a best effort to complete the request in the specified milliseconds or time out.

        stream : typing.Optional[bool]
            Optional. When set to `true`, the API streams partial message deltas as they become available, similar to ChatGPT's streaming mode.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CreateChatCompletionResponse]
            A chat completion
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/llms/chat/completions",
            base_url=self._client_wrapper.get_environment().default,
            method="POST",
            json={
                "model": model,
                "messages": convert_and_respect_annotation_metadata(
                    object_=messages, annotation=typing.Sequence[ChatCompletionRequestMessage], direction="write"
                ),
                "stream": stream,
            },
            headers={
                "content-type": "application/json",
                "Request-Timeout": str(request_timeout) if request_timeout is not None else None,
                "Request-Timeout-Millis": str(request_timeout_millis) if request_timeout_millis is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateChatCompletionResponse,
                    parse_obj_as(
                        type_=CreateChatCompletionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        BadRequestErrorBody,
                        parse_obj_as(
                            type_=BadRequestErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawLlmClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def chat_completion(
        self,
        *,
        model: str,
        messages: typing.Sequence[ChatCompletionRequestMessage],
        request_timeout: typing.Optional[int] = None,
        request_timeout_millis: typing.Optional[int] = None,
        stream: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CreateChatCompletionResponse]:
        """
        OpenAI-compatible endpoint for chat completions. Creates a response for the given chat conversation.
        The chat completion API allows you to chat with Vectara's language models in a way that's compatible with OpenAI's specification.
        This makes it easy to integrate with applications already designed for OpenAI's API.

        Parameters
        ----------
        model : str
            The ID of the model to use. This field is required.

        messages : typing.Sequence[ChatCompletionRequestMessage]
            An ordered array of messages that represent the full context of the conversation to date. Each message includes a `role` and `content`.

        request_timeout : typing.Optional[int]
            The API will make a best effort to complete the request in the specified seconds or time out.

        request_timeout_millis : typing.Optional[int]
            The API will make a best effort to complete the request in the specified milliseconds or time out.

        stream : typing.Optional[bool]
            Optional. When set to `true`, the API streams partial message deltas as they become available, similar to ChatGPT's streaming mode.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CreateChatCompletionResponse]
            A chat completion
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/llms/chat/completions",
            base_url=self._client_wrapper.get_environment().default,
            method="POST",
            json={
                "model": model,
                "messages": convert_and_respect_annotation_metadata(
                    object_=messages, annotation=typing.Sequence[ChatCompletionRequestMessage], direction="write"
                ),
                "stream": stream,
            },
            headers={
                "content-type": "application/json",
                "Request-Timeout": str(request_timeout) if request_timeout is not None else None,
                "Request-Timeout-Millis": str(request_timeout_millis) if request_timeout_millis is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateChatCompletionResponse,
                    parse_obj_as(
                        type_=CreateChatCompletionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        BadRequestErrorBody,
                        parse_obj_as(
                            type_=BadRequestErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
