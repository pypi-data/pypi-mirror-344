# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class BadRequestErrorBody(UniversalBaseModel):
    """
    Error returned when a request contains invalid parameters or violates schema validation.
    """

    field_errors: typing.Optional[typing.Dict[str, str]] = pydantic.Field(default=None)
    """
    The errors that relate to specific fields in the request.
    """

    messages: typing.Optional[typing.List[str]] = None
    request_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the request that can be used to help Vectara support debug what went wrong.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
