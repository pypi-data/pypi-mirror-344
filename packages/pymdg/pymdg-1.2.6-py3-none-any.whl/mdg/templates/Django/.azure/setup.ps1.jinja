$LOCATION = "australiaeast"

az group create -l $LOCATION -n pyMDG-{{ package.name }}-rg
az keyvault create --enable-soft-delete false --location $LOCATION --name pyMDG-{{ package.name }}-kv --resource-group pyMDG-{{ package.name }}-rg

$res = az keyvault secret show --vault-name pyMDG-{{ package.name }}-kv --name superuser
if($?)
{
    $dict = $res | ConvertFrom-Json
    $superuser = $dict.value
}
else
{
    $superuser = Read-Host -Prompt 'enter superuser name'
    az keyvault secret set --vault-name pyMDG-{{ package.name }}-kv --name superuser --value $superuser
}

$res = az keyvault secret show --vault-name pyMDG-{{ package.name }}-kv --name superpass
if($?)
{
    $dict = $res | ConvertFrom-Json
    $superpass = $dict.value
}
else
{
    $superpass = Read-Host -Prompt 'enter superuser password'
    az keyvault secret set --vault-name pyMDG-{{ package.name }}-kv --name superpass --value $superpass
}

az extension add --name db-up
$res = az postgres server show --name pyMDG-{{ package.name }}-pg --resource-group pyMDG-{{ package.name }}-rg
if(!$?)
{
    az postgres up --resource-group pyMDG-{{ package.name }}-rg --location $LOCATION --sku-name B_Gen5_1 --server-name pyMDG-{{ package.name }}-pg --database-name {{ package.name | lower }}db --admin-user $superuser --admin-password $superpass --ssl-enforcement Enabled
}
$env:DBHOST="pymdg-{{ package.name | lower }}-pg"
$env:DBNAME="{{ package.name | lower }}db"
$env:DBUSER="$superuser"
$env:DBPASS="$superpass"

az eventhubs namespace create --resource-group pyMDG-{{ package.name }}-rg --name pymdg-{{ package.name |lower }}-ns --location $LOCATION --sku Basic --enable-kafka true
{% for child in package.children %}{% for entity in child.classes %}{% if 'notifiable' in entity.stereotypes %}
az eventhubs eventhub create --resource-group pyMDG-{{ package.name }}-rg --namespace-name pymdg-{{ package.name | lower }}-ns --name {{ child.name }}-{{ entity.name }}-upsert --message-retention 1 --partition-count 5
{% endif %}{% endfor %}{% endfor %}

$res = az webapp show --name pymdg-{{ package.name | lower }}-app --resource-group pyMDG-{{ package.name }}-rg
if(!$?)
{
    az webapp up --resource-group pyMDG-{{ package.name }}-rg --location $LOCATION --plan pyMDG-{{ package.name }}-plan --sku B1 --name pymdg-{{ package.name | lower }}-app
    az webapp config appsettings set --settings DJANGO_ENV="production" DBHOST="pymdg-{{ package.name | lower }}-pg" DBNAME="{{ package.name | lower }}db" DBUSER="$superuser" DBPASS="$superpass"
    sleep 10
}

python -m pip install --upgrade pip
pip install -r requirements.txt
python manage.py makemigrations {% for child in package.children %}{{ child.name }} {% endfor %}
python manage.py migrate
python .\manage.py getorcreatesuperuser $superuser super@sup.com $superpass
az webapp up

#az group delete --no-wait