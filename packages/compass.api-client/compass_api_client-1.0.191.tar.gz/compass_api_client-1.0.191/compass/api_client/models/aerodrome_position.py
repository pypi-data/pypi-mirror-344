# coding: utf-8

"""
    Compass API

    #### Welcome to the DeFi API from [Compass Labs](https://www.compasslabs.ai)!  Our API allows you to interact and transact in DeFi with ease.  We help you construct your transactions via a **simple REST API**.   You maintain custody at all times and **sign** all transactions **yourself**.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from compass.api_client.models.token import Token
from typing import Optional, Set
from typing_extensions import Self

class AerodromePosition(BaseModel):
    """
    AerodromePosition
    """ # noqa: E501
    nonce: StrictInt
    operator: StrictStr
    token0: Token
    token1: Token
    tick_spacing: StrictInt
    tick_lower: StrictInt
    tick_upper: StrictInt
    liquidity: StrictInt
    fee_growth_inside0_last_x128: StrictInt
    fee_growth_inside1_last_x128: StrictInt
    tokens_owed0: StrictInt
    tokens_owed1: StrictInt
    token_id: StrictInt
    __properties: ClassVar[List[str]] = ["nonce", "operator", "token0", "token1", "tick_spacing", "tick_lower", "tick_upper", "liquidity", "fee_growth_inside0_last_x128", "fee_growth_inside1_last_x128", "tokens_owed0", "tokens_owed1", "token_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AerodromePosition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AerodromePosition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nonce": obj.get("nonce"),
            "operator": obj.get("operator"),
            "token0": obj.get("token0"),
            "token1": obj.get("token1"),
            "tick_spacing": obj.get("tick_spacing"),
            "tick_lower": obj.get("tick_lower"),
            "tick_upper": obj.get("tick_upper"),
            "liquidity": obj.get("liquidity"),
            "fee_growth_inside0_last_x128": obj.get("fee_growth_inside0_last_x128"),
            "fee_growth_inside1_last_x128": obj.get("fee_growth_inside1_last_x128"),
            "tokens_owed0": obj.get("tokens_owed0"),
            "tokens_owed1": obj.get("tokens_owed1"),
            "token_id": obj.get("token_id")
        })
        return _obj


