"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execNpmView = execNpmView;
const child_process_1 = require("child_process");
const util_1 = require("util");
const api_1 = require("../../../../@aws-cdk/toolkit-lib/lib/api");
const exec = (0, util_1.promisify)(child_process_1.exec);
/* c8 ignore start */
async function execNpmView(currentVersion) {
    try {
        // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
        const [latestResult, currentResult] = await Promise.all([
            exec('npm view aws-cdk@latest version', { timeout: 3000 }),
            exec(`npm view aws-cdk@${currentVersion} name version deprecated --json`, { timeout: 3000 }),
        ]);
        if (latestResult.stderr && latestResult.stderr.trim().length > 0) {
            throw new api_1.ToolkitError(`npm view command for latest version failed: ${latestResult.stderr.trim()}`);
        }
        if (currentResult.stderr && currentResult.stderr.trim().length > 0) {
            throw new api_1.ToolkitError(`npm view command for current version failed: ${currentResult.stderr.trim()}`);
        }
        const latestVersion = latestResult.stdout;
        const currentInfo = JSON.parse(currentResult.stdout);
        return {
            latestVersion: latestVersion,
            deprecated: currentInfo.deprecated,
        };
    }
    catch (err) {
        throw err;
    }
}
/* c8 ignore stop */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibnBtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBT0Esa0NBeUJDO0FBaENELGlEQUE4QztBQUM5QywrQkFBaUM7QUFDakMsa0VBQXdFO0FBRXhFLE1BQU0sSUFBSSxHQUFHLElBQUEsZ0JBQVMsRUFBQyxvQkFBSyxDQUFDLENBQUM7QUFFOUIscUJBQXFCO0FBQ2QsS0FBSyxVQUFVLFdBQVcsQ0FBQyxjQUFzQjtJQUN0RCxJQUFJLENBQUM7UUFDSCx3RUFBd0U7UUFDeEUsTUFBTSxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDdEQsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1lBQzFELElBQUksQ0FBQyxvQkFBb0IsY0FBYyxpQ0FBaUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUM3RixDQUFDLENBQUM7UUFFSCxJQUFJLFlBQVksQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDakUsTUFBTSxJQUFJLGtCQUFZLENBQUMsK0NBQStDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RHLENBQUM7UUFDRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDbkUsTUFBTSxJQUFJLGtCQUFZLENBQUMsZ0RBQWdELGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hHLENBQUM7UUFFRCxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQzFDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXJELE9BQU87WUFDTCxhQUFhLEVBQUUsYUFBYTtZQUM1QixVQUFVLEVBQUUsV0FBVyxDQUFDLFVBQVU7U0FDbkMsQ0FBQztJQUNKLENBQUM7SUFBQyxPQUFPLEdBQVksRUFBRSxDQUFDO1FBQ3RCLE1BQU0sR0FBRyxDQUFDO0lBQ1osQ0FBQztBQUNILENBQUM7QUFDRCxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIGFzIF9leGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCB7IFRvb2xraXRFcnJvciB9IGZyb20gJy4uLy4uLy4uLy4uL0Bhd3MtY2RrL3Rvb2xraXQtbGliL2xpYi9hcGknO1xuXG5jb25zdCBleGVjID0gcHJvbWlzaWZ5KF9leGVjKTtcblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY05wbVZpZXcoY3VycmVudFZlcnNpb246IHN0cmluZykge1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAY2RrbGFicy9wcm9taXNlYWxsLW5vLXVuYm91bmRlZC1wYXJhbGxlbGlzbVxuICAgIGNvbnN0IFtsYXRlc3RSZXN1bHQsIGN1cnJlbnRSZXN1bHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgZXhlYygnbnBtIHZpZXcgYXdzLWNka0BsYXRlc3QgdmVyc2lvbicsIHsgdGltZW91dDogMzAwMCB9KSxcbiAgICAgIGV4ZWMoYG5wbSB2aWV3IGF3cy1jZGtAJHtjdXJyZW50VmVyc2lvbn0gbmFtZSB2ZXJzaW9uIGRlcHJlY2F0ZWQgLS1qc29uYCwgeyB0aW1lb3V0OiAzMDAwIH0pLFxuICAgIF0pO1xuXG4gICAgaWYgKGxhdGVzdFJlc3VsdC5zdGRlcnIgJiYgbGF0ZXN0UmVzdWx0LnN0ZGVyci50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IFRvb2xraXRFcnJvcihgbnBtIHZpZXcgY29tbWFuZCBmb3IgbGF0ZXN0IHZlcnNpb24gZmFpbGVkOiAke2xhdGVzdFJlc3VsdC5zdGRlcnIudHJpbSgpfWApO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFJlc3VsdC5zdGRlcnIgJiYgY3VycmVudFJlc3VsdC5zdGRlcnIudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRocm93IG5ldyBUb29sa2l0RXJyb3IoYG5wbSB2aWV3IGNvbW1hbmQgZm9yIGN1cnJlbnQgdmVyc2lvbiBmYWlsZWQ6ICR7Y3VycmVudFJlc3VsdC5zdGRlcnIudHJpbSgpfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGxhdGVzdFZlcnNpb24gPSBsYXRlc3RSZXN1bHQuc3Rkb3V0O1xuICAgIGNvbnN0IGN1cnJlbnRJbmZvID0gSlNPTi5wYXJzZShjdXJyZW50UmVzdWx0LnN0ZG91dCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGF0ZXN0VmVyc2lvbjogbGF0ZXN0VmVyc2lvbixcbiAgICAgIGRlcHJlY2F0ZWQ6IGN1cnJlbnRJbmZvLmRlcHJlY2F0ZWQsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuIl19