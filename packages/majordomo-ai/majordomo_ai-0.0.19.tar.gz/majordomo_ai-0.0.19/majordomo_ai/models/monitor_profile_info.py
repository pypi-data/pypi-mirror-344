# coding: utf-8

"""
    Majordomo AI

    This is a API specification for Majordomo AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from majordomo_ai.models.monitor_access_info import MonitorAccessInfo
from majordomo_ai.models.monitor_access_key import MonitorAccessKey
from majordomo_ai.models.monitor_providers import MonitorProviders
from typing import Optional, Set
from typing_extensions import Self

class MonitorProfileInfo(BaseModel):
    """
    This describes the details of a particular monitor profile.
    """ # noqa: E501
    name: StrictStr = Field(description="Name of the monitor profile.")
    provider: MonitorProviders
    access_info: Optional[MonitorAccessInfo] = None
    access_key: MonitorAccessKey
    created_by: StrictStr = Field(description="Identifies the user who created this monitor profile.")
    created_at: StrictInt = Field(description="Timestamp of the monitor profile creation.")
    last_update: StrictInt = Field(description="Timestamp of the last update to the monitor profile.")
    __properties: ClassVar[List[str]] = ["name", "provider", "access_info", "access_key", "created_by", "created_at", "last_update"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonitorProfileInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_info
        if self.access_info:
            _dict['access_info'] = self.access_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of access_key
        if self.access_key:
            _dict['access_key'] = self.access_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonitorProfileInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "provider": obj.get("provider"),
            "access_info": MonitorAccessInfo.from_dict(obj["access_info"]) if obj.get("access_info") is not None else None,
            "access_key": MonitorAccessKey.from_dict(obj["access_key"]) if obj.get("access_key") is not None else None,
            "created_by": obj.get("created_by"),
            "created_at": obj.get("created_at"),
            "last_update": obj.get("last_update")
        })
        return _obj


