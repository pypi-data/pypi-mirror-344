# coding: utf-8

"""
    Majordomo AI

    This is a API specification for Majordomo AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from majordomo_ai.models.ingest_params import IngestParams
from majordomo_ai.models.ingest_types import IngestTypes
from typing import Optional, Set
from typing_extensions import Self

class DataStoreIngest(BaseModel):
    """
    The ingest parameters that are used for performing an ingest operation using a data store.
    """ # noqa: E501
    workspace: StrictStr = Field(description="The workspace the data store belongs to.")
    data_store_name: StrictStr = Field(description="Name of the data store")
    app_profile_name: Optional[StrictStr] = Field(default=None, description="Name of the application profile")
    input_filter: Dict[str, Any] = Field(description="The set of parameters describing the source location and filters for accessing  the input files. The specific parameters vary depending on the type of source,  for example an S3 bucket will require a bucket name to be specified. ")
    ingest_type: IngestTypes
    ingest_params: Optional[IngestParams] = None
    __properties: ClassVar[List[str]] = ["workspace", "data_store_name", "app_profile_name", "input_filter", "ingest_type", "ingest_params"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataStoreIngest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ingest_params
        if self.ingest_params:
            _dict['ingest_params'] = self.ingest_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataStoreIngest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace": obj.get("workspace"),
            "data_store_name": obj.get("data_store_name"),
            "app_profile_name": obj.get("app_profile_name"),
            "input_filter": obj.get("input_filter"),
            "ingest_type": obj.get("ingest_type"),
            "ingest_params": IngestParams.from_dict(obj["ingest_params"]) if obj.get("ingest_params") is not None else None
        })
        return _obj


