# coding: utf-8

"""
    Majordomo AI

    This is a API specification for Majordomo AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from majordomo_ai.models.query_params import QueryParams
from majordomo_ai.models.query_types import QueryTypes
from typing import Optional, Set
from typing_extensions import Self

class QueryPipeline(BaseModel):
    """
    Query Pipeline
    """ # noqa: E501
    workspace: StrictStr = Field(description="The workspace this query pipeline belongs to.")
    name: StrictStr = Field(description="Name of the query pipeline.")
    query_type: QueryTypes
    data_store_names: List[StrictStr] = Field(description="The list of data stores to be used in the query.")
    embedding_model_profile: Optional[StrictStr] = Field(default=None, description="The name of the model profile to use for accessing the embedding models.")
    embedding_model: Optional[StrictStr] = Field(default=None, description="The embedding model to be used.")
    llm_model_profile: StrictStr = Field(description="The name of the model profile to use for accessing the LLM models.")
    llm_model: StrictStr = Field(description="The LLM model to be used.")
    var_query_params: Optional[QueryParams] = Field(default=None, alias="query_params")
    extra_info: Optional[StrictStr] = Field(default=None, description="For any queries that are performed using this pipeline, this content will be  used to augment the context that is provided along with the question. For example,  by default the context for SQL tables will contain the table schemas, however if we  want to detail more information about the tables for all the queries, then it can  be added here instead of repeating for each query. ")
    shared_users: Optional[List[StrictStr]] = Field(default=None, description="The list of users this profile is shared with.")
    __properties: ClassVar[List[str]] = ["workspace", "name", "query_type", "data_store_names", "embedding_model_profile", "embedding_model", "llm_model_profile", "llm_model", "query_params", "extra_info", "shared_users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryPipeline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_query_params
        if self.var_query_params:
            _dict['query_params'] = self.var_query_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryPipeline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace": obj.get("workspace"),
            "name": obj.get("name"),
            "query_type": obj.get("query_type"),
            "data_store_names": obj.get("data_store_names"),
            "embedding_model_profile": obj.get("embedding_model_profile"),
            "embedding_model": obj.get("embedding_model"),
            "llm_model_profile": obj.get("llm_model_profile"),
            "llm_model": obj.get("llm_model"),
            "query_params": QueryParams.from_dict(obj["query_params"]) if obj.get("query_params") is not None else None,
            "extra_info": obj.get("extra_info"),
            "shared_users": obj.get("shared_users")
        })
        return _obj


