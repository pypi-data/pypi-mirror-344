# coding: utf-8

"""
    Majordomo AI

    This is a API specification for Majordomo AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from majordomo_ai.models.inference_apis import InferenceApis
from majordomo_ai.models.model_providers import ModelProviders
from typing import Optional, Set
from typing_extensions import Self

class ModelProfile(BaseModel):
    """
    model profile
    """ # noqa: E501
    name: StrictStr = Field(description="Name of the model profile.")
    provider: ModelProviders
    inference_api: Optional[InferenceApis] = None
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags to describe the model where it is running or what its purpose is.")
    workspace: StrictStr = Field(description="The workspace that contains the model profile.")
    embedding_models: Optional[List[StrictStr]] = Field(default=None, description="List of embedding models allowed for a user who is associated to this profile.  Incase list is empty all models available in the provider are allowed. ")
    llm_models: Optional[List[StrictStr]] = Field(default=None, description="List of LLM models allowed for a user who is associated to this profile.  Incase list is empty all models available in the provider are allowed. ")
    access_info: Optional[Dict[str, Any]] = Field(default=None, description="Parameters required for accessing the model.")
    shared_users: Optional[List[StrictStr]] = Field(default=None, description="The list of users this profile is shared with.")
    __properties: ClassVar[List[str]] = ["name", "provider", "inference_api", "tags", "workspace", "embedding_models", "llm_models", "access_info", "shared_users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "provider": obj.get("provider"),
            "inference_api": obj.get("inference_api"),
            "tags": obj.get("tags"),
            "workspace": obj.get("workspace"),
            "embedding_models": obj.get("embedding_models"),
            "llm_models": obj.get("llm_models"),
            "access_info": obj.get("access_info"),
            "shared_users": obj.get("shared_users")
        })
        return _obj


