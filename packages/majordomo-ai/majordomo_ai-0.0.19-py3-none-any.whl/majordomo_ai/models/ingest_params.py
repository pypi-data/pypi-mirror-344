# coding: utf-8

"""
    Majordomo AI

    This is a API specification for Majordomo AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from majordomo_ai.models.file_extractor import FileExtractor
from majordomo_ai.models.metadata import Metadata
from majordomo_ai.models.summarize_doc import SummarizeDoc
from typing import Optional, Set
from typing_extensions import Self

class IngestParams(BaseModel):
    """
    User controlled ingestion parameters
    """ # noqa: E501
    chunk_size: Optional[StrictInt] = Field(default=2048, description="The chunk size used to split documents.")
    chunk_overlap: Optional[StrictInt] = Field(default=None, description="If not specified, is set to 0.75 value of chunk_size.")
    summarize_doc: Optional[SummarizeDoc] = None
    file_extractor: Optional[FileExtractor] = None
    doc_metadata: Optional[List[Metadata]] = Field(default=None, description="Dictionary of metadata key/value pairs that are to be inserted into the  vector database along with the chunks. This is useful while retrieval to  restrict the relevant chunks. ")
    __properties: ClassVar[List[str]] = ["chunk_size", "chunk_overlap", "summarize_doc", "file_extractor", "doc_metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IngestParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of summarize_doc
        if self.summarize_doc:
            _dict['summarize_doc'] = self.summarize_doc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_extractor
        if self.file_extractor:
            _dict['file_extractor'] = self.file_extractor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in doc_metadata (list)
        _items = []
        if self.doc_metadata:
            for _item_doc_metadata in self.doc_metadata:
                if _item_doc_metadata:
                    _items.append(_item_doc_metadata.to_dict())
            _dict['doc_metadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IngestParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chunk_size": obj.get("chunk_size") if obj.get("chunk_size") is not None else 2048,
            "chunk_overlap": obj.get("chunk_overlap"),
            "summarize_doc": SummarizeDoc.from_dict(obj["summarize_doc"]) if obj.get("summarize_doc") is not None else None,
            "file_extractor": FileExtractor.from_dict(obj["file_extractor"]) if obj.get("file_extractor") is not None else None,
            "doc_metadata": [Metadata.from_dict(_item) for _item in obj["doc_metadata"]] if obj.get("doc_metadata") is not None else None
        })
        return _obj


