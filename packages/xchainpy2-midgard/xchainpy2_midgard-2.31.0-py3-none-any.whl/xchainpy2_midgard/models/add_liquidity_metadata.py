# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with THORChain protocol, users should query THORNode directly.  # noqa: E501

    OpenAPI spec version: 2.31.0
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddLiquidityMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliate_address': 'str',
        'affiliate_fee': 'str',
        'liquidity_units': 'str',
        'memo': 'str'
    }

    attribute_map = {
        'affiliate_address': 'affiliateAddress',
        'affiliate_fee': 'affiliateFee',
        'liquidity_units': 'liquidityUnits',
        'memo': 'memo'
    }

    def __init__(self, affiliate_address=None, affiliate_fee=None, liquidity_units=None, memo=None):  # noqa: E501
        """AddLiquidityMetadata - a model defined in Swagger"""  # noqa: E501
        self._affiliate_address = None
        self._affiliate_fee = None
        self._liquidity_units = None
        self._memo = None
        self.discriminator = None
        self.affiliate_address = affiliate_address
        self.affiliate_fee = affiliate_fee
        self.liquidity_units = liquidity_units
        self.memo = memo

    @property
    def affiliate_address(self):
        """Gets the affiliate_address of this AddLiquidityMetadata.  # noqa: E501

        Affiliate fee address of the addLiquidity  # noqa: E501

        :return: The affiliate_address of this AddLiquidityMetadata.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_address

    @affiliate_address.setter
    def affiliate_address(self, affiliate_address):
        """Sets the affiliate_address of this AddLiquidityMetadata.

        Affiliate fee address of the addLiquidity  # noqa: E501

        :param affiliate_address: The affiliate_address of this AddLiquidityMetadata.  # noqa: E501
        :type: str
        """
        if affiliate_address is None:
            raise ValueError("Invalid value for `affiliate_address`, must not be `None`")  # noqa: E501

        self._affiliate_address = affiliate_address

    @property
    def affiliate_fee(self):
        """Gets the affiliate_fee of this AddLiquidityMetadata.  # noqa: E501

        Int64 (Basis points, 0-1000, where 1000=10%)  # noqa: E501

        :return: The affiliate_fee of this AddLiquidityMetadata.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_fee

    @affiliate_fee.setter
    def affiliate_fee(self, affiliate_fee):
        """Sets the affiliate_fee of this AddLiquidityMetadata.

        Int64 (Basis points, 0-1000, where 1000=10%)  # noqa: E501

        :param affiliate_fee: The affiliate_fee of this AddLiquidityMetadata.  # noqa: E501
        :type: str
        """
        if affiliate_fee is None:
            raise ValueError("Invalid value for `affiliate_fee`, must not be `None`")  # noqa: E501

        self._affiliate_fee = affiliate_fee

    @property
    def liquidity_units(self):
        """Gets the liquidity_units of this AddLiquidityMetadata.  # noqa: E501

        Int64, amount of liquidity units assigned to the member as result of the liquidity deposit   # noqa: E501

        :return: The liquidity_units of this AddLiquidityMetadata.  # noqa: E501
        :rtype: str
        """
        return self._liquidity_units

    @liquidity_units.setter
    def liquidity_units(self, liquidity_units):
        """Sets the liquidity_units of this AddLiquidityMetadata.

        Int64, amount of liquidity units assigned to the member as result of the liquidity deposit   # noqa: E501

        :param liquidity_units: The liquidity_units of this AddLiquidityMetadata.  # noqa: E501
        :type: str
        """
        if liquidity_units is None:
            raise ValueError("Invalid value for `liquidity_units`, must not be `None`")  # noqa: E501

        self._liquidity_units = liquidity_units

    @property
    def memo(self):
        """Gets the memo of this AddLiquidityMetadata.  # noqa: E501

        Transaction memo of the addLiquidity action  # noqa: E501

        :return: The memo of this AddLiquidityMetadata.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this AddLiquidityMetadata.

        Transaction memo of the addLiquidity action  # noqa: E501

        :param memo: The memo of this AddLiquidityMetadata.  # noqa: E501
        :type: str
        """
        if memo is None:
            raise ValueError("Invalid value for `memo`, must not be `None`")  # noqa: E501

        self._memo = memo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddLiquidityMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddLiquidityMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
