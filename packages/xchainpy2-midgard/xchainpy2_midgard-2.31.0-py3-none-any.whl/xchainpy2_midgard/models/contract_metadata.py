# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with THORChain protocol, users should query THORNode directly.  # noqa: E501

    OpenAPI spec version: 2.31.0
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'object',
        'contract_type': 'str',
        'funds': 'object',
        'msg': 'object'
    }

    attribute_map = {
        'attributes': 'attributes',
        'contract_type': 'contractType',
        'funds': 'funds',
        'msg': 'msg'
    }

    def __init__(self, attributes=None, contract_type=None, funds=None, msg=None):  # noqa: E501
        """ContractMetadata - a model defined in Swagger"""  # noqa: E501
        self._attributes = None
        self._contract_type = None
        self._funds = None
        self._msg = None
        self.discriminator = None
        self.attributes = attributes
        self.contract_type = contract_type
        if funds is not None:
            self.funds = funds
        if msg is not None:
            self.msg = msg

    @property
    def attributes(self):
        """Gets the attributes of this ContractMetadata.  # noqa: E501

        contract attributes emitted from its event  # noqa: E501

        :return: The attributes of this ContractMetadata.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ContractMetadata.

        contract attributes emitted from its event  # noqa: E501

        :param attributes: The attributes of this ContractMetadata.  # noqa: E501
        :type: object
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def contract_type(self):
        """Gets the contract_type of this ContractMetadata.  # noqa: E501

        contract type defined by cosmwasm  # noqa: E501

        :return: The contract_type of this ContractMetadata.  # noqa: E501
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this ContractMetadata.

        contract type defined by cosmwasm  # noqa: E501

        :param contract_type: The contract_type of this ContractMetadata.  # noqa: E501
        :type: str
        """
        if contract_type is None:
            raise ValueError("Invalid value for `contract_type`, must not be `None`")  # noqa: E501

        self._contract_type = contract_type

    @property
    def funds(self):
        """Gets the funds of this ContractMetadata.  # noqa: E501

        contract funds emitted from its event  # noqa: E501

        :return: The funds of this ContractMetadata.  # noqa: E501
        :rtype: object
        """
        return self._funds

    @funds.setter
    def funds(self, funds):
        """Sets the funds of this ContractMetadata.

        contract funds emitted from its event  # noqa: E501

        :param funds: The funds of this ContractMetadata.  # noqa: E501
        :type: object
        """

        self._funds = funds

    @property
    def msg(self):
        """Gets the msg of this ContractMetadata.  # noqa: E501

        contract massages emitted from its event  # noqa: E501

        :return: The msg of this ContractMetadata.  # noqa: E501
        :rtype: object
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this ContractMetadata.

        contract massages emitted from its event  # noqa: E501

        :param msg: The msg of this ContractMetadata.  # noqa: E501
        :type: object
        """

        self._msg = msg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
