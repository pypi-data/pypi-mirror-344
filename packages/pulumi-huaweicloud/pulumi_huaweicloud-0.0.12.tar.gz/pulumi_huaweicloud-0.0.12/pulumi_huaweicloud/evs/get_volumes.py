# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetVolumesResult',
    'AwaitableGetVolumesResult',
    'get_volumes',
    'get_volumes_output',
]

@pulumi.output_type
class GetVolumesResult:
    """
    A collection of values returned by getVolumes.
    """
    def __init__(__self__, availability_zone=None, dedicated_storage_id=None, dedicated_storage_name=None, enterprise_project_id=None, id=None, ids=None, metadata=None, name=None, region=None, server_id=None, service_type=None, shareable=None, sort_dir=None, sort_key=None, status=None, tags=None, volume_id=None, volume_type_id=None, volumes=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if dedicated_storage_id and not isinstance(dedicated_storage_id, str):
            raise TypeError("Expected argument 'dedicated_storage_id' to be a str")
        pulumi.set(__self__, "dedicated_storage_id", dedicated_storage_id)
        if dedicated_storage_name and not isinstance(dedicated_storage_name, str):
            raise TypeError("Expected argument 'dedicated_storage_name' to be a str")
        pulumi.set(__self__, "dedicated_storage_name", dedicated_storage_name)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, str):
            raise TypeError("Expected argument 'ids' to be a str")
        pulumi.set(__self__, "ids", ids)
        if metadata and not isinstance(metadata, str):
            raise TypeError("Expected argument 'metadata' to be a str")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if shareable and not isinstance(shareable, bool):
            raise TypeError("Expected argument 'shareable' to be a bool")
        pulumi.set(__self__, "shareable", shareable)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)
        if sort_key and not isinstance(sort_key, str):
            raise TypeError("Expected argument 'sort_key' to be a str")
        pulumi.set(__self__, "sort_key", sort_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if volume_id and not isinstance(volume_id, str):
            raise TypeError("Expected argument 'volume_id' to be a str")
        pulumi.set(__self__, "volume_id", volume_id)
        if volume_type_id and not isinstance(volume_type_id, str):
            raise TypeError("Expected argument 'volume_type_id' to be a str")
        pulumi.set(__self__, "volume_type_id", volume_type_id)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The availability zone of the disk.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> Optional[str]:
        """
        The ID of the dedicated storage pool housing the disk.
        """
        return pulumi.get(self, "dedicated_storage_id")

    @property
    @pulumi.getter(name="dedicatedStorageName")
    def dedicated_storage_name(self) -> Optional[str]:
        """
        The name of the dedicated storage pool housing the disk.
        """
        return pulumi.get(self, "dedicated_storage_name")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[str]:
        """
        The ID of the enterprise project associated with the disk.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[str]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        """
        The key-value pair disk metadata. Valid key-value pairs are as follows:
        + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
        for encryption.
        + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
        If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
        If the disk is not created from a data source, the disk is not encrypted by default.
        + **full_clone**: The creation method when the disk is created from a snapshot. `0`: linked clone. `1`: full clone.
        + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to directly
        access the underlying storage media and supports SCSI reservation commands. If this attribute is set to **false**,
        the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write commands.
        If this attribute is not specified, the disk device type is VBD.
        + **orderID**: The attribute that describes the disk billing mode in metadata. If this attribute has a value, the disk
        is billed on a yearly/monthly basis. If this attribute is empty, the disk is billed on a pay-per-use basis.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The disk name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[str]:
        """
        The ID of the server to which the disk is attached.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        The service type, such as EVS, DSS or DESS.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def shareable(self) -> Optional[bool]:
        """
        Whether the disk is shareable.
        """
        return pulumi.get(self, "shareable")

    @property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[str]:
        return pulumi.get(self, "sort_dir")

    @property
    @pulumi.getter(name="sortKey")
    def sort_key(self) -> Optional[str]:
        return pulumi.get(self, "sort_key")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The disk status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        The disk tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        """
        The disk ID.
        """
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="volumeTypeId")
    def volume_type_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_type_id")

    @property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetVolumesVolumeResult']:
        """
        The detailed information of the disks. Structure is documented below.
        """
        return pulumi.get(self, "volumes")


class AwaitableGetVolumesResult(GetVolumesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumesResult(
            availability_zone=self.availability_zone,
            dedicated_storage_id=self.dedicated_storage_id,
            dedicated_storage_name=self.dedicated_storage_name,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            ids=self.ids,
            metadata=self.metadata,
            name=self.name,
            region=self.region,
            server_id=self.server_id,
            service_type=self.service_type,
            shareable=self.shareable,
            sort_dir=self.sort_dir,
            sort_key=self.sort_key,
            status=self.status,
            tags=self.tags,
            volume_id=self.volume_id,
            volume_type_id=self.volume_type_id,
            volumes=self.volumes)


def get_volumes(availability_zone: Optional[str] = None,
                dedicated_storage_id: Optional[str] = None,
                dedicated_storage_name: Optional[str] = None,
                enterprise_project_id: Optional[str] = None,
                ids: Optional[str] = None,
                metadata: Optional[str] = None,
                name: Optional[str] = None,
                region: Optional[str] = None,
                server_id: Optional[str] = None,
                service_type: Optional[str] = None,
                shareable: Optional[bool] = None,
                sort_dir: Optional[str] = None,
                sort_key: Optional[str] = None,
                status: Optional[str] = None,
                tags: Optional[Mapping[str, str]] = None,
                volume_id: Optional[str] = None,
                volume_type_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVolumesResult:
    """
    Use this data source to query the detailed information list of the EVS disks within HuaweiCloud.


    :param str availability_zone: Specifies the availability zone for the disks.
    :param str dedicated_storage_id: Specifies the dedicated storage pool ID. All disks in the dedicated storage
           pool can be filtered by exact match.
    :param str dedicated_storage_name: Specifies the dedicated storage pool name. All disks in the dedicated
           storage pool can be filtered by fuzzy match.
    :param str enterprise_project_id: Specifies the enterprise project ID for filtering.
    :param str ids: Specifies the disk IDs. The value is in the ids=['id1','id2',...,'idx'] format.
           In the response, the `ids` value contains valid disk IDs only. Invalid disk IDs are ignored.
           The details about a maximum of `60` disks can be queried. If `volume_id` and `ids` are both specified in the request,
           `volume_id` will be ignored.
           Please pay attention to escape special characters before use. Please refer to the usage of example.
    :param str metadata: Specifies the disk metadata.
           Please pay attention to escape special characters before use. Please refer to the usage of example.
    :param str name: Specifies the name for the disks. This field will undergo a fuzzy matching query, the
           query result is for all disks whose names contain this value.
    :param str region: Specifies the region in which to query the disk list.
           If omitted, the provider-level region will be used.
    :param str server_id: Specifies the server ID to which the disks are attached.
    :param str service_type: Specifies the service type. Supported services are **EVS**, **DSS**, and **DESS**.
    :param bool shareable: Specifies whether the disk is shareable.
    :param str sort_dir: Specifies the result sorting order. The default value is **desc**.
           + **desc**: The descending order.
           + **asc**: The ascending order.
    :param str sort_key: Specifies the keyword based on which the returned results are sorted.
           The value can be **id**, **status**, **size**, or **created_at**, and the default value is **created_at**.
    :param str status: Specifies the disk status. The valid values are as following:
           + **FREEZED**
           + **BIND_ERROR**
           + **BINDING**
           + **PENDING_DELETE**
           + **PENDING_CREATE**
           + **NOTIFYING**
           + **NOTIFY_DELETE**
           + **PENDING_UPDATE**
           + **DOWN**
           + **ACTIVE**
           + **ELB**
           + **ERROR**
           + **VPN**
    :param Mapping[str, str] tags: Specifies the included key/value pairs which associated with the desired disk.
    :param str volume_id: Specifies the ID for the disk.
    :param str volume_type_id: Specifies the type ID for the disks.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['dedicatedStorageId'] = dedicated_storage_id
    __args__['dedicatedStorageName'] = dedicated_storage_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ids'] = ids
    __args__['metadata'] = metadata
    __args__['name'] = name
    __args__['region'] = region
    __args__['serverId'] = server_id
    __args__['serviceType'] = service_type
    __args__['shareable'] = shareable
    __args__['sortDir'] = sort_dir
    __args__['sortKey'] = sort_key
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['volumeId'] = volume_id
    __args__['volumeTypeId'] = volume_type_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Evs/getVolumes:getVolumes', __args__, opts=opts, typ=GetVolumesResult).value

    return AwaitableGetVolumesResult(
        availability_zone=__ret__.availability_zone,
        dedicated_storage_id=__ret__.dedicated_storage_id,
        dedicated_storage_name=__ret__.dedicated_storage_name,
        enterprise_project_id=__ret__.enterprise_project_id,
        id=__ret__.id,
        ids=__ret__.ids,
        metadata=__ret__.metadata,
        name=__ret__.name,
        region=__ret__.region,
        server_id=__ret__.server_id,
        service_type=__ret__.service_type,
        shareable=__ret__.shareable,
        sort_dir=__ret__.sort_dir,
        sort_key=__ret__.sort_key,
        status=__ret__.status,
        tags=__ret__.tags,
        volume_id=__ret__.volume_id,
        volume_type_id=__ret__.volume_type_id,
        volumes=__ret__.volumes)


@_utilities.lift_output_func(get_volumes)
def get_volumes_output(availability_zone: Optional[pulumi.Input[Optional[str]]] = None,
                       dedicated_storage_id: Optional[pulumi.Input[Optional[str]]] = None,
                       dedicated_storage_name: Optional[pulumi.Input[Optional[str]]] = None,
                       enterprise_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                       ids: Optional[pulumi.Input[Optional[str]]] = None,
                       metadata: Optional[pulumi.Input[Optional[str]]] = None,
                       name: Optional[pulumi.Input[Optional[str]]] = None,
                       region: Optional[pulumi.Input[Optional[str]]] = None,
                       server_id: Optional[pulumi.Input[Optional[str]]] = None,
                       service_type: Optional[pulumi.Input[Optional[str]]] = None,
                       shareable: Optional[pulumi.Input[Optional[bool]]] = None,
                       sort_dir: Optional[pulumi.Input[Optional[str]]] = None,
                       sort_key: Optional[pulumi.Input[Optional[str]]] = None,
                       status: Optional[pulumi.Input[Optional[str]]] = None,
                       tags: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                       volume_id: Optional[pulumi.Input[Optional[str]]] = None,
                       volume_type_id: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVolumesResult]:
    """
    Use this data source to query the detailed information list of the EVS disks within HuaweiCloud.


    :param str availability_zone: Specifies the availability zone for the disks.
    :param str dedicated_storage_id: Specifies the dedicated storage pool ID. All disks in the dedicated storage
           pool can be filtered by exact match.
    :param str dedicated_storage_name: Specifies the dedicated storage pool name. All disks in the dedicated
           storage pool can be filtered by fuzzy match.
    :param str enterprise_project_id: Specifies the enterprise project ID for filtering.
    :param str ids: Specifies the disk IDs. The value is in the ids=['id1','id2',...,'idx'] format.
           In the response, the `ids` value contains valid disk IDs only. Invalid disk IDs are ignored.
           The details about a maximum of `60` disks can be queried. If `volume_id` and `ids` are both specified in the request,
           `volume_id` will be ignored.
           Please pay attention to escape special characters before use. Please refer to the usage of example.
    :param str metadata: Specifies the disk metadata.
           Please pay attention to escape special characters before use. Please refer to the usage of example.
    :param str name: Specifies the name for the disks. This field will undergo a fuzzy matching query, the
           query result is for all disks whose names contain this value.
    :param str region: Specifies the region in which to query the disk list.
           If omitted, the provider-level region will be used.
    :param str server_id: Specifies the server ID to which the disks are attached.
    :param str service_type: Specifies the service type. Supported services are **EVS**, **DSS**, and **DESS**.
    :param bool shareable: Specifies whether the disk is shareable.
    :param str sort_dir: Specifies the result sorting order. The default value is **desc**.
           + **desc**: The descending order.
           + **asc**: The ascending order.
    :param str sort_key: Specifies the keyword based on which the returned results are sorted.
           The value can be **id**, **status**, **size**, or **created_at**, and the default value is **created_at**.
    :param str status: Specifies the disk status. The valid values are as following:
           + **FREEZED**
           + **BIND_ERROR**
           + **BINDING**
           + **PENDING_DELETE**
           + **PENDING_CREATE**
           + **NOTIFYING**
           + **NOTIFY_DELETE**
           + **PENDING_UPDATE**
           + **DOWN**
           + **ACTIVE**
           + **ELB**
           + **ERROR**
           + **VPN**
    :param Mapping[str, str] tags: Specifies the included key/value pairs which associated with the desired disk.
    :param str volume_id: Specifies the ID for the disk.
    :param str volume_type_id: Specifies the type ID for the disks.
    """
    ...
