# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'KafkaInstanceCrossVpcAccessArgs',
    'KafkaInstanceParameterArgs',
    'KafkaInstancePortProtocolArgs',
    'KafkaPermissionsPolicyArgs',
    'KafkaTopicConfigArgs',
]

@pulumi.input_type
class KafkaInstanceCrossVpcAccessArgs:
    def __init__(__self__, *,
                 advertised_ip: Optional[pulumi.Input[str]] = None,
                 lisenter_ip: Optional[pulumi.Input[str]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertised_ip: The advertised IP Address or domain name.
        :param pulumi.Input[str] listener_ip: The listener IP address.
        :param pulumi.Input[int] port: The port number.
        :param pulumi.Input[str] port_id: The port ID associated with the address.
        """
        if advertised_ip is not None:
            pulumi.set(__self__, "advertised_ip", advertised_ip)
        if lisenter_ip is not None:
            warnings.warn("""typo in lisenter_ip, please use \"listener_ip\" instead.""", DeprecationWarning)
            pulumi.log.warn("""lisenter_ip is deprecated: typo in lisenter_ip, please use \"listener_ip\" instead.""")
        if lisenter_ip is not None:
            pulumi.set(__self__, "lisenter_ip", lisenter_ip)
        if listener_ip is not None:
            pulumi.set(__self__, "listener_ip", listener_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)

    @property
    @pulumi.getter(name="advertisedIp")
    def advertised_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The advertised IP Address or domain name.
        """
        return pulumi.get(self, "advertised_ip")

    @advertised_ip.setter
    def advertised_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertised_ip", value)

    @property
    @pulumi.getter(name="lisenterIp")
    def lisenter_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lisenter_ip")

    @lisenter_ip.setter
    def lisenter_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lisenter_ip", value)

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The listener IP address.
        """
        return pulumi.get(self, "listener_ip")

    @listener_ip.setter
    def listener_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port number.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[pulumi.Input[str]]:
        """
        The port ID associated with the address.
        """
        return pulumi.get(self, "port_id")

    @port_id.setter
    def port_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_id", value)


@pulumi.input_type
class KafkaInstanceParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Specifies the parameter name. Static parameter needs to restart the instance to take effect.
        :param pulumi.Input[str] value: Specifies the parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the parameter name. Static parameter needs to restart the instance to take effect.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Specifies the parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KafkaInstancePortProtocolArgs:
    def __init__(__self__, *,
                 private_plain_address: Optional[pulumi.Input[str]] = None,
                 private_plain_domain_name: Optional[pulumi.Input[str]] = None,
                 private_plain_enable: Optional[pulumi.Input[bool]] = None,
                 private_sasl_plaintext_address: Optional[pulumi.Input[str]] = None,
                 private_sasl_plaintext_domain_name: Optional[pulumi.Input[str]] = None,
                 private_sasl_plaintext_enable: Optional[pulumi.Input[bool]] = None,
                 private_sasl_ssl_address: Optional[pulumi.Input[str]] = None,
                 private_sasl_ssl_domain_name: Optional[pulumi.Input[str]] = None,
                 private_sasl_ssl_enable: Optional[pulumi.Input[bool]] = None,
                 public_plain_address: Optional[pulumi.Input[str]] = None,
                 public_plain_domain_name: Optional[pulumi.Input[str]] = None,
                 public_plain_enable: Optional[pulumi.Input[bool]] = None,
                 public_sasl_plaintext_address: Optional[pulumi.Input[str]] = None,
                 public_sasl_plaintext_domain_name: Optional[pulumi.Input[str]] = None,
                 public_sasl_plaintext_enable: Optional[pulumi.Input[bool]] = None,
                 public_sasl_ssl_address: Optional[pulumi.Input[str]] = None,
                 public_sasl_ssl_domain_name: Optional[pulumi.Input[str]] = None,
                 public_sasl_ssl_enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] private_plain_address: The private plain address.
        :param pulumi.Input[str] private_plain_domain_name: The private plain domain name.
        :param pulumi.Input[bool] private_plain_enable: Whether the private plain enabled.
        :param pulumi.Input[str] private_sasl_plaintext_address: The private sasl plaintext address.
        :param pulumi.Input[str] private_sasl_plaintext_domain_name: The private sasl plaintext domain name.
        :param pulumi.Input[bool] private_sasl_plaintext_enable: Whether the private sasl plaintext enabled.
        :param pulumi.Input[str] private_sasl_ssl_address: The private sasl ssl address.
        :param pulumi.Input[str] private_sasl_ssl_domain_name: The private sasl ssl domain name.
        :param pulumi.Input[bool] private_sasl_ssl_enable: Whether the private sasl ssl enabled.
        :param pulumi.Input[str] public_plain_address: The public plain address.
        :param pulumi.Input[str] public_plain_domain_name: The public plain domain name.
        :param pulumi.Input[bool] public_plain_enable: Whether the public plain enabled.
        :param pulumi.Input[str] public_sasl_plaintext_address: The public sasl plaintext address.
        :param pulumi.Input[str] public_sasl_plaintext_domain_name: The public sasl plaintext domain name.
        :param pulumi.Input[bool] public_sasl_plaintext_enable: Whether the public sasl plaintext enabled.
        :param pulumi.Input[str] public_sasl_ssl_address: The public sasl ssl address.
        :param pulumi.Input[str] public_sasl_ssl_domain_name: The public sasl ssl domain name.
        :param pulumi.Input[bool] public_sasl_ssl_enable: Whether the public sasl ssl enabled.
        """
        if private_plain_address is not None:
            pulumi.set(__self__, "private_plain_address", private_plain_address)
        if private_plain_domain_name is not None:
            pulumi.set(__self__, "private_plain_domain_name", private_plain_domain_name)
        if private_plain_enable is not None:
            pulumi.set(__self__, "private_plain_enable", private_plain_enable)
        if private_sasl_plaintext_address is not None:
            pulumi.set(__self__, "private_sasl_plaintext_address", private_sasl_plaintext_address)
        if private_sasl_plaintext_domain_name is not None:
            pulumi.set(__self__, "private_sasl_plaintext_domain_name", private_sasl_plaintext_domain_name)
        if private_sasl_plaintext_enable is not None:
            pulumi.set(__self__, "private_sasl_plaintext_enable", private_sasl_plaintext_enable)
        if private_sasl_ssl_address is not None:
            pulumi.set(__self__, "private_sasl_ssl_address", private_sasl_ssl_address)
        if private_sasl_ssl_domain_name is not None:
            pulumi.set(__self__, "private_sasl_ssl_domain_name", private_sasl_ssl_domain_name)
        if private_sasl_ssl_enable is not None:
            pulumi.set(__self__, "private_sasl_ssl_enable", private_sasl_ssl_enable)
        if public_plain_address is not None:
            pulumi.set(__self__, "public_plain_address", public_plain_address)
        if public_plain_domain_name is not None:
            pulumi.set(__self__, "public_plain_domain_name", public_plain_domain_name)
        if public_plain_enable is not None:
            pulumi.set(__self__, "public_plain_enable", public_plain_enable)
        if public_sasl_plaintext_address is not None:
            pulumi.set(__self__, "public_sasl_plaintext_address", public_sasl_plaintext_address)
        if public_sasl_plaintext_domain_name is not None:
            pulumi.set(__self__, "public_sasl_plaintext_domain_name", public_sasl_plaintext_domain_name)
        if public_sasl_plaintext_enable is not None:
            pulumi.set(__self__, "public_sasl_plaintext_enable", public_sasl_plaintext_enable)
        if public_sasl_ssl_address is not None:
            pulumi.set(__self__, "public_sasl_ssl_address", public_sasl_ssl_address)
        if public_sasl_ssl_domain_name is not None:
            pulumi.set(__self__, "public_sasl_ssl_domain_name", public_sasl_ssl_domain_name)
        if public_sasl_ssl_enable is not None:
            pulumi.set(__self__, "public_sasl_ssl_enable", public_sasl_ssl_enable)

    @property
    @pulumi.getter(name="privatePlainAddress")
    def private_plain_address(self) -> Optional[pulumi.Input[str]]:
        """
        The private plain address.
        """
        return pulumi.get(self, "private_plain_address")

    @private_plain_address.setter
    def private_plain_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_plain_address", value)

    @property
    @pulumi.getter(name="privatePlainDomainName")
    def private_plain_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The private plain domain name.
        """
        return pulumi.get(self, "private_plain_domain_name")

    @private_plain_domain_name.setter
    def private_plain_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_plain_domain_name", value)

    @property
    @pulumi.getter(name="privatePlainEnable")
    def private_plain_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the private plain enabled.
        """
        return pulumi.get(self, "private_plain_enable")

    @private_plain_enable.setter
    def private_plain_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_plain_enable", value)

    @property
    @pulumi.getter(name="privateSaslPlaintextAddress")
    def private_sasl_plaintext_address(self) -> Optional[pulumi.Input[str]]:
        """
        The private sasl plaintext address.
        """
        return pulumi.get(self, "private_sasl_plaintext_address")

    @private_sasl_plaintext_address.setter
    def private_sasl_plaintext_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_sasl_plaintext_address", value)

    @property
    @pulumi.getter(name="privateSaslPlaintextDomainName")
    def private_sasl_plaintext_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The private sasl plaintext domain name.
        """
        return pulumi.get(self, "private_sasl_plaintext_domain_name")

    @private_sasl_plaintext_domain_name.setter
    def private_sasl_plaintext_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_sasl_plaintext_domain_name", value)

    @property
    @pulumi.getter(name="privateSaslPlaintextEnable")
    def private_sasl_plaintext_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the private sasl plaintext enabled.
        """
        return pulumi.get(self, "private_sasl_plaintext_enable")

    @private_sasl_plaintext_enable.setter
    def private_sasl_plaintext_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_sasl_plaintext_enable", value)

    @property
    @pulumi.getter(name="privateSaslSslAddress")
    def private_sasl_ssl_address(self) -> Optional[pulumi.Input[str]]:
        """
        The private sasl ssl address.
        """
        return pulumi.get(self, "private_sasl_ssl_address")

    @private_sasl_ssl_address.setter
    def private_sasl_ssl_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_sasl_ssl_address", value)

    @property
    @pulumi.getter(name="privateSaslSslDomainName")
    def private_sasl_ssl_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The private sasl ssl domain name.
        """
        return pulumi.get(self, "private_sasl_ssl_domain_name")

    @private_sasl_ssl_domain_name.setter
    def private_sasl_ssl_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_sasl_ssl_domain_name", value)

    @property
    @pulumi.getter(name="privateSaslSslEnable")
    def private_sasl_ssl_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the private sasl ssl enabled.
        """
        return pulumi.get(self, "private_sasl_ssl_enable")

    @private_sasl_ssl_enable.setter
    def private_sasl_ssl_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_sasl_ssl_enable", value)

    @property
    @pulumi.getter(name="publicPlainAddress")
    def public_plain_address(self) -> Optional[pulumi.Input[str]]:
        """
        The public plain address.
        """
        return pulumi.get(self, "public_plain_address")

    @public_plain_address.setter
    def public_plain_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_plain_address", value)

    @property
    @pulumi.getter(name="publicPlainDomainName")
    def public_plain_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The public plain domain name.
        """
        return pulumi.get(self, "public_plain_domain_name")

    @public_plain_domain_name.setter
    def public_plain_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_plain_domain_name", value)

    @property
    @pulumi.getter(name="publicPlainEnable")
    def public_plain_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the public plain enabled.
        """
        return pulumi.get(self, "public_plain_enable")

    @public_plain_enable.setter
    def public_plain_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_plain_enable", value)

    @property
    @pulumi.getter(name="publicSaslPlaintextAddress")
    def public_sasl_plaintext_address(self) -> Optional[pulumi.Input[str]]:
        """
        The public sasl plaintext address.
        """
        return pulumi.get(self, "public_sasl_plaintext_address")

    @public_sasl_plaintext_address.setter
    def public_sasl_plaintext_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_sasl_plaintext_address", value)

    @property
    @pulumi.getter(name="publicSaslPlaintextDomainName")
    def public_sasl_plaintext_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The public sasl plaintext domain name.
        """
        return pulumi.get(self, "public_sasl_plaintext_domain_name")

    @public_sasl_plaintext_domain_name.setter
    def public_sasl_plaintext_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_sasl_plaintext_domain_name", value)

    @property
    @pulumi.getter(name="publicSaslPlaintextEnable")
    def public_sasl_plaintext_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the public sasl plaintext enabled.
        """
        return pulumi.get(self, "public_sasl_plaintext_enable")

    @public_sasl_plaintext_enable.setter
    def public_sasl_plaintext_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_sasl_plaintext_enable", value)

    @property
    @pulumi.getter(name="publicSaslSslAddress")
    def public_sasl_ssl_address(self) -> Optional[pulumi.Input[str]]:
        """
        The public sasl ssl address.
        """
        return pulumi.get(self, "public_sasl_ssl_address")

    @public_sasl_ssl_address.setter
    def public_sasl_ssl_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_sasl_ssl_address", value)

    @property
    @pulumi.getter(name="publicSaslSslDomainName")
    def public_sasl_ssl_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The public sasl ssl domain name.
        """
        return pulumi.get(self, "public_sasl_ssl_domain_name")

    @public_sasl_ssl_domain_name.setter
    def public_sasl_ssl_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_sasl_ssl_domain_name", value)

    @property
    @pulumi.getter(name="publicSaslSslEnable")
    def public_sasl_ssl_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the public sasl ssl enabled.
        """
        return pulumi.get(self, "public_sasl_ssl_enable")

    @public_sasl_ssl_enable.setter
    def public_sasl_ssl_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_sasl_ssl_enable", value)


@pulumi.input_type
class KafkaPermissionsPolicyArgs:
    def __init__(__self__, *,
                 access_policy: pulumi.Input[str],
                 user_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_policy: Specifies the permissions type. The value can be:
               + **all**: publish and subscribe permissions.
               + **pub**: publish permissions.
               + **sub**: subscribe permissions.
        :param pulumi.Input[str] user_name: Specifies the username.
        """
        pulumi.set(__self__, "access_policy", access_policy)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="accessPolicy")
    def access_policy(self) -> pulumi.Input[str]:
        """
        Specifies the permissions type. The value can be:
        + **all**: publish and subscribe permissions.
        + **pub**: publish permissions.
        + **sub**: subscribe permissions.
        """
        return pulumi.get(self, "access_policy")

    @access_policy.setter
    def access_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_policy", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        Specifies the username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class KafkaTopicConfigArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Specifies the configuration name.
        :param pulumi.Input[str] value: Specifies the configuration value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Specifies the configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


