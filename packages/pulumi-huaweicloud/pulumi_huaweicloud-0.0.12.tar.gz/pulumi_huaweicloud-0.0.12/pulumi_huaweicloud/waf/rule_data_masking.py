# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RuleDataMaskingArgs', 'RuleDataMasking']

@pulumi.input_type
class RuleDataMaskingArgs:
    def __init__(__self__, *,
                 field: pulumi.Input[str],
                 path: pulumi.Input[str],
                 policy_id: pulumi.Input[str],
                 subfield: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a RuleDataMasking resource.
        :param pulumi.Input[str] field: Specifies the position where the masked field stored. Valid values are:
               + **params**: The field in the parameter.
               + **header**: The field in the header.
               + **form**: The field in the form.
               + **cookie**: The field in the cookie.
        :param pulumi.Input[str] path: Specifies the URL to which the data masking rule applies (exact match by default).
        :param pulumi.Input[str] policy_id: Specifies the WAF policy ID. Changing this creates a new rule.
        :param pulumi.Input[str] subfield: Specifies the name of the masked field, e.g.: **password**.
        :param pulumi.Input[str] description: Specifies the description of WAF data masking rule.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of WAF data masking rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the WAF Data Masking rule resource.
               If omitted, the provider-level region will be used. Changing this setting will create a new rule.
        :param pulumi.Input[int] status: Specifies the status of WAF web tamper protection rule.
               Valid values are as follows:
               + `0`: Disabled.
               + `1`: Enabled.
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "subfield", subfield)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        """
        Specifies the position where the masked field stored. Valid values are:
        + **params**: The field in the parameter.
        + **header**: The field in the header.
        + **form**: The field in the form.
        + **cookie**: The field in the cookie.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Specifies the URL to which the data masking rule applies (exact match by default).
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[str]:
        """
        Specifies the WAF policy ID. Changing this creates a new rule.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def subfield(self) -> pulumi.Input[str]:
        """
        Specifies the name of the masked field, e.g.: **password**.
        """
        return pulumi.get(self, "subfield")

    @subfield.setter
    def subfield(self, value: pulumi.Input[str]):
        pulumi.set(self, "subfield", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of WAF data masking rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of WAF data masking rule.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the WAF Data Masking rule resource.
        If omitted, the provider-level region will be used. Changing this setting will create a new rule.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the status of WAF web tamper protection rule.
        Valid values are as follows:
        + `0`: Disabled.
        + `1`: Enabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _RuleDataMaskingState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 subfield: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RuleDataMasking resources.
        :param pulumi.Input[str] description: Specifies the description of WAF data masking rule.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of WAF data masking rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] field: Specifies the position where the masked field stored. Valid values are:
               + **params**: The field in the parameter.
               + **header**: The field in the header.
               + **form**: The field in the form.
               + **cookie**: The field in the cookie.
        :param pulumi.Input[str] path: Specifies the URL to which the data masking rule applies (exact match by default).
        :param pulumi.Input[str] policy_id: Specifies the WAF policy ID. Changing this creates a new rule.
        :param pulumi.Input[str] region: Specifies the region in which to create the WAF Data Masking rule resource.
               If omitted, the provider-level region will be used. Changing this setting will create a new rule.
        :param pulumi.Input[int] status: Specifies the status of WAF web tamper protection rule.
               Valid values are as follows:
               + `0`: Disabled.
               + `1`: Enabled.
        :param pulumi.Input[str] subfield: Specifies the name of the masked field, e.g.: **password**.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subfield is not None:
            pulumi.set(__self__, "subfield", subfield)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of WAF data masking rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of WAF data masking rule.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the position where the masked field stored. Valid values are:
        + **params**: The field in the parameter.
        + **header**: The field in the header.
        + **form**: The field in the form.
        + **cookie**: The field in the cookie.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the URL to which the data masking rule applies (exact match by default).
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the WAF policy ID. Changing this creates a new rule.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the WAF Data Masking rule resource.
        If omitted, the provider-level region will be used. Changing this setting will create a new rule.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the status of WAF web tamper protection rule.
        Valid values are as follows:
        + `0`: Disabled.
        + `1`: Enabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def subfield(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the masked field, e.g.: **password**.
        """
        return pulumi.get(self, "subfield")

    @subfield.setter
    def subfield(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subfield", value)


class RuleDataMasking(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 subfield: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a WAF Data Masking Rule resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The data masking rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        policy_id = config.require_object("policyId")
        test = huaweicloud.waf.RuleDataMasking("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            path="/login",
            field="params",
            subfield="password",
            description="test description")
        ```

        ## Import

        There are two ways to import WAF rule data masking state. * Using `policy_id` and `rule_id`, separated by a slash, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Waf/ruleDataMasking:RuleDataMasking test <policy_id>/<rule_id>
        ```

         * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Waf/ruleDataMasking:RuleDataMasking test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Specifies the description of WAF data masking rule.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of WAF data masking rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] field: Specifies the position where the masked field stored. Valid values are:
               + **params**: The field in the parameter.
               + **header**: The field in the header.
               + **form**: The field in the form.
               + **cookie**: The field in the cookie.
        :param pulumi.Input[str] path: Specifies the URL to which the data masking rule applies (exact match by default).
        :param pulumi.Input[str] policy_id: Specifies the WAF policy ID. Changing this creates a new rule.
        :param pulumi.Input[str] region: Specifies the region in which to create the WAF Data Masking rule resource.
               If omitted, the provider-level region will be used. Changing this setting will create a new rule.
        :param pulumi.Input[int] status: Specifies the status of WAF web tamper protection rule.
               Valid values are as follows:
               + `0`: Disabled.
               + `1`: Enabled.
        :param pulumi.Input[str] subfield: Specifies the name of the masked field, e.g.: **password**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleDataMaskingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a WAF Data Masking Rule resource within HuaweiCloud.

        > **NOTE:** All WAF resources depend on WAF instances, and the WAF instances need to be purchased before they can be
        used. The data masking rule resource can be used in Cloud Mode and Dedicated Mode.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        policy_id = config.require_object("policyId")
        test = huaweicloud.waf.RuleDataMasking("test",
            policy_id=policy_id,
            enterprise_project_id=enterprise_project_id,
            path="/login",
            field="params",
            subfield="password",
            description="test description")
        ```

        ## Import

        There are two ways to import WAF rule data masking state. * Using `policy_id` and `rule_id`, separated by a slash, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Waf/ruleDataMasking:RuleDataMasking test <policy_id>/<rule_id>
        ```

         * Using `policy_id`, `rule_id` and `enterprise_project_id`, separated by slashes, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Waf/ruleDataMasking:RuleDataMasking test <policy_id>/<rule_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param RuleDataMaskingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleDataMaskingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 subfield: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleDataMaskingArgs.__new__(RuleDataMaskingArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if field is None and not opts.urn:
                raise TypeError("Missing required property 'field'")
            __props__.__dict__["field"] = field
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = status
            if subfield is None and not opts.urn:
                raise TypeError("Missing required property 'subfield'")
            __props__.__dict__["subfield"] = subfield
        super(RuleDataMasking, __self__).__init__(
            'huaweicloud:Waf/ruleDataMasking:RuleDataMasking',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            field: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            policy_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            subfield: Optional[pulumi.Input[str]] = None) -> 'RuleDataMasking':
        """
        Get an existing RuleDataMasking resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Specifies the description of WAF data masking rule.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of WAF data masking rule.
               For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] field: Specifies the position where the masked field stored. Valid values are:
               + **params**: The field in the parameter.
               + **header**: The field in the header.
               + **form**: The field in the form.
               + **cookie**: The field in the cookie.
        :param pulumi.Input[str] path: Specifies the URL to which the data masking rule applies (exact match by default).
        :param pulumi.Input[str] policy_id: Specifies the WAF policy ID. Changing this creates a new rule.
        :param pulumi.Input[str] region: Specifies the region in which to create the WAF Data Masking rule resource.
               If omitted, the provider-level region will be used. Changing this setting will create a new rule.
        :param pulumi.Input[int] status: Specifies the status of WAF web tamper protection rule.
               Valid values are as follows:
               + `0`: Disabled.
               + `1`: Enabled.
        :param pulumi.Input[str] subfield: Specifies the name of the masked field, e.g.: **password**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RuleDataMaskingState.__new__(_RuleDataMaskingState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["field"] = field
        __props__.__dict__["path"] = path
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["subfield"] = subfield
        return RuleDataMasking(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Specifies the description of WAF data masking rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the enterprise project ID of WAF data masking rule.
        For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def field(self) -> pulumi.Output[str]:
        """
        Specifies the position where the masked field stored. Valid values are:
        + **params**: The field in the parameter.
        + **header**: The field in the header.
        + **form**: The field in the form.
        + **cookie**: The field in the cookie.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        Specifies the URL to which the data masking rule applies (exact match by default).
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[str]:
        """
        Specifies the WAF policy ID. Changing this creates a new rule.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the WAF Data Masking rule resource.
        If omitted, the provider-level region will be used. Changing this setting will create a new rule.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the status of WAF web tamper protection rule.
        Valid values are as follows:
        + `0`: Disabled.
        + `1`: Enabled.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def subfield(self) -> pulumi.Output[str]:
        """
        Specifies the name of the masked field, e.g.: **password**.
        """
        return pulumi.get(self, "subfield")

