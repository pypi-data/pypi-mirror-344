# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DatabaseRoleInheritedPrivilegeArgs',
    'DatabaseRoleInheritedPrivilegeResourceArgs',
    'DatabaseRolePrivilegeArgs',
    'DatabaseRolePrivilegeResourceArgs',
    'DatabaseRoleRoleArgs',
    'DatabaseUserInheritedPrivilegeArgs',
    'DatabaseUserInheritedPrivilegeResourceArgs',
    'DatabaseUserPrivilegeArgs',
    'DatabaseUserPrivilegeResourceArgs',
    'DatabaseUserRoleArgs',
    'InstanceBackupStrategyArgs',
    'InstanceConfigurationArgs',
    'InstanceDatastoreArgs',
    'InstanceFlavorArgs',
    'InstanceGroupArgs',
    'InstanceGroupNodeArgs',
    'InstanceNodeArgs',
]

@pulumi.input_type
class DatabaseRoleInheritedPrivilegeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRoleInheritedPrivilegeResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: The operation permission list.
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseRoleInheritedPrivilegeResourceArgs']]] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRoleInheritedPrivilegeResourceArgs']]]]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRoleInheritedPrivilegeResourceArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class DatabaseRoleInheritedPrivilegeResourceArgs:
    def __init__(__self__, *,
                 collection: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] collection: The database collection type.
        :param pulumi.Input[str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[str]]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)


@pulumi.input_type
class DatabaseRolePrivilegeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRolePrivilegeResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: The operation permission list.
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseRolePrivilegeResourceArgs']]] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRolePrivilegeResourceArgs']]]]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseRolePrivilegeResourceArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class DatabaseRolePrivilegeResourceArgs:
    def __init__(__self__, *,
                 collection: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] collection: The database collection type.
        :param pulumi.Input[str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[str]]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)


@pulumi.input_type
class DatabaseRoleRoleArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        :param pulumi.Input[str] name: Specifies the name of role owned by the current role.
               The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
               allowed. Changing this parameter will create a new role.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the name of role owned by the current role.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatabaseUserInheritedPrivilegeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserInheritedPrivilegeResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: The operation permission list.
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseUserInheritedPrivilegeResourceArgs']]] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserInheritedPrivilegeResourceArgs']]]]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserInheritedPrivilegeResourceArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class DatabaseUserInheritedPrivilegeResourceArgs:
    def __init__(__self__, *,
                 collection: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] collection: The database collection type.
        :param pulumi.Input[str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[str]]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)


@pulumi.input_type
class DatabaseUserPrivilegeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserPrivilegeResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: The operation permission list.
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseUserPrivilegeResourceArgs']]] resources: The details of the resource to which the privilege belongs.
               The resources structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserPrivilegeResourceArgs']]]]:
        """
        The details of the resource to which the privilege belongs.
        The resources structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserPrivilegeResourceArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class DatabaseUserPrivilegeResourceArgs:
    def __init__(__self__, *,
                 collection: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] collection: The database collection type.
        :param pulumi.Input[str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[str]]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)


@pulumi.input_type
class DatabaseUserRoleArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        :param pulumi.Input[str] name: Specifies the name of role owned by the current user.
               The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
               allowed. Changing this parameter will create a new user.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the name of role owned by the current user.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InstanceBackupStrategyArgs:
    def __init__(__self__, *,
                 keep_days: pulumi.Input[int],
                 start_time: pulumi.Input[str],
                 period: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] keep_days: Specifies the number of days to retain the generated backup files. The value range is
               from 0 to 732. If this parameter is set to 0, the automated backup policy is disabled.
        :param pulumi.Input[str] start_time: Specifies the backup time window. Automated backups will be triggered during
               the backup time window. The value cannot be empty. It must be a valid value in the "hh:mm-HH:MM" format.
               The current time is in the UTC format.
               + The HH value must be 1 greater than the hh value.
               + The values from mm and MM must be the same and must be set to **00**.
        :param pulumi.Input[str] period: Specifies the backup cycle. Data will be automatically backed up on the
               selected days every week.
               + If you set the `keep_days` to 0, this parameter is no need to set.
               + If you set the `keep_days` within 6 days, set the parameter value to **1,2,3,4,5,6,7**, data is automatically
               backed up on each day every week.
               + If you set the `keep_days` between 7 and 732 days, set the parameter value to at least one day of every week.
               For example: **1**, **3,5**.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> pulumi.Input[int]:
        """
        Specifies the number of days to retain the generated backup files. The value range is
        from 0 to 732. If this parameter is set to 0, the automated backup policy is disabled.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "keep_days", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Specifies the backup time window. Automated backups will be triggered during
        the backup time window. The value cannot be empty. It must be a valid value in the "hh:mm-HH:MM" format.
        The current time is in the UTC format.
        + The HH value must be 1 greater than the hh value.
        + The values from mm and MM must be the same and must be set to **00**.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the backup cycle. Data will be automatically backed up on the
        selected days every week.
        + If you set the `keep_days` to 0, this parameter is no need to set.
        + If you set the `keep_days` within 6 days, set the parameter value to **1,2,3,4,5,6,7**, data is automatically
        backed up on each day every week.
        + If you set the `keep_days` between 7 and 732 days, set the parameter value to at least one day of every week.
        For example: **1**, **3,5**.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)


@pulumi.input_type
class InstanceConfigurationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: Specifies the ID of the template.
        :param pulumi.Input[str] type: Specifies the node type. Valid value:
               + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For a replica set instance, the value is **replica**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the template.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the node type. Valid value:
        + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For a replica set instance, the value is **replica**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class InstanceDatastoreArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 version: pulumi.Input[str],
                 storage_engine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Specifies the node type. Valid value:
               + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For a replica set instance, the value is **replica**.
        :param pulumi.Input[str] version: Specifies the DB instance version. For the Community Edition, the valid
               values are `4.0`, `4.2`, `4.4` or `5.0`.
        :param pulumi.Input[str] storage_engine: Specifies the storage engine of the DB instance.
               If `version` is set to `4.0`, the value is **wiredTiger**.
               If `version` is set to `4.2`, `4.4` or `5.0`, the value is **rocksDB**.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if storage_engine is not None:
            pulumi.set(__self__, "storage_engine", storage_engine)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the node type. Valid value:
        + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For a replica set instance, the value is **replica**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Specifies the DB instance version. For the Community Edition, the valid
        values are `4.0`, `4.2`, `4.4` or `5.0`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the storage engine of the DB instance.
        If `version` is set to `4.0`, the value is **wiredTiger**.
        If `version` is set to `4.2`, `4.4` or `5.0`, the value is **rocksDB**.
        """
        return pulumi.get(self, "storage_engine")

    @storage_engine.setter
    def storage_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_engine", value)


@pulumi.input_type
class InstanceFlavorArgs:
    def __init__(__self__, *,
                 num: pulumi.Input[int],
                 spec_code: pulumi.Input[str],
                 type: pulumi.Input[str],
                 size: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] num: Specifies the node quantity. Valid value:
               + If the value of type is **mongos**, num indicates the number of mongos nodes in the cluster instance. Value ranges
               from `2` to `16`.
               + If the value of type is **shard**, num indicates the number of shard groups in the cluster instance. Value ranges
               from `2` to `16`.
               + If the value of type is **config**, num indicates the number of config groups in the cluster instance. Value can
               only be `1`.
               + If the value of type is **replica**, num indicates the number of replica nodes in the replica set instance. Value
               can be `3`, `5`, or `7`.
        :param pulumi.Input[str] spec_code: Specifies the resource specification code. In a cluster instance, multiple
               specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
               enhanced (c3), or enhanced II (c6). For example:
               + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
               + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications.
        :param pulumi.Input[str] type: Specifies the node type. Valid value:
               + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For a replica set instance, the value is **replica**.
        :param pulumi.Input[int] size: Specifies the disk size. The value must be a multiple of `10`. The unit is GB. This parameter
               is mandatory for nodes except mongos and invalid for mongos.For a cluster instance, the storage space of a shard node
               can be `10` to `2,000` GB, and the config storage space is `20` GB. For a replica set instance, the value ranges
               from `10` to `3000` GB. This parameter can be updated when the value of `type` is shard or replica.
        :param pulumi.Input[str] storage: Specifies the disk type. Valid value:
               + **ULTRAHIGH**: SSD storage.
               + **EXTREMEHIGH**: Extreme SSD storage.
        """
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def num(self) -> pulumi.Input[int]:
        """
        Specifies the node quantity. Valid value:
        + If the value of type is **mongos**, num indicates the number of mongos nodes in the cluster instance. Value ranges
        from `2` to `16`.
        + If the value of type is **shard**, num indicates the number of shard groups in the cluster instance. Value ranges
        from `2` to `16`.
        + If the value of type is **config**, num indicates the number of config groups in the cluster instance. Value can
        only be `1`.
        + If the value of type is **replica**, num indicates the number of replica nodes in the replica set instance. Value
        can be `3`, `5`, or `7`.
        """
        return pulumi.get(self, "num")

    @num.setter
    def num(self, value: pulumi.Input[int]):
        pulumi.set(self, "num", value)

    @property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> pulumi.Input[str]:
        """
        Specifies the resource specification code. In a cluster instance, multiple
        specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
        enhanced (c3), or enhanced II (c6). For example:
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications.
        """
        return pulumi.get(self, "spec_code")

    @spec_code.setter
    def spec_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "spec_code", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the node type. Valid value:
        + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For a replica set instance, the value is **replica**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the disk size. The value must be a multiple of `10`. The unit is GB. This parameter
        is mandatory for nodes except mongos and invalid for mongos.For a cluster instance, the storage space of a shard node
        can be `10` to `2,000` GB, and the config storage space is `20` GB. For a replica set instance, the value ranges
        from `10` to `3000` GB. This parameter can be updated when the value of `type` is shard or replica.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the disk type. Valid value:
        + **ULTRAHIGH**: SSD storage.
        + **EXTREMEHIGH**: Extreme SSD storage.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class InstanceGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupNodeArgs']]]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 used: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Specifies the ID of the template.
        :param pulumi.Input[str] name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupNodeArgs']]] nodes: Indicates the nodes info.
               The nodes structure is documented below.
        :param pulumi.Input[str] size: Specifies the disk size. The value must be a multiple of `10`. The unit is GB. This parameter
               is mandatory for nodes except mongos and invalid for mongos.For a cluster instance, the storage space of a shard node
               can be `10` to `2,000` GB, and the config storage space is `20` GB. For a replica set instance, the value ranges
               from `10` to `3000` GB. This parameter can be updated when the value of `type` is shard or replica.
        :param pulumi.Input[str] status: Indicates the node status.
        :param pulumi.Input[str] type: Specifies the node type. Valid value:
               + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For a replica set instance, the value is **replica**.
        :param pulumi.Input[str] used: Indicates the disk usage.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the template.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupNodeArgs']]]]:
        """
        Indicates the nodes info.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the disk size. The value must be a multiple of `10`. The unit is GB. This parameter
        is mandatory for nodes except mongos and invalid for mongos.For a cluster instance, the storage space of a shard node
        can be `10` to `2,000` GB, and the config storage space is `20` GB. For a replica set instance, the value ranges
        from `10` to `3000` GB. This parameter can be updated when the value of `type` is shard or replica.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the node type. Valid value:
        + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For a replica set instance, the value is **replica**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def used(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the disk usage.
        """
        return pulumi.get(self, "used")

    @used.setter
    def used(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "used", value)


@pulumi.input_type
class InstanceGroupNodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Specifies the ID of the template.
        :param pulumi.Input[str] name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param pulumi.Input[str] private_ip: Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
               instances, and single node instances.
        :param pulumi.Input[str] public_ip: Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
               cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        :param pulumi.Input[str] role: Indicates the node role.
        :param pulumi.Input[str] status: Indicates the node status.
        :param pulumi.Input[str] type: Specifies the node type. Valid value:
               + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For a replica set instance, the value is **replica**.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the template.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
        instances, and single node instances.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
        cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the node type. Valid value:
        + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For a replica set instance, the value is **replica**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class InstanceNodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Specifies the ID of the template.
        :param pulumi.Input[str] name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param pulumi.Input[str] private_ip: Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
               instances, and single node instances.
        :param pulumi.Input[str] public_ip: Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
               cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        :param pulumi.Input[str] role: Indicates the node role.
        :param pulumi.Input[str] status: Indicates the node status.
        :param pulumi.Input[str] type: Specifies the node type. Valid value:
               + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For a replica set instance, the value is **replica**.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the template.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
        instances, and single node instances.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
        cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the node type. Valid value:
        + For a cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For a replica set instance, the value is **replica**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


