# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProtectionRulesResult',
    'AwaitableGetProtectionRulesResult',
    'get_protection_rules',
    'get_protection_rules_output',
]

@pulumi.output_type
class GetProtectionRulesResult:
    """
    A collection of values returned by getProtectionRules.
    """
    def __init__(__self__, action_type=None, destination=None, direction=None, fw_instance_id=None, id=None, name=None, object_id=None, records=None, region=None, rule_id=None, source=None, status=None, tags=None, type=None):
        if action_type and not isinstance(action_type, str):
            raise TypeError("Expected argument 'action_type' to be a str")
        pulumi.set(__self__, "action_type", action_type)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if fw_instance_id and not isinstance(fw_instance_id, str):
            raise TypeError("Expected argument 'fw_instance_id' to be a str")
        pulumi.set(__self__, "fw_instance_id", fw_instance_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_id and not isinstance(object_id, str):
            raise TypeError("Expected argument 'object_id' to be a str")
        pulumi.set(__self__, "object_id", object_id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        """
        The rule action type.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        """
        The destination configuration.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The direction of a rule.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="fwInstanceId")
    def fw_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "fw_instance_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The custom service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetProtectionRulesRecordResult']:
        """
        The protection rule list.
        """
        return pulumi.get(self, "records")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        """
        The rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source configuration.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The rule status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        The tag of a rule.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The source type.
        """
        return pulumi.get(self, "type")


class AwaitableGetProtectionRulesResult(GetProtectionRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProtectionRulesResult(
            action_type=self.action_type,
            destination=self.destination,
            direction=self.direction,
            fw_instance_id=self.fw_instance_id,
            id=self.id,
            name=self.name,
            object_id=self.object_id,
            records=self.records,
            region=self.region,
            rule_id=self.rule_id,
            source=self.source,
            status=self.status,
            tags=self.tags,
            type=self.type)


def get_protection_rules(action_type: Optional[str] = None,
                         destination: Optional[str] = None,
                         direction: Optional[str] = None,
                         fw_instance_id: Optional[str] = None,
                         name: Optional[str] = None,
                         object_id: Optional[str] = None,
                         region: Optional[str] = None,
                         rule_id: Optional[str] = None,
                         source: Optional[str] = None,
                         status: Optional[str] = None,
                         tags: Optional[Mapping[str, str]] = None,
                         type: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProtectionRulesResult:
    """
    Use this data source to get the list of CFW protection rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    object_id = config.require_object("objectId")
    name = config.require_object("name")
    test = huaweicloud.Cfw.get_protection_rules(object_id=object_id,
        name=name)
    ```


    :param str action_type: Specifies the rule action type.
           The options are as follows:
           + **0**: allow;
           + **1**: deny.
    :param str destination: Specifies the destination address.
    :param str direction: Specifies the rule direction.
           The options are as follows:
           + **0**: inbound;
           + **1**: outbound.
    :param str fw_instance_id: Specifies the firewall instance ID.
    :param str name: Specifies the rule name.
    :param str object_id: Specifies the protected object ID.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str rule_id: Specifies the rule ID.
    :param str source: Specifies the source address.
    :param str status: Specifies the rule status.
           The options are as follows:
           + **0**: disabled;
           + **1**: enabled.
    :param Mapping[str, str] tags: Specifies the key/value pairs to associate with the protection rule.
           Tags should have only one key/value pair.
    :param str type: Specifies the rule type.
           The value can be **0** (Internet rule), **1** (VPC rule), or **2** (NAT rule).
    """
    __args__ = dict()
    __args__['actionType'] = action_type
    __args__['destination'] = destination
    __args__['direction'] = direction
    __args__['fwInstanceId'] = fw_instance_id
    __args__['name'] = name
    __args__['objectId'] = object_id
    __args__['region'] = region
    __args__['ruleId'] = rule_id
    __args__['source'] = source
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cfw/getProtectionRules:getProtectionRules', __args__, opts=opts, typ=GetProtectionRulesResult).value

    return AwaitableGetProtectionRulesResult(
        action_type=__ret__.action_type,
        destination=__ret__.destination,
        direction=__ret__.direction,
        fw_instance_id=__ret__.fw_instance_id,
        id=__ret__.id,
        name=__ret__.name,
        object_id=__ret__.object_id,
        records=__ret__.records,
        region=__ret__.region,
        rule_id=__ret__.rule_id,
        source=__ret__.source,
        status=__ret__.status,
        tags=__ret__.tags,
        type=__ret__.type)


@_utilities.lift_output_func(get_protection_rules)
def get_protection_rules_output(action_type: Optional[pulumi.Input[Optional[str]]] = None,
                                destination: Optional[pulumi.Input[Optional[str]]] = None,
                                direction: Optional[pulumi.Input[Optional[str]]] = None,
                                fw_instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                object_id: Optional[pulumi.Input[str]] = None,
                                region: Optional[pulumi.Input[Optional[str]]] = None,
                                rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                                source: Optional[pulumi.Input[Optional[str]]] = None,
                                status: Optional[pulumi.Input[Optional[str]]] = None,
                                tags: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                type: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProtectionRulesResult]:
    """
    Use this data source to get the list of CFW protection rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    object_id = config.require_object("objectId")
    name = config.require_object("name")
    test = huaweicloud.Cfw.get_protection_rules(object_id=object_id,
        name=name)
    ```


    :param str action_type: Specifies the rule action type.
           The options are as follows:
           + **0**: allow;
           + **1**: deny.
    :param str destination: Specifies the destination address.
    :param str direction: Specifies the rule direction.
           The options are as follows:
           + **0**: inbound;
           + **1**: outbound.
    :param str fw_instance_id: Specifies the firewall instance ID.
    :param str name: Specifies the rule name.
    :param str object_id: Specifies the protected object ID.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str rule_id: Specifies the rule ID.
    :param str source: Specifies the source address.
    :param str status: Specifies the rule status.
           The options are as follows:
           + **0**: disabled;
           + **1**: enabled.
    :param Mapping[str, str] tags: Specifies the key/value pairs to associate with the protection rule.
           Tags should have only one key/value pair.
    :param str type: Specifies the rule type.
           The value can be **0** (Internet rule), **1** (VPC rule), or **2** (NAT rule).
    """
    ...
