# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAttackLogsResult',
    'AwaitableGetAttackLogsResult',
    'get_attack_logs',
    'get_attack_logs_output',
]

@pulumi.output_type
class GetAttackLogsResult:
    """
    A collection of values returned by getAttackLogs.
    """
    def __init__(__self__, app=None, attack_rule=None, attack_rule_id=None, attack_type=None, dst_city_name=None, dst_ip=None, dst_port=None, dst_province_name=None, dst_region_name=None, end_time=None, enterprise_project_id=None, fw_instance_id=None, id=None, level=None, log_type=None, records=None, region=None, src_city_name=None, src_ip=None, src_port=None, src_province_name=None, src_region_name=None, start_time=None):
        if app and not isinstance(app, str):
            raise TypeError("Expected argument 'app' to be a str")
        pulumi.set(__self__, "app", app)
        if attack_rule and not isinstance(attack_rule, str):
            raise TypeError("Expected argument 'attack_rule' to be a str")
        pulumi.set(__self__, "attack_rule", attack_rule)
        if attack_rule_id and not isinstance(attack_rule_id, str):
            raise TypeError("Expected argument 'attack_rule_id' to be a str")
        pulumi.set(__self__, "attack_rule_id", attack_rule_id)
        if attack_type and not isinstance(attack_type, str):
            raise TypeError("Expected argument 'attack_type' to be a str")
        pulumi.set(__self__, "attack_type", attack_type)
        if dst_city_name and not isinstance(dst_city_name, str):
            raise TypeError("Expected argument 'dst_city_name' to be a str")
        pulumi.set(__self__, "dst_city_name", dst_city_name)
        if dst_ip and not isinstance(dst_ip, str):
            raise TypeError("Expected argument 'dst_ip' to be a str")
        pulumi.set(__self__, "dst_ip", dst_ip)
        if dst_port and not isinstance(dst_port, int):
            raise TypeError("Expected argument 'dst_port' to be a int")
        pulumi.set(__self__, "dst_port", dst_port)
        if dst_province_name and not isinstance(dst_province_name, str):
            raise TypeError("Expected argument 'dst_province_name' to be a str")
        pulumi.set(__self__, "dst_province_name", dst_province_name)
        if dst_region_name and not isinstance(dst_region_name, str):
            raise TypeError("Expected argument 'dst_region_name' to be a str")
        pulumi.set(__self__, "dst_region_name", dst_region_name)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if fw_instance_id and not isinstance(fw_instance_id, str):
            raise TypeError("Expected argument 'fw_instance_id' to be a str")
        pulumi.set(__self__, "fw_instance_id", fw_instance_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if level and not isinstance(level, str):
            raise TypeError("Expected argument 'level' to be a str")
        pulumi.set(__self__, "level", level)
        if log_type and not isinstance(log_type, str):
            raise TypeError("Expected argument 'log_type' to be a str")
        pulumi.set(__self__, "log_type", log_type)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if src_city_name and not isinstance(src_city_name, str):
            raise TypeError("Expected argument 'src_city_name' to be a str")
        pulumi.set(__self__, "src_city_name", src_city_name)
        if src_ip and not isinstance(src_ip, str):
            raise TypeError("Expected argument 'src_ip' to be a str")
        pulumi.set(__self__, "src_ip", src_ip)
        if src_port and not isinstance(src_port, int):
            raise TypeError("Expected argument 'src_port' to be a int")
        pulumi.set(__self__, "src_port", src_port)
        if src_province_name and not isinstance(src_province_name, str):
            raise TypeError("Expected argument 'src_province_name' to be a str")
        pulumi.set(__self__, "src_province_name", src_province_name)
        if src_region_name and not isinstance(src_region_name, str):
            raise TypeError("Expected argument 'src_region_name' to be a str")
        pulumi.set(__self__, "src_region_name", src_region_name)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        """
        The application protocol.
        """
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="attackRule")
    def attack_rule(self) -> Optional[str]:
        """
        The attack rule.
        """
        return pulumi.get(self, "attack_rule")

    @property
    @pulumi.getter(name="attackRuleId")
    def attack_rule_id(self) -> Optional[str]:
        """
        The attack rule ID.
        """
        return pulumi.get(self, "attack_rule_id")

    @property
    @pulumi.getter(name="attackType")
    def attack_type(self) -> Optional[str]:
        """
        The attack type.
        """
        return pulumi.get(self, "attack_type")

    @property
    @pulumi.getter(name="dstCityName")
    def dst_city_name(self) -> Optional[str]:
        """
        The destination city name.
        """
        return pulumi.get(self, "dst_city_name")

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[str]:
        """
        The destination IP address.
        """
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[int]:
        """
        The destination port.
        """
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="dstProvinceName")
    def dst_province_name(self) -> Optional[str]:
        """
        The destination province name.
        """
        return pulumi.get(self, "dst_province_name")

    @property
    @pulumi.getter(name="dstRegionName")
    def dst_region_name(self) -> Optional[str]:
        """
        The destination region name.
        """
        return pulumi.get(self, "dst_region_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="fwInstanceId")
    def fw_instance_id(self) -> str:
        return pulumi.get(self, "fw_instance_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The threat level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[str]:
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetAttackLogsRecordResult']:
        """
        The attack log records.
        """
        return pulumi.get(self, "records")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="srcCityName")
    def src_city_name(self) -> Optional[str]:
        """
        The source city name.
        """
        return pulumi.get(self, "src_city_name")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[str]:
        """
        The source IP address.
        """
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[int]:
        """
        The source port.
        """
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter(name="srcProvinceName")
    def src_province_name(self) -> Optional[str]:
        """
        The source province name.
        """
        return pulumi.get(self, "src_province_name")

    @property
    @pulumi.getter(name="srcRegionName")
    def src_region_name(self) -> Optional[str]:
        """
        The source region name.
        """
        return pulumi.get(self, "src_region_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


class AwaitableGetAttackLogsResult(GetAttackLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAttackLogsResult(
            app=self.app,
            attack_rule=self.attack_rule,
            attack_rule_id=self.attack_rule_id,
            attack_type=self.attack_type,
            dst_city_name=self.dst_city_name,
            dst_ip=self.dst_ip,
            dst_port=self.dst_port,
            dst_province_name=self.dst_province_name,
            dst_region_name=self.dst_region_name,
            end_time=self.end_time,
            enterprise_project_id=self.enterprise_project_id,
            fw_instance_id=self.fw_instance_id,
            id=self.id,
            level=self.level,
            log_type=self.log_type,
            records=self.records,
            region=self.region,
            src_city_name=self.src_city_name,
            src_ip=self.src_ip,
            src_port=self.src_port,
            src_province_name=self.src_province_name,
            src_region_name=self.src_region_name,
            start_time=self.start_time)


def get_attack_logs(app: Optional[str] = None,
                    attack_rule: Optional[str] = None,
                    attack_rule_id: Optional[str] = None,
                    attack_type: Optional[str] = None,
                    dst_city_name: Optional[str] = None,
                    dst_ip: Optional[str] = None,
                    dst_port: Optional[int] = None,
                    dst_province_name: Optional[str] = None,
                    dst_region_name: Optional[str] = None,
                    end_time: Optional[str] = None,
                    enterprise_project_id: Optional[str] = None,
                    fw_instance_id: Optional[str] = None,
                    level: Optional[str] = None,
                    log_type: Optional[str] = None,
                    region: Optional[str] = None,
                    src_city_name: Optional[str] = None,
                    src_ip: Optional[str] = None,
                    src_port: Optional[int] = None,
                    src_province_name: Optional[str] = None,
                    src_region_name: Optional[str] = None,
                    start_time: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAttackLogsResult:
    """
    Use this data source to get the list of CFW attack logs.

    > **NOTE:** Up to 1000 logs can be retrieved. Set filter criteria to narrow down the search scope.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    fw_instance_id = config.require_object("fwInstanceId")
    test = huaweicloud.Cfw.get_attack_logs(fw_instance_id=fw_instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param str app: Specifies the application protocol.
    :param str attack_rule: Specifies the intrusion event rule.
    :param str attack_rule_id: Specifies the attack rule ID.
    :param str attack_type: Specifies the intrusion event type.
    :param str dst_city_name: Specifies the destination city name.
    :param str dst_ip: Specifies the destination IP address.
    :param int dst_port: Specifies the destination port.
    :param str dst_province_name: Specifies the destination province name.
    :param str dst_region_name: Specifies the destination region name.
    :param str end_time: Specifies the end time. The time is in UTC.
           The format is **yyyy-MM-dd HH:mm:ss**.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str fw_instance_id: Specifies the firewall instance ID.
    :param str level: Specifies the threat level.
    :param str log_type: Specifies the log type.
           The valid values are **internet**, **nat** and **vpc**.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str src_city_name: Specifies the source city name.
    :param str src_ip: Specifies the source IP address.
    :param int src_port: Specifies the source port.
    :param str src_province_name: Specifies the source province name.
    :param str src_region_name: Specifies the source region name.
    :param str start_time: Specifies the start time. The time is in UTC.
           The format is **yyyy-MM-dd HH:mm:ss**.
    """
    __args__ = dict()
    __args__['app'] = app
    __args__['attackRule'] = attack_rule
    __args__['attackRuleId'] = attack_rule_id
    __args__['attackType'] = attack_type
    __args__['dstCityName'] = dst_city_name
    __args__['dstIp'] = dst_ip
    __args__['dstPort'] = dst_port
    __args__['dstProvinceName'] = dst_province_name
    __args__['dstRegionName'] = dst_region_name
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['fwInstanceId'] = fw_instance_id
    __args__['level'] = level
    __args__['logType'] = log_type
    __args__['region'] = region
    __args__['srcCityName'] = src_city_name
    __args__['srcIp'] = src_ip
    __args__['srcPort'] = src_port
    __args__['srcProvinceName'] = src_province_name
    __args__['srcRegionName'] = src_region_name
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cfw/getAttackLogs:getAttackLogs', __args__, opts=opts, typ=GetAttackLogsResult).value

    return AwaitableGetAttackLogsResult(
        app=__ret__.app,
        attack_rule=__ret__.attack_rule,
        attack_rule_id=__ret__.attack_rule_id,
        attack_type=__ret__.attack_type,
        dst_city_name=__ret__.dst_city_name,
        dst_ip=__ret__.dst_ip,
        dst_port=__ret__.dst_port,
        dst_province_name=__ret__.dst_province_name,
        dst_region_name=__ret__.dst_region_name,
        end_time=__ret__.end_time,
        enterprise_project_id=__ret__.enterprise_project_id,
        fw_instance_id=__ret__.fw_instance_id,
        id=__ret__.id,
        level=__ret__.level,
        log_type=__ret__.log_type,
        records=__ret__.records,
        region=__ret__.region,
        src_city_name=__ret__.src_city_name,
        src_ip=__ret__.src_ip,
        src_port=__ret__.src_port,
        src_province_name=__ret__.src_province_name,
        src_region_name=__ret__.src_region_name,
        start_time=__ret__.start_time)


@_utilities.lift_output_func(get_attack_logs)
def get_attack_logs_output(app: Optional[pulumi.Input[Optional[str]]] = None,
                           attack_rule: Optional[pulumi.Input[Optional[str]]] = None,
                           attack_rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                           attack_type: Optional[pulumi.Input[Optional[str]]] = None,
                           dst_city_name: Optional[pulumi.Input[Optional[str]]] = None,
                           dst_ip: Optional[pulumi.Input[Optional[str]]] = None,
                           dst_port: Optional[pulumi.Input[Optional[int]]] = None,
                           dst_province_name: Optional[pulumi.Input[Optional[str]]] = None,
                           dst_region_name: Optional[pulumi.Input[Optional[str]]] = None,
                           end_time: Optional[pulumi.Input[str]] = None,
                           enterprise_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                           fw_instance_id: Optional[pulumi.Input[str]] = None,
                           level: Optional[pulumi.Input[Optional[str]]] = None,
                           log_type: Optional[pulumi.Input[Optional[str]]] = None,
                           region: Optional[pulumi.Input[Optional[str]]] = None,
                           src_city_name: Optional[pulumi.Input[Optional[str]]] = None,
                           src_ip: Optional[pulumi.Input[Optional[str]]] = None,
                           src_port: Optional[pulumi.Input[Optional[int]]] = None,
                           src_province_name: Optional[pulumi.Input[Optional[str]]] = None,
                           src_region_name: Optional[pulumi.Input[Optional[str]]] = None,
                           start_time: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAttackLogsResult]:
    """
    Use this data source to get the list of CFW attack logs.

    > **NOTE:** Up to 1000 logs can be retrieved. Set filter criteria to narrow down the search scope.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    fw_instance_id = config.require_object("fwInstanceId")
    test = huaweicloud.Cfw.get_attack_logs(fw_instance_id=fw_instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param str app: Specifies the application protocol.
    :param str attack_rule: Specifies the intrusion event rule.
    :param str attack_rule_id: Specifies the attack rule ID.
    :param str attack_type: Specifies the intrusion event type.
    :param str dst_city_name: Specifies the destination city name.
    :param str dst_ip: Specifies the destination IP address.
    :param int dst_port: Specifies the destination port.
    :param str dst_province_name: Specifies the destination province name.
    :param str dst_region_name: Specifies the destination region name.
    :param str end_time: Specifies the end time. The time is in UTC.
           The format is **yyyy-MM-dd HH:mm:ss**.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str fw_instance_id: Specifies the firewall instance ID.
    :param str level: Specifies the threat level.
    :param str log_type: Specifies the log type.
           The valid values are **internet**, **nat** and **vpc**.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str src_city_name: Specifies the source city name.
    :param str src_ip: Specifies the source IP address.
    :param int src_port: Specifies the source port.
    :param str src_province_name: Specifies the source province name.
    :param str src_region_name: Specifies the source region name.
    :param str start_time: Specifies the start time. The time is in UTC.
           The format is **yyyy-MM-dd HH:mm:ss**.
    """
    ...
