# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCaptureTaskResultsResult',
    'AwaitableGetCaptureTaskResultsResult',
    'get_capture_task_results',
    'get_capture_task_results_output',
]

@pulumi.output_type
class GetCaptureTaskResultsResult:
    """
    A collection of values returned by getCaptureTaskResults.
    """
    def __init__(__self__, captcha=None, expires=None, file_lists=None, fw_instance_id=None, id=None, ips=None, region=None, request_headers=None, task_id=None, type=None, url=None):
        if captcha and not isinstance(captcha, str):
            raise TypeError("Expected argument 'captcha' to be a str")
        pulumi.set(__self__, "captcha", captcha)
        if expires and not isinstance(expires, int):
            raise TypeError("Expected argument 'expires' to be a int")
        pulumi.set(__self__, "expires", expires)
        if file_lists and not isinstance(file_lists, list):
            raise TypeError("Expected argument 'file_lists' to be a list")
        pulumi.set(__self__, "file_lists", file_lists)
        if fw_instance_id and not isinstance(fw_instance_id, str):
            raise TypeError("Expected argument 'fw_instance_id' to be a str")
        pulumi.set(__self__, "fw_instance_id", fw_instance_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ips and not isinstance(ips, list):
            raise TypeError("Expected argument 'ips' to be a list")
        pulumi.set(__self__, "ips", ips)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if request_headers and not isinstance(request_headers, list):
            raise TypeError("Expected argument 'request_headers' to be a list")
        pulumi.set(__self__, "request_headers", request_headers)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)
        if type and not isinstance(type, int):
            raise TypeError("Expected argument 'type' to be a int")
        pulumi.set(__self__, "type", type)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def captcha(self) -> str:
        """
        The captcha.
        """
        return pulumi.get(self, "captcha")

    @property
    @pulumi.getter
    def expires(self) -> int:
        """
        The expiration time of the download link.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter(name="fileLists")
    def file_lists(self) -> Sequence['outputs.GetCaptureTaskResultsFileListResult']:
        """
        The capture file list.
        """
        return pulumi.get(self, "file_lists")

    @property
    @pulumi.getter(name="fwInstanceId")
    def fw_instance_id(self) -> str:
        return pulumi.get(self, "fw_instance_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Sequence['outputs.GetCaptureTaskResultsRequestHeaderResult']:
        """
        The request header.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> str:
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The download link.
        """
        return pulumi.get(self, "url")


class AwaitableGetCaptureTaskResultsResult(GetCaptureTaskResultsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCaptureTaskResultsResult(
            captcha=self.captcha,
            expires=self.expires,
            file_lists=self.file_lists,
            fw_instance_id=self.fw_instance_id,
            id=self.id,
            ips=self.ips,
            region=self.region,
            request_headers=self.request_headers,
            task_id=self.task_id,
            type=self.type,
            url=self.url)


def get_capture_task_results(fw_instance_id: Optional[str] = None,
                             ips: Optional[Sequence[str]] = None,
                             region: Optional[str] = None,
                             task_id: Optional[str] = None,
                             type: Optional[int] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCaptureTaskResultsResult:
    """
    Use this data source to get the list of CFW capture task results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    fw_instance_id = config.require_object("fwInstanceId")
    task_id = config.require_object("taskId")
    test = huaweicloud.Cfw.get_capture_task_results(fw_instance_id=fw_instance_id,
        task_id=task_id)
    ```


    :param str fw_instance_id: Specifies the ID of the firewall instance.
    :param Sequence[str] ips: Specifies the public IP address ranges.
           A maximum of three address ranges can be specified.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str task_id: Specifies the capture task ID.
    :param int type: Specifies whether to set a public IP address for downloading.
           The valid values are as follows:
           + **0**: unlimited;
           + **1**: set a public IP address for downloading. Currently, this feature can be used in the
           following regions: **cn-north-11**, **cn-east-5**, **af-south-1**, **ap-southeast-1**,
           **ap-southeast-3**, **ap-southeast-2**, **ap-southeast-4**, **tr-west-1**, **la-north-2**,
           **sa-brazil-1**, **la-south-2**, **me-east-1**.
    """
    __args__ = dict()
    __args__['fwInstanceId'] = fw_instance_id
    __args__['ips'] = ips
    __args__['region'] = region
    __args__['taskId'] = task_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cfw/getCaptureTaskResults:getCaptureTaskResults', __args__, opts=opts, typ=GetCaptureTaskResultsResult).value

    return AwaitableGetCaptureTaskResultsResult(
        captcha=__ret__.captcha,
        expires=__ret__.expires,
        file_lists=__ret__.file_lists,
        fw_instance_id=__ret__.fw_instance_id,
        id=__ret__.id,
        ips=__ret__.ips,
        region=__ret__.region,
        request_headers=__ret__.request_headers,
        task_id=__ret__.task_id,
        type=__ret__.type,
        url=__ret__.url)


@_utilities.lift_output_func(get_capture_task_results)
def get_capture_task_results_output(fw_instance_id: Optional[pulumi.Input[str]] = None,
                                    ips: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    region: Optional[pulumi.Input[Optional[str]]] = None,
                                    task_id: Optional[pulumi.Input[str]] = None,
                                    type: Optional[pulumi.Input[Optional[int]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCaptureTaskResultsResult]:
    """
    Use this data source to get the list of CFW capture task results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    fw_instance_id = config.require_object("fwInstanceId")
    task_id = config.require_object("taskId")
    test = huaweicloud.Cfw.get_capture_task_results(fw_instance_id=fw_instance_id,
        task_id=task_id)
    ```


    :param str fw_instance_id: Specifies the ID of the firewall instance.
    :param Sequence[str] ips: Specifies the public IP address ranges.
           A maximum of three address ranges can be specified.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str task_id: Specifies the capture task ID.
    :param int type: Specifies whether to set a public IP address for downloading.
           The valid values are as follows:
           + **0**: unlimited;
           + **1**: set a public IP address for downloading. Currently, this feature can be used in the
           following regions: **cn-north-11**, **cn-east-5**, **af-south-1**, **ap-southeast-1**,
           **ap-southeast-3**, **ap-southeast-2**, **ap-southeast-4**, **tr-west-1**, **la-north-2**,
           **sa-brazil-1**, **la-south-2**, **me-east-1**.
    """
    ...
