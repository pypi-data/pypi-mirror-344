# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetIpsRulesResult',
    'AwaitableGetIpsRulesResult',
    'get_ips_rules',
    'get_ips_rules_output',
]

@pulumi.output_type
class GetIpsRulesResult:
    """
    A collection of values returned by getIpsRules.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, ips_id=None, ips_name_like=None, ips_status=None, is_updated_ips_rule_queried=None, object_id=None, records=None, region=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ips_id and not isinstance(ips_id, str):
            raise TypeError("Expected argument 'ips_id' to be a str")
        pulumi.set(__self__, "ips_id", ips_id)
        if ips_name_like and not isinstance(ips_name_like, str):
            raise TypeError("Expected argument 'ips_name_like' to be a str")
        pulumi.set(__self__, "ips_name_like", ips_name_like)
        if ips_status and not isinstance(ips_status, str):
            raise TypeError("Expected argument 'ips_status' to be a str")
        pulumi.set(__self__, "ips_status", ips_status)
        if is_updated_ips_rule_queried and not isinstance(is_updated_ips_rule_queried, bool):
            raise TypeError("Expected argument 'is_updated_ips_rule_queried' to be a bool")
        pulumi.set(__self__, "is_updated_ips_rule_queried", is_updated_ips_rule_queried)
        if object_id and not isinstance(object_id, str):
            raise TypeError("Expected argument 'object_id' to be a str")
        pulumi.set(__self__, "object_id", object_id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipsId")
    def ips_id(self) -> Optional[str]:
        """
        The IPS rule ID.
        """
        return pulumi.get(self, "ips_id")

    @property
    @pulumi.getter(name="ipsNameLike")
    def ips_name_like(self) -> Optional[str]:
        return pulumi.get(self, "ips_name_like")

    @property
    @pulumi.getter(name="ipsStatus")
    def ips_status(self) -> Optional[str]:
        """
        The current status of the IPS rule.
        """
        return pulumi.get(self, "ips_status")

    @property
    @pulumi.getter(name="isUpdatedIpsRuleQueried")
    def is_updated_ips_rule_queried(self) -> Optional[bool]:
        return pulumi.get(self, "is_updated_ips_rule_queried")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetIpsRulesRecordResult']:
        """
        The IPS rule list.
        """
        return pulumi.get(self, "records")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


class AwaitableGetIpsRulesResult(GetIpsRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpsRulesResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            ips_id=self.ips_id,
            ips_name_like=self.ips_name_like,
            ips_status=self.ips_status,
            is_updated_ips_rule_queried=self.is_updated_ips_rule_queried,
            object_id=self.object_id,
            records=self.records,
            region=self.region)


def get_ips_rules(enterprise_project_id: Optional[str] = None,
                  ips_id: Optional[str] = None,
                  ips_name_like: Optional[str] = None,
                  ips_status: Optional[str] = None,
                  is_updated_ips_rule_queried: Optional[bool] = None,
                  object_id: Optional[str] = None,
                  region: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpsRulesResult:
    """
    Use this data source to get the list of CFW IPS basic protection rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    object_id = config.require_object("objectId")
    test = huaweicloud.Cfw.get_ips_rules(object_id=object_id)
    ```


    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str ips_id: Specifies the IPS rule ID.
    :param str ips_name_like: Specifies the IPS rule name.
           This parameter supports fuzzy search.
    :param str ips_status: Specifies the IPS rule status.
           The valid value can be **OBSERVE**, **ENABLE**, or **CLOSE**.
    :param bool is_updated_ips_rule_queried: Specifies whether to check for new update rules.
    :param str object_id: Specifies the protected object ID.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ipsId'] = ips_id
    __args__['ipsNameLike'] = ips_name_like
    __args__['ipsStatus'] = ips_status
    __args__['isUpdatedIpsRuleQueried'] = is_updated_ips_rule_queried
    __args__['objectId'] = object_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cfw/getIpsRules:getIpsRules', __args__, opts=opts, typ=GetIpsRulesResult).value

    return AwaitableGetIpsRulesResult(
        enterprise_project_id=__ret__.enterprise_project_id,
        id=__ret__.id,
        ips_id=__ret__.ips_id,
        ips_name_like=__ret__.ips_name_like,
        ips_status=__ret__.ips_status,
        is_updated_ips_rule_queried=__ret__.is_updated_ips_rule_queried,
        object_id=__ret__.object_id,
        records=__ret__.records,
        region=__ret__.region)


@_utilities.lift_output_func(get_ips_rules)
def get_ips_rules_output(enterprise_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                         ips_id: Optional[pulumi.Input[Optional[str]]] = None,
                         ips_name_like: Optional[pulumi.Input[Optional[str]]] = None,
                         ips_status: Optional[pulumi.Input[Optional[str]]] = None,
                         is_updated_ips_rule_queried: Optional[pulumi.Input[Optional[bool]]] = None,
                         object_id: Optional[pulumi.Input[str]] = None,
                         region: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIpsRulesResult]:
    """
    Use this data source to get the list of CFW IPS basic protection rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    object_id = config.require_object("objectId")
    test = huaweicloud.Cfw.get_ips_rules(object_id=object_id)
    ```


    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str ips_id: Specifies the IPS rule ID.
    :param str ips_name_like: Specifies the IPS rule name.
           This parameter supports fuzzy search.
    :param str ips_status: Specifies the IPS rule status.
           The valid value can be **OBSERVE**, **ENABLE**, or **CLOSE**.
    :param bool is_updated_ips_rule_queried: Specifies whether to check for new update rules.
    :param str object_id: Specifies the protected object ID.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    ...
