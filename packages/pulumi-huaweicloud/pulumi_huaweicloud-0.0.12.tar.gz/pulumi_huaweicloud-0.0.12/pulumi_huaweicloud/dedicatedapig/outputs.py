# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApiBackendParam',
    'ApiFuncGraph',
    'ApiFuncGraphPolicy',
    'ApiFuncGraphPolicyBackendParam',
    'ApiFuncGraphPolicyCondition',
    'ApiMock',
    'ApiMockPolicy',
    'ApiMockPolicyBackendParam',
    'ApiMockPolicyCondition',
    'ApiPublishmentHistory',
    'ApiRequestParam',
    'ApiWeb',
    'ApiWebPolicy',
    'ApiWebPolicyBackendParam',
    'ApiWebPolicyCondition',
    'CustomAuthorizerIdentity',
    'GroupEnvironment',
    'GroupEnvironmentVariable',
    'GroupUrlDomain',
    'InstanceCustomIngressPort',
    'ResponseRule',
    'ResponseRuleHeader',
    'ThrottlingPolicyAppThrottle',
    'ThrottlingPolicyUserThrottle',
    'VpcChannelMember',
    'GetEnvironmentsEnvironmentResult',
]

@pulumi.output_type
class ApiBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: str,
                 name: str,
                 type: str,
                 value: str,
                 description: Optional[str] = None,
                 system_param_type: Optional[str] = None):
        """
        :param str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        :param str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param str system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[str]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
        """
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiFuncGraph(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraph. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraph.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraph.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_urn: str,
                 authorizer_id: Optional[str] = None,
                 function_alias_urn: Optional[str] = None,
                 invocation_type: Optional[str] = None,
                 network_type: Optional[str] = None,
                 request_protocol: Optional[str] = None,
                 timeout: Optional[int] = None,
                 version: Optional[str] = None):
        """
        :param str function_urn: Specifies the URN of the FunctionGraph function.
        :param str authorizer_id: Specifies the ID of the backend custom authorization.
        :param str function_alias_urn: Specifies the alias URN of the FunctionGraph function.  
               The format is `{function_urn}:!{alias}`.
        :param str invocation_type: Specifies the invocation mode of the FunctionGraph function.  
               The valid values are **async** and **sync**, defaults to **sync**.
        :param str network_type: Specifies the network architecture (framework) type of the FunctionGraph function.
               **V1**: Non-VPC network framework.
               **V2**: VPC network framework.
        :param str request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param int timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param str version: Specifies the version of the FunctionGraph function.  
               Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
               `function_alias_urn` is set.
        """
        pulumi.set(__self__, "function_urn", function_urn)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> str:
        """
        Specifies the URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[str]:
        """
        Specifies the ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[str]:
        """
        Specifies the alias URN of the FunctionGraph function.  
        The format is `{function_urn}:!{alias}`.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[str]:
        """
        Specifies the invocation mode of the FunctionGraph function.  
        The valid values are **async** and **sync**, defaults to **sync**.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        """
        Specifies the network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[str]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Specifies the version of the FunctionGraph function.  
        Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
        `function_alias_urn` is set.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApiFuncGraphPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationMode":
            suggest = "invocation_mode"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraphPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraphPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraphPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiFuncGraphPolicyCondition'],
                 function_urn: str,
                 name: str,
                 authorizer_id: Optional[str] = None,
                 backend_params: Optional[Sequence['outputs.ApiFuncGraphPolicyBackendParam']] = None,
                 effective_mode: Optional[str] = None,
                 function_alias_urn: Optional[str] = None,
                 invocation_mode: Optional[str] = None,
                 invocation_type: Optional[str] = None,
                 network_type: Optional[str] = None,
                 request_protocol: Optional[str] = None,
                 timeout: Optional[int] = None,
                 version: Optional[str] = None):
        """
        :param Sequence['ApiFuncGraphPolicyConditionArgs'] conditions: Specifies an array of one or more policy conditions.  
               Up to five conditions can be set.
               The object structure is documented below.
        :param str function_urn: Specifies the URN of the FunctionGraph function.
        :param str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param str authorizer_id: Specifies the ID of the backend custom authorization.
        :param Sequence['ApiFuncGraphPolicyBackendParamArgs'] backend_params: Specifies an array of one or more backend parameters. The maximum of request
               parameters is 50. The object structure is documented above.
        :param str effective_mode: Specifies the effective mode of the backend policy. The valid values are **ALL**
               and **ANY**, defaults to **ANY**.
        :param str function_alias_urn: Specifies the alias URN of the FunctionGraph function.  
               The format is `{function_urn}:!{alias}`.
        :param str invocation_type: Specifies the invocation mode of the FunctionGraph function.  
               The valid values are **async** and **sync**, defaults to **sync**.
        :param str network_type: Specifies the network architecture (framework) type of the FunctionGraph function.
               **V1**: Non-VPC network framework.
               **V2**: VPC network framework.
        :param str request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param int timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param str version: Specifies the version of the FunctionGraph function.  
               Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
               `function_alias_urn` is set.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_mode is not None:
            pulumi.set(__self__, "invocation_mode", invocation_mode)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiFuncGraphPolicyCondition']:
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> str:
        """
        Specifies the URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[str]:
        """
        Specifies the ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiFuncGraphPolicyBackendParam']]:
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[str]:
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[str]:
        """
        Specifies the alias URN of the FunctionGraph function.  
        The format is `{function_urn}:!{alias}`.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="invocationMode")
    def invocation_mode(self) -> Optional[str]:
        return pulumi.get(self, "invocation_mode")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[str]:
        """
        Specifies the invocation mode of the FunctionGraph function.  
        The valid values are **async** and **sync**, defaults to **sync**.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        """
        Specifies the network architecture (framework) type of the FunctionGraph function.
        **V1**: Non-VPC network framework.
        **V2**: VPC network framework.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[str]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Specifies the version of the FunctionGraph function.  
        Required if the parameter `function_alias_urn` is omitted and this parameter is useless if the parameter
        `function_alias_urn` is set.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApiFuncGraphPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraphPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: str,
                 name: str,
                 type: str,
                 value: str,
                 description: Optional[str] = None,
                 system_param_type: Optional[str] = None):
        """
        :param str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        :param str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param str system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[str]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
        """
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiFuncGraphPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraphPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraphPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraphPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 cookie_name: Optional[str] = None,
                 frontend_authorizer_name: Optional[str] = None,
                 mapped_param_location: Optional[str] = None,
                 mapped_param_name: Optional[str] = None,
                 param_name: Optional[str] = None,
                 source: Optional[str] = None,
                 sys_name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        :param str cookie_name: Specifies the cookie parameter name.
               This parameter is required if the policy type is **cookie**.
        :param str frontend_authorizer_name: Specifies the frontend authentication parameter name.
               This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
               the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
               frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        :param str mapped_param_location: Specifies the location of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter location must exist in the orchestration rule bound to the API.
        :param str mapped_param_name: Specifies the name of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter name must exist in the orchestration rule bound to the API.
        :param str param_name: Specifies the request parameter name.
               This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        :param str source: Specifies the backend policy type.  
               The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        :param str sys_name: Specifies the gateway built-in parameter name.
               This parameter is required if the policy type is **system**.
               The valid values are **req_path** and **req_method**.
        :param str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[str]:
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[str]:
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[str]:
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[str]:
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiMock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorizer_id: Optional[str] = None,
                 response: Optional[str] = None,
                 status_code: Optional[int] = None):
        """
        :param str authorizer_id: Specifies the ID of the backend custom authorization.
        :param str response: Specifies the response content of the mock.  
               The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        :param int status_code: Specifies the custom status code of the mock response.
        """
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[str]:
        """
        Specifies the ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter
    def response(self) -> Optional[str]:
        """
        Specifies the response content of the mock.  
        The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        """
        Specifies the custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApiMockPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMockPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMockPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMockPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiMockPolicyCondition'],
                 name: str,
                 authorizer_id: Optional[str] = None,
                 backend_params: Optional[Sequence['outputs.ApiMockPolicyBackendParam']] = None,
                 effective_mode: Optional[str] = None,
                 response: Optional[str] = None,
                 status_code: Optional[int] = None):
        """
        :param Sequence['ApiMockPolicyConditionArgs'] conditions: Specifies an array of one or more policy conditions.  
               Up to five conditions can be set.
               The object structure is documented below.
        :param str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param str authorizer_id: Specifies the ID of the backend custom authorization.
        :param Sequence['ApiMockPolicyBackendParamArgs'] backend_params: Specifies an array of one or more backend parameters. The maximum of request
               parameters is 50. The object structure is documented above.
        :param str effective_mode: Specifies the effective mode of the backend policy. The valid values are **ALL**
               and **ANY**, defaults to **ANY**.
        :param str response: Specifies the response content of the mock.  
               The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        :param int status_code: Specifies the custom status code of the mock response.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiMockPolicyCondition']:
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[str]:
        """
        Specifies the ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiMockPolicyBackendParam']]:
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[str]:
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter
    def response(self) -> Optional[str]:
        """
        Specifies the response content of the mock.  
        The description contains a maximum of `2,048` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        """
        Specifies the custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApiMockPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMockPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMockPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMockPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: str,
                 name: str,
                 type: str,
                 value: str,
                 description: Optional[str] = None,
                 system_param_type: Optional[str] = None):
        """
        :param str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        :param str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param str system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[str]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
        """
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiMockPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMockPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMockPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMockPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 cookie_name: Optional[str] = None,
                 frontend_authorizer_name: Optional[str] = None,
                 mapped_param_location: Optional[str] = None,
                 mapped_param_name: Optional[str] = None,
                 param_name: Optional[str] = None,
                 source: Optional[str] = None,
                 sys_name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        :param str cookie_name: Specifies the cookie parameter name.
               This parameter is required if the policy type is **cookie**.
        :param str frontend_authorizer_name: Specifies the frontend authentication parameter name.
               This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
               the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
               frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        :param str mapped_param_location: Specifies the location of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter location must exist in the orchestration rule bound to the API.
        :param str mapped_param_name: Specifies the name of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter name must exist in the orchestration rule bound to the API.
        :param str param_name: Specifies the request parameter name.
               This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        :param str source: Specifies the backend policy type.  
               The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        :param str sys_name: Specifies the gateway built-in parameter name.
               This parameter is required if the policy type is **system**.
               The valid values are **req_path** and **req_method**.
        :param str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[str]:
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[str]:
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[str]:
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[str]:
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiPublishmentHistory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionId":
            suggest = "version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiPublishmentHistory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiPublishmentHistory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiPublishmentHistory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 version_id: Optional[str] = None):
        """
        :param str description: Specifies the description of the current publishment.
        :param str version_id: Specifies the version ID of the current publishment.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies the description of the current publishment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[str]:
        """
        Specifies the version ID of the current publishment.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class ApiRequestParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validEnable":
            suggest = "valid_enable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiRequestParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiRequestParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiRequestParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 enumeration: Optional[str] = None,
                 example: Optional[str] = None,
                 location: Optional[str] = None,
                 maximum: Optional[int] = None,
                 minimum: Optional[int] = None,
                 orchestrations: Optional[Sequence[str]] = None,
                 passthrough: Optional[bool] = None,
                 required: Optional[bool] = None,
                 type: Optional[str] = None,
                 valid_enable: Optional[int] = None):
        """
        :param str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param str default: Specifies the default value of the request parameter.
               The value contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param str enumeration: Specifies the enumerated value(s).
               Use commas to separate multiple enumeration values, such as **VALUE_A,VALUE_B**.
        :param str example: Specifies the example value of the request parameter.  
               The example contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param int maximum: Specifies the maximum value or size of the request parameter.
        :param int minimum: Specifies the minimum value or size of the request parameter.
        :param Sequence[str] orchestrations: Specifies the list of orchestration rule IDs which parameter used.  
               The order of the IDs determines the priority of the rules, and the priority decreases according to the order of the
               list elements.
        :param bool passthrough: Specifies whether to transparently transfer the parameter.
        :param bool required: Specifies whether the request parameter is required.
        :param str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param int valid_enable: Specifies whether to enable the parameter validation.
               + **1**: enable
               + **2**: disable (by default)
        """
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enumeration is not None:
            pulumi.set(__self__, "enumeration", enumeration)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if orchestrations is not None:
            pulumi.set(__self__, "orchestrations", orchestrations)
        if passthrough is not None:
            pulumi.set(__self__, "passthrough", passthrough)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if valid_enable is not None:
            pulumi.set(__self__, "valid_enable", valid_enable)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        Specifies the default value of the request parameter.
        The value contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enumeration(self) -> Optional[str]:
        """
        Specifies the enumerated value(s).
        Use commas to separate multiple enumeration values, such as **VALUE_A,VALUE_B**.
        """
        return pulumi.get(self, "enumeration")

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        """
        Specifies the example value of the request parameter.  
        The example contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[int]:
        """
        Specifies the maximum value or size of the request parameter.
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[int]:
        """
        Specifies the minimum value or size of the request parameter.
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def orchestrations(self) -> Optional[Sequence[str]]:
        """
        Specifies the list of orchestration rule IDs which parameter used.  
        The order of the IDs determines the priority of the rules, and the priority decreases according to the order of the
        list elements.
        """
        return pulumi.get(self, "orchestrations")

    @property
    @pulumi.getter
    def passthrough(self) -> Optional[bool]:
        """
        Specifies whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Specifies whether the request parameter is required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> Optional[int]:
        """
        Specifies whether to enable the parameter validation.
        + **1**: enable
        + **2**: disable (by default)
        """
        return pulumi.get(self, "valid_enable")


@pulumi.output_type
class ApiWeb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestMethod":
            suggest = "request_method"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "sslEnable":
            suggest = "ssl_enable"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWeb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWeb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWeb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: str,
                 authorizer_id: Optional[str] = None,
                 backend_address: Optional[str] = None,
                 host_header: Optional[str] = None,
                 request_method: Optional[str] = None,
                 request_protocol: Optional[str] = None,
                 retry_count: Optional[int] = None,
                 ssl_enable: Optional[bool] = None,
                 timeout: Optional[int] = None,
                 vpc_channel_id: Optional[str] = None):
        """
        :param str path: Specifies the backend request address, which can contain a maximum of `512` characters and
               must comply with URI specifications.
               + The address can contain request parameters enclosed with brackets ({}).
               + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
               underscores (_) and must comply with URI specifications.
               + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        :param str authorizer_id: Specifies the ID of the backend custom authorization.
        :param str backend_address: Specifies the backend service address.  
               The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
               The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
               If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
               The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
               `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        :param str host_header: Specifies the proxy host header.  
               The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
               By default, the original host header of the request is used.
        :param str request_method: Specifies the backend request method of the API.  
               The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        :param str request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param int retry_count: Specifies the number of retry attempts to request the backend service.
               The valid value ranges from `-1` to `10`, defaults to `-1`.
               `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
               **POST** and **PATCH** are not-idempotent.
               **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.
        :param bool ssl_enable: Specifies whether to enable two-way authentication, defaults to **false**.
        :param int timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param str vpc_channel_id: Specifies the VPC channel ID.  
               This parameter and `backend_address` are alternative.
        """
        pulumi.set(__self__, "path", path)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if ssl_enable is not None:
            pulumi.set(__self__, "ssl_enable", ssl_enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Specifies the backend request address, which can contain a maximum of `512` characters and
        must comply with URI specifications.
        + The address can contain request parameters enclosed with brackets ({}).
        + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
        underscores (_) and must comply with URI specifications.
        + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[str]:
        """
        Specifies the ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[str]:
        """
        Specifies the backend service address.  
        The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
        The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
        If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
        The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
        `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[str]:
        """
        Specifies the proxy host header.  
        The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
        By default, the original host header of the request is used.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[str]:
        """
        Specifies the backend request method of the API.  
        The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[str]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        """
        Specifies the number of retry attempts to request the backend service.
        The valid value ranges from `-1` to `10`, defaults to `-1`.
        `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
        **POST** and **PATCH** are not-idempotent.
        **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> Optional[bool]:
        """
        Specifies whether to enable two-way authentication, defaults to **false**.
        """
        return pulumi.get(self, "ssl_enable")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[str]:
        """
        Specifies the VPC channel ID.  
        This parameter and `backend_address` are alternative.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApiWebPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestMethod":
            suggest = "request_method"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWebPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWebPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWebPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiWebPolicyCondition'],
                 name: str,
                 path: str,
                 request_method: str,
                 authorizer_id: Optional[str] = None,
                 backend_address: Optional[str] = None,
                 backend_params: Optional[Sequence['outputs.ApiWebPolicyBackendParam']] = None,
                 effective_mode: Optional[str] = None,
                 host_header: Optional[str] = None,
                 request_protocol: Optional[str] = None,
                 retry_count: Optional[int] = None,
                 timeout: Optional[int] = None,
                 vpc_channel_id: Optional[str] = None):
        """
        :param Sequence['ApiWebPolicyConditionArgs'] conditions: Specifies an array of one or more policy conditions.  
               Up to five conditions can be set.
               The object structure is documented below.
        :param str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param str path: Specifies the backend request address, which can contain a maximum of `512` characters and
               must comply with URI specifications.
               + The address can contain request parameters enclosed with brackets ({}).
               + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
               underscores (_) and must comply with URI specifications.
               + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        :param str request_method: Specifies the backend request method of the API.  
               The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        :param str authorizer_id: Specifies the ID of the backend custom authorization.
        :param str backend_address: Specifies the backend service address.  
               The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
               The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
               If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
               The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
               `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        :param Sequence['ApiWebPolicyBackendParamArgs'] backend_params: Specifies an array of one or more backend parameters. The maximum of request
               parameters is 50. The object structure is documented above.
        :param str effective_mode: Specifies the effective mode of the backend policy. The valid values are **ALL**
               and **ANY**, defaults to **ANY**.
        :param str host_header: Specifies the proxy host header.  
               The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
               By default, the original host header of the request is used.
        :param str request_protocol: Specifies the backend request protocol. The valid values are **HTTP** and
               **HTTPS**, defaults to **HTTPS**.
        :param int retry_count: Specifies the number of retry attempts to request the backend service.
               The valid value ranges from `-1` to `10`, defaults to `-1`.
               `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
               **POST** and **PATCH** are not-idempotent.
               **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.
        :param int timeout: Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
               valid value is range from `1` to `600,000`, defaults to `5,000`.
        :param str vpc_channel_id: Specifies the VPC channel ID.  
               This parameter and `backend_address` are alternative.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiWebPolicyCondition']:
        """
        Specifies an array of one or more policy conditions.  
        Up to five conditions can be set.
        The object structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Specifies the backend request address, which can contain a maximum of `512` characters and
        must comply with URI specifications.
        + The address can contain request parameters enclosed with brackets ({}).
        + The address can contain special characters, such as asterisks (*), percent signs (%), hyphens (-) and
        underscores (_) and must comply with URI specifications.
        + The address can contain environment variables, each starting with a letter and consisting of `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed in environment variables.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> str:
        """
        Specifies the backend request method of the API.  
        The valid types are **GET**, **POST**, **PUT**, **DELETE**, **HEAD**, **PATCH**, **OPTIONS** and **ANY**.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[str]:
        """
        Specifies the ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[str]:
        """
        Specifies the backend service address.  
        The value which consists of a domain name or IP address, and a port number, with not more than `255` characters.
        The backend service address must be in the format "{host name}:{Port number}", for example, `apig.example.com:7443`.
        If the port number is not specified, the default HTTPS port `443`, or the default HTTP port `80` is used.
        The backend service address can contain environment variables, each starting with a letter and consisting of `3` to
        `32` characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiWebPolicyBackendParam']]:
        """
        Specifies an array of one or more backend parameters. The maximum of request
        parameters is 50. The object structure is documented above.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[str]:
        """
        Specifies the effective mode of the backend policy. The valid values are **ALL**
        and **ANY**, defaults to **ANY**.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[str]:
        """
        Specifies the proxy host header.  
        The host header can be customized for requests to be forwarded to cloud servers through the VPC channel.
        By default, the original host header of the request is used.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[str]:
        """
        Specifies the backend request protocol. The valid values are **HTTP** and
        **HTTPS**, defaults to **HTTPS**.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        """
        Specifies the number of retry attempts to request the backend service.
        The valid value ranges from `-1` to `10`, defaults to `-1`.
        `-1` indicates that idempotent APIs will retry once and non-idempotent APIs will not retry.
        **POST** and **PATCH** are not-idempotent.
        **GET**, **HEAD**, **PUT**, **OPTIONS** and **DELETE** are idempotent.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Specifies the timeout, in ms, which allowed for APIG to request the backend service. The
        valid value is range from `1` to `600,000`, defaults to `5,000`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[str]:
        """
        Specifies the VPC channel ID.  
        This parameter and `backend_address` are alternative.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApiWebPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWebPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWebPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWebPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: str,
                 name: str,
                 type: str,
                 value: str,
                 description: Optional[str] = None,
                 system_param_type: Optional[str] = None):
        """
        :param str location: Specifies the location of the backend parameter.  
               The valid values are **PATH**, **QUERY** and **HEADER**.
        :param str name: Specifies the backend policy name.  
               The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
               It must start with a letter.
        :param str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        :param str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        :param str description: Specifies the description of the constant or system parameter.  
               The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        :param str system_param_type: Specifies the type of the system parameter.  
               The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Specifies the location of the backend parameter.  
        The valid values are **PATH**, **QUERY** and **HEADER**.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the backend policy name.  
        The valid length is limited from `3` to `64`, only letters, digits and underscores (_) are allowed.
        It must start with a letter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies the description of the constant or system parameter.  
        The description contains a maximum of `255` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[str]:
        """
        Specifies the type of the system parameter.  
        The valid values are **frontend**, **backend** and **internal**, defaults to **internal**.
        """
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiWebPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWebPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWebPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWebPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 cookie_name: Optional[str] = None,
                 frontend_authorizer_name: Optional[str] = None,
                 mapped_param_location: Optional[str] = None,
                 mapped_param_name: Optional[str] = None,
                 param_name: Optional[str] = None,
                 source: Optional[str] = None,
                 sys_name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: Specifies the value of the backend policy.  
               For a condition with the input parameter source:
               + If the condition type is **Enumerated**, separate condition values with commas.
               + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        :param str cookie_name: Specifies the cookie parameter name.
               This parameter is required if the policy type is **cookie**.
        :param str frontend_authorizer_name: Specifies the frontend authentication parameter name.
               This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
               the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
               frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        :param str mapped_param_location: Specifies the location of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter location must exist in the orchestration rule bound to the API.
        :param str mapped_param_name: Specifies the name of a parameter generated after orchestration.
               This parameter is required if the policy type is **orchestration**.
               The generated parameter name must exist in the orchestration rule bound to the API.
        :param str param_name: Specifies the request parameter name.
               This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        :param str source: Specifies the backend policy type.  
               The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        :param str sys_name: Specifies the gateway built-in parameter name.
               This parameter is required if the policy type is **system**.
               The valid values are **req_path** and **req_method**.
        :param str type: Specifies the condition type of the backend policy.  
               The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
               When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the backend policy.  
        For a condition with the input parameter source:
        + If the condition type is **Enumerated**, separate condition values with commas.
        + If the condition type is **Matching**, enter a regular expression compatible with PERL.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        """
        Specifies the cookie parameter name.
        This parameter is required if the policy type is **cookie**.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[str]:
        """
        Specifies the frontend authentication parameter name.
        This parameter is required if the policy type is **frontend_authorizer**. It consists of two parts,
        the first part is the fixed format **$context.authorizer.frontend.**, and the second part is the
        frontend authentication parameter name. e.g. **$context.authorizer.frontend.user_name**.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[str]:
        """
        Specifies the location of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter location must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[str]:
        """
        Specifies the name of a parameter generated after orchestration.
        This parameter is required if the policy type is **orchestration**.
        The generated parameter name must exist in the orchestration rule bound to the API.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        """
        Specifies the request parameter name.
        This parameter is required if the policy type is **param**. The valid values are **user_age** and **X-TEST-ENUM**.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Specifies the backend policy type.  
        The valid values are **param**, **source**, **system**, **cookie** and **frontend_authorizer**, defaults to **source**.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[str]:
        """
        Specifies the gateway built-in parameter name.
        This parameter is required if the policy type is **system**.
        The valid values are **req_path** and **req_method**.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the condition type of the backend policy.  
        The valid values are **Equal**, **Enumerated** and **Matching**, defaults to **Equal**.
        When the `sys_name` is **req_method**, the valid values are **Equal** and **Enumerated**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CustomAuthorizerIdentity(dict):
    def __init__(__self__, *,
                 location: str,
                 name: str,
                 validation: Optional[str] = None):
        """
        :param str location: Specifies the parameter location, which support **HEADER** and **QUERY**.
        :param str name: Specifies the name of the parameter to be verified.
               The parameter includes front-end and back-end parameters.
        :param str validation: Specifies the parameter verification expression.
               If omitted, the custom authorizer will not perform verification.
               The valid value is range form `1` to `2,048`.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Specifies the parameter location, which support **HEADER** and **QUERY**.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the parameter to be verified.
        The parameter includes front-end and back-end parameters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def validation(self) -> Optional[str]:
        """
        Specifies the parameter verification expression.
        If omitted, the custom authorizer will not perform verification.
        The valid value is range form `1` to `2,048`.
        """
        return pulumi.get(self, "validation")


@pulumi.output_type
class GroupEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentId":
            suggest = "environment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_id: str,
                 variables: Sequence['outputs.GroupEnvironmentVariable']):
        """
        :param str environment_id: Specifies the environment ID of the associated group.
        :param Sequence['GroupEnvironmentVariableArgs'] variables: Specifies an array of one or more environment variables.  
               The object structure is documented below.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> str:
        """
        Specifies the environment ID of the associated group.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GroupEnvironmentVariable']:
        """
        Specifies an array of one or more environment variables.  
        The object structure is documented below.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GroupEnvironmentVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "variableId":
            suggest = "variable_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupEnvironmentVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupEnvironmentVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupEnvironmentVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 value: str,
                 id: Optional[str] = None,
                 variable_id: Optional[str] = None):
        """
        :param str name: Specifies the variable name.  
               The valid length is limited from `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
               In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
               It is replaced by the actual value when the API is published in an environment.
               The variable names are not allowed to be repeated for an API group.
        :param str value: Specifies the variable value.  
               The valid length is limited from `1` to `255` characters.
               Only letters, digits and special characters (_-/.:) are allowed.
        :param str id: The variable ID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variable_id is not None:
            pulumi.set(__self__, "variable_id", variable_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the variable name.  
        The valid length is limited from `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
        In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
        It is replaced by the actual value when the API is published in an environment.
        The variable names are not allowed to be repeated for an API group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the variable value.  
        The valid length is limited from `1` to `255` characters.
        Only letters, digits and special characters (_-/.:) are allowed.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The variable ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="variableId")
    def variable_id(self) -> Optional[str]:
        return pulumi.get(self, "variable_id")


@pulumi.output_type
class GroupUrlDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHttpRedirectToHttps":
            suggest = "is_http_redirect_to_https"
        elif key == "minSslVersion":
            suggest = "min_ssl_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupUrlDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupUrlDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupUrlDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 is_http_redirect_to_https: Optional[bool] = None,
                 min_ssl_version: Optional[str] = None):
        """
        :param str name: Specifies the variable name.  
               The valid length is limited from `3` to `32` characters.
               Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
               In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
               It is replaced by the actual value when the API is published in an environment.
               The variable names are not allowed to be repeated for an API group.
        :param bool is_http_redirect_to_https: Whether to enable redirection from `HTTP` to `HTTPS`.
        :param str min_ssl_version: The minimum SSL protocol version.
               + **TLSv1.1**
               + **TLSv1.2**
        """
        pulumi.set(__self__, "name", name)
        if is_http_redirect_to_https is not None:
            pulumi.set(__self__, "is_http_redirect_to_https", is_http_redirect_to_https)
        if min_ssl_version is not None:
            pulumi.set(__self__, "min_ssl_version", min_ssl_version)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the variable name.  
        The valid length is limited from `3` to `32` characters.
        Only letters, digits, hyphens (-), and underscores (_) are allowed, and must start with a letter.
        In the definition of an API, `name` (case-sensitive) indicates a variable, such as #Name#.
        It is replaced by the actual value when the API is published in an environment.
        The variable names are not allowed to be repeated for an API group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="isHttpRedirectToHttps")
    def is_http_redirect_to_https(self) -> Optional[bool]:
        """
        Whether to enable redirection from `HTTP` to `HTTPS`.
        """
        return pulumi.get(self, "is_http_redirect_to_https")

    @property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> Optional[str]:
        """
        The minimum SSL protocol version.
        + **TLSv1.1**
        + **TLSv1.2**
        """
        return pulumi.get(self, "min_ssl_version")


@pulumi.output_type
class InstanceCustomIngressPort(dict):
    def __init__(__self__, *,
                 port: int,
                 protocol: str,
                 id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param int port: Specified port of the custom ingress port.
               The valid value is range form `1,024` to `49,151`.
        :param str protocol: Specified protocol of the custom ingress port.  
               The valid values are as follows:
               + **HTTP**
               + **HTTPS**
        :param str id: The ID of the custom ingress port.
        :param str status: The current status of the custom ingress port.
               + **normal**
               + **abnormal**
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Specified port of the custom ingress port.
        The valid value is range form `1,024` to `49,151`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Specified protocol of the custom ingress port.  
        The valid values are as follows:
        + **HTTP**
        + **HTTPS**
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the custom ingress port.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The current status of the custom ingress port.
        + **normal**
        + **abnormal**
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ResponseRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorType":
            suggest = "error_type"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: str,
                 error_type: str,
                 headers: Optional[Sequence['outputs.ResponseRuleHeader']] = None,
                 status_code: Optional[int] = None):
        """
        :param str body: Specifies the body template of the API response rule, e.g.
               `{\\"code\\":\\"$context.authorizer.frontend.code\\",\\"message\\":\\"$context.authorizer.frontend.message\\"}`
        :param str error_type: Specifies the error type of the API response rule.
               The valid values and the related default status code are as follows:
               + **ACCESS_DENIED**: (**403**) Access denied.
               + **AUTH_FAILURE**: (**401**) Authentication failed.
               + **AUTH_HEADER_MISSING**: (**401**) The identity source is missing.
               + **AUTHORIZER_CONF_FAILURE**: (**500**) There has been a custom authorizer error.
               + **AUTHORIZER_FAILURE**: (**500**) Custom authentication failed.
               + **AUTHORIZER_IDENTITIES_FAILURE**: (**401**) The identity source of the custom authorizer is invalid.
               + **BACKEND_TIMEOUT**: (**504**) Communication with the backend service timed out.
               + **BACKEND_UNAVAILABLE**: (**502**) The backend service is unavailable.
               + **NOT_FOUND**: (**404**) No API is found.
               + **REQUEST_PARAMETERS_FAILURE**: (**400**) The request parameters are incorrect.
               + **THROTTLED**: (**429**) The request was rejected due to request throttling.
               + **UNAUTHORIZED**: (**401**) The app you are using has not been authorized to call the API.
               + **DEFAULT_4XX**: (**NONE**) Another 4XX error occurred.
               + **DEFAULT_5XX**: (**NONE**) Another 5XX error occurred.
               + **THIRD_AUTH_CONF_FAILURE**: (**500**) Third-party authorizer configuration error.
               + **THIRD_AUTH_FAILURE**: (**401**) Third-party authentication failed.
               + **THIRD_AUTH_IDENTITIES_FAILURE**: (**401**) Identity source of the third-party authorizer is invalid.
        :param Sequence['ResponseRuleHeaderArgs'] headers: Specifies the configuration of the custom response headers.  
               The headers structure is documented below.
        :param int status_code: Specifies the HTTP status code of the API response rule.
               The valid value is range from `200` to `599`.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "error_type", error_type)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        Specifies the body template of the API response rule, e.g.
        `{\\"code\\":\\"$context.authorizer.frontend.code\\",\\"message\\":\\"$context.authorizer.frontend.message\\"}`
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> str:
        """
        Specifies the error type of the API response rule.
        The valid values and the related default status code are as follows:
        + **ACCESS_DENIED**: (**403**) Access denied.
        + **AUTH_FAILURE**: (**401**) Authentication failed.
        + **AUTH_HEADER_MISSING**: (**401**) The identity source is missing.
        + **AUTHORIZER_CONF_FAILURE**: (**500**) There has been a custom authorizer error.
        + **AUTHORIZER_FAILURE**: (**500**) Custom authentication failed.
        + **AUTHORIZER_IDENTITIES_FAILURE**: (**401**) The identity source of the custom authorizer is invalid.
        + **BACKEND_TIMEOUT**: (**504**) Communication with the backend service timed out.
        + **BACKEND_UNAVAILABLE**: (**502**) The backend service is unavailable.
        + **NOT_FOUND**: (**404**) No API is found.
        + **REQUEST_PARAMETERS_FAILURE**: (**400**) The request parameters are incorrect.
        + **THROTTLED**: (**429**) The request was rejected due to request throttling.
        + **UNAUTHORIZED**: (**401**) The app you are using has not been authorized to call the API.
        + **DEFAULT_4XX**: (**NONE**) Another 4XX error occurred.
        + **DEFAULT_5XX**: (**NONE**) Another 5XX error occurred.
        + **THIRD_AUTH_CONF_FAILURE**: (**500**) Third-party authorizer configuration error.
        + **THIRD_AUTH_FAILURE**: (**401**) Third-party authentication failed.
        + **THIRD_AUTH_IDENTITIES_FAILURE**: (**401**) Identity source of the third-party authorizer is invalid.
        """
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.ResponseRuleHeader']]:
        """
        Specifies the configuration of the custom response headers.  
        The headers structure is documented below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        """
        Specifies the HTTP status code of the API response rule.
        The valid value is range from `200` to `599`.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ResponseRuleHeader(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Specifies the key name of the response header.
               The valid length is limited from `1` to `128`, only English letters, digits and hyphens (-) are allowed.
        :param str value: Specifies the value for the specified response header key.
               The valid length is limited from `1` to `1,024`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Specifies the key name of the response header.
        The valid length is limited from `1` to `128`, only English letters, digits and hyphens (-) are allowed.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value for the specified response header key.
        The valid length is limited from `1` to `1,024`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ThrottlingPolicyAppThrottle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxApiRequests":
            suggest = "max_api_requests"
        elif key == "throttlingObjectId":
            suggest = "throttling_object_id"
        elif key == "throttlingObjectName":
            suggest = "throttling_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThrottlingPolicyAppThrottle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThrottlingPolicyAppThrottle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThrottlingPolicyAppThrottle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_api_requests: int,
                 throttling_object_id: str,
                 id: Optional[str] = None,
                 throttling_object_name: Optional[str] = None):
        """
        :param int max_api_requests: Specifies the maximum number of times an API can be accessed within a specified
               period.
        :param str throttling_object_id: Specifies the object ID which the special throttling policy belongs.
        :param str id: ID of the special user/application throttling policy.
        :param str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> int:
        """
        Specifies the maximum number of times an API can be accessed within a specified
        period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> str:
        """
        Specifies the object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[str]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class ThrottlingPolicyUserThrottle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxApiRequests":
            suggest = "max_api_requests"
        elif key == "throttlingObjectId":
            suggest = "throttling_object_id"
        elif key == "throttlingObjectName":
            suggest = "throttling_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThrottlingPolicyUserThrottle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThrottlingPolicyUserThrottle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThrottlingPolicyUserThrottle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_api_requests: int,
                 throttling_object_id: str,
                 id: Optional[str] = None,
                 throttling_object_name: Optional[str] = None):
        """
        :param int max_api_requests: Specifies the maximum number of times an API can be accessed within a specified
               period.
        :param str throttling_object_id: Specifies the object ID which the special throttling policy belongs.
        :param str id: ID of the special user/application throttling policy.
        :param str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> int:
        """
        Specifies the maximum number of times an API can be accessed within a specified
        period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> str:
        """
        Specifies the object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[str]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class VpcChannelMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcChannelMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcChannelMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcChannelMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        :param str id: Specifies the ECS ID for each backend servers.
               Required if the `member_type` is **ECS**.
               This parameter and `ip_address` are alternative.
        :param str ip_address: Specifies the IP address each backend servers.
               Required if the `member_type` is **EIP**.
        :param int weight: Specifies the backend server weight.
               The valid value ranges from `1` to `100`, defaults to `1`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Specifies the ECS ID for each backend servers.
        Required if the `member_type` is **ECS**.
        This parameter and `ip_address` are alternative.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        Specifies the IP address each backend servers.
        Required if the `member_type` is **EIP**.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Specifies the backend server weight.
        The valid value ranges from `1` to `100`, defaults to `1`.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetEnvironmentsEnvironmentResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 id: str,
                 name: str):
        """
        :param str create_time: Time when the APIG environment was created, in RFC-3339 format.
        :param str description: The description about the API environment.
        :param str id: ID of the APIG environment.
        :param str name: Specifies the name of the API environment. The API environment name consists of 3 to 64
               characters, starting with a letter. Only letters, digits and underscores (_) are allowed.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time when the APIG environment was created, in RFC-3339 format.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description about the API environment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the APIG environment.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the API environment. The API environment name consists of 3 to 64
        characters, starting with a letter. Only letters, digits and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")


