# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LoginPolicyArgs', 'LoginPolicy']

@pulumi.input_type
class LoginPolicyArgs:
    def __init__(__self__, *,
                 account_validity_period: Optional[pulumi.Input[int]] = None,
                 custom_info_for_login: Optional[pulumi.Input[str]] = None,
                 lockout_duration: Optional[pulumi.Input[int]] = None,
                 login_failed_times: Optional[pulumi.Input[int]] = None,
                 period_with_login_failures: Optional[pulumi.Input[int]] = None,
                 session_timeout: Optional[pulumi.Input[int]] = None,
                 show_recent_login_info: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a LoginPolicy resource.
        :param pulumi.Input[int] account_validity_period: Specifies the validity period (days) to disable users
               if they have not logged in within the period. The valid value is range from `0` to `240`.
        :param pulumi.Input[str] custom_info_for_login: Specifies the custom information that will be displayed
               upon successful login.
        :param pulumi.Input[int] lockout_duration: Specifies the duration (minutes) to lock users out.
               The valid value is range from `15` to `1440`, defaults to `15`.
        :param pulumi.Input[int] login_failed_times: Specifies the number of unsuccessful login attempts to lock users out.
               The valid value is range from `3` to `10`, defaults to `5`.
        :param pulumi.Input[int] period_with_login_failures: Specifies the period (minutes) to count the number of unsuccessful
               login attempts. The valid value is range from `15` to `60`, defaults to `15`.
        :param pulumi.Input[int] session_timeout: Specifies the session timeout (minutes) that will apply if you or users created
               using your account do not perform any operations within a specific period.
               The valid value is range from `15` to `1,440`, defaults to `60`.
        :param pulumi.Input[bool] show_recent_login_info: Specifies whether to display last login information upon successful login.
               The value can be **true** or **false**.
        """
        if account_validity_period is not None:
            pulumi.set(__self__, "account_validity_period", account_validity_period)
        if custom_info_for_login is not None:
            pulumi.set(__self__, "custom_info_for_login", custom_info_for_login)
        if lockout_duration is not None:
            pulumi.set(__self__, "lockout_duration", lockout_duration)
        if login_failed_times is not None:
            pulumi.set(__self__, "login_failed_times", login_failed_times)
        if period_with_login_failures is not None:
            pulumi.set(__self__, "period_with_login_failures", period_with_login_failures)
        if session_timeout is not None:
            pulumi.set(__self__, "session_timeout", session_timeout)
        if show_recent_login_info is not None:
            pulumi.set(__self__, "show_recent_login_info", show_recent_login_info)

    @property
    @pulumi.getter(name="accountValidityPeriod")
    def account_validity_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the validity period (days) to disable users
        if they have not logged in within the period. The valid value is range from `0` to `240`.
        """
        return pulumi.get(self, "account_validity_period")

    @account_validity_period.setter
    def account_validity_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_validity_period", value)

    @property
    @pulumi.getter(name="customInfoForLogin")
    def custom_info_for_login(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the custom information that will be displayed
        upon successful login.
        """
        return pulumi.get(self, "custom_info_for_login")

    @custom_info_for_login.setter
    def custom_info_for_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_info_for_login", value)

    @property
    @pulumi.getter(name="lockoutDuration")
    def lockout_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the duration (minutes) to lock users out.
        The valid value is range from `15` to `1440`, defaults to `15`.
        """
        return pulumi.get(self, "lockout_duration")

    @lockout_duration.setter
    def lockout_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lockout_duration", value)

    @property
    @pulumi.getter(name="loginFailedTimes")
    def login_failed_times(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of unsuccessful login attempts to lock users out.
        The valid value is range from `3` to `10`, defaults to `5`.
        """
        return pulumi.get(self, "login_failed_times")

    @login_failed_times.setter
    def login_failed_times(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_failed_times", value)

    @property
    @pulumi.getter(name="periodWithLoginFailures")
    def period_with_login_failures(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the period (minutes) to count the number of unsuccessful
        login attempts. The valid value is range from `15` to `60`, defaults to `15`.
        """
        return pulumi.get(self, "period_with_login_failures")

    @period_with_login_failures.setter
    def period_with_login_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_with_login_failures", value)

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the session timeout (minutes) that will apply if you or users created
        using your account do not perform any operations within a specific period.
        The valid value is range from `15` to `1,440`, defaults to `60`.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_timeout", value)

    @property
    @pulumi.getter(name="showRecentLoginInfo")
    def show_recent_login_info(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to display last login information upon successful login.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "show_recent_login_info")

    @show_recent_login_info.setter
    def show_recent_login_info(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_recent_login_info", value)


@pulumi.input_type
class _LoginPolicyState:
    def __init__(__self__, *,
                 account_validity_period: Optional[pulumi.Input[int]] = None,
                 custom_info_for_login: Optional[pulumi.Input[str]] = None,
                 lockout_duration: Optional[pulumi.Input[int]] = None,
                 login_failed_times: Optional[pulumi.Input[int]] = None,
                 period_with_login_failures: Optional[pulumi.Input[int]] = None,
                 session_timeout: Optional[pulumi.Input[int]] = None,
                 show_recent_login_info: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering LoginPolicy resources.
        :param pulumi.Input[int] account_validity_period: Specifies the validity period (days) to disable users
               if they have not logged in within the period. The valid value is range from `0` to `240`.
        :param pulumi.Input[str] custom_info_for_login: Specifies the custom information that will be displayed
               upon successful login.
        :param pulumi.Input[int] lockout_duration: Specifies the duration (minutes) to lock users out.
               The valid value is range from `15` to `1440`, defaults to `15`.
        :param pulumi.Input[int] login_failed_times: Specifies the number of unsuccessful login attempts to lock users out.
               The valid value is range from `3` to `10`, defaults to `5`.
        :param pulumi.Input[int] period_with_login_failures: Specifies the period (minutes) to count the number of unsuccessful
               login attempts. The valid value is range from `15` to `60`, defaults to `15`.
        :param pulumi.Input[int] session_timeout: Specifies the session timeout (minutes) that will apply if you or users created
               using your account do not perform any operations within a specific period.
               The valid value is range from `15` to `1,440`, defaults to `60`.
        :param pulumi.Input[bool] show_recent_login_info: Specifies whether to display last login information upon successful login.
               The value can be **true** or **false**.
        """
        if account_validity_period is not None:
            pulumi.set(__self__, "account_validity_period", account_validity_period)
        if custom_info_for_login is not None:
            pulumi.set(__self__, "custom_info_for_login", custom_info_for_login)
        if lockout_duration is not None:
            pulumi.set(__self__, "lockout_duration", lockout_duration)
        if login_failed_times is not None:
            pulumi.set(__self__, "login_failed_times", login_failed_times)
        if period_with_login_failures is not None:
            pulumi.set(__self__, "period_with_login_failures", period_with_login_failures)
        if session_timeout is not None:
            pulumi.set(__self__, "session_timeout", session_timeout)
        if show_recent_login_info is not None:
            pulumi.set(__self__, "show_recent_login_info", show_recent_login_info)

    @property
    @pulumi.getter(name="accountValidityPeriod")
    def account_validity_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the validity period (days) to disable users
        if they have not logged in within the period. The valid value is range from `0` to `240`.
        """
        return pulumi.get(self, "account_validity_period")

    @account_validity_period.setter
    def account_validity_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_validity_period", value)

    @property
    @pulumi.getter(name="customInfoForLogin")
    def custom_info_for_login(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the custom information that will be displayed
        upon successful login.
        """
        return pulumi.get(self, "custom_info_for_login")

    @custom_info_for_login.setter
    def custom_info_for_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_info_for_login", value)

    @property
    @pulumi.getter(name="lockoutDuration")
    def lockout_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the duration (minutes) to lock users out.
        The valid value is range from `15` to `1440`, defaults to `15`.
        """
        return pulumi.get(self, "lockout_duration")

    @lockout_duration.setter
    def lockout_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lockout_duration", value)

    @property
    @pulumi.getter(name="loginFailedTimes")
    def login_failed_times(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of unsuccessful login attempts to lock users out.
        The valid value is range from `3` to `10`, defaults to `5`.
        """
        return pulumi.get(self, "login_failed_times")

    @login_failed_times.setter
    def login_failed_times(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_failed_times", value)

    @property
    @pulumi.getter(name="periodWithLoginFailures")
    def period_with_login_failures(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the period (minutes) to count the number of unsuccessful
        login attempts. The valid value is range from `15` to `60`, defaults to `15`.
        """
        return pulumi.get(self, "period_with_login_failures")

    @period_with_login_failures.setter
    def period_with_login_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_with_login_failures", value)

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the session timeout (minutes) that will apply if you or users created
        using your account do not perform any operations within a specific period.
        The valid value is range from `15` to `1,440`, defaults to `60`.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_timeout", value)

    @property
    @pulumi.getter(name="showRecentLoginInfo")
    def show_recent_login_info(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to display last login information upon successful login.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "show_recent_login_info")

    @show_recent_login_info.setter
    def show_recent_login_info(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_recent_login_info", value)


class LoginPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_validity_period: Optional[pulumi.Input[int]] = None,
                 custom_info_for_login: Optional[pulumi.Input[str]] = None,
                 lockout_duration: Optional[pulumi.Input[int]] = None,
                 login_failed_times: Optional[pulumi.Input[int]] = None,
                 period_with_login_failures: Optional[pulumi.Input[int]] = None,
                 session_timeout: Optional[pulumi.Input[int]] = None,
                 show_recent_login_info: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.iam.LoginPolicy("test",
            account_validity_period=20,
            custom_info_for_login="hello Terraform",
            lockout_duration=30,
            login_failed_times=10,
            period_with_login_failures=30,
            session_timeout=120,
            show_recent_login_info=True)
        ```

        ## Import

        Identity login policy can be imported using the account ID or domain ID, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/loginPolicy:LoginPolicy example <your account ID>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] account_validity_period: Specifies the validity period (days) to disable users
               if they have not logged in within the period. The valid value is range from `0` to `240`.
        :param pulumi.Input[str] custom_info_for_login: Specifies the custom information that will be displayed
               upon successful login.
        :param pulumi.Input[int] lockout_duration: Specifies the duration (minutes) to lock users out.
               The valid value is range from `15` to `1440`, defaults to `15`.
        :param pulumi.Input[int] login_failed_times: Specifies the number of unsuccessful login attempts to lock users out.
               The valid value is range from `3` to `10`, defaults to `5`.
        :param pulumi.Input[int] period_with_login_failures: Specifies the period (minutes) to count the number of unsuccessful
               login attempts. The valid value is range from `15` to `60`, defaults to `15`.
        :param pulumi.Input[int] session_timeout: Specifies the session timeout (minutes) that will apply if you or users created
               using your account do not perform any operations within a specific period.
               The valid value is range from `15` to `1,440`, defaults to `60`.
        :param pulumi.Input[bool] show_recent_login_info: Specifies whether to display last login information upon successful login.
               The value can be **true** or **false**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LoginPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.iam.LoginPolicy("test",
            account_validity_period=20,
            custom_info_for_login="hello Terraform",
            lockout_duration=30,
            login_failed_times=10,
            period_with_login_failures=30,
            session_timeout=120,
            show_recent_login_info=True)
        ```

        ## Import

        Identity login policy can be imported using the account ID or domain ID, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/loginPolicy:LoginPolicy example <your account ID>
        ```

        :param str resource_name: The name of the resource.
        :param LoginPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoginPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_validity_period: Optional[pulumi.Input[int]] = None,
                 custom_info_for_login: Optional[pulumi.Input[str]] = None,
                 lockout_duration: Optional[pulumi.Input[int]] = None,
                 login_failed_times: Optional[pulumi.Input[int]] = None,
                 period_with_login_failures: Optional[pulumi.Input[int]] = None,
                 session_timeout: Optional[pulumi.Input[int]] = None,
                 show_recent_login_info: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoginPolicyArgs.__new__(LoginPolicyArgs)

            __props__.__dict__["account_validity_period"] = account_validity_period
            __props__.__dict__["custom_info_for_login"] = custom_info_for_login
            __props__.__dict__["lockout_duration"] = lockout_duration
            __props__.__dict__["login_failed_times"] = login_failed_times
            __props__.__dict__["period_with_login_failures"] = period_with_login_failures
            __props__.__dict__["session_timeout"] = session_timeout
            __props__.__dict__["show_recent_login_info"] = show_recent_login_info
        super(LoginPolicy, __self__).__init__(
            'huaweicloud:Iam/loginPolicy:LoginPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_validity_period: Optional[pulumi.Input[int]] = None,
            custom_info_for_login: Optional[pulumi.Input[str]] = None,
            lockout_duration: Optional[pulumi.Input[int]] = None,
            login_failed_times: Optional[pulumi.Input[int]] = None,
            period_with_login_failures: Optional[pulumi.Input[int]] = None,
            session_timeout: Optional[pulumi.Input[int]] = None,
            show_recent_login_info: Optional[pulumi.Input[bool]] = None) -> 'LoginPolicy':
        """
        Get an existing LoginPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] account_validity_period: Specifies the validity period (days) to disable users
               if they have not logged in within the period. The valid value is range from `0` to `240`.
        :param pulumi.Input[str] custom_info_for_login: Specifies the custom information that will be displayed
               upon successful login.
        :param pulumi.Input[int] lockout_duration: Specifies the duration (minutes) to lock users out.
               The valid value is range from `15` to `1440`, defaults to `15`.
        :param pulumi.Input[int] login_failed_times: Specifies the number of unsuccessful login attempts to lock users out.
               The valid value is range from `3` to `10`, defaults to `5`.
        :param pulumi.Input[int] period_with_login_failures: Specifies the period (minutes) to count the number of unsuccessful
               login attempts. The valid value is range from `15` to `60`, defaults to `15`.
        :param pulumi.Input[int] session_timeout: Specifies the session timeout (minutes) that will apply if you or users created
               using your account do not perform any operations within a specific period.
               The valid value is range from `15` to `1,440`, defaults to `60`.
        :param pulumi.Input[bool] show_recent_login_info: Specifies whether to display last login information upon successful login.
               The value can be **true** or **false**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoginPolicyState.__new__(_LoginPolicyState)

        __props__.__dict__["account_validity_period"] = account_validity_period
        __props__.__dict__["custom_info_for_login"] = custom_info_for_login
        __props__.__dict__["lockout_duration"] = lockout_duration
        __props__.__dict__["login_failed_times"] = login_failed_times
        __props__.__dict__["period_with_login_failures"] = period_with_login_failures
        __props__.__dict__["session_timeout"] = session_timeout
        __props__.__dict__["show_recent_login_info"] = show_recent_login_info
        return LoginPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountValidityPeriod")
    def account_validity_period(self) -> pulumi.Output[int]:
        """
        Specifies the validity period (days) to disable users
        if they have not logged in within the period. The valid value is range from `0` to `240`.
        """
        return pulumi.get(self, "account_validity_period")

    @property
    @pulumi.getter(name="customInfoForLogin")
    def custom_info_for_login(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the custom information that will be displayed
        upon successful login.
        """
        return pulumi.get(self, "custom_info_for_login")

    @property
    @pulumi.getter(name="lockoutDuration")
    def lockout_duration(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the duration (minutes) to lock users out.
        The valid value is range from `15` to `1440`, defaults to `15`.
        """
        return pulumi.get(self, "lockout_duration")

    @property
    @pulumi.getter(name="loginFailedTimes")
    def login_failed_times(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the number of unsuccessful login attempts to lock users out.
        The valid value is range from `3` to `10`, defaults to `5`.
        """
        return pulumi.get(self, "login_failed_times")

    @property
    @pulumi.getter(name="periodWithLoginFailures")
    def period_with_login_failures(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the period (minutes) to count the number of unsuccessful
        login attempts. The valid value is range from `15` to `60`, defaults to `15`.
        """
        return pulumi.get(self, "period_with_login_failures")

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the session timeout (minutes) that will apply if you or users created
        using your account do not perform any operations within a specific period.
        The valid value is range from `15` to `1,440`, defaults to `60`.
        """
        return pulumi.get(self, "session_timeout")

    @property
    @pulumi.getter(name="showRecentLoginInfo")
    def show_recent_login_info(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether to display last login information upon successful login.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "show_recent_login_info")

