# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GroupRoleAssignmentArgs', 'GroupRoleAssignment']

@pulumi.input_type
class GroupRoleAssignmentArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 role_id: pulumi.Input[str],
                 domain_id: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GroupRoleAssignment resource.
        :param pulumi.Input[str] group_id: Specifies the group to assign the role to.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] role_id: Specifies the role to assign.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] domain_id: Specifies the domain to assign the role in.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project to assign the role in.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] project_id: Specifies the project to assign the role in.
               If `project_id` is set to **all**, it means that the specified user group will be able to use all projects,
               including existing and future projects.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "role_id", role_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        Specifies the group to assign the role to.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[str]:
        """
        Specifies the role to assign.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the domain to assign the role in.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project to assign the role in.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the project to assign the role in.
        If `project_id` is set to **all**, it means that the specified user group will be able to use all projects,
        including existing and future projects.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class _GroupRoleAssignmentState:
    def __init__(__self__, *,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GroupRoleAssignment resources.
        :param pulumi.Input[str] domain_id: Specifies the domain to assign the role in.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project to assign the role in.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] group_id: Specifies the group to assign the role to.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] project_id: Specifies the project to assign the role in.
               If `project_id` is set to **all**, it means that the specified user group will be able to use all projects,
               including existing and future projects.
        :param pulumi.Input[str] role_id: Specifies the role to assign.
               Changing this parameter will create a new resource.
        """
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the domain to assign the role in.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project to assign the role in.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the group to assign the role to.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the project to assign the role in.
        If `project_id` is set to **all**, it means that the specified user group will be able to use all projects,
        including existing and future projects.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the role to assign.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)


class GroupRoleAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an IAM user group role assignment within HuaweiCloud IAM Service.
        This is an alternative to `Iam.RoleAssignment`

        > **NOTE:** 1. You *must* have admin privileges to use this resource.
          <br/>2. When the resource is created, the permissions will take effect after 15 to 30 minutes.

        ## Example Usage
        ### Assign role with project

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        test_role = huaweicloud.Iam.get_role(name="rds_adm")
        test_group = huaweicloud.iam.Group("testGroup")
        test_group_role_assignment = huaweicloud.iam.GroupRoleAssignment("testGroupRoleAssignment",
            group_id=test_group.id,
            role_id=test_role.id,
            project_id=project_id)
        ```
        ### Assign role with all projects

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        test_role = huaweicloud.Iam.get_role(name="rds_adm")
        test_group = huaweicloud.iam.Group("testGroup")
        all = huaweicloud.iam.GroupRoleAssignment("all",
            group_id=test_group.id,
            role_id=test_role.id,
            project_id="all")
        ```
        ### Assign role with domain

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_id = config.require_object("domainId")
        test_role = huaweicloud.Iam.get_role(name="obs_adm")
        test_group = huaweicloud.iam.Group("testGroup")
        test_group_role_assignment = huaweicloud.iam.GroupRoleAssignment("testGroupRoleAssignment",
            group_id=test_group.id,
            role_id=test_role.id,
            domain_id=domain_id)
        ```
        ### Assign role with enterprise project

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test_role = huaweicloud.Iam.get_role(name="rds_adm")
        test_group = huaweicloud.iam.Group("testGroup")
        test_group_role_assignment = huaweicloud.iam.GroupRoleAssignment("testGroupRoleAssignment",
            group_id=test_group.id,
            role_id=test_role.id,
            enterprise_project_id=enterprise_project_id)
        ```

        ## Import

        The role assignments can be imported using the `group_id`, `role_id` and

        `domain_id`, `project_id`,

         `enterprise_project_id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/groupRoleAssignment:GroupRoleAssignment test <group_id>/<role_id>/<domain_id>
        ```

         or bash

        ```sh
         $ pulumi import huaweicloud:Iam/groupRoleAssignment:GroupRoleAssignment test <group_id>/<role_id>/<project_id>
        ```

         or bash

        ```sh
         $ pulumi import huaweicloud:Iam/groupRoleAssignment:GroupRoleAssignment test <group_id>/<role_id>/all
        ```

         or bash

        ```sh
         $ pulumi import huaweicloud:Iam/groupRoleAssignment:GroupRoleAssignment test <group_id>/<role_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_id: Specifies the domain to assign the role in.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project to assign the role in.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] group_id: Specifies the group to assign the role to.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] project_id: Specifies the project to assign the role in.
               If `project_id` is set to **all**, it means that the specified user group will be able to use all projects,
               including existing and future projects.
        :param pulumi.Input[str] role_id: Specifies the role to assign.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupRoleAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IAM user group role assignment within HuaweiCloud IAM Service.
        This is an alternative to `Iam.RoleAssignment`

        > **NOTE:** 1. You *must* have admin privileges to use this resource.
          <br/>2. When the resource is created, the permissions will take effect after 15 to 30 minutes.

        ## Example Usage
        ### Assign role with project

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        test_role = huaweicloud.Iam.get_role(name="rds_adm")
        test_group = huaweicloud.iam.Group("testGroup")
        test_group_role_assignment = huaweicloud.iam.GroupRoleAssignment("testGroupRoleAssignment",
            group_id=test_group.id,
            role_id=test_role.id,
            project_id=project_id)
        ```
        ### Assign role with all projects

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        project_id = config.require_object("projectId")
        test_role = huaweicloud.Iam.get_role(name="rds_adm")
        test_group = huaweicloud.iam.Group("testGroup")
        all = huaweicloud.iam.GroupRoleAssignment("all",
            group_id=test_group.id,
            role_id=test_role.id,
            project_id="all")
        ```
        ### Assign role with domain

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        domain_id = config.require_object("domainId")
        test_role = huaweicloud.Iam.get_role(name="obs_adm")
        test_group = huaweicloud.iam.Group("testGroup")
        test_group_role_assignment = huaweicloud.iam.GroupRoleAssignment("testGroupRoleAssignment",
            group_id=test_group.id,
            role_id=test_role.id,
            domain_id=domain_id)
        ```
        ### Assign role with enterprise project

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        test_role = huaweicloud.Iam.get_role(name="rds_adm")
        test_group = huaweicloud.iam.Group("testGroup")
        test_group_role_assignment = huaweicloud.iam.GroupRoleAssignment("testGroupRoleAssignment",
            group_id=test_group.id,
            role_id=test_role.id,
            enterprise_project_id=enterprise_project_id)
        ```

        ## Import

        The role assignments can be imported using the `group_id`, `role_id` and

        `domain_id`, `project_id`,

         `enterprise_project_id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/groupRoleAssignment:GroupRoleAssignment test <group_id>/<role_id>/<domain_id>
        ```

         or bash

        ```sh
         $ pulumi import huaweicloud:Iam/groupRoleAssignment:GroupRoleAssignment test <group_id>/<role_id>/<project_id>
        ```

         or bash

        ```sh
         $ pulumi import huaweicloud:Iam/groupRoleAssignment:GroupRoleAssignment test <group_id>/<role_id>/all
        ```

         or bash

        ```sh
         $ pulumi import huaweicloud:Iam/groupRoleAssignment:GroupRoleAssignment test <group_id>/<role_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param GroupRoleAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupRoleAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupRoleAssignmentArgs.__new__(GroupRoleAssignmentArgs)

            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["project_id"] = project_id
            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
        super(GroupRoleAssignment, __self__).__init__(
            'huaweicloud:Iam/groupRoleAssignment:GroupRoleAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain_id: Optional[pulumi.Input[str]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            role_id: Optional[pulumi.Input[str]] = None) -> 'GroupRoleAssignment':
        """
        Get an existing GroupRoleAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_id: Specifies the domain to assign the role in.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project to assign the role in.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] group_id: Specifies the group to assign the role to.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] project_id: Specifies the project to assign the role in.
               If `project_id` is set to **all**, it means that the specified user group will be able to use all projects,
               including existing and future projects.
        :param pulumi.Input[str] role_id: Specifies the role to assign.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupRoleAssignmentState.__new__(_GroupRoleAssignmentState)

        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["role_id"] = role_id
        return GroupRoleAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the domain to assign the role in.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the enterprise project to assign the role in.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        Specifies the group to assign the role to.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the project to assign the role in.
        If `project_id` is set to **all**, it means that the specified user group will be able to use all projects,
        including existing and future projects.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[str]:
        """
        Specifies the role to assign.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "role_id")

