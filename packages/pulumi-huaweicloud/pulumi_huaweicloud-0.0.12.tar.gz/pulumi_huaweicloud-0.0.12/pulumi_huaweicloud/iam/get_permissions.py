# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPermissionsResult',
    'AwaitableGetPermissionsResult',
    'get_permissions',
    'get_permissions_output',
]

@pulumi.output_type
class GetPermissionsResult:
    """
    A collection of values returned by getPermissions.
    """
    def __init__(__self__, catalog=None, id=None, name=None, permissions=None, type=None):
        if catalog and not isinstance(catalog, str):
            raise TypeError("Expected argument 'catalog' to be a str")
        pulumi.set(__self__, "catalog", catalog)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[str]:
        """
        The service catalog of the permission.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The permission name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetPermissionsPermissionResult']:
        """
        An array of available permissions. The structure is documented below.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


class AwaitableGetPermissionsResult(GetPermissionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPermissionsResult(
            catalog=self.catalog,
            id=self.id,
            name=self.name,
            permissions=self.permissions,
            type=self.type)


def get_permissions(catalog: Optional[str] = None,
                    name: Optional[str] = None,
                    type: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPermissionsResult:
    """
    Use this data source to get the available IAM [Permissions](https://support.huaweicloud.com/intl/en-us/productdesc-iam/iam_01_0023.html#section5),
    including roles and policies.

    > **NOTE:** You *must* have IAM read privileges to use this data source.

    ## Example Usage
    ### Full Permissions of ECS Service

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    ecs_full = huaweicloud.Iam.get_permissions(name="ECS FullAccess")
    ```
    ### All System Defined Permissions of ELB Service

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    elb_all = huaweicloud.Iam.get_permissions(catalog="ELB")
    ```
    ### All Administrator Permissions

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all_adm = huaweicloud.Iam.get_permissions(name="Administrator")
    ```
    ### All Custom Policies

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    custom = huaweicloud.Iam.get_permissions(type="custom")
    ```


    :param str catalog: Specifies the service catalog of the permission.
    :param str name: Specifies the permission name or filter condition.
           + Permission name: For example, if you set this parameter to **ECS FullAccess**, information about the permission will
           be returned.
           + Filter condition: For example, if you set this parameter to **Administrator**, all administrator permissions that
           meet the conditions will be returned.
    :param str type: Specifies the type of the permission. The default value is **system**, and valid values are
           as follows:
           + **system**: The system-defined permissions (including system-defined policies and roles).
           We can get all **System-defined Permissions** from [HuaweiCloud](https://support.huaweicloud.com/intl/en-us/usermanual-permissions/iam_01_0001.html).
           + **system-policy**: The system-defined policies.
           + **system-role**: The system-defined roles.
           + **custom**: The custom policies.
    """
    __args__ = dict()
    __args__['catalog'] = catalog
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Iam/getPermissions:getPermissions', __args__, opts=opts, typ=GetPermissionsResult).value

    return AwaitableGetPermissionsResult(
        catalog=__ret__.catalog,
        id=__ret__.id,
        name=__ret__.name,
        permissions=__ret__.permissions,
        type=__ret__.type)


@_utilities.lift_output_func(get_permissions)
def get_permissions_output(catalog: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           type: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPermissionsResult]:
    """
    Use this data source to get the available IAM [Permissions](https://support.huaweicloud.com/intl/en-us/productdesc-iam/iam_01_0023.html#section5),
    including roles and policies.

    > **NOTE:** You *must* have IAM read privileges to use this data source.

    ## Example Usage
    ### Full Permissions of ECS Service

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    ecs_full = huaweicloud.Iam.get_permissions(name="ECS FullAccess")
    ```
    ### All System Defined Permissions of ELB Service

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    elb_all = huaweicloud.Iam.get_permissions(catalog="ELB")
    ```
    ### All Administrator Permissions

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    all_adm = huaweicloud.Iam.get_permissions(name="Administrator")
    ```
    ### All Custom Policies

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    custom = huaweicloud.Iam.get_permissions(type="custom")
    ```


    :param str catalog: Specifies the service catalog of the permission.
    :param str name: Specifies the permission name or filter condition.
           + Permission name: For example, if you set this parameter to **ECS FullAccess**, information about the permission will
           be returned.
           + Filter condition: For example, if you set this parameter to **Administrator**, all administrator permissions that
           meet the conditions will be returned.
    :param str type: Specifies the type of the permission. The default value is **system**, and valid values are
           as follows:
           + **system**: The system-defined permissions (including system-defined policies and roles).
           We can get all **System-defined Permissions** from [HuaweiCloud](https://support.huaweicloud.com/intl/en-us/usermanual-permissions/iam_01_0001.html).
           + **system-policy**: The system-defined policies.
           + **system-role**: The system-defined roles.
           + **custom**: The custom policies.
    """
    ...
