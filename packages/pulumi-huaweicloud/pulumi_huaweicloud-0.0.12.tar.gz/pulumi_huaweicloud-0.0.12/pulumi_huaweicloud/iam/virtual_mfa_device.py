# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['VirtualMfaDeviceArgs', 'VirtualMfaDevice']

@pulumi.input_type
class VirtualMfaDeviceArgs:
    def __init__(__self__, *,
                 user_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VirtualMfaDevice resource.
        :param pulumi.Input[str] user_id: Specifies the user ID which the virtual MFA device belongs to.
               Changing this will create a new virtual MFA device.
        :param pulumi.Input[str] name: Specifies the virtual MFA device name. Changing this will create a new virtual
               MFA device.
        """
        pulumi.set(__self__, "user_id", user_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        Specifies the user ID which the virtual MFA device belongs to.
        Changing this will create a new virtual MFA device.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the virtual MFA device name. Changing this will create a new virtual
        MFA device.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _VirtualMfaDeviceState:
    def __init__(__self__, *,
                 base32_string_seed: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qr_code_png: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VirtualMfaDevice resources.
        :param pulumi.Input[str] base32_string_seed: The base32 seed, which a third-patry system can use to generate a `CAPTCHA` code.
        :param pulumi.Input[str] name: Specifies the virtual MFA device name. Changing this will create a new virtual
               MFA device.
        :param pulumi.Input[str] qr_code_png: A QR code PNG image that encodes `otpauth://totp/huawei:$domainName@$userName?secret=$Base32String`
               where `$domainName` is IAM domain name, `$userName` is IAM user name, and `Base32String` is the seed in base32 format.
        :param pulumi.Input[str] user_id: Specifies the user ID which the virtual MFA device belongs to.
               Changing this will create a new virtual MFA device.
        """
        if base32_string_seed is not None:
            pulumi.set(__self__, "base32_string_seed", base32_string_seed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qr_code_png is not None:
            pulumi.set(__self__, "qr_code_png", qr_code_png)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="base32StringSeed")
    def base32_string_seed(self) -> Optional[pulumi.Input[str]]:
        """
        The base32 seed, which a third-patry system can use to generate a `CAPTCHA` code.
        """
        return pulumi.get(self, "base32_string_seed")

    @base32_string_seed.setter
    def base32_string_seed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base32_string_seed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the virtual MFA device name. Changing this will create a new virtual
        MFA device.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="qrCodePng")
    def qr_code_png(self) -> Optional[pulumi.Input[str]]:
        """
        A QR code PNG image that encodes `otpauth://totp/huawei:$domainName@$userName?secret=$Base32String`
        where `$domainName` is IAM domain name, `$userName` is IAM user name, and `Base32String` is the seed in base32 format.
        """
        return pulumi.get(self, "qr_code_png")

    @qr_code_png.setter
    def qr_code_png(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qr_code_png", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user ID which the virtual MFA device belongs to.
        Changing this will create a new virtual MFA device.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


class VirtualMfaDevice(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        user_id = config.require_object("userId")
        test = huaweicloud.iam.VirtualMfaDevice("test", user_id=user_id)
        ```

        ## Import

        The virtual MFA device can be imported using the `user_id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/virtualMfaDevice:VirtualMfaDevice test <user_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Specifies the virtual MFA device name. Changing this will create a new virtual
               MFA device.
        :param pulumi.Input[str] user_id: Specifies the user ID which the virtual MFA device belongs to.
               Changing this will create a new virtual MFA device.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualMfaDeviceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        user_id = config.require_object("userId")
        test = huaweicloud.iam.VirtualMfaDevice("test", user_id=user_id)
        ```

        ## Import

        The virtual MFA device can be imported using the `user_id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/virtualMfaDevice:VirtualMfaDevice test <user_id>
        ```

        :param str resource_name: The name of the resource.
        :param VirtualMfaDeviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualMfaDeviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualMfaDeviceArgs.__new__(VirtualMfaDeviceArgs)

            __props__.__dict__["name"] = name
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["base32_string_seed"] = None
            __props__.__dict__["qr_code_png"] = None
        super(VirtualMfaDevice, __self__).__init__(
            'huaweicloud:Iam/virtualMfaDevice:VirtualMfaDevice',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            base32_string_seed: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            qr_code_png: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None) -> 'VirtualMfaDevice':
        """
        Get an existing VirtualMfaDevice resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] base32_string_seed: The base32 seed, which a third-patry system can use to generate a `CAPTCHA` code.
        :param pulumi.Input[str] name: Specifies the virtual MFA device name. Changing this will create a new virtual
               MFA device.
        :param pulumi.Input[str] qr_code_png: A QR code PNG image that encodes `otpauth://totp/huawei:$domainName@$userName?secret=$Base32String`
               where `$domainName` is IAM domain name, `$userName` is IAM user name, and `Base32String` is the seed in base32 format.
        :param pulumi.Input[str] user_id: Specifies the user ID which the virtual MFA device belongs to.
               Changing this will create a new virtual MFA device.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualMfaDeviceState.__new__(_VirtualMfaDeviceState)

        __props__.__dict__["base32_string_seed"] = base32_string_seed
        __props__.__dict__["name"] = name
        __props__.__dict__["qr_code_png"] = qr_code_png
        __props__.__dict__["user_id"] = user_id
        return VirtualMfaDevice(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="base32StringSeed")
    def base32_string_seed(self) -> pulumi.Output[str]:
        """
        The base32 seed, which a third-patry system can use to generate a `CAPTCHA` code.
        """
        return pulumi.get(self, "base32_string_seed")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the virtual MFA device name. Changing this will create a new virtual
        MFA device.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qrCodePng")
    def qr_code_png(self) -> pulumi.Output[str]:
        """
        A QR code PNG image that encodes `otpauth://totp/huawei:$domainName@$userName?secret=$Base32String`
        where `$domainName` is IAM domain name, `$userName` is IAM user name, and `Base32String` is the seed in base32 format.
        """
        return pulumi.get(self, "qr_code_png")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        Specifies the user ID which the virtual MFA device belongs to.
        Changing this will create a new virtual MFA device.
        """
        return pulumi.get(self, "user_id")

