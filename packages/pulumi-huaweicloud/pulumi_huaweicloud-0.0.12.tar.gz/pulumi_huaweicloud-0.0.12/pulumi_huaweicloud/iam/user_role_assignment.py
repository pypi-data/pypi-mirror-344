# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UserRoleAssignmentArgs', 'UserRoleAssignment']

@pulumi.input_type
class UserRoleAssignmentArgs:
    def __init__(__self__, *,
                 enterprise_project_id: pulumi.Input[str],
                 role_id: pulumi.Input[str],
                 user_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a UserRoleAssignment resource.
        :param pulumi.Input[str] enterprise_project_id: Specifies the ID of the enterprise project
               to assign the role in. Changing this parameter will create a new resource.
        :param pulumi.Input[str] role_id: Specifies the role to assign.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] user_id: Specifies the the ID of user to assign the role to.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the enterprise project
        to assign the role in. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[str]:
        """
        Specifies the role to assign.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        Specifies the the ID of user to assign the role to.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class _UserRoleAssignmentState:
    def __init__(__self__, *,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserRoleAssignment resources.
        :param pulumi.Input[str] enterprise_project_id: Specifies the ID of the enterprise project
               to assign the role in. Changing this parameter will create a new resource.
        :param pulumi.Input[str] role_id: Specifies the role to assign.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] user_id: Specifies the the ID of user to assign the role to.
               Changing this parameter will create a new resource.
        """
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the enterprise project
        to assign the role in. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the role to assign.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the the ID of user to assign the role to.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


class UserRoleAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an IAM user role assignment within HuaweiCloud IAM.

        > **NOTE:** 1. You *must* have admin privileges to use this resource.
          <br/>2. When the resource is created, the permissions will take effect after 15 to 30 minutes.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        user1_password = config.require_object("user1Password")
        test_role = huaweicloud.Iam.get_role(display_name="ECS FullAccess")
        test_user = huaweicloud.iam.User("testUser",
            description="A user",
            password=user1_password)
        test_user_role_assignment = huaweicloud.iam.UserRoleAssignment("testUserRoleAssignment",
            user_id=test_user.id,
            role_id=test_role.id,
            enterprise_project_id=enterprise_project_id)
        ```

        ## Import

        The role assignments can be imported using the `user_id`, `role_id` and

        `enterprise_project_id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/userRoleAssignment:UserRoleAssignment test <user_id>/<role_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] enterprise_project_id: Specifies the ID of the enterprise project
               to assign the role in. Changing this parameter will create a new resource.
        :param pulumi.Input[str] role_id: Specifies the role to assign.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] user_id: Specifies the the ID of user to assign the role to.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserRoleAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IAM user role assignment within HuaweiCloud IAM.

        > **NOTE:** 1. You *must* have admin privileges to use this resource.
          <br/>2. When the resource is created, the permissions will take effect after 15 to 30 minutes.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        enterprise_project_id = config.require_object("enterpriseProjectId")
        user1_password = config.require_object("user1Password")
        test_role = huaweicloud.Iam.get_role(display_name="ECS FullAccess")
        test_user = huaweicloud.iam.User("testUser",
            description="A user",
            password=user1_password)
        test_user_role_assignment = huaweicloud.iam.UserRoleAssignment("testUserRoleAssignment",
            user_id=test_user.id,
            role_id=test_role.id,
            enterprise_project_id=enterprise_project_id)
        ```

        ## Import

        The role assignments can be imported using the `user_id`, `role_id` and

        `enterprise_project_id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/userRoleAssignment:UserRoleAssignment test <user_id>/<role_id>/<enterprise_project_id>
        ```

        :param str resource_name: The name of the resource.
        :param UserRoleAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserRoleAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserRoleAssignmentArgs.__new__(UserRoleAssignmentArgs)

            if enterprise_project_id is None and not opts.urn:
                raise TypeError("Missing required property 'enterprise_project_id'")
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
        super(UserRoleAssignment, __self__).__init__(
            'huaweicloud:Iam/userRoleAssignment:UserRoleAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            role_id: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None) -> 'UserRoleAssignment':
        """
        Get an existing UserRoleAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] enterprise_project_id: Specifies the ID of the enterprise project
               to assign the role in. Changing this parameter will create a new resource.
        :param pulumi.Input[str] role_id: Specifies the role to assign.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] user_id: Specifies the the ID of user to assign the role to.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserRoleAssignmentState.__new__(_UserRoleAssignmentState)

        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["user_id"] = user_id
        return UserRoleAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the enterprise project
        to assign the role in. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[str]:
        """
        Specifies the role to assign.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        Specifies the the ID of user to assign the role to.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "user_id")

