# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PasswordPolicyArgs', 'PasswordPolicy']

@pulumi.input_type
class PasswordPolicyArgs:
    def __init__(__self__, *,
                 maximum_consecutive_identical_chars: Optional[pulumi.Input[int]] = None,
                 minimum_password_age: Optional[pulumi.Input[int]] = None,
                 minimum_password_length: Optional[pulumi.Input[int]] = None,
                 number_of_recent_passwords_disallowed: Optional[pulumi.Input[int]] = None,
                 password_char_combination: Optional[pulumi.Input[int]] = None,
                 password_not_username_or_invert: Optional[pulumi.Input[bool]] = None,
                 password_validity_period: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a PasswordPolicy resource.
        :param pulumi.Input[int] maximum_consecutive_identical_chars: Specifies the maximum number of times that a character is allowed
               to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
               consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
               identical characters are not allowed in a password.
        :param pulumi.Input[int] minimum_password_age: Specifies the minimum period (minutes) after which users are allowed to make
               a password change. The value ranges from `0` to `1,440` and defaults to `0`.
        :param pulumi.Input[int] minimum_password_length: Specifies the minimum number of characters that a password must contain.
               The value ranges from `6` to `32` and defaults to `8`.
        :param pulumi.Input[int] number_of_recent_passwords_disallowed: Specifies the member of previously used passwords that are
               not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
               set the last three passwords that the user has previously used when setting a new password.
        :param pulumi.Input[int] password_char_combination: Specifies the minimum number of character types that a password must contain.
               The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
               uppercase letters, lowercase letters, digits, and special characters.
        :param pulumi.Input[bool] password_not_username_or_invert: Specifies whether the password can be the username or the username
               spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
               be used as a password.
        :param pulumi.Input[int] password_validity_period: Specifies the password validity period (days).
               The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
        """
        if maximum_consecutive_identical_chars is not None:
            pulumi.set(__self__, "maximum_consecutive_identical_chars", maximum_consecutive_identical_chars)
        if minimum_password_age is not None:
            pulumi.set(__self__, "minimum_password_age", minimum_password_age)
        if minimum_password_length is not None:
            pulumi.set(__self__, "minimum_password_length", minimum_password_length)
        if number_of_recent_passwords_disallowed is not None:
            pulumi.set(__self__, "number_of_recent_passwords_disallowed", number_of_recent_passwords_disallowed)
        if password_char_combination is not None:
            pulumi.set(__self__, "password_char_combination", password_char_combination)
        if password_not_username_or_invert is not None:
            pulumi.set(__self__, "password_not_username_or_invert", password_not_username_or_invert)
        if password_validity_period is not None:
            pulumi.set(__self__, "password_validity_period", password_validity_period)

    @property
    @pulumi.getter(name="maximumConsecutiveIdenticalChars")
    def maximum_consecutive_identical_chars(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum number of times that a character is allowed
        to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
        consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
        identical characters are not allowed in a password.
        """
        return pulumi.get(self, "maximum_consecutive_identical_chars")

    @maximum_consecutive_identical_chars.setter
    def maximum_consecutive_identical_chars(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_consecutive_identical_chars", value)

    @property
    @pulumi.getter(name="minimumPasswordAge")
    def minimum_password_age(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum period (minutes) after which users are allowed to make
        a password change. The value ranges from `0` to `1,440` and defaults to `0`.
        """
        return pulumi.get(self, "minimum_password_age")

    @minimum_password_age.setter
    def minimum_password_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_password_age", value)

    @property
    @pulumi.getter(name="minimumPasswordLength")
    def minimum_password_length(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum number of characters that a password must contain.
        The value ranges from `6` to `32` and defaults to `8`.
        """
        return pulumi.get(self, "minimum_password_length")

    @minimum_password_length.setter
    def minimum_password_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_password_length", value)

    @property
    @pulumi.getter(name="numberOfRecentPasswordsDisallowed")
    def number_of_recent_passwords_disallowed(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the member of previously used passwords that are
        not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
        set the last three passwords that the user has previously used when setting a new password.
        """
        return pulumi.get(self, "number_of_recent_passwords_disallowed")

    @number_of_recent_passwords_disallowed.setter
    def number_of_recent_passwords_disallowed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_recent_passwords_disallowed", value)

    @property
    @pulumi.getter(name="passwordCharCombination")
    def password_char_combination(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum number of character types that a password must contain.
        The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
        uppercase letters, lowercase letters, digits, and special characters.
        """
        return pulumi.get(self, "password_char_combination")

    @password_char_combination.setter
    def password_char_combination(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "password_char_combination", value)

    @property
    @pulumi.getter(name="passwordNotUsernameOrInvert")
    def password_not_username_or_invert(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the password can be the username or the username
        spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
        be used as a password.
        """
        return pulumi.get(self, "password_not_username_or_invert")

    @password_not_username_or_invert.setter
    def password_not_username_or_invert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_not_username_or_invert", value)

    @property
    @pulumi.getter(name="passwordValidityPeriod")
    def password_validity_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the password validity period (days).
        The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
        """
        return pulumi.get(self, "password_validity_period")

    @password_validity_period.setter
    def password_validity_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "password_validity_period", value)


@pulumi.input_type
class _PasswordPolicyState:
    def __init__(__self__, *,
                 maximum_consecutive_identical_chars: Optional[pulumi.Input[int]] = None,
                 maximum_password_length: Optional[pulumi.Input[int]] = None,
                 minimum_password_age: Optional[pulumi.Input[int]] = None,
                 minimum_password_length: Optional[pulumi.Input[int]] = None,
                 number_of_recent_passwords_disallowed: Optional[pulumi.Input[int]] = None,
                 password_char_combination: Optional[pulumi.Input[int]] = None,
                 password_not_username_or_invert: Optional[pulumi.Input[bool]] = None,
                 password_validity_period: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering PasswordPolicy resources.
        :param pulumi.Input[int] maximum_consecutive_identical_chars: Specifies the maximum number of times that a character is allowed
               to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
               consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
               identical characters are not allowed in a password.
        :param pulumi.Input[int] maximum_password_length: The maximum number of characters that a password can contain.
        :param pulumi.Input[int] minimum_password_age: Specifies the minimum period (minutes) after which users are allowed to make
               a password change. The value ranges from `0` to `1,440` and defaults to `0`.
        :param pulumi.Input[int] minimum_password_length: Specifies the minimum number of characters that a password must contain.
               The value ranges from `6` to `32` and defaults to `8`.
        :param pulumi.Input[int] number_of_recent_passwords_disallowed: Specifies the member of previously used passwords that are
               not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
               set the last three passwords that the user has previously used when setting a new password.
        :param pulumi.Input[int] password_char_combination: Specifies the minimum number of character types that a password must contain.
               The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
               uppercase letters, lowercase letters, digits, and special characters.
        :param pulumi.Input[bool] password_not_username_or_invert: Specifies whether the password can be the username or the username
               spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
               be used as a password.
        :param pulumi.Input[int] password_validity_period: Specifies the password validity period (days).
               The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
        """
        if maximum_consecutive_identical_chars is not None:
            pulumi.set(__self__, "maximum_consecutive_identical_chars", maximum_consecutive_identical_chars)
        if maximum_password_length is not None:
            pulumi.set(__self__, "maximum_password_length", maximum_password_length)
        if minimum_password_age is not None:
            pulumi.set(__self__, "minimum_password_age", minimum_password_age)
        if minimum_password_length is not None:
            pulumi.set(__self__, "minimum_password_length", minimum_password_length)
        if number_of_recent_passwords_disallowed is not None:
            pulumi.set(__self__, "number_of_recent_passwords_disallowed", number_of_recent_passwords_disallowed)
        if password_char_combination is not None:
            pulumi.set(__self__, "password_char_combination", password_char_combination)
        if password_not_username_or_invert is not None:
            pulumi.set(__self__, "password_not_username_or_invert", password_not_username_or_invert)
        if password_validity_period is not None:
            pulumi.set(__self__, "password_validity_period", password_validity_period)

    @property
    @pulumi.getter(name="maximumConsecutiveIdenticalChars")
    def maximum_consecutive_identical_chars(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum number of times that a character is allowed
        to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
        consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
        identical characters are not allowed in a password.
        """
        return pulumi.get(self, "maximum_consecutive_identical_chars")

    @maximum_consecutive_identical_chars.setter
    def maximum_consecutive_identical_chars(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_consecutive_identical_chars", value)

    @property
    @pulumi.getter(name="maximumPasswordLength")
    def maximum_password_length(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of characters that a password can contain.
        """
        return pulumi.get(self, "maximum_password_length")

    @maximum_password_length.setter
    def maximum_password_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_password_length", value)

    @property
    @pulumi.getter(name="minimumPasswordAge")
    def minimum_password_age(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum period (minutes) after which users are allowed to make
        a password change. The value ranges from `0` to `1,440` and defaults to `0`.
        """
        return pulumi.get(self, "minimum_password_age")

    @minimum_password_age.setter
    def minimum_password_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_password_age", value)

    @property
    @pulumi.getter(name="minimumPasswordLength")
    def minimum_password_length(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum number of characters that a password must contain.
        The value ranges from `6` to `32` and defaults to `8`.
        """
        return pulumi.get(self, "minimum_password_length")

    @minimum_password_length.setter
    def minimum_password_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_password_length", value)

    @property
    @pulumi.getter(name="numberOfRecentPasswordsDisallowed")
    def number_of_recent_passwords_disallowed(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the member of previously used passwords that are
        not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
        set the last three passwords that the user has previously used when setting a new password.
        """
        return pulumi.get(self, "number_of_recent_passwords_disallowed")

    @number_of_recent_passwords_disallowed.setter
    def number_of_recent_passwords_disallowed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_recent_passwords_disallowed", value)

    @property
    @pulumi.getter(name="passwordCharCombination")
    def password_char_combination(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum number of character types that a password must contain.
        The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
        uppercase letters, lowercase letters, digits, and special characters.
        """
        return pulumi.get(self, "password_char_combination")

    @password_char_combination.setter
    def password_char_combination(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "password_char_combination", value)

    @property
    @pulumi.getter(name="passwordNotUsernameOrInvert")
    def password_not_username_or_invert(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the password can be the username or the username
        spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
        be used as a password.
        """
        return pulumi.get(self, "password_not_username_or_invert")

    @password_not_username_or_invert.setter
    def password_not_username_or_invert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_not_username_or_invert", value)

    @property
    @pulumi.getter(name="passwordValidityPeriod")
    def password_validity_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the password validity period (days).
        The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
        """
        return pulumi.get(self, "password_validity_period")

    @password_validity_period.setter
    def password_validity_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "password_validity_period", value)


class PasswordPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 maximum_consecutive_identical_chars: Optional[pulumi.Input[int]] = None,
                 minimum_password_age: Optional[pulumi.Input[int]] = None,
                 minimum_password_length: Optional[pulumi.Input[int]] = None,
                 number_of_recent_passwords_disallowed: Optional[pulumi.Input[int]] = None,
                 password_char_combination: Optional[pulumi.Input[int]] = None,
                 password_not_username_or_invert: Optional[pulumi.Input[bool]] = None,
                 password_validity_period: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        enhanced = huaweicloud.iam.PasswordPolicy("enhanced",
            minimum_password_length=12,
            number_of_recent_passwords_disallowed=2,
            password_char_combination=4,
            password_validity_period=180)
        ```

        ## Import

        Identity password policy can be imported using the account ID or domain ID, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/passwordPolicy:PasswordPolicy example <your account ID>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] maximum_consecutive_identical_chars: Specifies the maximum number of times that a character is allowed
               to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
               consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
               identical characters are not allowed in a password.
        :param pulumi.Input[int] minimum_password_age: Specifies the minimum period (minutes) after which users are allowed to make
               a password change. The value ranges from `0` to `1,440` and defaults to `0`.
        :param pulumi.Input[int] minimum_password_length: Specifies the minimum number of characters that a password must contain.
               The value ranges from `6` to `32` and defaults to `8`.
        :param pulumi.Input[int] number_of_recent_passwords_disallowed: Specifies the member of previously used passwords that are
               not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
               set the last three passwords that the user has previously used when setting a new password.
        :param pulumi.Input[int] password_char_combination: Specifies the minimum number of character types that a password must contain.
               The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
               uppercase letters, lowercase letters, digits, and special characters.
        :param pulumi.Input[bool] password_not_username_or_invert: Specifies whether the password can be the username or the username
               spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
               be used as a password.
        :param pulumi.Input[int] password_validity_period: Specifies the password validity period (days).
               The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PasswordPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        enhanced = huaweicloud.iam.PasswordPolicy("enhanced",
            minimum_password_length=12,
            number_of_recent_passwords_disallowed=2,
            password_char_combination=4,
            password_validity_period=180)
        ```

        ## Import

        Identity password policy can be imported using the account ID or domain ID, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Iam/passwordPolicy:PasswordPolicy example <your account ID>
        ```

        :param str resource_name: The name of the resource.
        :param PasswordPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PasswordPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 maximum_consecutive_identical_chars: Optional[pulumi.Input[int]] = None,
                 minimum_password_age: Optional[pulumi.Input[int]] = None,
                 minimum_password_length: Optional[pulumi.Input[int]] = None,
                 number_of_recent_passwords_disallowed: Optional[pulumi.Input[int]] = None,
                 password_char_combination: Optional[pulumi.Input[int]] = None,
                 password_not_username_or_invert: Optional[pulumi.Input[bool]] = None,
                 password_validity_period: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PasswordPolicyArgs.__new__(PasswordPolicyArgs)

            __props__.__dict__["maximum_consecutive_identical_chars"] = maximum_consecutive_identical_chars
            __props__.__dict__["minimum_password_age"] = minimum_password_age
            __props__.__dict__["minimum_password_length"] = minimum_password_length
            __props__.__dict__["number_of_recent_passwords_disallowed"] = number_of_recent_passwords_disallowed
            __props__.__dict__["password_char_combination"] = password_char_combination
            __props__.__dict__["password_not_username_or_invert"] = password_not_username_or_invert
            __props__.__dict__["password_validity_period"] = password_validity_period
            __props__.__dict__["maximum_password_length"] = None
        super(PasswordPolicy, __self__).__init__(
            'huaweicloud:Iam/passwordPolicy:PasswordPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            maximum_consecutive_identical_chars: Optional[pulumi.Input[int]] = None,
            maximum_password_length: Optional[pulumi.Input[int]] = None,
            minimum_password_age: Optional[pulumi.Input[int]] = None,
            minimum_password_length: Optional[pulumi.Input[int]] = None,
            number_of_recent_passwords_disallowed: Optional[pulumi.Input[int]] = None,
            password_char_combination: Optional[pulumi.Input[int]] = None,
            password_not_username_or_invert: Optional[pulumi.Input[bool]] = None,
            password_validity_period: Optional[pulumi.Input[int]] = None) -> 'PasswordPolicy':
        """
        Get an existing PasswordPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] maximum_consecutive_identical_chars: Specifies the maximum number of times that a character is allowed
               to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
               consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
               identical characters are not allowed in a password.
        :param pulumi.Input[int] maximum_password_length: The maximum number of characters that a password can contain.
        :param pulumi.Input[int] minimum_password_age: Specifies the minimum period (minutes) after which users are allowed to make
               a password change. The value ranges from `0` to `1,440` and defaults to `0`.
        :param pulumi.Input[int] minimum_password_length: Specifies the minimum number of characters that a password must contain.
               The value ranges from `6` to `32` and defaults to `8`.
        :param pulumi.Input[int] number_of_recent_passwords_disallowed: Specifies the member of previously used passwords that are
               not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
               set the last three passwords that the user has previously used when setting a new password.
        :param pulumi.Input[int] password_char_combination: Specifies the minimum number of character types that a password must contain.
               The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
               uppercase letters, lowercase letters, digits, and special characters.
        :param pulumi.Input[bool] password_not_username_or_invert: Specifies whether the password can be the username or the username
               spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
               be used as a password.
        :param pulumi.Input[int] password_validity_period: Specifies the password validity period (days).
               The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PasswordPolicyState.__new__(_PasswordPolicyState)

        __props__.__dict__["maximum_consecutive_identical_chars"] = maximum_consecutive_identical_chars
        __props__.__dict__["maximum_password_length"] = maximum_password_length
        __props__.__dict__["minimum_password_age"] = minimum_password_age
        __props__.__dict__["minimum_password_length"] = minimum_password_length
        __props__.__dict__["number_of_recent_passwords_disallowed"] = number_of_recent_passwords_disallowed
        __props__.__dict__["password_char_combination"] = password_char_combination
        __props__.__dict__["password_not_username_or_invert"] = password_not_username_or_invert
        __props__.__dict__["password_validity_period"] = password_validity_period
        return PasswordPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="maximumConsecutiveIdenticalChars")
    def maximum_consecutive_identical_chars(self) -> pulumi.Output[int]:
        """
        Specifies the maximum number of times that a character is allowed
        to consecutively present in a password. The value ranges from `0` to `32` and defaults to `0` which indicates that
        consecutive identical characters are allowed in a password. For example, value `2` indicates that two consecutive
        identical characters are not allowed in a password.
        """
        return pulumi.get(self, "maximum_consecutive_identical_chars")

    @property
    @pulumi.getter(name="maximumPasswordLength")
    def maximum_password_length(self) -> pulumi.Output[int]:
        """
        The maximum number of characters that a password can contain.
        """
        return pulumi.get(self, "maximum_password_length")

    @property
    @pulumi.getter(name="minimumPasswordAge")
    def minimum_password_age(self) -> pulumi.Output[int]:
        """
        Specifies the minimum period (minutes) after which users are allowed to make
        a password change. The value ranges from `0` to `1,440` and defaults to `0`.
        """
        return pulumi.get(self, "minimum_password_age")

    @property
    @pulumi.getter(name="minimumPasswordLength")
    def minimum_password_length(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the minimum number of characters that a password must contain.
        The value ranges from `6` to `32` and defaults to `8`.
        """
        return pulumi.get(self, "minimum_password_length")

    @property
    @pulumi.getter(name="numberOfRecentPasswordsDisallowed")
    def number_of_recent_passwords_disallowed(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the member of previously used passwords that are
        not allowed. The value ranges from `0` to `10` and defaults to `1`. For example, value `3` indicates that the user cannot
        set the last three passwords that the user has previously used when setting a new password.
        """
        return pulumi.get(self, "number_of_recent_passwords_disallowed")

    @property
    @pulumi.getter(name="passwordCharCombination")
    def password_char_combination(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the minimum number of character types that a password must contain.
        The value ranges from `2` to `4` and defaults to `2` which indicates that a password must contain at least two of the following:
        uppercase letters, lowercase letters, digits, and special characters.
        """
        return pulumi.get(self, "password_char_combination")

    @property
    @pulumi.getter(name="passwordNotUsernameOrInvert")
    def password_not_username_or_invert(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the password can be the username or the username
        spelled backwards. Defaults to `true`, which indicates that the username or the inversion of username is not allowed to
        be used as a password.
        """
        return pulumi.get(self, "password_not_username_or_invert")

    @property
    @pulumi.getter(name="passwordValidityPeriod")
    def password_validity_period(self) -> pulumi.Output[int]:
        """
        Specifies the password validity period (days).
        The value ranges from `0` to `180` and defaults to `0` which indicates that this requirement does not apply.
        """
        return pulumi.get(self, "password_validity_period")

