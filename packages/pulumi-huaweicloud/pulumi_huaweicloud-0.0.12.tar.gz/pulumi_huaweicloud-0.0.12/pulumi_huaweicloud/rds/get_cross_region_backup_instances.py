# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCrossRegionBackupInstancesResult',
    'AwaitableGetCrossRegionBackupInstancesResult',
    'get_cross_region_backup_instances',
    'get_cross_region_backup_instances_output',
]

@pulumi.output_type
class GetCrossRegionBackupInstancesResult:
    """
    A collection of values returned by getCrossRegionBackupInstances.
    """
    def __init__(__self__, backup_instances=None, destination_project_id=None, destination_region=None, id=None, instance_id=None, keep_days=None, name=None, region=None, source_project_id=None, source_region=None):
        if backup_instances and not isinstance(backup_instances, list):
            raise TypeError("Expected argument 'backup_instances' to be a list")
        pulumi.set(__self__, "backup_instances", backup_instances)
        if destination_project_id and not isinstance(destination_project_id, str):
            raise TypeError("Expected argument 'destination_project_id' to be a str")
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        if destination_region and not isinstance(destination_region, str):
            raise TypeError("Expected argument 'destination_region' to be a str")
        pulumi.set(__self__, "destination_region", destination_region)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if keep_days and not isinstance(keep_days, int):
            raise TypeError("Expected argument 'keep_days' to be a int")
        pulumi.set(__self__, "keep_days", keep_days)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if source_project_id and not isinstance(source_project_id, str):
            raise TypeError("Expected argument 'source_project_id' to be a str")
        pulumi.set(__self__, "source_project_id", source_project_id)
        if source_region and not isinstance(source_region, str):
            raise TypeError("Expected argument 'source_region' to be a str")
        pulumi.set(__self__, "source_region", source_region)

    @property
    @pulumi.getter(name="backupInstances")
    def backup_instances(self) -> Sequence['outputs.GetCrossRegionBackupInstancesBackupInstanceResult']:
        """
        Indicates the list of instances for which cross-region backups are created.
        """
        return pulumi.get(self, "backup_instances")

    @property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> Optional[str]:
        """
        Indicates the project ID of the target backup region.
        """
        return pulumi.get(self, "destination_project_id")

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[str]:
        """
        Indicates the region where the cross-region backup is located.
        """
        return pulumi.get(self, "destination_region")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[int]:
        """
        Indicates the number of days to retain cross-region backups.
        """
        return pulumi.get(self, "keep_days")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Indicates the name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> Optional[str]:
        """
        Indicates the project ID of the source backup region.
        """
        return pulumi.get(self, "source_project_id")

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> Optional[str]:
        """
        Indicates the source backup region.
        """
        return pulumi.get(self, "source_region")


class AwaitableGetCrossRegionBackupInstancesResult(GetCrossRegionBackupInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCrossRegionBackupInstancesResult(
            backup_instances=self.backup_instances,
            destination_project_id=self.destination_project_id,
            destination_region=self.destination_region,
            id=self.id,
            instance_id=self.instance_id,
            keep_days=self.keep_days,
            name=self.name,
            region=self.region,
            source_project_id=self.source_project_id,
            source_region=self.source_region)


def get_cross_region_backup_instances(destination_project_id: Optional[str] = None,
                                      destination_region: Optional[str] = None,
                                      instance_id: Optional[str] = None,
                                      keep_days: Optional[int] = None,
                                      name: Optional[str] = None,
                                      region: Optional[str] = None,
                                      source_project_id: Optional[str] = None,
                                      source_region: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCrossRegionBackupInstancesResult:
    """
    Use this data source to get the list of RDS instances for which cross-region backups are created.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_cross_region_backup_instances(instance_id=instance_id)
    ```


    :param str destination_project_id: Specifies the project ID of the target backup region.
    :param str destination_region: Specifies the region where the cross-region backup is located.
    :param str instance_id: Specifies the ID of the instance.
    :param int keep_days: Specifies the number of days to retain cross-region backups.
    :param str name: Specifies the name of the instance.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str source_project_id: Specifies the project ID of the source backup region.
    :param str source_region: Specifies the source backup region.
    """
    __args__ = dict()
    __args__['destinationProjectId'] = destination_project_id
    __args__['destinationRegion'] = destination_region
    __args__['instanceId'] = instance_id
    __args__['keepDays'] = keep_days
    __args__['name'] = name
    __args__['region'] = region
    __args__['sourceProjectId'] = source_project_id
    __args__['sourceRegion'] = source_region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getCrossRegionBackupInstances:getCrossRegionBackupInstances', __args__, opts=opts, typ=GetCrossRegionBackupInstancesResult).value

    return AwaitableGetCrossRegionBackupInstancesResult(
        backup_instances=__ret__.backup_instances,
        destination_project_id=__ret__.destination_project_id,
        destination_region=__ret__.destination_region,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        keep_days=__ret__.keep_days,
        name=__ret__.name,
        region=__ret__.region,
        source_project_id=__ret__.source_project_id,
        source_region=__ret__.source_region)


@_utilities.lift_output_func(get_cross_region_backup_instances)
def get_cross_region_backup_instances_output(destination_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                                             destination_region: Optional[pulumi.Input[Optional[str]]] = None,
                                             instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                                             keep_days: Optional[pulumi.Input[Optional[int]]] = None,
                                             name: Optional[pulumi.Input[Optional[str]]] = None,
                                             region: Optional[pulumi.Input[Optional[str]]] = None,
                                             source_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                                             source_region: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCrossRegionBackupInstancesResult]:
    """
    Use this data source to get the list of RDS instances for which cross-region backups are created.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_cross_region_backup_instances(instance_id=instance_id)
    ```


    :param str destination_project_id: Specifies the project ID of the target backup region.
    :param str destination_region: Specifies the region where the cross-region backup is located.
    :param str instance_id: Specifies the ID of the instance.
    :param int keep_days: Specifies the number of days to retain cross-region backups.
    :param str name: Specifies the name of the instance.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str source_project_id: Specifies the project ID of the source backup region.
    :param str source_region: Specifies the source backup region.
    """
    ...
