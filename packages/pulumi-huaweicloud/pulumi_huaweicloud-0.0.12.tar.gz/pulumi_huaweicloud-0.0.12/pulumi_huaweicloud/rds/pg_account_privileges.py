# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PgAccountPrivilegesArgs', 'PgAccountPrivileges']

@pulumi.input_type
class PgAccountPrivilegesArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 region: Optional[pulumi.Input[str]] = None,
                 role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a PgAccountPrivileges resource.
        :param pulumi.Input[str] instance_id: Specifies the ID of the RDS PostgreSQL instance.
        :param pulumi.Input[str] user_name: Specifies the username of the account.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] role_privileges: Specifies the list of role privileges. Value options: **CREATEDB**,
               **CREATEROLE**, **LOGIN**, **REPLICATION**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] system_role_privileges: Specifies the list of system role privileges. Value options:
               **pg_monitor**, **pg_signal_backend**, **root**.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "user_name", user_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_privileges is not None:
            pulumi.set(__self__, "role_privileges", role_privileges)
        if system_role_privileges is not None:
            pulumi.set(__self__, "system_role_privileges", system_role_privileges)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the RDS PostgreSQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        Specifies the username of the account.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rolePrivileges")
    def role_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the list of role privileges. Value options: **CREATEDB**,
        **CREATEROLE**, **LOGIN**, **REPLICATION**.
        """
        return pulumi.get(self, "role_privileges")

    @role_privileges.setter
    def role_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "role_privileges", value)

    @property
    @pulumi.getter(name="systemRolePrivileges")
    def system_role_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the list of system role privileges. Value options:
        **pg_monitor**, **pg_signal_backend**, **root**.
        """
        return pulumi.get(self, "system_role_privileges")

    @system_role_privileges.setter
    def system_role_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "system_role_privileges", value)


@pulumi.input_type
class _PgAccountPrivilegesState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PgAccountPrivileges resources.
        :param pulumi.Input[str] instance_id: Specifies the ID of the RDS PostgreSQL instance.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] role_privileges: Specifies the list of role privileges. Value options: **CREATEDB**,
               **CREATEROLE**, **LOGIN**, **REPLICATION**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] system_role_privileges: Specifies the list of system role privileges. Value options:
               **pg_monitor**, **pg_signal_backend**, **root**.
        :param pulumi.Input[str] user_name: Specifies the username of the account.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_privileges is not None:
            pulumi.set(__self__, "role_privileges", role_privileges)
        if system_role_privileges is not None:
            pulumi.set(__self__, "system_role_privileges", system_role_privileges)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the RDS PostgreSQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rolePrivileges")
    def role_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the list of role privileges. Value options: **CREATEDB**,
        **CREATEROLE**, **LOGIN**, **REPLICATION**.
        """
        return pulumi.get(self, "role_privileges")

    @role_privileges.setter
    def role_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "role_privileges", value)

    @property
    @pulumi.getter(name="systemRolePrivileges")
    def system_role_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the list of system role privileges. Value options:
        **pg_monitor**, **pg_signal_backend**, **root**.
        """
        return pulumi.get(self, "system_role_privileges")

    @system_role_privileges.setter
    def system_role_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "system_role_privileges", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the username of the account.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


class PgAccountPrivileges(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an RDS PostgreSQL account privileges resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        user_name = config.require_object("userName")
        test = huaweicloud.rds.PgAccountPrivileges("test",
            instance_id=instance_id,
            user_name=user_name,
            role_privileges=[
                "CREATEROLE",
                "LOGIN",
                "REPLICATION",
            ],
            system_role_privileges=[
                "pg_signal_backend",
                "root",
            ])
        ```

        ## Import

        The RDS PostgreSQL privileges roles can be imported using the `instance_id` and `user_name` separated by a slash, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Rds/pgAccountPrivileges:PgAccountPrivileges test <instance_id>/<user_name>
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`system_role_privileges`. It is generally recommended running `terraform plan` after importing the RDS PostgreSQL account privileges. You can then decide if changes should be applied to the RDS PostgreSQL account privileges, or the RDS PostgreSQL account privileges definition should be updated to align with the account. Also you can ignore changes as below. hcl resource "huaweicloud_rds_pg_account_privileges" "test" {

         ...

         lifecycle {

         ignore_changes = [

         system_role_privileges,

         ]

         } }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Specifies the ID of the RDS PostgreSQL instance.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] role_privileges: Specifies the list of role privileges. Value options: **CREATEDB**,
               **CREATEROLE**, **LOGIN**, **REPLICATION**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] system_role_privileges: Specifies the list of system role privileges. Value options:
               **pg_monitor**, **pg_signal_backend**, **root**.
        :param pulumi.Input[str] user_name: Specifies the username of the account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PgAccountPrivilegesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an RDS PostgreSQL account privileges resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        user_name = config.require_object("userName")
        test = huaweicloud.rds.PgAccountPrivileges("test",
            instance_id=instance_id,
            user_name=user_name,
            role_privileges=[
                "CREATEROLE",
                "LOGIN",
                "REPLICATION",
            ],
            system_role_privileges=[
                "pg_signal_backend",
                "root",
            ])
        ```

        ## Import

        The RDS PostgreSQL privileges roles can be imported using the `instance_id` and `user_name` separated by a slash, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Rds/pgAccountPrivileges:PgAccountPrivileges test <instance_id>/<user_name>
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`system_role_privileges`. It is generally recommended running `terraform plan` after importing the RDS PostgreSQL account privileges. You can then decide if changes should be applied to the RDS PostgreSQL account privileges, or the RDS PostgreSQL account privileges definition should be updated to align with the account. Also you can ignore changes as below. hcl resource "huaweicloud_rds_pg_account_privileges" "test" {

         ...

         lifecycle {

         ignore_changes = [

         system_role_privileges,

         ]

         } }

        :param str resource_name: The name of the resource.
        :param PgAccountPrivilegesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PgAccountPrivilegesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PgAccountPrivilegesArgs.__new__(PgAccountPrivilegesArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["role_privileges"] = role_privileges
            __props__.__dict__["system_role_privileges"] = system_role_privileges
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
        super(PgAccountPrivileges, __self__).__init__(
            'huaweicloud:Rds/pgAccountPrivileges:PgAccountPrivileges',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            system_role_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            user_name: Optional[pulumi.Input[str]] = None) -> 'PgAccountPrivileges':
        """
        Get an existing PgAccountPrivileges resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Specifies the ID of the RDS PostgreSQL instance.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] role_privileges: Specifies the list of role privileges. Value options: **CREATEDB**,
               **CREATEROLE**, **LOGIN**, **REPLICATION**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] system_role_privileges: Specifies the list of system role privileges. Value options:
               **pg_monitor**, **pg_signal_backend**, **root**.
        :param pulumi.Input[str] user_name: Specifies the username of the account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PgAccountPrivilegesState.__new__(_PgAccountPrivilegesState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["role_privileges"] = role_privileges
        __props__.__dict__["system_role_privileges"] = system_role_privileges
        __props__.__dict__["user_name"] = user_name
        return PgAccountPrivileges(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the RDS PostgreSQL instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="rolePrivileges")
    def role_privileges(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies the list of role privileges. Value options: **CREATEDB**,
        **CREATEROLE**, **LOGIN**, **REPLICATION**.
        """
        return pulumi.get(self, "role_privileges")

    @property
    @pulumi.getter(name="systemRolePrivileges")
    def system_role_privileges(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies the list of system role privileges. Value options:
        **pg_monitor**, **pg_signal_backend**, **root**.
        """
        return pulumi.get(self, "system_role_privileges")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        Specifies the username of the account.
        """
        return pulumi.get(self, "user_name")

