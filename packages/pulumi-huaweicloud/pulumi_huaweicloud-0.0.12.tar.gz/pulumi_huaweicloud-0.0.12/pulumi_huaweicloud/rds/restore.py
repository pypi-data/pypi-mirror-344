# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RestoreArgs', 'Restore']

@pulumi.input_type
class RestoreArgs:
    def __init__(__self__, *,
                 source_instance_id: pulumi.Input[str],
                 target_instance_id: pulumi.Input[str],
                 backup_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 restore_time: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Restore resource.
        :param pulumi.Input[str] source_instance_id: Specifies the source instance ID.
        :param pulumi.Input[str] target_instance_id: Specifies the target instance ID.
        :param pulumi.Input[str] backup_id: Specifies the ID of the backup to be restored. This parameter must be
               specified when `type` is set to **backup** or left empty.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_name: Specifies the databases that will be restored. This parameter applies only
               to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
               specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
               databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
               database names can contain but cannot be the same as the original database names. Note the following when you are
               specifying new database names:
               + New database names must be different from the original database names. If they are left blank, the original database
               names will be used for restoration by default.
               + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
               database names are unique.
               + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
               exceed the database quota specified by **rds_databases_quota**.
               + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
               **tempdb**, **model** and **resource**.
               + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
               hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
               + New database names must be different from any database names on the original DB instance.
               + New database names must be different from any database names on the existing or original DB instances where data is
               restored.
        :param pulumi.Input[str] region: The region in which to create the rds instance resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[int] restore_time: Specifies the time point of data restoration in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
        :param pulumi.Input[str] type: Specifies the restoration type. Value options:
               + **backup**: indicates using backup files for restoration.
               + **timestamp**: indicates the point-in-time restoration mode.
        """
        pulumi.set(__self__, "source_instance_id", source_instance_id)
        pulumi.set(__self__, "target_instance_id", target_instance_id)
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restore_time is not None:
            pulumi.set(__self__, "restore_time", restore_time)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="sourceInstanceId")
    def source_instance_id(self) -> pulumi.Input[str]:
        """
        Specifies the source instance ID.
        """
        return pulumi.get(self, "source_instance_id")

    @source_instance_id.setter
    def source_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_instance_id", value)

    @property
    @pulumi.getter(name="targetInstanceId")
    def target_instance_id(self) -> pulumi.Input[str]:
        """
        Specifies the target instance ID.
        """
        return pulumi.get(self, "target_instance_id")

    @target_instance_id.setter
    def target_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_instance_id", value)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the backup to be restored. This parameter must be
        specified when `type` is set to **backup** or left empty.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the databases that will be restored. This parameter applies only
        to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
        specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
        databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
        database names can contain but cannot be the same as the original database names. Note the following when you are
        specifying new database names:
        + New database names must be different from the original database names. If they are left blank, the original database
        names will be used for restoration by default.
        + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
        database names are unique.
        + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
        exceed the database quota specified by **rds_databases_quota**.
        + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
        **tempdb**, **model** and **resource**.
        + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
        hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
        + New database names must be different from any database names on the original DB instance.
        + New database names must be different from any database names on the existing or original DB instances where data is
        restored.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region in which to create the rds instance resource. If omitted, the
        provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the time point of data restoration in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
        """
        return pulumi.get(self, "restore_time")

    @restore_time.setter
    def restore_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restore_time", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the restoration type. Value options:
        + **backup**: indicates using backup files for restoration.
        + **timestamp**: indicates the point-in-time restoration mode.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _RestoreState:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 restore_time: Optional[pulumi.Input[int]] = None,
                 source_instance_id: Optional[pulumi.Input[str]] = None,
                 target_instance_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Restore resources.
        :param pulumi.Input[str] backup_id: Specifies the ID of the backup to be restored. This parameter must be
               specified when `type` is set to **backup** or left empty.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_name: Specifies the databases that will be restored. This parameter applies only
               to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
               specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
               databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
               database names can contain but cannot be the same as the original database names. Note the following when you are
               specifying new database names:
               + New database names must be different from the original database names. If they are left blank, the original database
               names will be used for restoration by default.
               + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
               database names are unique.
               + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
               exceed the database quota specified by **rds_databases_quota**.
               + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
               **tempdb**, **model** and **resource**.
               + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
               hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
               + New database names must be different from any database names on the original DB instance.
               + New database names must be different from any database names on the existing or original DB instances where data is
               restored.
        :param pulumi.Input[str] region: The region in which to create the rds instance resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[int] restore_time: Specifies the time point of data restoration in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
        :param pulumi.Input[str] source_instance_id: Specifies the source instance ID.
        :param pulumi.Input[str] target_instance_id: Specifies the target instance ID.
        :param pulumi.Input[str] type: Specifies the restoration type. Value options:
               + **backup**: indicates using backup files for restoration.
               + **timestamp**: indicates the point-in-time restoration mode.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restore_time is not None:
            pulumi.set(__self__, "restore_time", restore_time)
        if source_instance_id is not None:
            pulumi.set(__self__, "source_instance_id", source_instance_id)
        if target_instance_id is not None:
            pulumi.set(__self__, "target_instance_id", target_instance_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the backup to be restored. This parameter must be
        specified when `type` is set to **backup** or left empty.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the databases that will be restored. This parameter applies only
        to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
        specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
        databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
        database names can contain but cannot be the same as the original database names. Note the following when you are
        specifying new database names:
        + New database names must be different from the original database names. If they are left blank, the original database
        names will be used for restoration by default.
        + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
        database names are unique.
        + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
        exceed the database quota specified by **rds_databases_quota**.
        + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
        **tempdb**, **model** and **resource**.
        + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
        hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
        + New database names must be different from any database names on the original DB instance.
        + New database names must be different from any database names on the existing or original DB instances where data is
        restored.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region in which to create the rds instance resource. If omitted, the
        provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the time point of data restoration in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
        """
        return pulumi.get(self, "restore_time")

    @restore_time.setter
    def restore_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restore_time", value)

    @property
    @pulumi.getter(name="sourceInstanceId")
    def source_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the source instance ID.
        """
        return pulumi.get(self, "source_instance_id")

    @source_instance_id.setter
    def source_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_instance_id", value)

    @property
    @pulumi.getter(name="targetInstanceId")
    def target_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the target instance ID.
        """
        return pulumi.get(self, "target_instance_id")

    @target_instance_id.setter
    def target_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_instance_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the restoration type. Value options:
        + **backup**: indicates using backup files for restoration.
        + **timestamp**: indicates the point-in-time restoration mode.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Restore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 restore_time: Optional[pulumi.Input[int]] = None,
                 source_instance_id: Optional[pulumi.Input[str]] = None,
                 target_instance_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an RDS instance restore resource within HuaweiCloud.

        ## Example Usage
        ### restore by backup_id

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_instance_id = config.require_object("targetInstanceId")
        source_instance_id = config.require_object("sourceInstanceId")
        backup_id = config.require_object("backupId")
        test = huaweicloud.rds.Restore("test",
            target_instance_id=target_instance_id,
            source_instance_id=source_instance_id,
            type="backup",
            backup_id=backup_id)
        ```
        ### restore by timestamp

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_instance_id = config.require_object("targetInstanceId")
        source_instance_id = config.require_object("sourceInstanceId")
        test = huaweicloud.rds.Restore("test",
            target_instance_id=target_instance_id,
            source_instance_id=source_instance_id,
            type="timestamp",
            restore_time=1673852043000)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_id: Specifies the ID of the backup to be restored. This parameter must be
               specified when `type` is set to **backup** or left empty.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_name: Specifies the databases that will be restored. This parameter applies only
               to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
               specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
               databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
               database names can contain but cannot be the same as the original database names. Note the following when you are
               specifying new database names:
               + New database names must be different from the original database names. If they are left blank, the original database
               names will be used for restoration by default.
               + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
               database names are unique.
               + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
               exceed the database quota specified by **rds_databases_quota**.
               + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
               **tempdb**, **model** and **resource**.
               + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
               hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
               + New database names must be different from any database names on the original DB instance.
               + New database names must be different from any database names on the existing or original DB instances where data is
               restored.
        :param pulumi.Input[str] region: The region in which to create the rds instance resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[int] restore_time: Specifies the time point of data restoration in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
        :param pulumi.Input[str] source_instance_id: Specifies the source instance ID.
        :param pulumi.Input[str] target_instance_id: Specifies the target instance ID.
        :param pulumi.Input[str] type: Specifies the restoration type. Value options:
               + **backup**: indicates using backup files for restoration.
               + **timestamp**: indicates the point-in-time restoration mode.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestoreArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an RDS instance restore resource within HuaweiCloud.

        ## Example Usage
        ### restore by backup_id

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_instance_id = config.require_object("targetInstanceId")
        source_instance_id = config.require_object("sourceInstanceId")
        backup_id = config.require_object("backupId")
        test = huaweicloud.rds.Restore("test",
            target_instance_id=target_instance_id,
            source_instance_id=source_instance_id,
            type="backup",
            backup_id=backup_id)
        ```
        ### restore by timestamp

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        target_instance_id = config.require_object("targetInstanceId")
        source_instance_id = config.require_object("sourceInstanceId")
        test = huaweicloud.rds.Restore("test",
            target_instance_id=target_instance_id,
            source_instance_id=source_instance_id,
            type="timestamp",
            restore_time=1673852043000)
        ```

        :param str resource_name: The name of the resource.
        :param RestoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 restore_time: Optional[pulumi.Input[int]] = None,
                 source_instance_id: Optional[pulumi.Input[str]] = None,
                 target_instance_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestoreArgs.__new__(RestoreArgs)

            __props__.__dict__["backup_id"] = backup_id
            __props__.__dict__["database_name"] = database_name
            __props__.__dict__["region"] = region
            __props__.__dict__["restore_time"] = restore_time
            if source_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_instance_id'")
            __props__.__dict__["source_instance_id"] = source_instance_id
            if target_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_instance_id'")
            __props__.__dict__["target_instance_id"] = target_instance_id
            __props__.__dict__["type"] = type
        super(Restore, __self__).__init__(
            'huaweicloud:Rds/restore:Restore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_id: Optional[pulumi.Input[str]] = None,
            database_name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            restore_time: Optional[pulumi.Input[int]] = None,
            source_instance_id: Optional[pulumi.Input[str]] = None,
            target_instance_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Restore':
        """
        Get an existing Restore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_id: Specifies the ID of the backup to be restored. This parameter must be
               specified when `type` is set to **backup** or left empty.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_name: Specifies the databases that will be restored. This parameter applies only
               to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
               specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
               databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
               database names can contain but cannot be the same as the original database names. Note the following when you are
               specifying new database names:
               + New database names must be different from the original database names. If they are left blank, the original database
               names will be used for restoration by default.
               + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
               database names are unique.
               + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
               exceed the database quota specified by **rds_databases_quota**.
               + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
               **tempdb**, **model** and **resource**.
               + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
               hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
               + New database names must be different from any database names on the original DB instance.
               + New database names must be different from any database names on the existing or original DB instances where data is
               restored.
        :param pulumi.Input[str] region: The region in which to create the rds instance resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[int] restore_time: Specifies the time point of data restoration in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
        :param pulumi.Input[str] source_instance_id: Specifies the source instance ID.
        :param pulumi.Input[str] target_instance_id: Specifies the target instance ID.
        :param pulumi.Input[str] type: Specifies the restoration type. Value options:
               + **backup**: indicates using backup files for restoration.
               + **timestamp**: indicates the point-in-time restoration mode.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RestoreState.__new__(_RestoreState)

        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["database_name"] = database_name
        __props__.__dict__["region"] = region
        __props__.__dict__["restore_time"] = restore_time
        __props__.__dict__["source_instance_id"] = source_instance_id
        __props__.__dict__["target_instance_id"] = target_instance_id
        __props__.__dict__["type"] = type
        return Restore(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the ID of the backup to be restored. This parameter must be
        specified when `type` is set to **backup** or left empty.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies the databases that will be restored. This parameter applies only
        to the SQL Server DB engine. The key is the old database name, the value is the new database name. If this parameter is
        specified, you can restore all or specific databases and rename new databases. If this parameter is not specified, all
        databases are restored by default. You can enter multiple new database names and separate them with commas (,). The new
        database names can contain but cannot be the same as the original database names. Note the following when you are
        specifying new database names:
        + New database names must be different from the original database names. If they are left blank, the original database
        names will be used for restoration by default.
        + The case-sensitivity settings of the new databases are the same as those of the original databases. Make sure the new
        database names are unique.
        + The total number of new and existing databases on the existing or original DB instances where data is restored cannot
        exceed the database quota specified by **rds_databases_quota**.
        + New database names cannot contain the following fields (case-insensitive): **rdsadmin**, **master**, **msdb**,
        **tempdb**, **model** and **resource**.
        + New database names must consist of `1` to `64` characters, including only letters, digits, underscores (_), and
        hyphens (-). If you want to restore data to multiple new databases, separate them with commas (,).
        + New database names must be different from any database names on the original DB instance.
        + New database names must be different from any database names on the existing or original DB instances where data is
        restored.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        The region in which to create the rds instance resource. If omitted, the
        provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the time point of data restoration in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC. This parameter must be specified when `type` is set to **timestamp**.
        """
        return pulumi.get(self, "restore_time")

    @property
    @pulumi.getter(name="sourceInstanceId")
    def source_instance_id(self) -> pulumi.Output[str]:
        """
        Specifies the source instance ID.
        """
        return pulumi.get(self, "source_instance_id")

    @property
    @pulumi.getter(name="targetInstanceId")
    def target_instance_id(self) -> pulumi.Output[str]:
        """
        Specifies the target instance ID.
        """
        return pulumi.get(self, "target_instance_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the restoration type. Value options:
        + **backup**: indicates using backup files for restoration.
        + **timestamp**: indicates the point-in-time restoration mode.
        """
        return pulumi.get(self, "type")

