# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPgSqlLimitsResult',
    'AwaitableGetPgSqlLimitsResult',
    'get_pg_sql_limits',
    'get_pg_sql_limits_output',
]

@pulumi.output_type
class GetPgSqlLimitsResult:
    """
    A collection of values returned by getPgSqlLimits.
    """
    def __init__(__self__, db_name=None, id=None, instance_id=None, is_effective=None, max_concurrency=None, max_waiting=None, query_id=None, query_string=None, region=None, search_path=None, sql_limit_id=None, sql_limits=None):
        if db_name and not isinstance(db_name, str):
            raise TypeError("Expected argument 'db_name' to be a str")
        pulumi.set(__self__, "db_name", db_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if is_effective and not isinstance(is_effective, str):
            raise TypeError("Expected argument 'is_effective' to be a str")
        pulumi.set(__self__, "is_effective", is_effective)
        if max_concurrency and not isinstance(max_concurrency, str):
            raise TypeError("Expected argument 'max_concurrency' to be a str")
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        if max_waiting and not isinstance(max_waiting, str):
            raise TypeError("Expected argument 'max_waiting' to be a str")
        pulumi.set(__self__, "max_waiting", max_waiting)
        if query_id and not isinstance(query_id, str):
            raise TypeError("Expected argument 'query_id' to be a str")
        pulumi.set(__self__, "query_id", query_id)
        if query_string and not isinstance(query_string, str):
            raise TypeError("Expected argument 'query_string' to be a str")
        pulumi.set(__self__, "query_string", query_string)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if search_path and not isinstance(search_path, str):
            raise TypeError("Expected argument 'search_path' to be a str")
        pulumi.set(__self__, "search_path", search_path)
        if sql_limit_id and not isinstance(sql_limit_id, str):
            raise TypeError("Expected argument 'sql_limit_id' to be a str")
        pulumi.set(__self__, "sql_limit_id", sql_limit_id)
        if sql_limits and not isinstance(sql_limits, list):
            raise TypeError("Expected argument 'sql_limits' to be a list")
        pulumi.set(__self__, "sql_limits", sql_limits)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isEffective")
    def is_effective(self) -> Optional[str]:
        """
        Indicates whether the SQL limit is effective.
        """
        return pulumi.get(self, "is_effective")

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[str]:
        """
        Indicates the number of SQL statements executed simultaneously.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter(name="maxWaiting")
    def max_waiting(self) -> Optional[str]:
        """
        Indicates the max waiting time in seconds.
        """
        return pulumi.get(self, "max_waiting")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[str]:
        """
        Indicates the query ID.
        """
        return pulumi.get(self, "query_id")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[str]:
        """
        Indicates the text form of SQL statement.
        """
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="searchPath")
    def search_path(self) -> Optional[str]:
        """
        Indicates the query order for names that are not schema qualified.
        """
        return pulumi.get(self, "search_path")

    @property
    @pulumi.getter(name="sqlLimitId")
    def sql_limit_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_limit_id")

    @property
    @pulumi.getter(name="sqlLimits")
    def sql_limits(self) -> Sequence['outputs.GetPgSqlLimitsSqlLimitResult']:
        """
        Indicates the list of SQL limits.
        """
        return pulumi.get(self, "sql_limits")


class AwaitableGetPgSqlLimitsResult(GetPgSqlLimitsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPgSqlLimitsResult(
            db_name=self.db_name,
            id=self.id,
            instance_id=self.instance_id,
            is_effective=self.is_effective,
            max_concurrency=self.max_concurrency,
            max_waiting=self.max_waiting,
            query_id=self.query_id,
            query_string=self.query_string,
            region=self.region,
            search_path=self.search_path,
            sql_limit_id=self.sql_limit_id,
            sql_limits=self.sql_limits)


def get_pg_sql_limits(db_name: Optional[str] = None,
                      instance_id: Optional[str] = None,
                      is_effective: Optional[str] = None,
                      max_concurrency: Optional[str] = None,
                      max_waiting: Optional[str] = None,
                      query_id: Optional[str] = None,
                      query_string: Optional[str] = None,
                      region: Optional[str] = None,
                      search_path: Optional[str] = None,
                      sql_limit_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPgSqlLimitsResult:
    """
    Use this data source to get the list of RDS PostgreSQL SQL limits.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    db_name = config.require_object("dbName")
    test = huaweicloud.Rds.get_pg_sql_limits(instance_id=instance_id,
        db_name=db_name)
    ```


    :param str db_name: Specifies the name of the database.
    :param str instance_id: Specifies the ID of RDS PostgreSQL instance.
    :param str is_effective: Specifies whether the SQL limit is effective.
    :param str max_concurrency: Specifies the number of SQL statements executed simultaneously.
    :param str max_waiting: Specifies the max waiting time in seconds.
    :param str query_id: Specifies the query ID.
    :param str query_string: Specifies the text form of SQL statement.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str search_path: Specifies the query order for names that are not schema qualified.
    :param str sql_limit_id: Specifies the ID of SQL limit.
    """
    __args__ = dict()
    __args__['dbName'] = db_name
    __args__['instanceId'] = instance_id
    __args__['isEffective'] = is_effective
    __args__['maxConcurrency'] = max_concurrency
    __args__['maxWaiting'] = max_waiting
    __args__['queryId'] = query_id
    __args__['queryString'] = query_string
    __args__['region'] = region
    __args__['searchPath'] = search_path
    __args__['sqlLimitId'] = sql_limit_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getPgSqlLimits:getPgSqlLimits', __args__, opts=opts, typ=GetPgSqlLimitsResult).value

    return AwaitableGetPgSqlLimitsResult(
        db_name=__ret__.db_name,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        is_effective=__ret__.is_effective,
        max_concurrency=__ret__.max_concurrency,
        max_waiting=__ret__.max_waiting,
        query_id=__ret__.query_id,
        query_string=__ret__.query_string,
        region=__ret__.region,
        search_path=__ret__.search_path,
        sql_limit_id=__ret__.sql_limit_id,
        sql_limits=__ret__.sql_limits)


@_utilities.lift_output_func(get_pg_sql_limits)
def get_pg_sql_limits_output(db_name: Optional[pulumi.Input[str]] = None,
                             instance_id: Optional[pulumi.Input[str]] = None,
                             is_effective: Optional[pulumi.Input[Optional[str]]] = None,
                             max_concurrency: Optional[pulumi.Input[Optional[str]]] = None,
                             max_waiting: Optional[pulumi.Input[Optional[str]]] = None,
                             query_id: Optional[pulumi.Input[Optional[str]]] = None,
                             query_string: Optional[pulumi.Input[Optional[str]]] = None,
                             region: Optional[pulumi.Input[Optional[str]]] = None,
                             search_path: Optional[pulumi.Input[Optional[str]]] = None,
                             sql_limit_id: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPgSqlLimitsResult]:
    """
    Use this data source to get the list of RDS PostgreSQL SQL limits.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    db_name = config.require_object("dbName")
    test = huaweicloud.Rds.get_pg_sql_limits(instance_id=instance_id,
        db_name=db_name)
    ```


    :param str db_name: Specifies the name of the database.
    :param str instance_id: Specifies the ID of RDS PostgreSQL instance.
    :param str is_effective: Specifies whether the SQL limit is effective.
    :param str max_concurrency: Specifies the number of SQL statements executed simultaneously.
    :param str max_waiting: Specifies the max waiting time in seconds.
    :param str query_id: Specifies the query ID.
    :param str query_string: Specifies the text form of SQL statement.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str search_path: Specifies the query order for names that are not schema qualified.
    :param str sql_limit_id: Specifies the ID of SQL limit.
    """
    ...
