# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LtsLogArgs', 'LtsLog']

@pulumi.input_type
class LtsLogArgs:
    def __init__(__self__, *,
                 engine: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 log_type: pulumi.Input[str],
                 lts_group_id: pulumi.Input[str],
                 lts_stream_id: pulumi.Input[str],
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LtsLog resource.
        :param pulumi.Input[str] engine: Specifies the engine of the RDS instance.
               Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
        :param pulumi.Input[str] instance_id: Specifies the ID of the RDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[str] log_type: Specifies the type of the LTS log.
               Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
        :param pulumi.Input[str] lts_group_id: Specifies the ID of the LTS log group.
        :param pulumi.Input[str] lts_stream_id: Specifies the ID of the LTS log stream.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "lts_group_id", lts_group_id)
        pulumi.set(__self__, "lts_stream_id", lts_stream_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Input[str]:
        """
        Specifies the engine of the RDS instance.
        Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the RDS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        """
        Specifies the type of the LTS log.
        Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="ltsGroupId")
    def lts_group_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the LTS log group.
        """
        return pulumi.get(self, "lts_group_id")

    @lts_group_id.setter
    def lts_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "lts_group_id", value)

    @property
    @pulumi.getter(name="ltsStreamId")
    def lts_stream_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the LTS log stream.
        """
        return pulumi.get(self, "lts_stream_id")

    @lts_stream_id.setter
    def lts_stream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "lts_stream_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LtsLogState:
    def __init__(__self__, *,
                 engine: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 lts_group_id: Optional[pulumi.Input[str]] = None,
                 lts_stream_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LtsLog resources.
        :param pulumi.Input[str] engine: Specifies the engine of the RDS instance.
               Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
        :param pulumi.Input[str] instance_id: Specifies the ID of the RDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[str] log_type: Specifies the type of the LTS log.
               Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
        :param pulumi.Input[str] lts_group_id: Specifies the ID of the LTS log group.
        :param pulumi.Input[str] lts_stream_id: Specifies the ID of the LTS log stream.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if lts_group_id is not None:
            pulumi.set(__self__, "lts_group_id", lts_group_id)
        if lts_stream_id is not None:
            pulumi.set(__self__, "lts_stream_id", lts_stream_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the engine of the RDS instance.
        Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the RDS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of the LTS log.
        Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="ltsGroupId")
    def lts_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the LTS log group.
        """
        return pulumi.get(self, "lts_group_id")

    @lts_group_id.setter
    def lts_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lts_group_id", value)

    @property
    @pulumi.getter(name="ltsStreamId")
    def lts_stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the LTS log stream.
        """
        return pulumi.get(self, "lts_stream_id")

    @lts_stream_id.setter
    def lts_stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lts_stream_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class LtsLog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 lts_group_id: Optional[pulumi.Input[str]] = None,
                 lts_stream_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a RDS LTS log resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        test = huaweicloud.rds.LtsLog("test",
            instance_id=instance_id,
            engine="mysql",
            log_type="error_log",
            lts_group_id=lts_group_id,
            lts_stream_id=lts_stream_id)
        ```

        ## Import

        The RDS LTS log can be imported using `instance_id` and `log_type` separated by a slash, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Rds/ltsLog:LtsLog test <instance_id>/<log_type>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] engine: Specifies the engine of the RDS instance.
               Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
        :param pulumi.Input[str] instance_id: Specifies the ID of the RDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[str] log_type: Specifies the type of the LTS log.
               Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
        :param pulumi.Input[str] lts_group_id: Specifies the ID of the LTS log group.
        :param pulumi.Input[str] lts_stream_id: Specifies the ID of the LTS log stream.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LtsLogArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RDS LTS log resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        lts_group_id = config.require_object("ltsGroupId")
        lts_stream_id = config.require_object("ltsStreamId")
        test = huaweicloud.rds.LtsLog("test",
            instance_id=instance_id,
            engine="mysql",
            log_type="error_log",
            lts_group_id=lts_group_id,
            lts_stream_id=lts_stream_id)
        ```

        ## Import

        The RDS LTS log can be imported using `instance_id` and `log_type` separated by a slash, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Rds/ltsLog:LtsLog test <instance_id>/<log_type>
        ```

        :param str resource_name: The name of the resource.
        :param LtsLogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LtsLogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 lts_group_id: Optional[pulumi.Input[str]] = None,
                 lts_stream_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LtsLogArgs.__new__(LtsLogArgs)

            if engine is None and not opts.urn:
                raise TypeError("Missing required property 'engine'")
            __props__.__dict__["engine"] = engine
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if log_type is None and not opts.urn:
                raise TypeError("Missing required property 'log_type'")
            __props__.__dict__["log_type"] = log_type
            if lts_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'lts_group_id'")
            __props__.__dict__["lts_group_id"] = lts_group_id
            if lts_stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'lts_stream_id'")
            __props__.__dict__["lts_stream_id"] = lts_stream_id
            __props__.__dict__["region"] = region
        super(LtsLog, __self__).__init__(
            'huaweicloud:Rds/ltsLog:LtsLog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            engine: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            log_type: Optional[pulumi.Input[str]] = None,
            lts_group_id: Optional[pulumi.Input[str]] = None,
            lts_stream_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'LtsLog':
        """
        Get an existing LtsLog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] engine: Specifies the engine of the RDS instance.
               Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
        :param pulumi.Input[str] instance_id: Specifies the ID of the RDS instance.
               Changing this creates a new resource.
        :param pulumi.Input[str] log_type: Specifies the type of the LTS log.
               Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
        :param pulumi.Input[str] lts_group_id: Specifies the ID of the LTS log group.
        :param pulumi.Input[str] lts_stream_id: Specifies the ID of the LTS log stream.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LtsLogState.__new__(_LtsLogState)

        __props__.__dict__["engine"] = engine
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["log_type"] = log_type
        __props__.__dict__["lts_group_id"] = lts_group_id
        __props__.__dict__["lts_stream_id"] = lts_stream_id
        __props__.__dict__["region"] = region
        return LtsLog(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[str]:
        """
        Specifies the engine of the RDS instance.
        Value options: **mysql**, **postgresql**, **sqlserver**. Changing this creates a new resource.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the RDS instance.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Output[str]:
        """
        Specifies the type of the LTS log.
        Value options: **error_log**, **slow_log**, **audit_log**. Changing this creates a new resource.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter(name="ltsGroupId")
    def lts_group_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the LTS log group.
        """
        return pulumi.get(self, "lts_group_id")

    @property
    @pulumi.getter(name="ltsStreamId")
    def lts_stream_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the LTS log stream.
        """
        return pulumi.get(self, "lts_stream_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

