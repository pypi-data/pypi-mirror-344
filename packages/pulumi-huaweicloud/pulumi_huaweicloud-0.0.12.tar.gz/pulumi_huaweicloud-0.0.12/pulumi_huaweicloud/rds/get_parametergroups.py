# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetParametergroupsResult',
    'AwaitableGetParametergroupsResult',
    'get_parametergroups',
    'get_parametergroups_output',
]

@pulumi.output_type
class GetParametergroupsResult:
    """
    A collection of values returned by getParametergroups.
    """
    def __init__(__self__, configurations=None, datastore_name=None, datastore_version_name=None, id=None, name=None, region=None, user_defined=None):
        if configurations and not isinstance(configurations, list):
            raise TypeError("Expected argument 'configurations' to be a list")
        pulumi.set(__self__, "configurations", configurations)
        if datastore_name and not isinstance(datastore_name, str):
            raise TypeError("Expected argument 'datastore_name' to be a str")
        pulumi.set(__self__, "datastore_name", datastore_name)
        if datastore_version_name and not isinstance(datastore_version_name, str):
            raise TypeError("Expected argument 'datastore_version_name' to be a str")
        pulumi.set(__self__, "datastore_version_name", datastore_version_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if user_defined and not isinstance(user_defined, bool):
            raise TypeError("Expected argument 'user_defined' to be a bool")
        pulumi.set(__self__, "user_defined", user_defined)

    @property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetParametergroupsConfigurationResult']:
        """
        Lists the configurations.
        The configurations structure is documented below.
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> Optional[str]:
        """
        The database name.
        """
        return pulumi.get(self, "datastore_name")

    @property
    @pulumi.getter(name="datastoreVersionName")
    def datastore_version_name(self) -> Optional[str]:
        """
        The database version name.
        """
        return pulumi.get(self, "datastore_version_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The parameter template name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="userDefined")
    def user_defined(self) -> Optional[bool]:
        """
        Whether the parameter template is created by users.
        The values can be **false** and **true**.
        """
        return pulumi.get(self, "user_defined")


class AwaitableGetParametergroupsResult(GetParametergroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetParametergroupsResult(
            configurations=self.configurations,
            datastore_name=self.datastore_name,
            datastore_version_name=self.datastore_version_name,
            id=self.id,
            name=self.name,
            region=self.region,
            user_defined=self.user_defined)


def get_parametergroups(datastore_name: Optional[str] = None,
                        datastore_version_name: Optional[str] = None,
                        name: Optional[str] = None,
                        region: Optional[str] = None,
                        user_defined: Optional[bool] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetParametergroupsResult:
    """
    Use this data source to get the list of RDS parametergroups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.Rds.get_parametergroups(name=name)
    ```


    :param str datastore_name: Specifies the database name.
    :param str datastore_version_name: Specifies the database version name.
    :param str name: Specifies the parameter template name.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param bool user_defined: Specifies whether the parameter template is created by users.
           The options are as follows:
           + **false**: The parameter template is a default parameter template.
           + **true**: The parameter template is a custom template.
    """
    __args__ = dict()
    __args__['datastoreName'] = datastore_name
    __args__['datastoreVersionName'] = datastore_version_name
    __args__['name'] = name
    __args__['region'] = region
    __args__['userDefined'] = user_defined
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getParametergroups:getParametergroups', __args__, opts=opts, typ=GetParametergroupsResult).value

    return AwaitableGetParametergroupsResult(
        configurations=__ret__.configurations,
        datastore_name=__ret__.datastore_name,
        datastore_version_name=__ret__.datastore_version_name,
        id=__ret__.id,
        name=__ret__.name,
        region=__ret__.region,
        user_defined=__ret__.user_defined)


@_utilities.lift_output_func(get_parametergroups)
def get_parametergroups_output(datastore_name: Optional[pulumi.Input[Optional[str]]] = None,
                               datastore_version_name: Optional[pulumi.Input[Optional[str]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               region: Optional[pulumi.Input[Optional[str]]] = None,
                               user_defined: Optional[pulumi.Input[Optional[bool]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetParametergroupsResult]:
    """
    Use this data source to get the list of RDS parametergroups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.Rds.get_parametergroups(name=name)
    ```


    :param str datastore_name: Specifies the database name.
    :param str datastore_version_name: Specifies the database version name.
    :param str name: Specifies the parameter template name.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param bool user_defined: Specifies whether the parameter template is created by users.
           The options are as follows:
           + **false**: The parameter template is a default parameter template.
           + **true**: The parameter template is a custom template.
    """
    ...
