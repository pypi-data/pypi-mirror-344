# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAvailableFlavorsResult',
    'AwaitableGetAvailableFlavorsResult',
    'get_available_flavors',
    'get_available_flavors_output',
]

@pulumi.output_type
class GetAvailableFlavorsResult:
    """
    A collection of values returned by getAvailableFlavors.
    """
    def __init__(__self__, availability_zone_ids=None, flavor_category_type=None, ha_mode=None, id=None, instance_id=None, is_rha_flavor=None, optional_flavors=None, region=None, spec_code_like=None):
        if availability_zone_ids and not isinstance(availability_zone_ids, str):
            raise TypeError("Expected argument 'availability_zone_ids' to be a str")
        pulumi.set(__self__, "availability_zone_ids", availability_zone_ids)
        if flavor_category_type and not isinstance(flavor_category_type, str):
            raise TypeError("Expected argument 'flavor_category_type' to be a str")
        pulumi.set(__self__, "flavor_category_type", flavor_category_type)
        if ha_mode and not isinstance(ha_mode, str):
            raise TypeError("Expected argument 'ha_mode' to be a str")
        pulumi.set(__self__, "ha_mode", ha_mode)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if is_rha_flavor and not isinstance(is_rha_flavor, bool):
            raise TypeError("Expected argument 'is_rha_flavor' to be a bool")
        pulumi.set(__self__, "is_rha_flavor", is_rha_flavor)
        if optional_flavors and not isinstance(optional_flavors, list):
            raise TypeError("Expected argument 'optional_flavors' to be a list")
        pulumi.set(__self__, "optional_flavors", optional_flavors)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if spec_code_like and not isinstance(spec_code_like, str):
            raise TypeError("Expected argument 'spec_code_like' to be a str")
        pulumi.set(__self__, "spec_code_like", spec_code_like)

    @property
    @pulumi.getter(name="availabilityZoneIds")
    def availability_zone_ids(self) -> str:
        return pulumi.get(self, "availability_zone_ids")

    @property
    @pulumi.getter(name="flavorCategoryType")
    def flavor_category_type(self) -> Optional[str]:
        return pulumi.get(self, "flavor_category_type")

    @property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> str:
        return pulumi.get(self, "ha_mode")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isRhaFlavor")
    def is_rha_flavor(self) -> Optional[bool]:
        return pulumi.get(self, "is_rha_flavor")

    @property
    @pulumi.getter(name="optionalFlavors")
    def optional_flavors(self) -> Sequence['outputs.GetAvailableFlavorsOptionalFlavorResult']:
        """
        Indicates the list of available flavors.
        """
        return pulumi.get(self, "optional_flavors")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="specCodeLike")
    def spec_code_like(self) -> Optional[str]:
        return pulumi.get(self, "spec_code_like")


class AwaitableGetAvailableFlavorsResult(GetAvailableFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAvailableFlavorsResult(
            availability_zone_ids=self.availability_zone_ids,
            flavor_category_type=self.flavor_category_type,
            ha_mode=self.ha_mode,
            id=self.id,
            instance_id=self.instance_id,
            is_rha_flavor=self.is_rha_flavor,
            optional_flavors=self.optional_flavors,
            region=self.region,
            spec_code_like=self.spec_code_like)


def get_available_flavors(availability_zone_ids: Optional[str] = None,
                          flavor_category_type: Optional[str] = None,
                          ha_mode: Optional[str] = None,
                          instance_id: Optional[str] = None,
                          is_rha_flavor: Optional[bool] = None,
                          region: Optional[str] = None,
                          spec_code_like: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAvailableFlavorsResult:
    """
    Use this data source to get the specifications that a RDS instance can be changed to.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_available_flavors(instance_id=instance_id,
        availability_zone_ids="cn-north-4a",
        ha_mode="ha")
    ```


    :param str availability_zone_ids: Specifies the availability zone.
    :param str flavor_category_type: Specifies the flavor category type.
    :param str ha_mode: Specifies the HA mode. Value options: **single**, **ha**, **replica**.
    :param str instance_id: Specifies the ID of the RDS instance.
    :param bool is_rha_flavor: Specifies whether display highly available read-only types.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str spec_code_like: Specifies the resource specification code, fuzzy matching is supported.
    """
    __args__ = dict()
    __args__['availabilityZoneIds'] = availability_zone_ids
    __args__['flavorCategoryType'] = flavor_category_type
    __args__['haMode'] = ha_mode
    __args__['instanceId'] = instance_id
    __args__['isRhaFlavor'] = is_rha_flavor
    __args__['region'] = region
    __args__['specCodeLike'] = spec_code_like
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getAvailableFlavors:getAvailableFlavors', __args__, opts=opts, typ=GetAvailableFlavorsResult).value

    return AwaitableGetAvailableFlavorsResult(
        availability_zone_ids=__ret__.availability_zone_ids,
        flavor_category_type=__ret__.flavor_category_type,
        ha_mode=__ret__.ha_mode,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        is_rha_flavor=__ret__.is_rha_flavor,
        optional_flavors=__ret__.optional_flavors,
        region=__ret__.region,
        spec_code_like=__ret__.spec_code_like)


@_utilities.lift_output_func(get_available_flavors)
def get_available_flavors_output(availability_zone_ids: Optional[pulumi.Input[str]] = None,
                                 flavor_category_type: Optional[pulumi.Input[Optional[str]]] = None,
                                 ha_mode: Optional[pulumi.Input[str]] = None,
                                 instance_id: Optional[pulumi.Input[str]] = None,
                                 is_rha_flavor: Optional[pulumi.Input[Optional[bool]]] = None,
                                 region: Optional[pulumi.Input[Optional[str]]] = None,
                                 spec_code_like: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAvailableFlavorsResult]:
    """
    Use this data source to get the specifications that a RDS instance can be changed to.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_available_flavors(instance_id=instance_id,
        availability_zone_ids="cn-north-4a",
        ha_mode="ha")
    ```


    :param str availability_zone_ids: Specifies the availability zone.
    :param str flavor_category_type: Specifies the flavor category type.
    :param str ha_mode: Specifies the HA mode. Value options: **single**, **ha**, **replica**.
    :param str instance_id: Specifies the ID of the RDS instance.
    :param bool is_rha_flavor: Specifies whether display highly available read-only types.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str spec_code_like: Specifies the resource specification code, fuzzy matching is supported.
    """
    ...
