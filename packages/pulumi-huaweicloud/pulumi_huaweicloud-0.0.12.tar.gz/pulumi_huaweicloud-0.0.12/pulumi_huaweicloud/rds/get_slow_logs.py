# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSlowLogsResult',
    'AwaitableGetSlowLogsResult',
    'get_slow_logs',
    'get_slow_logs_output',
]

@pulumi.output_type
class GetSlowLogsResult:
    """
    A collection of values returned by getSlowLogs.
    """
    def __init__(__self__, database=None, end_time=None, id=None, instance_id=None, region=None, slow_logs=None, start_time=None, type=None, users=None):
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if slow_logs and not isinstance(slow_logs, list):
            raise TypeError("Expected argument 'slow_logs' to be a list")
        pulumi.set(__self__, "slow_logs", slow_logs)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if users and not isinstance(users, str):
            raise TypeError("Expected argument 'users' to be a str")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Indicates the name of the database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="slowLogs")
    def slow_logs(self) -> Sequence['outputs.GetSlowLogsSlowLogResult']:
        """
        Indicates the list of the slow logs.
        """
        return pulumi.get(self, "slow_logs")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Indicates the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Indicates the statement type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def users(self) -> Optional[str]:
        """
        Indicates the name of the account.
        """
        return pulumi.get(self, "users")


class AwaitableGetSlowLogsResult(GetSlowLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSlowLogsResult(
            database=self.database,
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            slow_logs=self.slow_logs,
            start_time=self.start_time,
            type=self.type,
            users=self.users)


def get_slow_logs(database: Optional[str] = None,
                  end_time: Optional[str] = None,
                  instance_id: Optional[str] = None,
                  region: Optional[str] = None,
                  start_time: Optional[str] = None,
                  type: Optional[str] = None,
                  users: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSlowLogsResult:
    """
    Use this data source to get the list of RDS slow logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Rds.get_slow_logs(instance_id=instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param str database: Specifies the name of the database.
    :param str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param str instance_id: Specifies the ID of the RDS instance.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param str type: Specifies the statement type. Value options: **INSERT**, **UPDATE**, **SELECT**,
           **DELETE**, **CREATE**.
    :param str users: Specifies the name of the account.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['type'] = type
    __args__['users'] = users
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getSlowLogs:getSlowLogs', __args__, opts=opts, typ=GetSlowLogsResult).value

    return AwaitableGetSlowLogsResult(
        database=__ret__.database,
        end_time=__ret__.end_time,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        region=__ret__.region,
        slow_logs=__ret__.slow_logs,
        start_time=__ret__.start_time,
        type=__ret__.type,
        users=__ret__.users)


@_utilities.lift_output_func(get_slow_logs)
def get_slow_logs_output(database: Optional[pulumi.Input[Optional[str]]] = None,
                         end_time: Optional[pulumi.Input[str]] = None,
                         instance_id: Optional[pulumi.Input[str]] = None,
                         region: Optional[pulumi.Input[Optional[str]]] = None,
                         start_time: Optional[pulumi.Input[str]] = None,
                         type: Optional[pulumi.Input[Optional[str]]] = None,
                         users: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSlowLogsResult]:
    """
    Use this data source to get the list of RDS slow logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = huaweicloud.Rds.get_slow_logs(instance_id=instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param str database: Specifies the name of the database.
    :param str end_time: Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param str instance_id: Specifies the ID of the RDS instance.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
    :param str type: Specifies the statement type. Value options: **INSERT**, **UPDATE**, **SELECT**,
           **DELETE**, **CREATE**.
    :param str users: Specifies the name of the account.
    """
    ...
