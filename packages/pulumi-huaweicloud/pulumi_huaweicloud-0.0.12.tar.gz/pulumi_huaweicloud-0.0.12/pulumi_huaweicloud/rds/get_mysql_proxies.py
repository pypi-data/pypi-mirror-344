# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlProxiesResult',
    'AwaitableGetMysqlProxiesResult',
    'get_mysql_proxies',
    'get_mysql_proxies_output',
]

@pulumi.output_type
class GetMysqlProxiesResult:
    """
    A collection of values returned by getMysqlProxies.
    """
    def __init__(__self__, id=None, instance_id=None, max_proxy_node_num=None, max_proxy_num=None, proxy_lists=None, region=None, support_balance_route_mode_for_favored_version=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if max_proxy_node_num and not isinstance(max_proxy_node_num, int):
            raise TypeError("Expected argument 'max_proxy_node_num' to be a int")
        pulumi.set(__self__, "max_proxy_node_num", max_proxy_node_num)
        if max_proxy_num and not isinstance(max_proxy_num, int):
            raise TypeError("Expected argument 'max_proxy_num' to be a int")
        pulumi.set(__self__, "max_proxy_num", max_proxy_num)
        if proxy_lists and not isinstance(proxy_lists, list):
            raise TypeError("Expected argument 'proxy_lists' to be a list")
        pulumi.set(__self__, "proxy_lists", proxy_lists)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if support_balance_route_mode_for_favored_version and not isinstance(support_balance_route_mode_for_favored_version, bool):
            raise TypeError("Expected argument 'support_balance_route_mode_for_favored_version' to be a bool")
        pulumi.set(__self__, "support_balance_route_mode_for_favored_version", support_balance_route_mode_for_favored_version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="maxProxyNodeNum")
    def max_proxy_node_num(self) -> int:
        """
        Indicates the maximum number of proxy nodes that can be selected for a database proxy.
        """
        return pulumi.get(self, "max_proxy_node_num")

    @property
    @pulumi.getter(name="maxProxyNum")
    def max_proxy_num(self) -> int:
        """
        Indicates the maximum number of database proxies that can be enabled at the same time.
        """
        return pulumi.get(self, "max_proxy_num")

    @property
    @pulumi.getter(name="proxyLists")
    def proxy_lists(self) -> Sequence['outputs.GetMysqlProxiesProxyListResult']:
        """
        Indicates the proxy information list of a RDS MySQL instance.
        """
        return pulumi.get(self, "proxy_lists")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="supportBalanceRouteModeForFavoredVersion")
    def support_balance_route_mode_for_favored_version(self) -> bool:
        """
        Indicates whether the load balancing routing mode can be set when
        the database proxy is created.
        """
        return pulumi.get(self, "support_balance_route_mode_for_favored_version")


class AwaitableGetMysqlProxiesResult(GetMysqlProxiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlProxiesResult(
            id=self.id,
            instance_id=self.instance_id,
            max_proxy_node_num=self.max_proxy_node_num,
            max_proxy_num=self.max_proxy_num,
            proxy_lists=self.proxy_lists,
            region=self.region,
            support_balance_route_mode_for_favored_version=self.support_balance_route_mode_for_favored_version)


def get_mysql_proxies(instance_id: Optional[str] = None,
                      region: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlProxiesResult:
    """
    Use this data source to get the proxy list of a RDS MySQL instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_mysql_proxies(instance_id=instance_id)
    ```


    :param str instance_id: Specifies the ID of RDS MySQL instance.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getMysqlProxies:getMysqlProxies', __args__, opts=opts, typ=GetMysqlProxiesResult).value

    return AwaitableGetMysqlProxiesResult(
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        max_proxy_node_num=__ret__.max_proxy_node_num,
        max_proxy_num=__ret__.max_proxy_num,
        proxy_lists=__ret__.proxy_lists,
        region=__ret__.region,
        support_balance_route_mode_for_favored_version=__ret__.support_balance_route_mode_for_favored_version)


@_utilities.lift_output_func(get_mysql_proxies)
def get_mysql_proxies_output(instance_id: Optional[pulumi.Input[str]] = None,
                             region: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMysqlProxiesResult]:
    """
    Use this data source to get the proxy list of a RDS MySQL instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Rds.get_mysql_proxies(instance_id=instance_id)
    ```


    :param str instance_id: Specifies the ID of RDS MySQL instance.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    ...
