# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRestoredTablesResult',
    'AwaitableGetRestoredTablesResult',
    'get_restored_tables',
    'get_restored_tables_output',
]

@pulumi.output_type
class GetRestoredTablesResult:
    """
    A collection of values returned by getRestoredTables.
    """
    def __init__(__self__, database_name_like=None, engine=None, id=None, instance_ids=None, instance_name_like=None, instances=None, region=None, restore_time=None, table_limit=None, table_name_like=None):
        if database_name_like and not isinstance(database_name_like, str):
            raise TypeError("Expected argument 'database_name_like' to be a str")
        pulumi.set(__self__, "database_name_like", database_name_like)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if instance_name_like and not isinstance(instance_name_like, str):
            raise TypeError("Expected argument 'instance_name_like' to be a str")
        pulumi.set(__self__, "instance_name_like", instance_name_like)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if restore_time and not isinstance(restore_time, str):
            raise TypeError("Expected argument 'restore_time' to be a str")
        pulumi.set(__self__, "restore_time", restore_time)
        if table_limit and not isinstance(table_limit, int):
            raise TypeError("Expected argument 'table_limit' to be a int")
        pulumi.set(__self__, "table_limit", table_limit)
        if table_name_like and not isinstance(table_name_like, str):
            raise TypeError("Expected argument 'table_name_like' to be a str")
        pulumi.set(__self__, "table_name_like", table_name_like)

    @property
    @pulumi.getter(name="databaseNameLike")
    def database_name_like(self) -> Optional[str]:
        return pulumi.get(self, "database_name_like")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="instanceNameLike")
    def instance_name_like(self) -> Optional[str]:
        return pulumi.get(self, "instance_name_like")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetRestoredTablesInstanceResult']:
        """
        Indicates the instance information.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> str:
        return pulumi.get(self, "restore_time")

    @property
    @pulumi.getter(name="tableLimit")
    def table_limit(self) -> int:
        """
        Indicates the maximum number of tables that can be restored.
        """
        return pulumi.get(self, "table_limit")

    @property
    @pulumi.getter(name="tableNameLike")
    def table_name_like(self) -> Optional[str]:
        return pulumi.get(self, "table_name_like")


class AwaitableGetRestoredTablesResult(GetRestoredTablesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRestoredTablesResult(
            database_name_like=self.database_name_like,
            engine=self.engine,
            id=self.id,
            instance_ids=self.instance_ids,
            instance_name_like=self.instance_name_like,
            instances=self.instances,
            region=self.region,
            restore_time=self.restore_time,
            table_limit=self.table_limit,
            table_name_like=self.table_name_like)


def get_restored_tables(database_name_like: Optional[str] = None,
                        engine: Optional[str] = None,
                        instance_ids: Optional[Sequence[str]] = None,
                        instance_name_like: Optional[str] = None,
                        region: Optional[str] = None,
                        restore_time: Optional[str] = None,
                        table_name_like: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRestoredTablesResult:
    """
    Use this data source to get the tables that can be restored to a specified point in time.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    restore_time = config.require_object("restoreTime")
    test = huaweicloud.Rds.get_restored_tables(engine="postgresql",
        instance_ids=[instance_id],
        restore_time=restore_time)
    ```


    :param str database_name_like: Specifies the database name, which can be used for fuzzy query.
    :param str engine: Specifies the database engine. The supported engines are as follows, not case-sensitive:
           **postgresql**.
    :param Sequence[str] instance_ids: Specifies the RDS instance IDs.
    :param str instance_name_like: Specifies the instance name, which can be used for fuzzy query.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str restore_time: Specifies the restoration time point. A timestamp in milliseconds is used.
    :param str table_name_like: Specifies the table name, which can be used for fuzzy query.
    """
    __args__ = dict()
    __args__['databaseNameLike'] = database_name_like
    __args__['engine'] = engine
    __args__['instanceIds'] = instance_ids
    __args__['instanceNameLike'] = instance_name_like
    __args__['region'] = region
    __args__['restoreTime'] = restore_time
    __args__['tableNameLike'] = table_name_like
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getRestoredTables:getRestoredTables', __args__, opts=opts, typ=GetRestoredTablesResult).value

    return AwaitableGetRestoredTablesResult(
        database_name_like=__ret__.database_name_like,
        engine=__ret__.engine,
        id=__ret__.id,
        instance_ids=__ret__.instance_ids,
        instance_name_like=__ret__.instance_name_like,
        instances=__ret__.instances,
        region=__ret__.region,
        restore_time=__ret__.restore_time,
        table_limit=__ret__.table_limit,
        table_name_like=__ret__.table_name_like)


@_utilities.lift_output_func(get_restored_tables)
def get_restored_tables_output(database_name_like: Optional[pulumi.Input[Optional[str]]] = None,
                               engine: Optional[pulumi.Input[str]] = None,
                               instance_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                               instance_name_like: Optional[pulumi.Input[Optional[str]]] = None,
                               region: Optional[pulumi.Input[Optional[str]]] = None,
                               restore_time: Optional[pulumi.Input[str]] = None,
                               table_name_like: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRestoredTablesResult]:
    """
    Use this data source to get the tables that can be restored to a specified point in time.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    restore_time = config.require_object("restoreTime")
    test = huaweicloud.Rds.get_restored_tables(engine="postgresql",
        instance_ids=[instance_id],
        restore_time=restore_time)
    ```


    :param str database_name_like: Specifies the database name, which can be used for fuzzy query.
    :param str engine: Specifies the database engine. The supported engines are as follows, not case-sensitive:
           **postgresql**.
    :param Sequence[str] instance_ids: Specifies the RDS instance IDs.
    :param str instance_name_like: Specifies the instance name, which can be used for fuzzy query.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str restore_time: Specifies the restoration time point. A timestamp in milliseconds is used.
    :param str table_name_like: Specifies the table name, which can be used for fuzzy query.
    """
    ...
