# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlDatabasePrivilegesResult',
    'AwaitableGetMysqlDatabasePrivilegesResult',
    'get_mysql_database_privileges',
    'get_mysql_database_privileges_output',
]

@pulumi.output_type
class GetMysqlDatabasePrivilegesResult:
    """
    A collection of values returned by getMysqlDatabasePrivileges.
    """
    def __init__(__self__, db_name=None, id=None, instance_id=None, readonly=None, region=None, user_name=None, users=None):
        if db_name and not isinstance(db_name, str):
            raise TypeError("Expected argument 'db_name' to be a str")
        pulumi.set(__self__, "db_name", db_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if readonly and not isinstance(readonly, bool):
            raise TypeError("Expected argument 'readonly' to be a bool")
        pulumi.set(__self__, "readonly", readonly)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def readonly(self) -> Optional[bool]:
        """
        The read-only permission.
        """
        return pulumi.get(self, "readonly")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetMysqlDatabasePrivilegesUserResult']:
        """
        The list of the accounts that accociated with the database.
        The users structure is documented below.
        """
        return pulumi.get(self, "users")


class AwaitableGetMysqlDatabasePrivilegesResult(GetMysqlDatabasePrivilegesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlDatabasePrivilegesResult(
            db_name=self.db_name,
            id=self.id,
            instance_id=self.instance_id,
            readonly=self.readonly,
            region=self.region,
            user_name=self.user_name,
            users=self.users)


def get_mysql_database_privileges(db_name: Optional[str] = None,
                                  instance_id: Optional[str] = None,
                                  readonly: Optional[bool] = None,
                                  region: Optional[str] = None,
                                  user_name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlDatabasePrivilegesResult:
    """
    Use this data source to get the list of RDS MySQL database privileges.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Rds.get_mysql_database_privileges(instance_id=var["instance_id"],
        db_name=var["db_name"])
    ```


    :param str db_name: Specifies the database name.
    :param str instance_id: Specifies the ID of the RDS MySQL instance.
    :param bool readonly: Specifies whether the database permission is **read-only**. Values option:
           + **true**: indicates the database is read-only.
           + **false**: indicates the database is readable and writable.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str user_name: Specifies the username of the database account.
    """
    __args__ = dict()
    __args__['dbName'] = db_name
    __args__['instanceId'] = instance_id
    __args__['readonly'] = readonly
    __args__['region'] = region
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getMysqlDatabasePrivileges:getMysqlDatabasePrivileges', __args__, opts=opts, typ=GetMysqlDatabasePrivilegesResult).value

    return AwaitableGetMysqlDatabasePrivilegesResult(
        db_name=__ret__.db_name,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        readonly=__ret__.readonly,
        region=__ret__.region,
        user_name=__ret__.user_name,
        users=__ret__.users)


@_utilities.lift_output_func(get_mysql_database_privileges)
def get_mysql_database_privileges_output(db_name: Optional[pulumi.Input[str]] = None,
                                         instance_id: Optional[pulumi.Input[str]] = None,
                                         readonly: Optional[pulumi.Input[Optional[bool]]] = None,
                                         region: Optional[pulumi.Input[Optional[str]]] = None,
                                         user_name: Optional[pulumi.Input[Optional[str]]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMysqlDatabasePrivilegesResult]:
    """
    Use this data source to get the list of RDS MySQL database privileges.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Rds.get_mysql_database_privileges(instance_id=var["instance_id"],
        db_name=var["db_name"])
    ```


    :param str db_name: Specifies the database name.
    :param str instance_id: Specifies the ID of the RDS MySQL instance.
    :param bool readonly: Specifies whether the database permission is **read-only**. Values option:
           + **true**: indicates the database is read-only.
           + **false**: indicates the database is readable and writable.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str user_name: Specifies the username of the database account.
    """
    ...
