# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSqlserverAccountsResult',
    'AwaitableGetSqlserverAccountsResult',
    'get_sqlserver_accounts',
    'get_sqlserver_accounts_output',
]

@pulumi.output_type
class GetSqlserverAccountsResult:
    """
    A collection of values returned by getSqlserverAccounts.
    """
    def __init__(__self__, id=None, instance_id=None, region=None, state=None, user_name=None, users=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Indicates the database user status.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetSqlserverAccountsUserResult']:
        """
        Indicates the list of users.
        The users structure is documented below.
        """
        return pulumi.get(self, "users")


class AwaitableGetSqlserverAccountsResult(GetSqlserverAccountsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlserverAccountsResult(
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            state=self.state,
            user_name=self.user_name,
            users=self.users)


def get_sqlserver_accounts(instance_id: Optional[str] = None,
                           region: Optional[str] = None,
                           state: Optional[str] = None,
                           user_name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlserverAccountsResult:
    """
    Use this data source to get the list of RDS SQLServer accounts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Rds.get_sqlserver_accounts(instance_id=var["instance_id"],
        user_name="test")
    ```


    :param str instance_id: Specifies the ID of the RDS SQLServer instance.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str state: Specifies the database user status. Its value can be any of the following:
           + **unavailable**: The database user is unavailable.
           + **available**: The database user is available.
    :param str user_name: Specifies the username of the database account.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['state'] = state
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Rds/getSqlserverAccounts:getSqlserverAccounts', __args__, opts=opts, typ=GetSqlserverAccountsResult).value

    return AwaitableGetSqlserverAccountsResult(
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        region=__ret__.region,
        state=__ret__.state,
        user_name=__ret__.user_name,
        users=__ret__.users)


@_utilities.lift_output_func(get_sqlserver_accounts)
def get_sqlserver_accounts_output(instance_id: Optional[pulumi.Input[str]] = None,
                                  region: Optional[pulumi.Input[Optional[str]]] = None,
                                  state: Optional[pulumi.Input[Optional[str]]] = None,
                                  user_name: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSqlserverAccountsResult]:
    """
    Use this data source to get the list of RDS SQLServer accounts.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.Rds.get_sqlserver_accounts(instance_id=var["instance_id"],
        user_name="test")
    ```


    :param str instance_id: Specifies the ID of the RDS SQLServer instance.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str state: Specifies the database user status. Its value can be any of the following:
           + **unavailable**: The database user is unavailable.
           + **available**: The database user is available.
    :param str user_name: Specifies the username of the database account.
    """
    ...
