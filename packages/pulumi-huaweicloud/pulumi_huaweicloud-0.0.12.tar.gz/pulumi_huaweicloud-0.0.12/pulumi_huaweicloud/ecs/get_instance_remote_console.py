# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetInstanceRemoteConsoleResult',
    'AwaitableGetInstanceRemoteConsoleResult',
    'get_instance_remote_console',
    'get_instance_remote_console_output',
]

@pulumi.output_type
class GetInstanceRemoteConsoleResult:
    """
    A collection of values returned by getInstanceRemoteConsole.
    """
    def __init__(__self__, id=None, instance_id=None, protocol=None, region=None, type=None, url=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of the ECS compute instance remote console.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of ECS compute instance remote console.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The url of ECS compute instance remote console.
        """
        return pulumi.get(self, "url")


class AwaitableGetInstanceRemoteConsoleResult(GetInstanceRemoteConsoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceRemoteConsoleResult(
            id=self.id,
            instance_id=self.instance_id,
            protocol=self.protocol,
            region=self.region,
            type=self.type,
            url=self.url)


def get_instance_remote_console(instance_id: Optional[str] = None,
                                region: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceRemoteConsoleResult:
    """
    Use this data source to get an available HuaweiCloud ECS compute instance remote console.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Ecs.get_instance_remote_console(instance_id=instance_id)
    ```


    :param str instance_id: Specifies the ECS ID.
    :param str region: Specifies the region in which to obtain the instances.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Ecs/getInstanceRemoteConsole:getInstanceRemoteConsole', __args__, opts=opts, typ=GetInstanceRemoteConsoleResult).value

    return AwaitableGetInstanceRemoteConsoleResult(
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        protocol=__ret__.protocol,
        region=__ret__.region,
        type=__ret__.type,
        url=__ret__.url)


@_utilities.lift_output_func(get_instance_remote_console)
def get_instance_remote_console_output(instance_id: Optional[pulumi.Input[str]] = None,
                                       region: Optional[pulumi.Input[Optional[str]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceRemoteConsoleResult]:
    """
    Use this data source to get an available HuaweiCloud ECS compute instance remote console.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = huaweicloud.Ecs.get_instance_remote_console(instance_id=instance_id)
    ```


    :param str instance_id: Specifies the ECS ID.
    :param str region: Specifies the region in which to obtain the instances.
           If omitted, the provider-level region will be used.
    """
    ...
