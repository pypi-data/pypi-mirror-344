# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterAnalysisCoreNodes',
    'ClusterAnalysisTaskNodes',
    'ClusterBootstrapScript',
    'ClusterComponentConfig',
    'ClusterComponentConfigConfig',
    'ClusterCustomNode',
    'ClusterExternalDatasource',
    'ClusterMasterNodes',
    'ClusterSmnNotify',
    'ClusterStreamingCoreNodes',
    'ClusterStreamingTaskNodes',
]

@pulumi.output_type
class ClusterAnalysisCoreNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAnalysisCoreNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAnalysisCoreNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAnalysisCoreNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: int,
                 flavor: str,
                 node_number: int,
                 root_volume_size: int,
                 root_volume_type: str,
                 assigned_roles: Optional[Sequence[str]] = None,
                 data_volume_size: Optional[int] = None,
                 data_volume_type: Optional[str] = None,
                 host_ips: Optional[Sequence[str]] = None):
        """
        :param int data_volume_count: Specifies the data disk number of the nodes.  
               The valid value is `1`.
               Changing this will create a new MapReduce cluster resource.
        :param str flavor: Specifies the instance specifications for each nodes in node group.
               Changing this will create a new MapReduce cluster resource.
        :param int node_number: Specifies the number of nodes for the node group.  
               Changing this will create a new MapReduce cluster resource.
        :param int root_volume_size: Specifies the system disk size of the nodes. Changing this will create
               a new MapReduce cluster resource.
        :param str root_volume_type: Specifies the system disk flavor of the nodes. Changing this will
               create a new MapReduce cluster resource.
        :param Sequence[str] assigned_roles: Specifies the roles deployed in a node group.This argument is mandatory
               when the cluster type is **CUSTOM**. Each character string represents a role expression.
        :param int data_volume_size: Specifies the data disk size of the nodes,in GB. The value range is 10
               to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
               cluster resource.
        :param str data_volume_type: Specifies the data disk flavor of the nodes.
               Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
               The following disk types are supported:
               + **SATA**: common I/O disk.
               + **SAS**: high I/O disk.
               + **SSD**: ultra-high I/O disk.
        :param Sequence[str] host_ips: The host list of this nodes group in the cluster.
               * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
               * `bootstrap_scripts/state` - The status of one bootstrap action script.
               The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> int:
        """
        Specifies the data disk number of the nodes.  
        The valid value is `1`.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> str:
        """
        Specifies the instance specifications for each nodes in node group.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> int:
        """
        Specifies the number of nodes for the node group.  
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> int:
        """
        Specifies the system disk size of the nodes. Changing this will create
        a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> str:
        """
        Specifies the system disk flavor of the nodes. Changing this will
        create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[str]]:
        """
        Specifies the roles deployed in a node group.This argument is mandatory
        when the cluster type is **CUSTOM**. Each character string represents a role expression.
        """
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[int]:
        """
        Specifies the data disk size of the nodes,in GB. The value range is 10
        to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
        cluster resource.
        """
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[str]:
        """
        Specifies the data disk flavor of the nodes.
        Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
        The following disk types are supported:
        + **SATA**: common I/O disk.
        + **SAS**: high I/O disk.
        + **SSD**: ultra-high I/O disk.
        """
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[str]]:
        """
        The host list of this nodes group in the cluster.
        * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
        * `bootstrap_scripts/state` - The status of one bootstrap action script.
        The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class ClusterAnalysisTaskNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAnalysisTaskNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAnalysisTaskNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAnalysisTaskNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: int,
                 flavor: str,
                 node_number: int,
                 root_volume_size: int,
                 root_volume_type: str,
                 assigned_roles: Optional[Sequence[str]] = None,
                 data_volume_size: Optional[int] = None,
                 data_volume_type: Optional[str] = None,
                 host_ips: Optional[Sequence[str]] = None):
        """
        :param int data_volume_count: Specifies the data disk number of the nodes.  
               The valid value is `1`.
               Changing this will create a new MapReduce cluster resource.
        :param str flavor: Specifies the instance specifications for each nodes in node group.
               Changing this will create a new MapReduce cluster resource.
        :param int node_number: Specifies the number of nodes for the node group.  
               Changing this will create a new MapReduce cluster resource.
        :param int root_volume_size: Specifies the system disk size of the nodes. Changing this will create
               a new MapReduce cluster resource.
        :param str root_volume_type: Specifies the system disk flavor of the nodes. Changing this will
               create a new MapReduce cluster resource.
        :param Sequence[str] assigned_roles: Specifies the roles deployed in a node group.This argument is mandatory
               when the cluster type is **CUSTOM**. Each character string represents a role expression.
        :param int data_volume_size: Specifies the data disk size of the nodes,in GB. The value range is 10
               to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
               cluster resource.
        :param str data_volume_type: Specifies the data disk flavor of the nodes.
               Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
               The following disk types are supported:
               + **SATA**: common I/O disk.
               + **SAS**: high I/O disk.
               + **SSD**: ultra-high I/O disk.
        :param Sequence[str] host_ips: The host list of this nodes group in the cluster.
               * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
               * `bootstrap_scripts/state` - The status of one bootstrap action script.
               The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> int:
        """
        Specifies the data disk number of the nodes.  
        The valid value is `1`.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> str:
        """
        Specifies the instance specifications for each nodes in node group.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> int:
        """
        Specifies the number of nodes for the node group.  
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> int:
        """
        Specifies the system disk size of the nodes. Changing this will create
        a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> str:
        """
        Specifies the system disk flavor of the nodes. Changing this will
        create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[str]]:
        """
        Specifies the roles deployed in a node group.This argument is mandatory
        when the cluster type is **CUSTOM**. Each character string represents a role expression.
        """
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[int]:
        """
        Specifies the data disk size of the nodes,in GB. The value range is 10
        to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
        cluster resource.
        """
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[str]:
        """
        Specifies the data disk flavor of the nodes.
        Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
        The following disk types are supported:
        + **SATA**: common I/O disk.
        + **SAS**: high I/O disk.
        + **SSD**: ultra-high I/O disk.
        """
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[str]]:
        """
        The host list of this nodes group in the cluster.
        * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
        * `bootstrap_scripts/state` - The status of one bootstrap action script.
        The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class ClusterBootstrapScript(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failAction":
            suggest = "fail_action"
        elif key == "activeMaster":
            suggest = "active_master"
        elif key == "beforeComponentStart":
            suggest = "before_component_start"
        elif key == "executeNeedSudoRoot":
            suggest = "execute_need_sudo_root"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterBootstrapScript. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterBootstrapScript.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterBootstrapScript.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fail_action: str,
                 name: str,
                 nodes: Sequence[str],
                 uri: str,
                 active_master: Optional[bool] = None,
                 before_component_start: Optional[bool] = None,
                 execute_need_sudo_root: Optional[bool] = None,
                 parameters: Optional[str] = None,
                 start_time: Optional[str] = None,
                 state: Optional[str] = None):
        """
        :param str fail_action: Specifies the action after the bootstrap action script fails to be executed.
               The options are as follows:
               + **continue**: Continue to execute subsequent scripts.
               + **errorout**: Stop the action.
        :param str name: Specifies the name of a bootstrap action script.
               Changing this will create a new MapReduce cluster resource.
        :param Sequence[str] nodes: Specifies names of the node group where the bootstrap action script is executed.
        :param str uri: Specifies the path of a bootstrap action script.
               Set this parameter to an OBS bucket path or a local VM path.
               + **OBS bucket path**: The path of an OBS file system starts with *s3a://* or *obs://* and end with *.sh*.
               + **Local VM path**: The script path must start with a slash (/) and end with *.sh*.
        :param bool active_master: Specifies whether the bootstrap action script runs only on active master nodes.
               The default value is **false**, indicating that the bootstrap action script can run on all master nodes.
        :param bool before_component_start: Specifies whether the bootstrap action script is executed
               before component start.
               The options are as follows:
               + **false**: After component start. The default value is **false**.
               + **true**: Before component start.
        :param bool execute_need_sudo_root: Specifies whether the bootstrap action script involves root user
               operations.
               Changing this will create a new MapReduce cluster resource.
        :param str parameters: Specifies bootstrap action script parameters.
        """
        pulumi.set(__self__, "fail_action", fail_action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "uri", uri)
        if active_master is not None:
            pulumi.set(__self__, "active_master", active_master)
        if before_component_start is not None:
            pulumi.set(__self__, "before_component_start", before_component_start)
        if execute_need_sudo_root is not None:
            pulumi.set(__self__, "execute_need_sudo_root", execute_need_sudo_root)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="failAction")
    def fail_action(self) -> str:
        """
        Specifies the action after the bootstrap action script fails to be executed.
        The options are as follows:
        + **continue**: Continue to execute subsequent scripts.
        + **errorout**: Stop the action.
        """
        return pulumi.get(self, "fail_action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of a bootstrap action script.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence[str]:
        """
        Specifies names of the node group where the bootstrap action script is executed.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Specifies the path of a bootstrap action script.
        Set this parameter to an OBS bucket path or a local VM path.
        + **OBS bucket path**: The path of an OBS file system starts with *s3a://* or *obs://* and end with *.sh*.
        + **Local VM path**: The script path must start with a slash (/) and end with *.sh*.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="activeMaster")
    def active_master(self) -> Optional[bool]:
        """
        Specifies whether the bootstrap action script runs only on active master nodes.
        The default value is **false**, indicating that the bootstrap action script can run on all master nodes.
        """
        return pulumi.get(self, "active_master")

    @property
    @pulumi.getter(name="beforeComponentStart")
    def before_component_start(self) -> Optional[bool]:
        """
        Specifies whether the bootstrap action script is executed
        before component start.
        The options are as follows:
        + **false**: After component start. The default value is **false**.
        + **true**: Before component start.
        """
        return pulumi.get(self, "before_component_start")

    @property
    @pulumi.getter(name="executeNeedSudoRoot")
    def execute_need_sudo_root(self) -> Optional[bool]:
        """
        Specifies whether the bootstrap action script involves root user
        operations.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "execute_need_sudo_root")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        """
        Specifies bootstrap action script parameters.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class ClusterComponentConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ClusterComponentConfigConfig'],
                 name: str):
        """
        :param Sequence['ClusterComponentConfigConfigArgs'] configs: Specifies the configuration of component installed.
               The object structure is documented below.
        :param str name: Specifies the name of a bootstrap action script.
               Changing this will create a new MapReduce cluster resource.
        """
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ClusterComponentConfigConfig']:
        """
        Specifies the configuration of component installed.
        The object structure is documented below.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of a bootstrap action script.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClusterComponentConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configFileName":
            suggest = "config_file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterComponentConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterComponentConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterComponentConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_file_name: str,
                 key: str,
                 value: str):
        """
        :param str config_file_name: Specifies the configuration file name of component installed.
               Changing this will create a new MapReduce cluster resource.
        :param str key: Specifies the configuration item key of component installed.
               Changing this will create a new MapReduce cluster resource.
        :param str value: Specifies the configuration item value of component installed.
               Changing this will create a new MapReduce cluster resource.
        """
        pulumi.set(__self__, "config_file_name", config_file_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configFileName")
    def config_file_name(self) -> str:
        """
        Specifies the configuration file name of component installed.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "config_file_name")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Specifies the configuration item key of component installed.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the configuration item value of component installed.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ClusterCustomNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "groupName":
            suggest = "group_name"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCustomNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCustomNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCustomNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: int,
                 flavor: str,
                 group_name: str,
                 node_number: int,
                 root_volume_size: int,
                 root_volume_type: str,
                 assigned_roles: Optional[Sequence[str]] = None,
                 data_volume_size: Optional[int] = None,
                 data_volume_type: Optional[str] = None,
                 host_ips: Optional[Sequence[str]] = None):
        """
        :param int data_volume_count: Specifies the data disk number of the nodes.  
               The valid value is `1`.
               Changing this will create a new MapReduce cluster resource.
        :param str flavor: Specifies the instance specifications for each nodes in node group.
               Changing this will create a new MapReduce cluster resource.
        :param str group_name: Specifies the name of nodes for the node group.  
               Changing this will create a new MapReduce cluster resource.
        :param int node_number: Specifies the number of nodes for the node group.  
               Changing this will create a new MapReduce cluster resource.
        :param int root_volume_size: Specifies the system disk size of the nodes. Changing this will create
               a new MapReduce cluster resource.
        :param str root_volume_type: Specifies the system disk flavor of the nodes. Changing this will
               create a new MapReduce cluster resource.
        :param Sequence[str] assigned_roles: Specifies the roles deployed in a node group.This argument is mandatory
               when the cluster type is **CUSTOM**. Each character string represents a role expression.
        :param int data_volume_size: Specifies the data disk size of the nodes,in GB. The value range is 10
               to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
               cluster resource.
        :param str data_volume_type: Specifies the data disk flavor of the nodes.
               Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
               The following disk types are supported:
               + **SATA**: common I/O disk.
               + **SAS**: high I/O disk.
               + **SSD**: ultra-high I/O disk.
        :param Sequence[str] host_ips: The host list of this nodes group in the cluster.
               * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
               * `bootstrap_scripts/state` - The status of one bootstrap action script.
               The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> int:
        """
        Specifies the data disk number of the nodes.  
        The valid value is `1`.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> str:
        """
        Specifies the instance specifications for each nodes in node group.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Specifies the name of nodes for the node group.  
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> int:
        """
        Specifies the number of nodes for the node group.  
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> int:
        """
        Specifies the system disk size of the nodes. Changing this will create
        a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> str:
        """
        Specifies the system disk flavor of the nodes. Changing this will
        create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[str]]:
        """
        Specifies the roles deployed in a node group.This argument is mandatory
        when the cluster type is **CUSTOM**. Each character string represents a role expression.
        """
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[int]:
        """
        Specifies the data disk size of the nodes,in GB. The value range is 10
        to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
        cluster resource.
        """
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[str]:
        """
        Specifies the data disk flavor of the nodes.
        Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
        The following disk types are supported:
        + **SATA**: common I/O disk.
        + **SAS**: high I/O disk.
        + **SSD**: ultra-high I/O disk.
        """
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[str]]:
        """
        The host list of this nodes group in the cluster.
        * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
        * `bootstrap_scripts/state` - The status of one bootstrap action script.
        The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class ClusterExternalDatasource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentName":
            suggest = "component_name"
        elif key == "roleType":
            suggest = "role_type"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "dataConnectionId":
            suggest = "data_connection_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterExternalDatasource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterExternalDatasource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterExternalDatasource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_name: str,
                 role_type: str,
                 source_type: str,
                 data_connection_id: Optional[str] = None):
        """
        :param str component_name: Specifies the component name. The valid values are `Hive` and `Ranger`.
               Changing this will create a new MapReduce cluster resource.
        :param str role_type: Specifies the component role type.
               The options are as follows:
               + **hive_metastore**: Hive Metastore role.
               + **ranger_data**: Ranger role.
        :param str source_type: Specifies the data connection type.
               The options are as follows:
               + **LOCAL_DB**: Local metadata.
               + **RDS_POSTGRES**: RDS PostgreSQL database.
               + **RDS_MYSQL**: RDS MySQL database.
               + **gaussdb-mysql**: GaussDB(for MySQL).
        :param str data_connection_id: Specifies the data connection ID.
               This parameter is mandatory if `source_type` is not **LOCAL_DB**.
               Changing this will create a new MapReduce cluster resource.
        """
        pulumi.set(__self__, "component_name", component_name)
        pulumi.set(__self__, "role_type", role_type)
        pulumi.set(__self__, "source_type", source_type)
        if data_connection_id is not None:
            pulumi.set(__self__, "data_connection_id", data_connection_id)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> str:
        """
        Specifies the component name. The valid values are `Hive` and `Ranger`.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> str:
        """
        Specifies the component role type.
        The options are as follows:
        + **hive_metastore**: Hive Metastore role.
        + **ranger_data**: Ranger role.
        """
        return pulumi.get(self, "role_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        Specifies the data connection type.
        The options are as follows:
        + **LOCAL_DB**: Local metadata.
        + **RDS_POSTGRES**: RDS PostgreSQL database.
        + **RDS_MYSQL**: RDS MySQL database.
        + **gaussdb-mysql**: GaussDB(for MySQL).
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="dataConnectionId")
    def data_connection_id(self) -> Optional[str]:
        """
        Specifies the data connection ID.
        This parameter is mandatory if `source_type` is not **LOCAL_DB**.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "data_connection_id")


@pulumi.output_type
class ClusterMasterNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMasterNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMasterNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMasterNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: int,
                 flavor: str,
                 node_number: int,
                 root_volume_size: int,
                 root_volume_type: str,
                 assigned_roles: Optional[Sequence[str]] = None,
                 data_volume_size: Optional[int] = None,
                 data_volume_type: Optional[str] = None,
                 host_ips: Optional[Sequence[str]] = None):
        """
        :param int data_volume_count: Specifies the data disk number of the nodes.  
               The valid value is `1`.
               Changing this will create a new MapReduce cluster resource.
        :param str flavor: Specifies the instance specifications for each nodes in node group.
               Changing this will create a new MapReduce cluster resource.
        :param int node_number: Specifies the number of nodes for the node group.  
               Changing this will create a new MapReduce cluster resource.
        :param int root_volume_size: Specifies the system disk size of the nodes. Changing this will create
               a new MapReduce cluster resource.
        :param str root_volume_type: Specifies the system disk flavor of the nodes. Changing this will
               create a new MapReduce cluster resource.
        :param Sequence[str] assigned_roles: Specifies the roles deployed in a node group.This argument is mandatory
               when the cluster type is **CUSTOM**. Each character string represents a role expression.
        :param int data_volume_size: Specifies the data disk size of the nodes,in GB. The value range is 10
               to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
               cluster resource.
        :param str data_volume_type: Specifies the data disk flavor of the nodes.
               Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
               The following disk types are supported:
               + **SATA**: common I/O disk.
               + **SAS**: high I/O disk.
               + **SSD**: ultra-high I/O disk.
        :param Sequence[str] host_ips: The host list of this nodes group in the cluster.
               * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
               * `bootstrap_scripts/state` - The status of one bootstrap action script.
               The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> int:
        """
        Specifies the data disk number of the nodes.  
        The valid value is `1`.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> str:
        """
        Specifies the instance specifications for each nodes in node group.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> int:
        """
        Specifies the number of nodes for the node group.  
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> int:
        """
        Specifies the system disk size of the nodes. Changing this will create
        a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> str:
        """
        Specifies the system disk flavor of the nodes. Changing this will
        create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[str]]:
        """
        Specifies the roles deployed in a node group.This argument is mandatory
        when the cluster type is **CUSTOM**. Each character string represents a role expression.
        """
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[int]:
        """
        Specifies the data disk size of the nodes,in GB. The value range is 10
        to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
        cluster resource.
        """
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[str]:
        """
        Specifies the data disk flavor of the nodes.
        Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
        The following disk types are supported:
        + **SATA**: common I/O disk.
        + **SAS**: high I/O disk.
        + **SSD**: ultra-high I/O disk.
        """
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[str]]:
        """
        The host list of this nodes group in the cluster.
        * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
        * `bootstrap_scripts/state` - The status of one bootstrap action script.
        The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class ClusterSmnNotify(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subscriptionName":
            suggest = "subscription_name"
        elif key == "topicUrn":
            suggest = "topic_urn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterSmnNotify. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterSmnNotify.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterSmnNotify.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subscription_name: str,
                 topic_urn: str):
        """
        :param str subscription_name: Specifies the subscription rule name.
               Changing this will create a new MapReduce cluster resource.
        :param str topic_urn: Specifies the Uniform Resource Name (URN) of the topic.
               Changing this will create a new MapReduce cluster resource.
        """
        pulumi.set(__self__, "subscription_name", subscription_name)
        pulumi.set(__self__, "topic_urn", topic_urn)

    @property
    @pulumi.getter(name="subscriptionName")
    def subscription_name(self) -> str:
        """
        Specifies the subscription rule name.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "subscription_name")

    @property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> str:
        """
        Specifies the Uniform Resource Name (URN) of the topic.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "topic_urn")


@pulumi.output_type
class ClusterStreamingCoreNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterStreamingCoreNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterStreamingCoreNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterStreamingCoreNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: int,
                 flavor: str,
                 node_number: int,
                 root_volume_size: int,
                 root_volume_type: str,
                 assigned_roles: Optional[Sequence[str]] = None,
                 data_volume_size: Optional[int] = None,
                 data_volume_type: Optional[str] = None,
                 host_ips: Optional[Sequence[str]] = None):
        """
        :param int data_volume_count: Specifies the data disk number of the nodes.  
               The valid value is `1`.
               Changing this will create a new MapReduce cluster resource.
        :param str flavor: Specifies the instance specifications for each nodes in node group.
               Changing this will create a new MapReduce cluster resource.
        :param int node_number: Specifies the number of nodes for the node group.  
               Changing this will create a new MapReduce cluster resource.
        :param int root_volume_size: Specifies the system disk size of the nodes. Changing this will create
               a new MapReduce cluster resource.
        :param str root_volume_type: Specifies the system disk flavor of the nodes. Changing this will
               create a new MapReduce cluster resource.
        :param Sequence[str] assigned_roles: Specifies the roles deployed in a node group.This argument is mandatory
               when the cluster type is **CUSTOM**. Each character string represents a role expression.
        :param int data_volume_size: Specifies the data disk size of the nodes,in GB. The value range is 10
               to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
               cluster resource.
        :param str data_volume_type: Specifies the data disk flavor of the nodes.
               Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
               The following disk types are supported:
               + **SATA**: common I/O disk.
               + **SAS**: high I/O disk.
               + **SSD**: ultra-high I/O disk.
        :param Sequence[str] host_ips: The host list of this nodes group in the cluster.
               * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
               * `bootstrap_scripts/state` - The status of one bootstrap action script.
               The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> int:
        """
        Specifies the data disk number of the nodes.  
        The valid value is `1`.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> str:
        """
        Specifies the instance specifications for each nodes in node group.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> int:
        """
        Specifies the number of nodes for the node group.  
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> int:
        """
        Specifies the system disk size of the nodes. Changing this will create
        a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> str:
        """
        Specifies the system disk flavor of the nodes. Changing this will
        create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[str]]:
        """
        Specifies the roles deployed in a node group.This argument is mandatory
        when the cluster type is **CUSTOM**. Each character string represents a role expression.
        """
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[int]:
        """
        Specifies the data disk size of the nodes,in GB. The value range is 10
        to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
        cluster resource.
        """
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[str]:
        """
        Specifies the data disk flavor of the nodes.
        Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
        The following disk types are supported:
        + **SATA**: common I/O disk.
        + **SAS**: high I/O disk.
        + **SSD**: ultra-high I/O disk.
        """
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[str]]:
        """
        The host list of this nodes group in the cluster.
        * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
        * `bootstrap_scripts/state` - The status of one bootstrap action script.
        The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        return pulumi.get(self, "host_ips")


@pulumi.output_type
class ClusterStreamingTaskNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeCount":
            suggest = "data_volume_count"
        elif key == "nodeNumber":
            suggest = "node_number"
        elif key == "rootVolumeSize":
            suggest = "root_volume_size"
        elif key == "rootVolumeType":
            suggest = "root_volume_type"
        elif key == "assignedRoles":
            suggest = "assigned_roles"
        elif key == "dataVolumeSize":
            suggest = "data_volume_size"
        elif key == "dataVolumeType":
            suggest = "data_volume_type"
        elif key == "hostIps":
            suggest = "host_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterStreamingTaskNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterStreamingTaskNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterStreamingTaskNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_count: int,
                 flavor: str,
                 node_number: int,
                 root_volume_size: int,
                 root_volume_type: str,
                 assigned_roles: Optional[Sequence[str]] = None,
                 data_volume_size: Optional[int] = None,
                 data_volume_type: Optional[str] = None,
                 host_ips: Optional[Sequence[str]] = None):
        """
        :param int data_volume_count: Specifies the data disk number of the nodes.  
               The valid value is `1`.
               Changing this will create a new MapReduce cluster resource.
        :param str flavor: Specifies the instance specifications for each nodes in node group.
               Changing this will create a new MapReduce cluster resource.
        :param int node_number: Specifies the number of nodes for the node group.  
               Changing this will create a new MapReduce cluster resource.
        :param int root_volume_size: Specifies the system disk size of the nodes. Changing this will create
               a new MapReduce cluster resource.
        :param str root_volume_type: Specifies the system disk flavor of the nodes. Changing this will
               create a new MapReduce cluster resource.
        :param Sequence[str] assigned_roles: Specifies the roles deployed in a node group.This argument is mandatory
               when the cluster type is **CUSTOM**. Each character string represents a role expression.
        :param int data_volume_size: Specifies the data disk size of the nodes,in GB. The value range is 10
               to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
               cluster resource.
        :param str data_volume_type: Specifies the data disk flavor of the nodes.
               Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
               The following disk types are supported:
               + **SATA**: common I/O disk.
               + **SAS**: high I/O disk.
               + **SSD**: ultra-high I/O disk.
        :param Sequence[str] host_ips: The host list of this nodes group in the cluster.
               * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
               * `bootstrap_scripts/state` - The status of one bootstrap action script.
               The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        pulumi.set(__self__, "data_volume_count", data_volume_count)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "node_number", node_number)
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if assigned_roles is not None:
            pulumi.set(__self__, "assigned_roles", assigned_roles)
        if data_volume_size is not None:
            pulumi.set(__self__, "data_volume_size", data_volume_size)
        if data_volume_type is not None:
            pulumi.set(__self__, "data_volume_type", data_volume_type)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)

    @property
    @pulumi.getter(name="dataVolumeCount")
    def data_volume_count(self) -> int:
        """
        Specifies the data disk number of the nodes.  
        The valid value is `1`.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "data_volume_count")

    @property
    @pulumi.getter
    def flavor(self) -> str:
        """
        Specifies the instance specifications for each nodes in node group.
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> int:
        """
        Specifies the number of nodes for the node group.  
        Changing this will create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "node_number")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> int:
        """
        Specifies the system disk size of the nodes. Changing this will create
        a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> str:
        """
        Specifies the system disk flavor of the nodes. Changing this will
        create a new MapReduce cluster resource.
        """
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="assignedRoles")
    def assigned_roles(self) -> Optional[Sequence[str]]:
        """
        Specifies the roles deployed in a node group.This argument is mandatory
        when the cluster type is **CUSTOM**. Each character string represents a role expression.
        """
        return pulumi.get(self, "assigned_roles")

    @property
    @pulumi.getter(name="dataVolumeSize")
    def data_volume_size(self) -> Optional[int]:
        """
        Specifies the data disk size of the nodes,in GB. The value range is 10
        to 32768. Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce
        cluster resource.
        """
        return pulumi.get(self, "data_volume_size")

    @property
    @pulumi.getter(name="dataVolumeType")
    def data_volume_type(self) -> Optional[str]:
        """
        Specifies the data disk flavor of the nodes.
        Required if `data_volume_count` is greater than zero. Changing this will create a new MapReduce cluster resource.
        The following disk types are supported:
        + **SATA**: common I/O disk.
        + **SAS**: high I/O disk.
        + **SSD**: ultra-high I/O disk.
        """
        return pulumi.get(self, "data_volume_type")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[str]]:
        """
        The host list of this nodes group in the cluster.
        * `bootstrap_scripts/start_time` - The execution time of one bootstrap action script, in RFC-3339 format.
        * `bootstrap_scripts/state` - The status of one bootstrap action script.
        The valid value are **PENDING**, **IN_PROGRESS**, **SUCCESS**, and **FAILURE**.
        """
        return pulumi.get(self, "host_ips")


