# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZoneArgs', 'Zone']

@pulumi.input_type
class ZoneArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_pattern: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 zone_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Zone resource.
        :param pulumi.Input[str] description: Specifies the description of the zone.  
               A maximum of `255` characters are allowed.
        :param pulumi.Input[str] email: Specifies the email address of the administrator managing the zone.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the zone.  
               Changing this parameter will create a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[str] name: Specifies the name of the zone. Note the `.` at the end of the name.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] proxy_pattern: Specifies the recursive resolution proxy mode for subdomains of
               the private zone.
               Defaults to **AUTHORITY**.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
               + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]] routers: Specifies the list of the router of the zone.
               Router configuration block which is required if zone_type is private.
               The router structure is documented below.
        :param pulumi.Input[str] status: Specifies the status of the zone, defaults to **ENABLE**.  
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the zone.
        :param pulumi.Input[int] ttl: Specifies the time to live (TTL) of the zone, defaults to `300`.  
               The valid value is range from `1` to `2,147,483,647`.
        :param pulumi.Input[str] zone_type: Specifies the type of zone, defaults to **public**.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **public**
               + **private**
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_pattern is not None:
            pulumi.set(__self__, "proxy_pattern", proxy_pattern)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routers is not None:
            pulumi.set(__self__, "routers", routers)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if zone_type is not None:
            pulumi.set(__self__, "zone_type", zone_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the zone.  
        A maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the zone.  
        Changing this parameter will create a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the zone. Note the `.` at the end of the name.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the recursive resolution proxy mode for subdomains of
        the private zone.
        Defaults to **AUTHORITY**.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
        + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
        """
        return pulumi.get(self, "proxy_pattern")

    @proxy_pattern.setter
    def proxy_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_pattern", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def routers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]]:
        """
        Specifies the list of the router of the zone.
        Router configuration block which is required if zone_type is private.
        The router structure is documented below.
        """
        return pulumi.get(self, "routers")

    @routers.setter
    def routers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]]):
        pulumi.set(self, "routers", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the status of the zone, defaults to **ENABLE**.  
        The valid values are as follows:
        + **ENABLE**
        + **DISABLE**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the zone.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the time to live (TTL) of the zone, defaults to `300`.  
        The valid value is range from `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of zone, defaults to **public**.  
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **public**
        + **private**
        """
        return pulumi.get(self, "zone_type")

    @zone_type.setter
    def zone_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_type", value)


@pulumi.input_type
class _ZoneState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 masters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_pattern: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 zone_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Zone resources.
        :param pulumi.Input[str] description: Specifies the description of the zone.  
               A maximum of `255` characters are allowed.
        :param pulumi.Input[str] email: Specifies the email address of the administrator managing the zone.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the zone.  
               Changing this parameter will create a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] masters: The list of the masters of the DNS server.
        :param pulumi.Input[str] name: Specifies the name of the zone. Note the `.` at the end of the name.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] proxy_pattern: Specifies the recursive resolution proxy mode for subdomains of
               the private zone.
               Defaults to **AUTHORITY**.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
               + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]] routers: Specifies the list of the router of the zone.
               Router configuration block which is required if zone_type is private.
               The router structure is documented below.
        :param pulumi.Input[str] status: Specifies the status of the zone, defaults to **ENABLE**.  
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the zone.
        :param pulumi.Input[int] ttl: Specifies the time to live (TTL) of the zone, defaults to `300`.  
               The valid value is range from `1` to `2,147,483,647`.
        :param pulumi.Input[str] zone_type: Specifies the type of zone, defaults to **public**.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **public**
               + **private**
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if masters is not None:
            pulumi.set(__self__, "masters", masters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_pattern is not None:
            pulumi.set(__self__, "proxy_pattern", proxy_pattern)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routers is not None:
            pulumi.set(__self__, "routers", routers)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if zone_type is not None:
            pulumi.set(__self__, "zone_type", zone_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the zone.  
        A maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the zone.  
        Changing this parameter will create a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def masters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of the masters of the DNS server.
        """
        return pulumi.get(self, "masters")

    @masters.setter
    def masters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "masters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the zone. Note the `.` at the end of the name.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the recursive resolution proxy mode for subdomains of
        the private zone.
        Defaults to **AUTHORITY**.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
        + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
        """
        return pulumi.get(self, "proxy_pattern")

    @proxy_pattern.setter
    def proxy_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_pattern", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def routers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]]:
        """
        Specifies the list of the router of the zone.
        Router configuration block which is required if zone_type is private.
        The router structure is documented below.
        """
        return pulumi.get(self, "routers")

    @routers.setter
    def routers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneRouterArgs']]]]):
        pulumi.set(self, "routers", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the status of the zone, defaults to **ENABLE**.  
        The valid values are as follows:
        + **ENABLE**
        + **DISABLE**
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the zone.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the time to live (TTL) of the zone, defaults to `300`.  
        The valid value is range from `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of zone, defaults to **public**.  
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **public**
        + **private**
        """
        return pulumi.get(self, "zone_type")

    @zone_type.setter
    def zone_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_type", value)


class Zone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_pattern: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneRouterArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 zone_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a DNS zone resource within HuaweiCloud.

        ## Example Usage
        ### Create a public DNS zone

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        zone_name = config.require_object("zoneName")
        email = config.require_object("email")
        description = config.require_object("description")
        test = huaweicloud.dns.Zone("test",
            email=email,
            zone_type="public",
            ttl=3000,
            description=description)
        ```
        ### Create a private DNS zone

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        zone_name = config.require_object("zoneName")
        email = config.require_object("email")
        description = config.require_object("description")
        router_id = config.require_object("routerId")
        test = huaweicloud.dns.Zone("test",
            email=email,
            zone_type="private",
            ttl=3000,
            description=description,
            routers=[huaweicloud.dns.ZoneRouterArgs(
                router_id=router_id,
            )])
        ```

        ## Import

        This resource can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Dns/zone:Zone test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Specifies the description of the zone.  
               A maximum of `255` characters are allowed.
        :param pulumi.Input[str] email: Specifies the email address of the administrator managing the zone.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the zone.  
               Changing this parameter will create a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[str] name: Specifies the name of the zone. Note the `.` at the end of the name.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] proxy_pattern: Specifies the recursive resolution proxy mode for subdomains of
               the private zone.
               Defaults to **AUTHORITY**.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
               + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneRouterArgs']]]] routers: Specifies the list of the router of the zone.
               Router configuration block which is required if zone_type is private.
               The router structure is documented below.
        :param pulumi.Input[str] status: Specifies the status of the zone, defaults to **ENABLE**.  
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the zone.
        :param pulumi.Input[int] ttl: Specifies the time to live (TTL) of the zone, defaults to `300`.  
               The valid value is range from `1` to `2,147,483,647`.
        :param pulumi.Input[str] zone_type: Specifies the type of zone, defaults to **public**.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **public**
               + **private**
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ZoneArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DNS zone resource within HuaweiCloud.

        ## Example Usage
        ### Create a public DNS zone

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        zone_name = config.require_object("zoneName")
        email = config.require_object("email")
        description = config.require_object("description")
        test = huaweicloud.dns.Zone("test",
            email=email,
            zone_type="public",
            ttl=3000,
            description=description)
        ```
        ### Create a private DNS zone

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        zone_name = config.require_object("zoneName")
        email = config.require_object("email")
        description = config.require_object("description")
        router_id = config.require_object("routerId")
        test = huaweicloud.dns.Zone("test",
            email=email,
            zone_type="private",
            ttl=3000,
            description=description,
            routers=[huaweicloud.dns.ZoneRouterArgs(
                router_id=router_id,
            )])
        ```

        ## Import

        This resource can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Dns/zone:Zone test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_pattern: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneRouterArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 zone_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZoneArgs.__new__(ZoneArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["email"] = email
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["proxy_pattern"] = proxy_pattern
            __props__.__dict__["region"] = region
            __props__.__dict__["routers"] = routers
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["zone_type"] = zone_type
            __props__.__dict__["masters"] = None
        super(Zone, __self__).__init__(
            'huaweicloud:Dns/zone:Zone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            masters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            proxy_pattern: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            routers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneRouterArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            zone_type: Optional[pulumi.Input[str]] = None) -> 'Zone':
        """
        Get an existing Zone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Specifies the description of the zone.  
               A maximum of `255` characters are allowed.
        :param pulumi.Input[str] email: Specifies the email address of the administrator managing the zone.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the zone.  
               Changing this parameter will create a new resource.
               This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] masters: The list of the masters of the DNS server.
        :param pulumi.Input[str] name: Specifies the name of the zone. Note the `.` at the end of the name.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] proxy_pattern: Specifies the recursive resolution proxy mode for subdomains of
               the private zone.
               Defaults to **AUTHORITY**.
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
               + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneRouterArgs']]]] routers: Specifies the list of the router of the zone.
               Router configuration block which is required if zone_type is private.
               The router structure is documented below.
        :param pulumi.Input[str] status: Specifies the status of the zone, defaults to **ENABLE**.  
               The valid values are as follows:
               + **ENABLE**
               + **DISABLE**
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the zone.
        :param pulumi.Input[int] ttl: Specifies the time to live (TTL) of the zone, defaults to `300`.  
               The valid value is range from `1` to `2,147,483,647`.
        :param pulumi.Input[str] zone_type: Specifies the type of zone, defaults to **public**.  
               Changing this parameter will create a new resource.
               The valid values are as follows:
               + **public**
               + **private**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZoneState.__new__(_ZoneState)

        __props__.__dict__["description"] = description
        __props__.__dict__["email"] = email
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["masters"] = masters
        __props__.__dict__["name"] = name
        __props__.__dict__["proxy_pattern"] = proxy_pattern
        __props__.__dict__["region"] = region
        __props__.__dict__["routers"] = routers
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["zone_type"] = zone_type
        return Zone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the description of the zone.  
        A maximum of `255` characters are allowed.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        Specifies the email address of the administrator managing the zone.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[str]:
        """
        Specifies the enterprise project ID of the zone.  
        Changing this parameter will create a new resource.
        This parameter is only valid for enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def masters(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of the masters of the DNS server.
        """
        return pulumi.get(self, "masters")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the zone. Note the `.` at the end of the name.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="proxyPattern")
    def proxy_pattern(self) -> pulumi.Output[str]:
        """
        Specifies the recursive resolution proxy mode for subdomains of
        the private zone.
        Defaults to **AUTHORITY**.
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **AUTHORITY**: The recursive resolution proxy is disabled for the private zone.
        + **RECURSIVE**: The recursive resolution proxy is enabled for the private zone.
        """
        return pulumi.get(self, "proxy_pattern")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def routers(self) -> pulumi.Output[Optional[Sequence['outputs.ZoneRouter']]]:
        """
        Specifies the list of the router of the zone.
        Router configuration block which is required if zone_type is private.
        The router structure is documented below.
        """
        return pulumi.get(self, "routers")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Specifies the status of the zone, defaults to **ENABLE**.  
        The valid values are as follows:
        + **ENABLE**
        + **DISABLE**
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies the key/value pairs to associate with the zone.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the time to live (TTL) of the zone, defaults to `300`.  
        The valid value is range from `1` to `2,147,483,647`.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the type of zone, defaults to **public**.  
        Changing this parameter will create a new resource.
        The valid values are as follows:
        + **public**
        + **private**
        """
        return pulumi.get(self, "zone_type")

