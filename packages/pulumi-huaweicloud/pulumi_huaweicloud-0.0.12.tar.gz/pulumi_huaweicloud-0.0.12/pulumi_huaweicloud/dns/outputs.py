# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ZoneRouter',
]

@pulumi.output_type
class ZoneRouter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routerId":
            suggest = "router_id"
        elif key == "routerRegion":
            suggest = "router_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneRouter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneRouter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneRouter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 router_id: str,
                 router_region: Optional[str] = None):
        """
        :param str router_id: Specifies the ID of the associated VPC.
        :param str router_region: Specifies the region of the VPC.
        """
        pulumi.set(__self__, "router_id", router_id)
        if router_region is not None:
            pulumi.set(__self__, "router_region", router_region)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> str:
        """
        Specifies the ID of the associated VPC.
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="routerRegion")
    def router_region(self) -> Optional[str]:
        """
        Specifies the region of the VPC.
        """
        return pulumi.get(self, "router_region")


