# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'NotificationFilter',
    'NotificationOperation',
    'NotificationOperationUser',
]

@pulumi.output_type
class NotificationFilter(dict):
    def __init__(__self__, *,
                 condition: str,
                 rules: Sequence[str]):
        """
        :param str condition: Specifies the relationship between multiple rules. The valid values are as follows:
               + **AND**: Effective after all filtering conditions are met.
               + **OR**: Effective when any one of the conditions is met.
        :param Sequence[str] rules: Specifies an array of filtering rules. It consists of three parts,
               the first part is the **key**, the second part is the **rule**, and the third part is the **value**,
               the format is: **key != value**.
               + The **key** can be: **api_version**, **code**, **trace_rating**, **trace_type**, **resource_id** and
               **resource_name**.
               When the key is **api_version**, the value needs to follow the regular constraint: **^ (a-zA-Z0-9_ -.) {1,64}$**.
               When the key is **code**, the length range of value is from `1` to `256`.
               When the key is **trace_rating**, the value can be **normal**, **warning** or **incident**.
               When the key is **trace_type**, the value can be **ConsoleAction**, **ApiCall** or **SystemAction**.
               When the key is **resource_id**, the length range of value is from `1` to `350`.
               When the key is **resource_name**, the length range of value is from `1` to `256`.
               + The **rule** can be: **!=** or **=**.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Specifies the relationship between multiple rules. The valid values are as follows:
        + **AND**: Effective after all filtering conditions are met.
        + **OR**: Effective when any one of the conditions is met.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def rules(self) -> Sequence[str]:
        """
        Specifies an array of filtering rules. It consists of three parts,
        the first part is the **key**, the second part is the **rule**, and the third part is the **value**,
        the format is: **key != value**.
        + The **key** can be: **api_version**, **code**, **trace_rating**, **trace_type**, **resource_id** and
        **resource_name**.
        When the key is **api_version**, the value needs to follow the regular constraint: **^ (a-zA-Z0-9_ -.) {1,64}$**.
        When the key is **code**, the length range of value is from `1` to `256`.
        When the key is **trace_rating**, the value can be **normal**, **warning** or **incident**.
        When the key is **trace_type**, the value can be **ConsoleAction**, **ApiCall** or **SystemAction**.
        When the key is **resource_id**, the length range of value is from `1` to `350`.
        When the key is **resource_name**, the length range of value is from `1` to `256`.
        + The **rule** can be: **!=** or **=**.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class NotificationOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "traceNames":
            suggest = "trace_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource: str,
                 service: str,
                 trace_names: Sequence[str]):
        """
        :param str resource: Specifies the resource type.
        :param str service: Specifies the cloud service.
        :param Sequence[str] trace_names: Specifies an array of trace names.
        """
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "trace_names", trace_names)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Specifies the resource type.
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Specifies the cloud service.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="traceNames")
    def trace_names(self) -> Sequence[str]:
        """
        Specifies an array of trace names.
        """
        return pulumi.get(self, "trace_names")


@pulumi.output_type
class NotificationOperationUser(dict):
    def __init__(__self__, *,
                 group: str,
                 users: Sequence[str]):
        """
        :param str group: Specifies the IAM user group name.
        :param Sequence[str] users: Specifies an array of IAM users in the group.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Specifies the IAM user group name.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def users(self) -> Sequence[str]:
        """
        Specifies an array of IAM users in the group.
        """
        return pulumi.get(self, "users")


