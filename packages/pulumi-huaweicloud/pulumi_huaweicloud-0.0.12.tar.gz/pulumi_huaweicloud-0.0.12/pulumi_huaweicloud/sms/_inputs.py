# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'TaskTargetServerDiskArgs',
    'TaskTargetServerDiskPhysicalVolumeArgs',
]

@pulumi.input_type
class TaskTargetServerDiskArgs:
    def __init__(__self__, *,
                 device_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 size: pulumi.Input[int],
                 disk_id: Optional[pulumi.Input[str]] = None,
                 physical_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskPhysicalVolumeArgs']]]] = None,
                 used_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] device_type: Specifies the partition type. The value can be **NORMAL** and **OS**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] name: Specifies the volume name. In Windows, it indicates the drive letter,
               and in Linux, it indicates the device ID, e.g. "/dev/sda1".
               Changing this parameter will create a new resource.
        :param pulumi.Input[int] size: Specifies the volume size in MB. Changing this parameter will create a new resource.
        :param pulumi.Input[str] disk_id: Specifies the disk index, e.g. "0".
               Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskPhysicalVolumeArgs']]] physical_volumes: Specifies an array of physical volume information.
               The object is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[int] used_size: Specifies the used space in MB.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if physical_volumes is not None:
            pulumi.set(__self__, "physical_volumes", physical_volumes)
        if used_size is not None:
            pulumi.set(__self__, "used_size", used_size)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Input[str]:
        """
        Specifies the partition type. The value can be **NORMAL** and **OS**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the volume name. In Windows, it indicates the drive letter,
        and in Linux, it indicates the device ID, e.g. "/dev/sda1".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        Specifies the volume size in MB. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the disk index, e.g. "0".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="physicalVolumes")
    def physical_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskPhysicalVolumeArgs']]]]:
        """
        Specifies an array of physical volume information.
        The object is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "physical_volumes")

    @physical_volumes.setter
    def physical_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTargetServerDiskPhysicalVolumeArgs']]]]):
        pulumi.set(self, "physical_volumes", value)

    @property
    @pulumi.getter(name="usedSize")
    def used_size(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the used space in MB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "used_size")

    @used_size.setter
    def used_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_size", value)


@pulumi.input_type
class TaskTargetServerDiskPhysicalVolumeArgs:
    def __init__(__self__, *,
                 device_type: pulumi.Input[str],
                 file_system: pulumi.Input[str],
                 index: pulumi.Input[int],
                 mount_point: pulumi.Input[str],
                 name: pulumi.Input[str],
                 size: pulumi.Input[int],
                 used_size: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] device_type: Specifies the partition type. The value can be **NORMAL** and **OS**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] file_system: Specifies the file system type, e.g. "ext4".
               Changing this parameter will create a new resource.
        :param pulumi.Input[int] index: Specifies the serial number of the volume.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] mount_point: Specifies the mount point, e.g. "/".
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] name: Specifies the volume name. In Windows, it indicates the drive letter,
               and in Linux, it indicates the device ID, e.g. "/dev/sda1".
               Changing this parameter will create a new resource.
        :param pulumi.Input[int] size: Specifies the volume size in MB. Changing this parameter will create a new resource.
        :param pulumi.Input[int] used_size: Specifies the used space in MB.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] uuid: Specifies the GUID of the volume.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "file_system", file_system)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "mount_point", mount_point)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if used_size is not None:
            pulumi.set(__self__, "used_size", used_size)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Input[str]:
        """
        Specifies the partition type. The value can be **NORMAL** and **OS**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> pulumi.Input[str]:
        """
        Specifies the file system type, e.g. "ext4".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[int]:
        """
        Specifies the serial number of the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[int]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> pulumi.Input[str]:
        """
        Specifies the mount point, e.g. "/".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "mount_point")

    @mount_point.setter
    def mount_point(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_point", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the volume name. In Windows, it indicates the drive letter,
        and in Linux, it indicates the device ID, e.g. "/dev/sda1".
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        Specifies the volume size in MB. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="usedSize")
    def used_size(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the used space in MB.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "used_size")

    @used_size.setter
    def used_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_size", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the GUID of the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


