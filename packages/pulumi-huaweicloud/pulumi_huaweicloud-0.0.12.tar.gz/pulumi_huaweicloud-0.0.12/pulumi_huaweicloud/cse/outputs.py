# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AlarmruleAlarmAction',
    'AlarmruleCondition',
    'AlarmruleInsufficientdataAction',
    'AlarmruleMetric',
    'AlarmruleMetricDimension',
    'AlarmruleOkAction',
    'AlarmruleResource',
    'AlarmruleResourceDimension',
    'MicroserviceEngineConfigCenterAddress',
    'MicroserviceEngineServiceRegistryAddress',
    'MicroserviceInstanceDataCenter',
    'MicroserviceInstanceHealthCheck',
]

@pulumi.output_type
class AlarmruleAlarmAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleAlarmAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleAlarmAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleAlarmAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[str],
                 type: str):
        """
        :param Sequence[str] notification_lists: specifies the list of objects to be notified if the alarm status changes, the
               maximum length is 5.
        :param str type: Specifies the type of action triggered by an alarm. the value is notification.
               notification: indicates that a notification will be sent to the user.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[str]:
        """
        specifies the list of objects to be notified if the alarm status changes, the
        maximum length is 5.
        """
        return pulumi.get(self, "notification_lists")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of action triggered by an alarm. the value is notification.
        notification: indicates that a notification will be sent to the user.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmruleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonOperator":
            suggest = "comparison_operator"
        elif key == "alarmLevel":
            suggest = "alarm_level"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "suppressDuration":
            suggest = "suppress_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_operator: str,
                 count: int,
                 filter: str,
                 period: int,
                 value: float,
                 alarm_level: Optional[int] = None,
                 metric_name: Optional[str] = None,
                 suppress_duration: Optional[int] = None,
                 unit: Optional[str] = None):
        """
        :param str comparison_operator: Specifies the comparison condition of alarm thresholds. The value can be >,
               =, <, >=, or <=.
        :param int count: Specifies the number of consecutive occurrence times. The value ranges from 1 to 5.
        :param str filter: Specifies the data rollup methods. The value can be max, min, average, sum, and variance.
        :param int period: Specifies the alarm checking period in seconds. The value can be 0, 1, 300, 1200, 3600, 14400,
               and 86400.
        :param float value: Specifies the alarm threshold. The value ranges from 0 to Number of
               1.7976931348623157e+108.
        :param int alarm_level: Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
               which indicates *critical*, *major*, *minor*, and *informational*, respectively.
               The default value is 2.
        :param str metric_name: Specifies the metric name of the condition. The value can be a string of
               1 to 64 characters that must start with a letter and contain only letters, digits, and underscores (_).
               For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        :param int suppress_duration: Specifies the interval for triggering an alarm if the alarm persists.
               Possible values are as follows:
               + **0**: Cloud Eye triggers the alarm only once;
               + **300**: Cloud Eye triggers the alarm every 5 minutes;
               + **600**: Cloud Eye triggers the alarm every 10 minutes;
               + **900**: Cloud Eye triggers the alarm every 15 minutes;
               + **1800**: Cloud Eye triggers the alarm every 30 minutes;
               + **3600**: Cloud Eye triggers the alarm every hour;
               + **10800**: Cloud Eye triggers the alarm every 3 hours;
               + **21600**: Cloud Eye triggers the alarm every 6 hours;
               + **43200**: Cloud Eye triggers the alarm every 12 hour;
               + **86400**: Cloud Eye triggers the alarm every day.
        :param str unit: Specifies the data unit.
               For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "value", value)
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if suppress_duration is not None:
            pulumi.set(__self__, "suppress_duration", suppress_duration)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> str:
        """
        Specifies the comparison condition of alarm thresholds. The value can be >,
        =, <, >=, or <=.
        """
        return pulumi.get(self, "comparison_operator")

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Specifies the number of consecutive occurrence times. The value ranges from 1 to 5.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        Specifies the data rollup methods. The value can be max, min, average, sum, and variance.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Specifies the alarm checking period in seconds. The value can be 0, 1, 300, 1200, 3600, 14400,
        and 86400.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        Specifies the alarm threshold. The value ranges from 0 to Number of
        1.7976931348623157e+108.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[int]:
        """
        Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
        which indicates *critical*, *major*, *minor*, and *informational*, respectively.
        The default value is 2.
        """
        return pulumi.get(self, "alarm_level")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        """
        Specifies the metric name of the condition. The value can be a string of
        1 to 64 characters that must start with a letter and contain only letters, digits, and underscores (_).
        For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> Optional[int]:
        """
        Specifies the interval for triggering an alarm if the alarm persists.
        Possible values are as follows:
        + **0**: Cloud Eye triggers the alarm only once;
        + **300**: Cloud Eye triggers the alarm every 5 minutes;
        + **600**: Cloud Eye triggers the alarm every 10 minutes;
        + **900**: Cloud Eye triggers the alarm every 15 minutes;
        + **1800**: Cloud Eye triggers the alarm every 30 minutes;
        + **3600**: Cloud Eye triggers the alarm every hour;
        + **10800**: Cloud Eye triggers the alarm every 3 hours;
        + **21600**: Cloud Eye triggers the alarm every 6 hours;
        + **43200**: Cloud Eye triggers the alarm every 12 hour;
        + **86400**: Cloud Eye triggers the alarm every day.
        """
        return pulumi.get(self, "suppress_duration")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Specifies the data unit.
        For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class AlarmruleInsufficientdataAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleInsufficientdataAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleInsufficientdataAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleInsufficientdataAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[str],
                 type: str):
        """
        :param Sequence[str] notification_lists: specifies the list of objects to be notified if the alarm status changes, the
               maximum length is 5.
        :param str type: Specifies the type of action triggered by an alarm. the value is notification.
               notification: indicates that a notification will be sent to the user.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[str]:
        """
        specifies the list of objects to be notified if the alarm status changes, the
        maximum length is 5.
        """
        return pulumi.get(self, "notification_lists")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of action triggered by an alarm. the value is notification.
        notification: indicates that a notification will be sent to the user.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmruleMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 dimensions: Optional[Sequence['outputs.AlarmruleMetricDimension']] = None,
                 metric_name: Optional[str] = None):
        """
        :param str namespace: Specifies the namespace in **service.item** format. **service** and **item**
               each must be a string that starts with a letter and contains only letters, digits, and underscores (_).
               Changing this creates a new resource.
               For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        :param Sequence['AlarmruleMetricDimensionArgs'] dimensions: Specifies the list of metric dimensions. The structure is described below.
        :param str metric_name: Specifies the metric name of the condition. The value can be a string of
               1 to 64 characters that must start with a letter and contain only letters, digits, and underscores (_).
               For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        pulumi.set(__self__, "namespace", namespace)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Specifies the namespace in **service.item** format. **service** and **item**
        each must be a string that starts with a letter and contains only letters, digits, and underscores (_).
        Changing this creates a new resource.
        For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.AlarmruleMetricDimension']]:
        """
        Specifies the list of metric dimensions. The structure is described below.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        """
        Specifies the metric name of the condition. The value can be a string of
        1 to 64 characters that must start with a letter and contain only letters, digits, and underscores (_).
        For details, see [Services Interconnected with Cloud Eye](https://support.huaweicloud.com/intl/en-us/api-ces/ces_03_0059.html).
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class AlarmruleMetricDimension(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None):
        """
        :param str name: Specifies the dimension name. The value can be a string of 1 to 32 characters
               that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
        :param str value: Specifies the alarm threshold. The value ranges from 0 to Number of
               1.7976931348623157e+108.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the dimension name. The value can be a string of 1 to 32 characters
        that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Specifies the alarm threshold. The value ranges from 0 to Number of
        1.7976931348623157e+108.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmruleOkAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleOkAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleOkAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleOkAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[str],
                 type: str):
        """
        :param Sequence[str] notification_lists: specifies the list of objects to be notified if the alarm status changes, the
               maximum length is 5.
        :param str type: Specifies the type of action triggered by an alarm. the value is notification.
               notification: indicates that a notification will be sent to the user.
        """
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[str]:
        """
        specifies the list of objects to be notified if the alarm status changes, the
        maximum length is 5.
        """
        return pulumi.get(self, "notification_lists")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of action triggered by an alarm. the value is notification.
        notification: indicates that a notification will be sent to the user.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmruleResource(dict):
    def __init__(__self__, *,
                 dimensions: Optional[Sequence['outputs.AlarmruleResourceDimension']] = None):
        """
        :param Sequence['AlarmruleResourceDimensionArgs'] dimensions: Specifies the list of metric dimensions. The structure is described below.
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.AlarmruleResourceDimension']]:
        """
        Specifies the list of metric dimensions. The structure is described below.
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class AlarmruleResourceDimension(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None):
        """
        :param str name: Specifies the dimension name. The value can be a string of 1 to 32 characters
               that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
        :param str value: Specifies the alarm threshold. The value ranges from 0 to Number of
               1.7976931348623157e+108.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the dimension name. The value can be a string of 1 to 32 characters
        that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Specifies the alarm threshold. The value ranges from 0 to Number of
        1.7976931348623157e+108.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MicroserviceEngineConfigCenterAddress(dict):
    def __init__(__self__, *,
                 private: Optional[str] = None,
                 public: Optional[str] = None):
        """
        :param str private: The internal access address.
        :param str public: The public access address. This address is only set when EIP is bound.
        """
        if private is not None:
            pulumi.set(__self__, "private", private)
        if public is not None:
            pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter
    def private(self) -> Optional[str]:
        """
        The internal access address.
        """
        return pulumi.get(self, "private")

    @property
    @pulumi.getter
    def public(self) -> Optional[str]:
        """
        The public access address. This address is only set when EIP is bound.
        """
        return pulumi.get(self, "public")


@pulumi.output_type
class MicroserviceEngineServiceRegistryAddress(dict):
    def __init__(__self__, *,
                 private: Optional[str] = None,
                 public: Optional[str] = None):
        """
        :param str private: The internal access address.
        :param str public: The public access address. This address is only set when EIP is bound.
        """
        if private is not None:
            pulumi.set(__self__, "private", private)
        if public is not None:
            pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter
    def private(self) -> Optional[str]:
        """
        The internal access address.
        """
        return pulumi.get(self, "private")

    @property
    @pulumi.getter
    def public(self) -> Optional[str]:
        """
        The public access address. This address is only set when EIP is bound.
        """
        return pulumi.get(self, "public")


@pulumi.output_type
class MicroserviceInstanceDataCenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MicroserviceInstanceDataCenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MicroserviceInstanceDataCenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MicroserviceInstanceDataCenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: str,
                 name: str,
                 region: str):
        """
        :param str availability_zone: Specifies the custom availability zone name of the data center.
               Changing this will create a new microservice instance.
        :param str name: Specifies the data center name.
               Changing this will create a new microservice instance.
        :param str region: Specifies the custom region name of the data center.
               Changing this will create a new microservice instance.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        Specifies the custom availability zone name of the data center.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the data center name.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Specifies the custom region name of the data center.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class MicroserviceInstanceHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRetries":
            suggest = "max_retries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MicroserviceInstanceHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MicroserviceInstanceHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MicroserviceInstanceHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: int,
                 max_retries: int,
                 mode: str,
                 port: Optional[int] = None):
        """
        :param int interval: Specifies the heartbeat interval. The unit is **s** (second).
               Changing this will create a new microservice instance.
        :param int max_retries: Specifies the maximum retries.
               Changing this will create a new microservice instance.
        :param str mode: Specifies the heartbeat mode. The valid values are **push** and **pull**.
               Changing this will create a new microservice instance.
        :param int port: Specifies the port number.
               Changing this will create a new microservice instance.
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "mode", mode)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def interval(self) -> int:
        """
        Specifies the heartbeat interval. The unit is **s** (second).
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> int:
        """
        Specifies the maximum retries.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Specifies the heartbeat mode. The valid values are **push** and **pull**.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Specifies the port number.
        Changing this will create a new microservice instance.
        """
        return pulumi.get(self, "port")


