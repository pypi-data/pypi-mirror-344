# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmruleArgs', 'Alarmrule']

@pulumi.input_type
class AlarmruleArgs:
    def __init__(__self__, *,
                 alarm_name: pulumi.Input[str],
                 metric: pulumi.Input['AlarmruleMetricArgs'],
                 alarm_action_enabled: Optional[pulumi.Input[bool]] = None,
                 alarm_actions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleAlarmActionArgs']]]] = None,
                 alarm_description: Optional[pulumi.Input[str]] = None,
                 alarm_enabled: Optional[pulumi.Input[bool]] = None,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 alarm_template_id: Optional[pulumi.Input[str]] = None,
                 alarm_type: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleConditionArgs']]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 insufficientdata_actions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleInsufficientdataActionArgs']]]] = None,
                 notification_begin_time: Optional[pulumi.Input[str]] = None,
                 notification_end_time: Optional[pulumi.Input[str]] = None,
                 ok_actions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleOkActionArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleResourceArgs']]]] = None):
        """
        The set of arguments for constructing a Alarmrule resource.
        :param pulumi.Input[str] alarm_name: Specifies the name of an alarm rule. The value can be a string of `1` to `128`
               characters that can consist of English letters, Chinese characters, digits, underscores (_), hyphens (-).
        :param pulumi.Input['AlarmruleMetricArgs'] metric: Specifies the alarm metrics. The structure is described below. Changing this
               creates a new resource.
        :param pulumi.Input[bool] alarm_action_enabled: Specifies whether to enable the action to be triggered by an alarm. The
               default value is true.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmruleAlarmActionArgs']]] alarm_actions: Specifies the action triggered by an alarm. The structure is described
               below.
        :param pulumi.Input[str] alarm_description: The value can be a string of 0 to 256 characters.
        :param pulumi.Input[bool] alarm_enabled: Specifies whether to enable the alarm. The default value is true.
        :param pulumi.Input[int] alarm_level: Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
               which indicates *critical*, *major*, *minor*, and *informational*, respectively.
               The default value is 2.
        :param pulumi.Input[str] alarm_template_id: Specifies the ID of the alarm template.
               When using `alarm_template_id`, the fields `alarm_name`, `alarm_description`, `alarm_action_enabled`, `alarm_actions`
               and `ok_actions` cannot be updated.
               Changing this creates a new resource.
        :param pulumi.Input[str] alarm_type: Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
               **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmruleConditionArgs']]] conditions: Specifies the alarm triggering condition.
               The condition structure is documented below.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the alarm rule.
        :param pulumi.Input[str] notification_begin_time: Specifies the alarm notification start time, for
               example: **05:30**. Changing this creates a new resource.
        :param pulumi.Input[str] notification_end_time: Specifies the alarm notification stop time, for
               example: **22:10**. Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmruleOkActionArgs']]] ok_actions: Specifies the action triggered by the clearing of an alarm. The structure is
               described below.
        :param pulumi.Input[str] region: The region in which to create the alarm rule resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[str] resource_group_id: schema: Internal
        :param pulumi.Input[Sequence[pulumi.Input['AlarmruleResourceArgs']]] resources: Specifies the list of the resources to add into the alarm rule.
               The structure is described below.
        """
        pulumi.set(__self__, "alarm_name", alarm_name)
        pulumi.set(__self__, "metric", metric)
        if alarm_action_enabled is not None:
            pulumi.set(__self__, "alarm_action_enabled", alarm_action_enabled)
        if alarm_actions is not None:
            pulumi.set(__self__, "alarm_actions", alarm_actions)
        if alarm_description is not None:
            pulumi.set(__self__, "alarm_description", alarm_description)
        if alarm_enabled is not None:
            pulumi.set(__self__, "alarm_enabled", alarm_enabled)
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if alarm_template_id is not None:
            pulumi.set(__self__, "alarm_template_id", alarm_template_id)
        if alarm_type is not None:
            pulumi.set(__self__, "alarm_type", alarm_type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if insufficientdata_actions is not None:
            warnings.warn("""insufficientdata_actions is deprecated""", DeprecationWarning)
            pulumi.log.warn("""insufficientdata_actions is deprecated: insufficientdata_actions is deprecated""")
        if insufficientdata_actions is not None:
            pulumi.set(__self__, "insufficientdata_actions", insufficientdata_actions)
        if notification_begin_time is not None:
            pulumi.set(__self__, "notification_begin_time", notification_begin_time)
        if notification_end_time is not None:
            pulumi.set(__self__, "notification_end_time", notification_end_time)
        if ok_actions is not None:
            pulumi.set(__self__, "ok_actions", ok_actions)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an alarm rule. The value can be a string of `1` to `128`
        characters that can consist of English letters, Chinese characters, digits, underscores (_), hyphens (-).
        """
        return pulumi.get(self, "alarm_name")

    @alarm_name.setter
    def alarm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "alarm_name", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input['AlarmruleMetricArgs']:
        """
        Specifies the alarm metrics. The structure is described below. Changing this
        creates a new resource.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input['AlarmruleMetricArgs']):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="alarmActionEnabled")
    def alarm_action_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable the action to be triggered by an alarm. The
        default value is true.
        """
        return pulumi.get(self, "alarm_action_enabled")

    @alarm_action_enabled.setter
    def alarm_action_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alarm_action_enabled", value)

    @property
    @pulumi.getter(name="alarmActions")
    def alarm_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleAlarmActionArgs']]]]:
        """
        Specifies the action triggered by an alarm. The structure is described
        below.
        """
        return pulumi.get(self, "alarm_actions")

    @alarm_actions.setter
    def alarm_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleAlarmActionArgs']]]]):
        pulumi.set(self, "alarm_actions", value)

    @property
    @pulumi.getter(name="alarmDescription")
    def alarm_description(self) -> Optional[pulumi.Input[str]]:
        """
        The value can be a string of 0 to 256 characters.
        """
        return pulumi.get(self, "alarm_description")

    @alarm_description.setter
    def alarm_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_description", value)

    @property
    @pulumi.getter(name="alarmEnabled")
    def alarm_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable the alarm. The default value is true.
        """
        return pulumi.get(self, "alarm_enabled")

    @alarm_enabled.setter
    def alarm_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alarm_enabled", value)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
        which indicates *critical*, *major*, *minor*, and *informational*, respectively.
        The default value is 2.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alarm_level", value)

    @property
    @pulumi.getter(name="alarmTemplateId")
    def alarm_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the alarm template.
        When using `alarm_template_id`, the fields `alarm_name`, `alarm_description`, `alarm_action_enabled`, `alarm_actions`
        and `ok_actions` cannot be updated.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "alarm_template_id")

    @alarm_template_id.setter
    def alarm_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_template_id", value)

    @property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
        **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
        """
        return pulumi.get(self, "alarm_type")

    @alarm_type.setter
    def alarm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_type", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleConditionArgs']]]]:
        """
        Specifies the alarm triggering condition.
        The condition structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the alarm rule.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="insufficientdataActions")
    def insufficientdata_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleInsufficientdataActionArgs']]]]:
        return pulumi.get(self, "insufficientdata_actions")

    @insufficientdata_actions.setter
    def insufficientdata_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleInsufficientdataActionArgs']]]]):
        pulumi.set(self, "insufficientdata_actions", value)

    @property
    @pulumi.getter(name="notificationBeginTime")
    def notification_begin_time(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the alarm notification start time, for
        example: **05:30**. Changing this creates a new resource.
        """
        return pulumi.get(self, "notification_begin_time")

    @notification_begin_time.setter
    def notification_begin_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_begin_time", value)

    @property
    @pulumi.getter(name="notificationEndTime")
    def notification_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the alarm notification stop time, for
        example: **22:10**. Changing this creates a new resource.
        """
        return pulumi.get(self, "notification_end_time")

    @notification_end_time.setter
    def notification_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_end_time", value)

    @property
    @pulumi.getter(name="okActions")
    def ok_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleOkActionArgs']]]]:
        """
        Specifies the action triggered by the clearing of an alarm. The structure is
        described below.
        """
        return pulumi.get(self, "ok_actions")

    @ok_actions.setter
    def ok_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleOkActionArgs']]]]):
        pulumi.set(self, "ok_actions", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region in which to create the alarm rule resource. If omitted, the
        provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_id", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleResourceArgs']]]]:
        """
        Specifies the list of the resources to add into the alarm rule.
        The structure is described below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleResourceArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class _AlarmruleState:
    def __init__(__self__, *,
                 alarm_action_enabled: Optional[pulumi.Input[bool]] = None,
                 alarm_actions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleAlarmActionArgs']]]] = None,
                 alarm_description: Optional[pulumi.Input[str]] = None,
                 alarm_enabled: Optional[pulumi.Input[bool]] = None,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 alarm_name: Optional[pulumi.Input[str]] = None,
                 alarm_state: Optional[pulumi.Input[str]] = None,
                 alarm_template_id: Optional[pulumi.Input[str]] = None,
                 alarm_type: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleConditionArgs']]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 insufficientdata_actions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleInsufficientdataActionArgs']]]] = None,
                 metric: Optional[pulumi.Input['AlarmruleMetricArgs']] = None,
                 notification_begin_time: Optional[pulumi.Input[str]] = None,
                 notification_end_time: Optional[pulumi.Input[str]] = None,
                 ok_actions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleOkActionArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleResourceArgs']]]] = None,
                 update_time: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Alarmrule resources.
        :param pulumi.Input[bool] alarm_action_enabled: Specifies whether to enable the action to be triggered by an alarm. The
               default value is true.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmruleAlarmActionArgs']]] alarm_actions: Specifies the action triggered by an alarm. The structure is described
               below.
        :param pulumi.Input[str] alarm_description: The value can be a string of 0 to 256 characters.
        :param pulumi.Input[bool] alarm_enabled: Specifies whether to enable the alarm. The default value is true.
        :param pulumi.Input[int] alarm_level: Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
               which indicates *critical*, *major*, *minor*, and *informational*, respectively.
               The default value is 2.
        :param pulumi.Input[str] alarm_name: Specifies the name of an alarm rule. The value can be a string of `1` to `128`
               characters that can consist of English letters, Chinese characters, digits, underscores (_), hyphens (-).
        :param pulumi.Input[str] alarm_state: Indicates the alarm status. The value can be:
               + ok: The alarm status is normal;
               + alarm: An alarm is generated;
               + insufficient_data: The required data is insufficient.
        :param pulumi.Input[str] alarm_template_id: Specifies the ID of the alarm template.
               When using `alarm_template_id`, the fields `alarm_name`, `alarm_description`, `alarm_action_enabled`, `alarm_actions`
               and `ok_actions` cannot be updated.
               Changing this creates a new resource.
        :param pulumi.Input[str] alarm_type: Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
               **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmruleConditionArgs']]] conditions: Specifies the alarm triggering condition.
               The condition structure is documented below.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the alarm rule.
        :param pulumi.Input['AlarmruleMetricArgs'] metric: Specifies the alarm metrics. The structure is described below. Changing this
               creates a new resource.
        :param pulumi.Input[str] notification_begin_time: Specifies the alarm notification start time, for
               example: **05:30**. Changing this creates a new resource.
        :param pulumi.Input[str] notification_end_time: Specifies the alarm notification stop time, for
               example: **22:10**. Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmruleOkActionArgs']]] ok_actions: Specifies the action triggered by the clearing of an alarm. The structure is
               described below.
        :param pulumi.Input[str] region: The region in which to create the alarm rule resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[str] resource_group_id: schema: Internal
        :param pulumi.Input[Sequence[pulumi.Input['AlarmruleResourceArgs']]] resources: Specifies the list of the resources to add into the alarm rule.
               The structure is described below.
        :param pulumi.Input[int] update_time: Indicates the time when the alarm status changed. The value is a UNIX timestamp and the unit is ms.
        """
        if alarm_action_enabled is not None:
            pulumi.set(__self__, "alarm_action_enabled", alarm_action_enabled)
        if alarm_actions is not None:
            pulumi.set(__self__, "alarm_actions", alarm_actions)
        if alarm_description is not None:
            pulumi.set(__self__, "alarm_description", alarm_description)
        if alarm_enabled is not None:
            pulumi.set(__self__, "alarm_enabled", alarm_enabled)
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if alarm_name is not None:
            pulumi.set(__self__, "alarm_name", alarm_name)
        if alarm_state is not None:
            pulumi.set(__self__, "alarm_state", alarm_state)
        if alarm_template_id is not None:
            pulumi.set(__self__, "alarm_template_id", alarm_template_id)
        if alarm_type is not None:
            pulumi.set(__self__, "alarm_type", alarm_type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if insufficientdata_actions is not None:
            warnings.warn("""insufficientdata_actions is deprecated""", DeprecationWarning)
            pulumi.log.warn("""insufficientdata_actions is deprecated: insufficientdata_actions is deprecated""")
        if insufficientdata_actions is not None:
            pulumi.set(__self__, "insufficientdata_actions", insufficientdata_actions)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if notification_begin_time is not None:
            pulumi.set(__self__, "notification_begin_time", notification_begin_time)
        if notification_end_time is not None:
            pulumi.set(__self__, "notification_end_time", notification_end_time)
        if ok_actions is not None:
            pulumi.set(__self__, "ok_actions", ok_actions)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="alarmActionEnabled")
    def alarm_action_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable the action to be triggered by an alarm. The
        default value is true.
        """
        return pulumi.get(self, "alarm_action_enabled")

    @alarm_action_enabled.setter
    def alarm_action_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alarm_action_enabled", value)

    @property
    @pulumi.getter(name="alarmActions")
    def alarm_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleAlarmActionArgs']]]]:
        """
        Specifies the action triggered by an alarm. The structure is described
        below.
        """
        return pulumi.get(self, "alarm_actions")

    @alarm_actions.setter
    def alarm_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleAlarmActionArgs']]]]):
        pulumi.set(self, "alarm_actions", value)

    @property
    @pulumi.getter(name="alarmDescription")
    def alarm_description(self) -> Optional[pulumi.Input[str]]:
        """
        The value can be a string of 0 to 256 characters.
        """
        return pulumi.get(self, "alarm_description")

    @alarm_description.setter
    def alarm_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_description", value)

    @property
    @pulumi.getter(name="alarmEnabled")
    def alarm_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable the alarm. The default value is true.
        """
        return pulumi.get(self, "alarm_enabled")

    @alarm_enabled.setter
    def alarm_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alarm_enabled", value)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
        which indicates *critical*, *major*, *minor*, and *informational*, respectively.
        The default value is 2.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alarm_level", value)

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of an alarm rule. The value can be a string of `1` to `128`
        characters that can consist of English letters, Chinese characters, digits, underscores (_), hyphens (-).
        """
        return pulumi.get(self, "alarm_name")

    @alarm_name.setter
    def alarm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_name", value)

    @property
    @pulumi.getter(name="alarmState")
    def alarm_state(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the alarm status. The value can be:
        + ok: The alarm status is normal;
        + alarm: An alarm is generated;
        + insufficient_data: The required data is insufficient.
        """
        return pulumi.get(self, "alarm_state")

    @alarm_state.setter
    def alarm_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_state", value)

    @property
    @pulumi.getter(name="alarmTemplateId")
    def alarm_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the alarm template.
        When using `alarm_template_id`, the fields `alarm_name`, `alarm_description`, `alarm_action_enabled`, `alarm_actions`
        and `ok_actions` cannot be updated.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "alarm_template_id")

    @alarm_template_id.setter
    def alarm_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_template_id", value)

    @property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
        **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
        """
        return pulumi.get(self, "alarm_type")

    @alarm_type.setter
    def alarm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_type", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleConditionArgs']]]]:
        """
        Specifies the alarm triggering condition.
        The condition structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the alarm rule.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="insufficientdataActions")
    def insufficientdata_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleInsufficientdataActionArgs']]]]:
        return pulumi.get(self, "insufficientdata_actions")

    @insufficientdata_actions.setter
    def insufficientdata_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleInsufficientdataActionArgs']]]]):
        pulumi.set(self, "insufficientdata_actions", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input['AlarmruleMetricArgs']]:
        """
        Specifies the alarm metrics. The structure is described below. Changing this
        creates a new resource.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input['AlarmruleMetricArgs']]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="notificationBeginTime")
    def notification_begin_time(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the alarm notification start time, for
        example: **05:30**. Changing this creates a new resource.
        """
        return pulumi.get(self, "notification_begin_time")

    @notification_begin_time.setter
    def notification_begin_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_begin_time", value)

    @property
    @pulumi.getter(name="notificationEndTime")
    def notification_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the alarm notification stop time, for
        example: **22:10**. Changing this creates a new resource.
        """
        return pulumi.get(self, "notification_end_time")

    @notification_end_time.setter
    def notification_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_end_time", value)

    @property
    @pulumi.getter(name="okActions")
    def ok_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleOkActionArgs']]]]:
        """
        Specifies the action triggered by the clearing of an alarm. The structure is
        described below.
        """
        return pulumi.get(self, "ok_actions")

    @ok_actions.setter
    def ok_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleOkActionArgs']]]]):
        pulumi.set(self, "ok_actions", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region in which to create the alarm rule resource. If omitted, the
        provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        schema: Internal
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_id", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleResourceArgs']]]]:
        """
        Specifies the list of the resources to add into the alarm rule.
        The structure is described below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the time when the alarm status changed. The value is a UNIX timestamp and the unit is ms.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_time", value)


class Alarmrule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_action_enabled: Optional[pulumi.Input[bool]] = None,
                 alarm_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleAlarmActionArgs']]]]] = None,
                 alarm_description: Optional[pulumi.Input[str]] = None,
                 alarm_enabled: Optional[pulumi.Input[bool]] = None,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 alarm_name: Optional[pulumi.Input[str]] = None,
                 alarm_template_id: Optional[pulumi.Input[str]] = None,
                 alarm_type: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleConditionArgs']]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 insufficientdata_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleInsufficientdataActionArgs']]]]] = None,
                 metric: Optional[pulumi.Input[pulumi.InputType['AlarmruleMetricArgs']]] = None,
                 notification_begin_time: Optional[pulumi.Input[str]] = None,
                 notification_end_time: Optional[pulumi.Input[str]] = None,
                 ok_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleOkActionArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleResourceArgs']]]]] = None,
                 __props__=None):
        """
        Manages a Cloud Eye alarm rule resource within HuaweiCloud.

        ## Example Usage
        ### Basic example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id1 = config.require_object("instanceId1")
        instance_id2 = config.require_object("instanceId2")
        topic_urn = config.require_object("topicUrn")
        test = huaweicloud.cse.Alarmrule("test",
            alarm_name="rule-test",
            alarm_action_enabled=True,
            alarm_enabled=True,
            alarm_type="MULTI_INSTANCE",
            metric=huaweicloud.cse.AlarmruleMetricArgs(
                namespace="SYS.ECS",
            ),
            resources=[
                huaweicloud.cse.AlarmruleResourceArgs(
                    dimensions=[huaweicloud.cse.AlarmruleResourceDimensionArgs(
                        name="instance_id",
                        value=instance_id1,
                    )],
                ),
                huaweicloud.cse.AlarmruleResourceArgs(
                    dimensions=[huaweicloud.cse.AlarmruleResourceDimensionArgs(
                        name="instance_id",
                        value=instance_id2,
                    )],
                ),
            ],
            conditions=[
                huaweicloud.cse.AlarmruleConditionArgs(
                    period=1200,
                    filter="average",
                    comparison_operator=">",
                    value=6.5,
                    unit="B/s",
                    count=1,
                    suppress_duration=300,
                    metric_name="network_outgoing_bytes_rate_inband",
                    alarm_level=4,
                ),
                huaweicloud.cse.AlarmruleConditionArgs(
                    period=3600,
                    filter="average",
                    comparison_operator=">=",
                    value=20,
                    unit="B/s",
                    count=1,
                    suppress_duration=300,
                    metric_name="network_outgoing_bytes_rate_inband",
                    alarm_level=4,
                ),
            ],
            alarm_actions=[huaweicloud.cse.AlarmruleAlarmActionArgs(
                type="notification",
                notification_lists=[topic_urn],
            )])
        ```
        ### Alarm rule for All instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        test = huaweicloud.cse.Alarmrule("test",
            alarm_name="rule-test",
            alarm_action_enabled=True,
            alarm_enabled=True,
            alarm_type="ALL_INSTANCE",
            metric=huaweicloud.cse.AlarmruleMetricArgs(
                namespace="AGT.ECS",
            ),
            resources=[huaweicloud.cse.AlarmruleResourceArgs(
                dimensions=[
                    huaweicloud.cse.AlarmruleResourceDimensionArgs(
                        name="instance_id",
                    ),
                    huaweicloud.cse.AlarmruleResourceDimensionArgs(
                        name="mount_point",
                    ),
                ],
            )],
            conditions=[huaweicloud.cse.AlarmruleConditionArgs(
                alarm_level=2,
                suppress_duration=0,
                period=1,
                filter="average",
                comparison_operator=">",
                value=80,
                count=1,
                metric_name="disk_usedPercent",
            )],
            alarm_actions=[huaweicloud.cse.AlarmruleAlarmActionArgs(
                type="notification",
                notification_lists=[topic_urn],
            )])
        ```
        ### Alarm rule for event monitoring

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        test = huaweicloud.cse.Alarmrule("test",
            alarm_name="rule-test",
            alarm_action_enabled=True,
            alarm_type="EVENT.SYS",
            metric=huaweicloud.cse.AlarmruleMetricArgs(
                namespace="SYS.ECS",
            ),
            conditions=[huaweicloud.cse.AlarmruleConditionArgs(
                metric_name="stopServer",
                period=0,
                filter="average",
                comparison_operator=">=",
                value=1,
                unit="count",
                count=1,
                suppress_duration=0,
                alarm_level=2,
            )],
            alarm_actions=[huaweicloud.cse.AlarmruleAlarmActionArgs(
                type="notification",
                notification_lists=[topic_urn],
            )])
        ```
        ### Alarm rule using the alarm template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        alarm_template_id = config.require_object("alarmTemplateId")
        instance_id = config.require_object("instanceId")
        test = huaweicloud.cse.Alarmrule("test",
            alarm_name="rule-test",
            alarm_enabled=True,
            alarm_action_enabled=True,
            alarm_type="MULTI_INSTANCE",
            alarm_template_id=alarm_template_id,
            metric=huaweicloud.cse.AlarmruleMetricArgs(
                namespace="SYS.ECS",
            ),
            resources=[huaweicloud.cse.AlarmruleResourceArgs(
                dimensions=[huaweicloud.cse.AlarmruleResourceDimensionArgs(
                    name="instance_id",
                    value=instance_id,
                )],
            )],
            alarm_actions=[huaweicloud.cse.AlarmruleAlarmActionArgs(
                type="notification",
                notification_lists=[topic_urn],
            )])
        ```

        ## Import

        CES alarm rules can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Cse/alarmrule:Alarmrule alarm_rule al1619578509719Ga0X1RGWv
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] alarm_action_enabled: Specifies whether to enable the action to be triggered by an alarm. The
               default value is true.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleAlarmActionArgs']]]] alarm_actions: Specifies the action triggered by an alarm. The structure is described
               below.
        :param pulumi.Input[str] alarm_description: The value can be a string of 0 to 256 characters.
        :param pulumi.Input[bool] alarm_enabled: Specifies whether to enable the alarm. The default value is true.
        :param pulumi.Input[int] alarm_level: Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
               which indicates *critical*, *major*, *minor*, and *informational*, respectively.
               The default value is 2.
        :param pulumi.Input[str] alarm_name: Specifies the name of an alarm rule. The value can be a string of `1` to `128`
               characters that can consist of English letters, Chinese characters, digits, underscores (_), hyphens (-).
        :param pulumi.Input[str] alarm_template_id: Specifies the ID of the alarm template.
               When using `alarm_template_id`, the fields `alarm_name`, `alarm_description`, `alarm_action_enabled`, `alarm_actions`
               and `ok_actions` cannot be updated.
               Changing this creates a new resource.
        :param pulumi.Input[str] alarm_type: Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
               **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleConditionArgs']]]] conditions: Specifies the alarm triggering condition.
               The condition structure is documented below.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the alarm rule.
        :param pulumi.Input[pulumi.InputType['AlarmruleMetricArgs']] metric: Specifies the alarm metrics. The structure is described below. Changing this
               creates a new resource.
        :param pulumi.Input[str] notification_begin_time: Specifies the alarm notification start time, for
               example: **05:30**. Changing this creates a new resource.
        :param pulumi.Input[str] notification_end_time: Specifies the alarm notification stop time, for
               example: **22:10**. Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleOkActionArgs']]]] ok_actions: Specifies the action triggered by the clearing of an alarm. The structure is
               described below.
        :param pulumi.Input[str] region: The region in which to create the alarm rule resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[str] resource_group_id: schema: Internal
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleResourceArgs']]]] resources: Specifies the list of the resources to add into the alarm rule.
               The structure is described below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmruleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Cloud Eye alarm rule resource within HuaweiCloud.

        ## Example Usage
        ### Basic example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id1 = config.require_object("instanceId1")
        instance_id2 = config.require_object("instanceId2")
        topic_urn = config.require_object("topicUrn")
        test = huaweicloud.cse.Alarmrule("test",
            alarm_name="rule-test",
            alarm_action_enabled=True,
            alarm_enabled=True,
            alarm_type="MULTI_INSTANCE",
            metric=huaweicloud.cse.AlarmruleMetricArgs(
                namespace="SYS.ECS",
            ),
            resources=[
                huaweicloud.cse.AlarmruleResourceArgs(
                    dimensions=[huaweicloud.cse.AlarmruleResourceDimensionArgs(
                        name="instance_id",
                        value=instance_id1,
                    )],
                ),
                huaweicloud.cse.AlarmruleResourceArgs(
                    dimensions=[huaweicloud.cse.AlarmruleResourceDimensionArgs(
                        name="instance_id",
                        value=instance_id2,
                    )],
                ),
            ],
            conditions=[
                huaweicloud.cse.AlarmruleConditionArgs(
                    period=1200,
                    filter="average",
                    comparison_operator=">",
                    value=6.5,
                    unit="B/s",
                    count=1,
                    suppress_duration=300,
                    metric_name="network_outgoing_bytes_rate_inband",
                    alarm_level=4,
                ),
                huaweicloud.cse.AlarmruleConditionArgs(
                    period=3600,
                    filter="average",
                    comparison_operator=">=",
                    value=20,
                    unit="B/s",
                    count=1,
                    suppress_duration=300,
                    metric_name="network_outgoing_bytes_rate_inband",
                    alarm_level=4,
                ),
            ],
            alarm_actions=[huaweicloud.cse.AlarmruleAlarmActionArgs(
                type="notification",
                notification_lists=[topic_urn],
            )])
        ```
        ### Alarm rule for All instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        test = huaweicloud.cse.Alarmrule("test",
            alarm_name="rule-test",
            alarm_action_enabled=True,
            alarm_enabled=True,
            alarm_type="ALL_INSTANCE",
            metric=huaweicloud.cse.AlarmruleMetricArgs(
                namespace="AGT.ECS",
            ),
            resources=[huaweicloud.cse.AlarmruleResourceArgs(
                dimensions=[
                    huaweicloud.cse.AlarmruleResourceDimensionArgs(
                        name="instance_id",
                    ),
                    huaweicloud.cse.AlarmruleResourceDimensionArgs(
                        name="mount_point",
                    ),
                ],
            )],
            conditions=[huaweicloud.cse.AlarmruleConditionArgs(
                alarm_level=2,
                suppress_duration=0,
                period=1,
                filter="average",
                comparison_operator=">",
                value=80,
                count=1,
                metric_name="disk_usedPercent",
            )],
            alarm_actions=[huaweicloud.cse.AlarmruleAlarmActionArgs(
                type="notification",
                notification_lists=[topic_urn],
            )])
        ```
        ### Alarm rule for event monitoring

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        test = huaweicloud.cse.Alarmrule("test",
            alarm_name="rule-test",
            alarm_action_enabled=True,
            alarm_type="EVENT.SYS",
            metric=huaweicloud.cse.AlarmruleMetricArgs(
                namespace="SYS.ECS",
            ),
            conditions=[huaweicloud.cse.AlarmruleConditionArgs(
                metric_name="stopServer",
                period=0,
                filter="average",
                comparison_operator=">=",
                value=1,
                unit="count",
                count=1,
                suppress_duration=0,
                alarm_level=2,
            )],
            alarm_actions=[huaweicloud.cse.AlarmruleAlarmActionArgs(
                type="notification",
                notification_lists=[topic_urn],
            )])
        ```
        ### Alarm rule using the alarm template

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        alarm_template_id = config.require_object("alarmTemplateId")
        instance_id = config.require_object("instanceId")
        test = huaweicloud.cse.Alarmrule("test",
            alarm_name="rule-test",
            alarm_enabled=True,
            alarm_action_enabled=True,
            alarm_type="MULTI_INSTANCE",
            alarm_template_id=alarm_template_id,
            metric=huaweicloud.cse.AlarmruleMetricArgs(
                namespace="SYS.ECS",
            ),
            resources=[huaweicloud.cse.AlarmruleResourceArgs(
                dimensions=[huaweicloud.cse.AlarmruleResourceDimensionArgs(
                    name="instance_id",
                    value=instance_id,
                )],
            )],
            alarm_actions=[huaweicloud.cse.AlarmruleAlarmActionArgs(
                type="notification",
                notification_lists=[topic_urn],
            )])
        ```

        ## Import

        CES alarm rules can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Cse/alarmrule:Alarmrule alarm_rule al1619578509719Ga0X1RGWv
        ```

        :param str resource_name: The name of the resource.
        :param AlarmruleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmruleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_action_enabled: Optional[pulumi.Input[bool]] = None,
                 alarm_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleAlarmActionArgs']]]]] = None,
                 alarm_description: Optional[pulumi.Input[str]] = None,
                 alarm_enabled: Optional[pulumi.Input[bool]] = None,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 alarm_name: Optional[pulumi.Input[str]] = None,
                 alarm_template_id: Optional[pulumi.Input[str]] = None,
                 alarm_type: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleConditionArgs']]]]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 insufficientdata_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleInsufficientdataActionArgs']]]]] = None,
                 metric: Optional[pulumi.Input[pulumi.InputType['AlarmruleMetricArgs']]] = None,
                 notification_begin_time: Optional[pulumi.Input[str]] = None,
                 notification_end_time: Optional[pulumi.Input[str]] = None,
                 ok_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleOkActionArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleResourceArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmruleArgs.__new__(AlarmruleArgs)

            __props__.__dict__["alarm_action_enabled"] = alarm_action_enabled
            __props__.__dict__["alarm_actions"] = alarm_actions
            __props__.__dict__["alarm_description"] = alarm_description
            __props__.__dict__["alarm_enabled"] = alarm_enabled
            __props__.__dict__["alarm_level"] = alarm_level
            if alarm_name is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_name'")
            __props__.__dict__["alarm_name"] = alarm_name
            __props__.__dict__["alarm_template_id"] = alarm_template_id
            __props__.__dict__["alarm_type"] = alarm_type
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if insufficientdata_actions is not None and not opts.urn:
                warnings.warn("""insufficientdata_actions is deprecated""", DeprecationWarning)
                pulumi.log.warn("""insufficientdata_actions is deprecated: insufficientdata_actions is deprecated""")
            __props__.__dict__["insufficientdata_actions"] = insufficientdata_actions
            if metric is None and not opts.urn:
                raise TypeError("Missing required property 'metric'")
            __props__.__dict__["metric"] = metric
            __props__.__dict__["notification_begin_time"] = notification_begin_time
            __props__.__dict__["notification_end_time"] = notification_end_time
            __props__.__dict__["ok_actions"] = ok_actions
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["resources"] = resources
            __props__.__dict__["alarm_state"] = None
            __props__.__dict__["update_time"] = None
        super(Alarmrule, __self__).__init__(
            'huaweicloud:Cse/alarmrule:Alarmrule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_action_enabled: Optional[pulumi.Input[bool]] = None,
            alarm_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleAlarmActionArgs']]]]] = None,
            alarm_description: Optional[pulumi.Input[str]] = None,
            alarm_enabled: Optional[pulumi.Input[bool]] = None,
            alarm_level: Optional[pulumi.Input[int]] = None,
            alarm_name: Optional[pulumi.Input[str]] = None,
            alarm_state: Optional[pulumi.Input[str]] = None,
            alarm_template_id: Optional[pulumi.Input[str]] = None,
            alarm_type: Optional[pulumi.Input[str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleConditionArgs']]]]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            insufficientdata_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleInsufficientdataActionArgs']]]]] = None,
            metric: Optional[pulumi.Input[pulumi.InputType['AlarmruleMetricArgs']]] = None,
            notification_begin_time: Optional[pulumi.Input[str]] = None,
            notification_end_time: Optional[pulumi.Input[str]] = None,
            ok_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleOkActionArgs']]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            resource_group_id: Optional[pulumi.Input[str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleResourceArgs']]]]] = None,
            update_time: Optional[pulumi.Input[int]] = None) -> 'Alarmrule':
        """
        Get an existing Alarmrule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] alarm_action_enabled: Specifies whether to enable the action to be triggered by an alarm. The
               default value is true.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleAlarmActionArgs']]]] alarm_actions: Specifies the action triggered by an alarm. The structure is described
               below.
        :param pulumi.Input[str] alarm_description: The value can be a string of 0 to 256 characters.
        :param pulumi.Input[bool] alarm_enabled: Specifies whether to enable the alarm. The default value is true.
        :param pulumi.Input[int] alarm_level: Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
               which indicates *critical*, *major*, *minor*, and *informational*, respectively.
               The default value is 2.
        :param pulumi.Input[str] alarm_name: Specifies the name of an alarm rule. The value can be a string of `1` to `128`
               characters that can consist of English letters, Chinese characters, digits, underscores (_), hyphens (-).
        :param pulumi.Input[str] alarm_state: Indicates the alarm status. The value can be:
               + ok: The alarm status is normal;
               + alarm: An alarm is generated;
               + insufficient_data: The required data is insufficient.
        :param pulumi.Input[str] alarm_template_id: Specifies the ID of the alarm template.
               When using `alarm_template_id`, the fields `alarm_name`, `alarm_description`, `alarm_action_enabled`, `alarm_actions`
               and `ok_actions` cannot be updated.
               Changing this creates a new resource.
        :param pulumi.Input[str] alarm_type: Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
               **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleConditionArgs']]]] conditions: Specifies the alarm triggering condition.
               The condition structure is documented below.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the alarm rule.
        :param pulumi.Input[pulumi.InputType['AlarmruleMetricArgs']] metric: Specifies the alarm metrics. The structure is described below. Changing this
               creates a new resource.
        :param pulumi.Input[str] notification_begin_time: Specifies the alarm notification start time, for
               example: **05:30**. Changing this creates a new resource.
        :param pulumi.Input[str] notification_end_time: Specifies the alarm notification stop time, for
               example: **22:10**. Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleOkActionArgs']]]] ok_actions: Specifies the action triggered by the clearing of an alarm. The structure is
               described below.
        :param pulumi.Input[str] region: The region in which to create the alarm rule resource. If omitted, the
               provider-level region will be used. Changing this creates a new resource.
        :param pulumi.Input[str] resource_group_id: schema: Internal
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmruleResourceArgs']]]] resources: Specifies the list of the resources to add into the alarm rule.
               The structure is described below.
        :param pulumi.Input[int] update_time: Indicates the time when the alarm status changed. The value is a UNIX timestamp and the unit is ms.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmruleState.__new__(_AlarmruleState)

        __props__.__dict__["alarm_action_enabled"] = alarm_action_enabled
        __props__.__dict__["alarm_actions"] = alarm_actions
        __props__.__dict__["alarm_description"] = alarm_description
        __props__.__dict__["alarm_enabled"] = alarm_enabled
        __props__.__dict__["alarm_level"] = alarm_level
        __props__.__dict__["alarm_name"] = alarm_name
        __props__.__dict__["alarm_state"] = alarm_state
        __props__.__dict__["alarm_template_id"] = alarm_template_id
        __props__.__dict__["alarm_type"] = alarm_type
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["insufficientdata_actions"] = insufficientdata_actions
        __props__.__dict__["metric"] = metric
        __props__.__dict__["notification_begin_time"] = notification_begin_time
        __props__.__dict__["notification_end_time"] = notification_end_time
        __props__.__dict__["ok_actions"] = ok_actions
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["resources"] = resources
        __props__.__dict__["update_time"] = update_time
        return Alarmrule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alarmActionEnabled")
    def alarm_action_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether to enable the action to be triggered by an alarm. The
        default value is true.
        """
        return pulumi.get(self, "alarm_action_enabled")

    @property
    @pulumi.getter(name="alarmActions")
    def alarm_actions(self) -> pulumi.Output[Optional[Sequence['outputs.AlarmruleAlarmAction']]]:
        """
        Specifies the action triggered by an alarm. The structure is described
        below.
        """
        return pulumi.get(self, "alarm_actions")

    @property
    @pulumi.getter(name="alarmDescription")
    def alarm_description(self) -> pulumi.Output[Optional[str]]:
        """
        The value can be a string of 0 to 256 characters.
        """
        return pulumi.get(self, "alarm_description")

    @property
    @pulumi.getter(name="alarmEnabled")
    def alarm_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether to enable the alarm. The default value is true.
        """
        return pulumi.get(self, "alarm_enabled")

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> pulumi.Output[int]:
        """
        Specifies the alarm severity of the condition. The value can be 1, 2, 3 or 4,
        which indicates *critical*, *major*, *minor*, and *informational*, respectively.
        The default value is 2.
        """
        return pulumi.get(self, "alarm_level")

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> pulumi.Output[str]:
        """
        Specifies the name of an alarm rule. The value can be a string of `1` to `128`
        characters that can consist of English letters, Chinese characters, digits, underscores (_), hyphens (-).
        """
        return pulumi.get(self, "alarm_name")

    @property
    @pulumi.getter(name="alarmState")
    def alarm_state(self) -> pulumi.Output[str]:
        """
        Indicates the alarm status. The value can be:
        + ok: The alarm status is normal;
        + alarm: An alarm is generated;
        + insufficient_data: The required data is insufficient.
        """
        return pulumi.get(self, "alarm_state")

    @property
    @pulumi.getter(name="alarmTemplateId")
    def alarm_template_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the ID of the alarm template.
        When using `alarm_template_id`, the fields `alarm_name`, `alarm_description`, `alarm_action_enabled`, `alarm_actions`
        and `ok_actions` cannot be updated.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "alarm_template_id")

    @property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
        **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
        """
        return pulumi.get(self, "alarm_type")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.AlarmruleCondition']]:
        """
        Specifies the alarm triggering condition.
        The condition structure is documented below.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[str]:
        """
        Specifies the enterprise project ID of the alarm rule.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="insufficientdataActions")
    def insufficientdata_actions(self) -> pulumi.Output[Optional[Sequence['outputs.AlarmruleInsufficientdataAction']]]:
        return pulumi.get(self, "insufficientdata_actions")

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Output['outputs.AlarmruleMetric']:
        """
        Specifies the alarm metrics. The structure is described below. Changing this
        creates a new resource.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="notificationBeginTime")
    def notification_begin_time(self) -> pulumi.Output[str]:
        """
        Specifies the alarm notification start time, for
        example: **05:30**. Changing this creates a new resource.
        """
        return pulumi.get(self, "notification_begin_time")

    @property
    @pulumi.getter(name="notificationEndTime")
    def notification_end_time(self) -> pulumi.Output[str]:
        """
        Specifies the alarm notification stop time, for
        example: **22:10**. Changing this creates a new resource.
        """
        return pulumi.get(self, "notification_end_time")

    @property
    @pulumi.getter(name="okActions")
    def ok_actions(self) -> pulumi.Output[Optional[Sequence['outputs.AlarmruleOkAction']]]:
        """
        Specifies the action triggered by the clearing of an alarm. The structure is
        described below.
        """
        return pulumi.get(self, "ok_actions")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region in which to create the alarm rule resource. If omitted, the
        provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[str]:
        """
        schema: Internal
        """
        return pulumi.get(self, "resource_group_id")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.AlarmruleResource']]:
        """
        Specifies the list of the resources to add into the alarm rule.
        The structure is described below.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[int]:
        """
        Indicates the time when the alarm status changed. The value is a UNIX timestamp and the unit is ms.
        """
        return pulumi.get(self, "update_time")

