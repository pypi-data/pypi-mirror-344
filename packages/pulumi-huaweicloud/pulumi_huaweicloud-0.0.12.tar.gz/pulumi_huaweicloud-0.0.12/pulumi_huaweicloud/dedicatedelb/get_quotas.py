# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetQuotasResult',
    'AwaitableGetQuotasResult',
    'get_quotas',
    'get_quotas_output',
]

@pulumi.output_type
class GetQuotasResult:
    """
    A collection of values returned by getQuotas.
    """
    def __init__(__self__, certificate=None, condition_per_policy=None, healthmonitor=None, id=None, ipgroup=None, ipgroup_bindings=None, ipgroup_max_length=None, ipgroups_per_listener=None, l7policies_per_listener=None, l7policy=None, listener=None, listeners_per_loadbalancer=None, listeners_per_pool=None, loadbalancer=None, member=None, members_per_pool=None, pool=None, pools_per_l7policy=None, project_id=None, region=None, security_policy=None):
        if certificate and not isinstance(certificate, int):
            raise TypeError("Expected argument 'certificate' to be a int")
        pulumi.set(__self__, "certificate", certificate)
        if condition_per_policy and not isinstance(condition_per_policy, int):
            raise TypeError("Expected argument 'condition_per_policy' to be a int")
        pulumi.set(__self__, "condition_per_policy", condition_per_policy)
        if healthmonitor and not isinstance(healthmonitor, int):
            raise TypeError("Expected argument 'healthmonitor' to be a int")
        pulumi.set(__self__, "healthmonitor", healthmonitor)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipgroup and not isinstance(ipgroup, int):
            raise TypeError("Expected argument 'ipgroup' to be a int")
        pulumi.set(__self__, "ipgroup", ipgroup)
        if ipgroup_bindings and not isinstance(ipgroup_bindings, int):
            raise TypeError("Expected argument 'ipgroup_bindings' to be a int")
        pulumi.set(__self__, "ipgroup_bindings", ipgroup_bindings)
        if ipgroup_max_length and not isinstance(ipgroup_max_length, int):
            raise TypeError("Expected argument 'ipgroup_max_length' to be a int")
        pulumi.set(__self__, "ipgroup_max_length", ipgroup_max_length)
        if ipgroups_per_listener and not isinstance(ipgroups_per_listener, int):
            raise TypeError("Expected argument 'ipgroups_per_listener' to be a int")
        pulumi.set(__self__, "ipgroups_per_listener", ipgroups_per_listener)
        if l7policies_per_listener and not isinstance(l7policies_per_listener, int):
            raise TypeError("Expected argument 'l7policies_per_listener' to be a int")
        pulumi.set(__self__, "l7policies_per_listener", l7policies_per_listener)
        if l7policy and not isinstance(l7policy, int):
            raise TypeError("Expected argument 'l7policy' to be a int")
        pulumi.set(__self__, "l7policy", l7policy)
        if listener and not isinstance(listener, int):
            raise TypeError("Expected argument 'listener' to be a int")
        pulumi.set(__self__, "listener", listener)
        if listeners_per_loadbalancer and not isinstance(listeners_per_loadbalancer, int):
            raise TypeError("Expected argument 'listeners_per_loadbalancer' to be a int")
        pulumi.set(__self__, "listeners_per_loadbalancer", listeners_per_loadbalancer)
        if listeners_per_pool and not isinstance(listeners_per_pool, int):
            raise TypeError("Expected argument 'listeners_per_pool' to be a int")
        pulumi.set(__self__, "listeners_per_pool", listeners_per_pool)
        if loadbalancer and not isinstance(loadbalancer, int):
            raise TypeError("Expected argument 'loadbalancer' to be a int")
        pulumi.set(__self__, "loadbalancer", loadbalancer)
        if member and not isinstance(member, int):
            raise TypeError("Expected argument 'member' to be a int")
        pulumi.set(__self__, "member", member)
        if members_per_pool and not isinstance(members_per_pool, int):
            raise TypeError("Expected argument 'members_per_pool' to be a int")
        pulumi.set(__self__, "members_per_pool", members_per_pool)
        if pool and not isinstance(pool, int):
            raise TypeError("Expected argument 'pool' to be a int")
        pulumi.set(__self__, "pool", pool)
        if pools_per_l7policy and not isinstance(pools_per_l7policy, int):
            raise TypeError("Expected argument 'pools_per_l7policy' to be a int")
        pulumi.set(__self__, "pools_per_l7policy", pools_per_l7policy)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if security_policy and not isinstance(security_policy, int):
            raise TypeError("Expected argument 'security_policy' to be a int")
        pulumi.set(__self__, "security_policy", security_policy)

    @property
    @pulumi.getter
    def certificate(self) -> int:
        """
        Indicates the certificate quota.
        + If the value is greater than or equal to **0**, it indicates the certificate quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="conditionPerPolicy")
    def condition_per_policy(self) -> int:
        """
        Indicates the maximum number of forwarding rules per forwarding policy.
        + If the value is greater than or equal to **0**, it indicates the current quota.
        + **-1** indicates that the quota is not limited.
        """
        return pulumi.get(self, "condition_per_policy")

    @property
    @pulumi.getter
    def healthmonitor(self) -> int:
        """
        Indicates the health check quota.
        + If the value is greater than or equal to **0**, it indicates the health check quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "healthmonitor")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipgroup(self) -> int:
        """
        Indicates the IP address group quota.
        + If the value is greater than or equal to **0**, it indicates the IP address group quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "ipgroup")

    @property
    @pulumi.getter(name="ipgroupBindings")
    def ipgroup_bindings(self) -> int:
        """
        Indicates the maximum number of listeners that can be associated with an IP address group.
        + If the value is greater than or equal to 0, it indicates the maximum number of listeners that can be associated with
        an IP address group.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "ipgroup_bindings")

    @property
    @pulumi.getter(name="ipgroupMaxLength")
    def ipgroup_max_length(self) -> int:
        """
        Indicates the maximum number of IP addresses that can be added to an IP address group.
        + If the value is greater than or equal to **0**, it indicates the IP address quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "ipgroup_max_length")

    @property
    @pulumi.getter(name="ipgroupsPerListener")
    def ipgroups_per_listener(self) -> int:
        """
        Indicates the maximum number of IP address groups that can be associated with a listener.
        + If the value is greater than or equal to **0**, it indicates the IP address group quota.
        + **-1** indicates that the quota is not limited.
        """
        return pulumi.get(self, "ipgroups_per_listener")

    @property
    @pulumi.getter(name="l7policiesPerListener")
    def l7policies_per_listener(self) -> int:
        """
        Indicates the maximum number of forwarding policies that can be configured for a listener.
        + If the value is greater than or equal to **0**, it indicates the forwarding policy quota.
        + **-1** indicates that the quota is not limited.
        """
        return pulumi.get(self, "l7policies_per_listener")

    @property
    @pulumi.getter
    def l7policy(self) -> int:
        """
        Indicates the forwarding policy quota.
        + If the value is greater than or equal to **0**, it indicates the forwarding policy quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "l7policy")

    @property
    @pulumi.getter
    def listener(self) -> int:
        """
        Indicates the listener quota.
        + If the value is greater than or equal to **0**, it indicates the listener quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "listener")

    @property
    @pulumi.getter(name="listenersPerLoadbalancer")
    def listeners_per_loadbalancer(self) -> int:
        """
        Indicates the maximum number of listeners that can be associated with a load balancer.
        + If the value is greater than or equal to **0**, it indicates the current quota.
        + **-1** indicates that the quota is not limited.
        """
        return pulumi.get(self, "listeners_per_loadbalancer")

    @property
    @pulumi.getter(name="listenersPerPool")
    def listeners_per_pool(self) -> int:
        """
        Indicates the maximum number of listeners that can be associated with a backend server group.
        + If the value is greater than or equal to **0**, it indicates the current quota.
        + **-1** indicates that the quota is not limited.
        """
        return pulumi.get(self, "listeners_per_pool")

    @property
    @pulumi.getter
    def loadbalancer(self) -> int:
        """
        Indicates the load balancer quota.
        + If the value is greater than or equal to **0**, it indicates the load balancer quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "loadbalancer")

    @property
    @pulumi.getter
    def member(self) -> int:
        """
        Indicates the backend server quota.
        + If the value is greater than or equal to **0**, it indicates the backend server quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "member")

    @property
    @pulumi.getter(name="membersPerPool")
    def members_per_pool(self) -> int:
        """
        Indicates the maximum number of backend servers in a backend server group.
        + If the value is greater than or equal to **0**, it indicates the backend server quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "members_per_pool")

    @property
    @pulumi.getter
    def pool(self) -> int:
        """
        Indicates the backend server group quota.
        + If the value is greater than or equal to **0**, it indicates the backend server group quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="poolsPerL7policy")
    def pools_per_l7policy(self) -> int:
        """
        Indicates the maximum number of backend server groups that can be used by a forwarding policy.
        + If the value is greater than or equal to **0**, it indicates the backend server group quota.
        + **-1** indicates that the quota is not limited.
        """
        return pulumi.get(self, "pools_per_l7policy")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Indicates the project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="securityPolicy")
    def security_policy(self) -> int:
        """
        Indicates the custom security policy quota.
        + If the value is greater than or equal to **0**, it indicates the custom security policy quota.
        + If the value is **-1**, the quota is not limited.
        """
        return pulumi.get(self, "security_policy")


class AwaitableGetQuotasResult(GetQuotasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQuotasResult(
            certificate=self.certificate,
            condition_per_policy=self.condition_per_policy,
            healthmonitor=self.healthmonitor,
            id=self.id,
            ipgroup=self.ipgroup,
            ipgroup_bindings=self.ipgroup_bindings,
            ipgroup_max_length=self.ipgroup_max_length,
            ipgroups_per_listener=self.ipgroups_per_listener,
            l7policies_per_listener=self.l7policies_per_listener,
            l7policy=self.l7policy,
            listener=self.listener,
            listeners_per_loadbalancer=self.listeners_per_loadbalancer,
            listeners_per_pool=self.listeners_per_pool,
            loadbalancer=self.loadbalancer,
            member=self.member,
            members_per_pool=self.members_per_pool,
            pool=self.pool,
            pools_per_l7policy=self.pools_per_l7policy,
            project_id=self.project_id,
            region=self.region,
            security_policy=self.security_policy)


def get_quotas(region: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQuotasResult:
    """
    Use this data source to get the list of quotas of ELB and related resources in a specific project.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.DedicatedElb.get_quotas()
    ```


    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getQuotas:getQuotas', __args__, opts=opts, typ=GetQuotasResult).value

    return AwaitableGetQuotasResult(
        certificate=__ret__.certificate,
        condition_per_policy=__ret__.condition_per_policy,
        healthmonitor=__ret__.healthmonitor,
        id=__ret__.id,
        ipgroup=__ret__.ipgroup,
        ipgroup_bindings=__ret__.ipgroup_bindings,
        ipgroup_max_length=__ret__.ipgroup_max_length,
        ipgroups_per_listener=__ret__.ipgroups_per_listener,
        l7policies_per_listener=__ret__.l7policies_per_listener,
        l7policy=__ret__.l7policy,
        listener=__ret__.listener,
        listeners_per_loadbalancer=__ret__.listeners_per_loadbalancer,
        listeners_per_pool=__ret__.listeners_per_pool,
        loadbalancer=__ret__.loadbalancer,
        member=__ret__.member,
        members_per_pool=__ret__.members_per_pool,
        pool=__ret__.pool,
        pools_per_l7policy=__ret__.pools_per_l7policy,
        project_id=__ret__.project_id,
        region=__ret__.region,
        security_policy=__ret__.security_policy)


@_utilities.lift_output_func(get_quotas)
def get_quotas_output(region: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetQuotasResult]:
    """
    Use this data source to get the list of quotas of ELB and related resources in a specific project.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.DedicatedElb.get_quotas()
    ```


    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    ...
