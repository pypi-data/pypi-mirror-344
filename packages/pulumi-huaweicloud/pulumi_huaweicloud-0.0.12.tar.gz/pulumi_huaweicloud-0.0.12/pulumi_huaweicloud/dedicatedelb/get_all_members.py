# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAllMembersResult',
    'AwaitableGetAllMembersResult',
    'get_all_members',
    'get_all_members_output',
]

@pulumi.output_type
class GetAllMembersResult:
    """
    A collection of values returned by getAllMembers.
    """
    def __init__(__self__, addresses=None, enterprise_project_ids=None, id=None, ip_versions=None, loadbalancer_ids=None, member_ids=None, members=None, names=None, operating_statuses=None, pool_ids=None, protocol_ports=None, region=None, subnet_cidr_ids=None, weights=None):
        if addresses and not isinstance(addresses, list):
            raise TypeError("Expected argument 'addresses' to be a list")
        pulumi.set(__self__, "addresses", addresses)
        if enterprise_project_ids and not isinstance(enterprise_project_ids, list):
            raise TypeError("Expected argument 'enterprise_project_ids' to be a list")
        pulumi.set(__self__, "enterprise_project_ids", enterprise_project_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_versions and not isinstance(ip_versions, list):
            raise TypeError("Expected argument 'ip_versions' to be a list")
        pulumi.set(__self__, "ip_versions", ip_versions)
        if loadbalancer_ids and not isinstance(loadbalancer_ids, list):
            raise TypeError("Expected argument 'loadbalancer_ids' to be a list")
        pulumi.set(__self__, "loadbalancer_ids", loadbalancer_ids)
        if member_ids and not isinstance(member_ids, list):
            raise TypeError("Expected argument 'member_ids' to be a list")
        pulumi.set(__self__, "member_ids", member_ids)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if operating_statuses and not isinstance(operating_statuses, list):
            raise TypeError("Expected argument 'operating_statuses' to be a list")
        pulumi.set(__self__, "operating_statuses", operating_statuses)
        if pool_ids and not isinstance(pool_ids, list):
            raise TypeError("Expected argument 'pool_ids' to be a list")
        pulumi.set(__self__, "pool_ids", pool_ids)
        if protocol_ports and not isinstance(protocol_ports, list):
            raise TypeError("Expected argument 'protocol_ports' to be a list")
        pulumi.set(__self__, "protocol_ports", protocol_ports)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subnet_cidr_ids and not isinstance(subnet_cidr_ids, list):
            raise TypeError("Expected argument 'subnet_cidr_ids' to be a list")
        pulumi.set(__self__, "subnet_cidr_ids", subnet_cidr_ids)
        if weights and not isinstance(weights, list):
            raise TypeError("Expected argument 'weights' to be a list")
        pulumi.set(__self__, "weights", weights)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        """
        Indicates the private IP address bound to the backend server.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="enterpriseProjectIds")
    def enterprise_project_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enterprise_project_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipVersions")
    def ip_versions(self) -> Optional[Sequence[str]]:
        """
        Indicates the IP version supported by the backend server.
        """
        return pulumi.get(self, "ip_versions")

    @property
    @pulumi.getter(name="loadbalancerIds")
    def loadbalancer_ids(self) -> Optional[Sequence[str]]:
        """
        Indicates the ID of the load balancer with which the backend server is associated.
        """
        return pulumi.get(self, "loadbalancer_ids")

    @property
    @pulumi.getter(name="memberIds")
    def member_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "member_ids")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetAllMembersMemberResult']:
        """
        Indicates the list of backend servers.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence[str]]:
        """
        Indicates the backend server name.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="operatingStatuses")
    def operating_statuses(self) -> Optional[Sequence[str]]:
        """
        Indicates the health status of the backend server.
        """
        return pulumi.get(self, "operating_statuses")

    @property
    @pulumi.getter(name="poolIds")
    def pool_ids(self) -> Optional[Sequence[str]]:
        """
        Indicates the ID of the backend server group to which the backend server belongs.
        """
        return pulumi.get(self, "pool_ids")

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> Optional[Sequence[int]]:
        """
        Indicates the port used by the backend server to receive requests.
        """
        return pulumi.get(self, "protocol_ports")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetCidrIds")
    def subnet_cidr_ids(self) -> Optional[Sequence[str]]:
        """
        Indicates the ID of the IPv4 or IPv6 subnet where the backend server resides.
        """
        return pulumi.get(self, "subnet_cidr_ids")

    @property
    @pulumi.getter
    def weights(self) -> Optional[Sequence[int]]:
        """
        Indicates the weight of the backend server.
        """
        return pulumi.get(self, "weights")


class AwaitableGetAllMembersResult(GetAllMembersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAllMembersResult(
            addresses=self.addresses,
            enterprise_project_ids=self.enterprise_project_ids,
            id=self.id,
            ip_versions=self.ip_versions,
            loadbalancer_ids=self.loadbalancer_ids,
            member_ids=self.member_ids,
            members=self.members,
            names=self.names,
            operating_statuses=self.operating_statuses,
            pool_ids=self.pool_ids,
            protocol_ports=self.protocol_ports,
            region=self.region,
            subnet_cidr_ids=self.subnet_cidr_ids,
            weights=self.weights)


def get_all_members(addresses: Optional[Sequence[str]] = None,
                    enterprise_project_ids: Optional[Sequence[str]] = None,
                    ip_versions: Optional[Sequence[str]] = None,
                    loadbalancer_ids: Optional[Sequence[str]] = None,
                    member_ids: Optional[Sequence[str]] = None,
                    names: Optional[Sequence[str]] = None,
                    operating_statuses: Optional[Sequence[str]] = None,
                    pool_ids: Optional[Sequence[str]] = None,
                    protocol_ports: Optional[Sequence[int]] = None,
                    region: Optional[str] = None,
                    subnet_cidr_ids: Optional[Sequence[str]] = None,
                    weights: Optional[Sequence[int]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAllMembersResult:
    """
    Use this data source to get the list of members under the current project.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.DedicatedElb.get_all_members()
    ```


    :param Sequence[str] addresses: Specifies the IP address of the backend server.
           Multiple IP addresses can be queried.
    :param Sequence[str] enterprise_project_ids: Specifies the ID of the enterprise project.
           + If `enterprise_project_id` is not specified, resources in all enterprise projects are queried by default.
           + If `enterprise_project_id` is specified, the value can be a specific enterprise project ID or **all_granted_eps**.
           Multiple values can be queried.
    :param Sequence[str] ip_versions: Specifies the IP address version supported by the backend server group.
           The value can be **v4** or **v6**.
           Multiple versions can be queried.
    :param Sequence[str] loadbalancer_ids: Specifies the ID of the load balancer with which the load balancer is associated.
           Multiple IDs can be queried.
    :param Sequence[str] member_ids: Specifies the backend server ID.
           Multiple IDs can be queried.
    :param Sequence[str] names: Specifies the backend server name.
           Multiple IDs can be queried.
    :param Sequence[str] operating_statuses: Specifies the operating status of the backend server.
           Value options:
           + **ONLINE**: The backend server is running normally.
           + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
           + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
           Multiple statuses can be queried.
    :param Sequence[str] pool_ids: Specifies the ID of the backend server group to which the backend server belongs.
           Multiple IDs can be queried.
    :param Sequence[int] protocol_ports: Specifies the port used by the backend servers.
           Multiple ports can be queried.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[str] subnet_cidr_ids: Specifies the ID of the subnet where the backend server works.
           Multiple IDs can be queried.
    :param Sequence[int] weights: Specifies the weight of the backend server.
           Multiple weights can be queried.
    """
    __args__ = dict()
    __args__['addresses'] = addresses
    __args__['enterpriseProjectIds'] = enterprise_project_ids
    __args__['ipVersions'] = ip_versions
    __args__['loadbalancerIds'] = loadbalancer_ids
    __args__['memberIds'] = member_ids
    __args__['names'] = names
    __args__['operatingStatuses'] = operating_statuses
    __args__['poolIds'] = pool_ids
    __args__['protocolPorts'] = protocol_ports
    __args__['region'] = region
    __args__['subnetCidrIds'] = subnet_cidr_ids
    __args__['weights'] = weights
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getAllMembers:getAllMembers', __args__, opts=opts, typ=GetAllMembersResult).value

    return AwaitableGetAllMembersResult(
        addresses=__ret__.addresses,
        enterprise_project_ids=__ret__.enterprise_project_ids,
        id=__ret__.id,
        ip_versions=__ret__.ip_versions,
        loadbalancer_ids=__ret__.loadbalancer_ids,
        member_ids=__ret__.member_ids,
        members=__ret__.members,
        names=__ret__.names,
        operating_statuses=__ret__.operating_statuses,
        pool_ids=__ret__.pool_ids,
        protocol_ports=__ret__.protocol_ports,
        region=__ret__.region,
        subnet_cidr_ids=__ret__.subnet_cidr_ids,
        weights=__ret__.weights)


@_utilities.lift_output_func(get_all_members)
def get_all_members_output(addresses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           enterprise_project_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           ip_versions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           loadbalancer_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           member_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           operating_statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           pool_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           protocol_ports: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                           region: Optional[pulumi.Input[Optional[str]]] = None,
                           subnet_cidr_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           weights: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAllMembersResult]:
    """
    Use this data source to get the list of members under the current project.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.DedicatedElb.get_all_members()
    ```


    :param Sequence[str] addresses: Specifies the IP address of the backend server.
           Multiple IP addresses can be queried.
    :param Sequence[str] enterprise_project_ids: Specifies the ID of the enterprise project.
           + If `enterprise_project_id` is not specified, resources in all enterprise projects are queried by default.
           + If `enterprise_project_id` is specified, the value can be a specific enterprise project ID or **all_granted_eps**.
           Multiple values can be queried.
    :param Sequence[str] ip_versions: Specifies the IP address version supported by the backend server group.
           The value can be **v4** or **v6**.
           Multiple versions can be queried.
    :param Sequence[str] loadbalancer_ids: Specifies the ID of the load balancer with which the load balancer is associated.
           Multiple IDs can be queried.
    :param Sequence[str] member_ids: Specifies the backend server ID.
           Multiple IDs can be queried.
    :param Sequence[str] names: Specifies the backend server name.
           Multiple IDs can be queried.
    :param Sequence[str] operating_statuses: Specifies the operating status of the backend server.
           Value options:
           + **ONLINE**: The backend server is running normally.
           + **NO_MONITOR**: No health check is configured for the backend server group to which the backend server belongs.
           + **OFFLINE**: The cloud server used as the backend server is stopped or does not exist.
           Multiple statuses can be queried.
    :param Sequence[str] pool_ids: Specifies the ID of the backend server group to which the backend server belongs.
           Multiple IDs can be queried.
    :param Sequence[int] protocol_ports: Specifies the port used by the backend servers.
           Multiple ports can be queried.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[str] subnet_cidr_ids: Specifies the ID of the subnet where the backend server works.
           Multiple IDs can be queried.
    :param Sequence[int] weights: Specifies the weight of the backend server.
           Multiple weights can be queried.
    """
    ...
