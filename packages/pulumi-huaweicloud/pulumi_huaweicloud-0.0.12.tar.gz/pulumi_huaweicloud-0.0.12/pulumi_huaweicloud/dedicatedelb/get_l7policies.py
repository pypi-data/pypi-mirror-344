# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetL7policiesResult',
    'AwaitableGetL7policiesResult',
    'get_l7policies',
    'get_l7policies_output',
]

@pulumi.output_type
class GetL7policiesResult:
    """
    A collection of values returned by getL7policies.
    """
    def __init__(__self__, action=None, description=None, enterprise_project_id=None, id=None, l7policies=None, l7policy_id=None, listener_id=None, name=None, priority=None, provisioning_status=None, redirect_listener_id=None, redirect_pool_id=None, region=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if l7policies and not isinstance(l7policies, list):
            raise TypeError("Expected argument 'l7policies' to be a list")
        pulumi.set(__self__, "l7policies", l7policies)
        if l7policy_id and not isinstance(l7policy_id, str):
            raise TypeError("Expected argument 'l7policy_id' to be a str")
        pulumi.set(__self__, "l7policy_id", l7policy_id)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if provisioning_status and not isinstance(provisioning_status, str):
            raise TypeError("Expected argument 'provisioning_status' to be a str")
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        if redirect_listener_id and not isinstance(redirect_listener_id, str):
            raise TypeError("Expected argument 'redirect_listener_id' to be a str")
        pulumi.set(__self__, "redirect_listener_id", redirect_listener_id)
        if redirect_pool_id and not isinstance(redirect_pool_id, str):
            raise TypeError("Expected argument 'redirect_pool_id' to be a str")
        pulumi.set(__self__, "redirect_pool_id", redirect_pool_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The requests will be forwarded.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The supplementary information about the forwarding policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def l7policies(self) -> Sequence['outputs.GetL7policiesL7policyResult']:
        """
        Lists the L7 policies.
        The l7policies structure is documented below.
        """
        return pulumi.get(self, "l7policies")

    @property
    @pulumi.getter(name="l7policyId")
    def l7policy_id(self) -> Optional[str]:
        return pulumi.get(self, "l7policy_id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[str]:
        """
        The ID of the listener to which the forwarding policy is added.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The forwarding policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        The forwarding policy priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional[str]:
        """
        The provisioning status of the forwarding policy.
        """
        return pulumi.get(self, "provisioning_status")

    @property
    @pulumi.getter(name="redirectListenerId")
    def redirect_listener_id(self) -> Optional[str]:
        """
        The ID of the listener to which requests are redirected.
        """
        return pulumi.get(self, "redirect_listener_id")

    @property
    @pulumi.getter(name="redirectPoolId")
    def redirect_pool_id(self) -> Optional[str]:
        """
        The ID of the backend server group that requests will be forwarded to.
        """
        return pulumi.get(self, "redirect_pool_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


class AwaitableGetL7policiesResult(GetL7policiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetL7policiesResult(
            action=self.action,
            description=self.description,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            l7policies=self.l7policies,
            l7policy_id=self.l7policy_id,
            listener_id=self.listener_id,
            name=self.name,
            priority=self.priority,
            provisioning_status=self.provisioning_status,
            redirect_listener_id=self.redirect_listener_id,
            redirect_pool_id=self.redirect_pool_id,
            region=self.region)


def get_l7policies(action: Optional[str] = None,
                   description: Optional[str] = None,
                   enterprise_project_id: Optional[str] = None,
                   l7policy_id: Optional[str] = None,
                   listener_id: Optional[str] = None,
                   name: Optional[str] = None,
                   priority: Optional[int] = None,
                   provisioning_status: Optional[str] = None,
                   redirect_listener_id: Optional[str] = None,
                   redirect_pool_id: Optional[str] = None,
                   region: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetL7policiesResult:
    """
    Use this data source to get the list of ELB L7 policies.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_name = config.require_object("policyName")
    test = huaweicloud.DedicatedElb.get_l7policies(name=policy_name)
    ```


    :param str action: Specifies the requests are forwarded. The value can be one of the following:
           + **REDIRECT_TO_POOL**: Requests are forwarded to another backend server group.
           + **REDIRECT_TO_LISTENER**: Requests are redirected to an HTTPS listener.
           + **REDIRECT_TO_URL**: Requests are redirected to another URL.
           + **FIXED_RESPONSE**: A fixed response body is returned.
    :param str description: Specifies the supplementary information about the forwarding policy.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str l7policy_id: Specifies the forwarding policy ID.
    :param str listener_id: Specifies the ID of the listener to which the forwarding policy is added.
    :param str name: Specifies the forwarding policy name.
    :param int priority: Specifies the forwarding policy priority.
    :param str provisioning_status: Specifies the provisioning status of the forwarding policy.
    :param str redirect_listener_id: Specifies the ID of the listener to which requests are redirected.
    :param str redirect_pool_id: Specifies the ID of the backend server group to which requests will be forwarded.
    :param str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['l7policyId'] = l7policy_id
    __args__['listenerId'] = listener_id
    __args__['name'] = name
    __args__['priority'] = priority
    __args__['provisioningStatus'] = provisioning_status
    __args__['redirectListenerId'] = redirect_listener_id
    __args__['redirectPoolId'] = redirect_pool_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getL7policies:getL7policies', __args__, opts=opts, typ=GetL7policiesResult).value

    return AwaitableGetL7policiesResult(
        action=__ret__.action,
        description=__ret__.description,
        enterprise_project_id=__ret__.enterprise_project_id,
        id=__ret__.id,
        l7policies=__ret__.l7policies,
        l7policy_id=__ret__.l7policy_id,
        listener_id=__ret__.listener_id,
        name=__ret__.name,
        priority=__ret__.priority,
        provisioning_status=__ret__.provisioning_status,
        redirect_listener_id=__ret__.redirect_listener_id,
        redirect_pool_id=__ret__.redirect_pool_id,
        region=__ret__.region)


@_utilities.lift_output_func(get_l7policies)
def get_l7policies_output(action: Optional[pulumi.Input[Optional[str]]] = None,
                          description: Optional[pulumi.Input[Optional[str]]] = None,
                          enterprise_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                          l7policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                          listener_id: Optional[pulumi.Input[Optional[str]]] = None,
                          name: Optional[pulumi.Input[Optional[str]]] = None,
                          priority: Optional[pulumi.Input[Optional[int]]] = None,
                          provisioning_status: Optional[pulumi.Input[Optional[str]]] = None,
                          redirect_listener_id: Optional[pulumi.Input[Optional[str]]] = None,
                          redirect_pool_id: Optional[pulumi.Input[Optional[str]]] = None,
                          region: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetL7policiesResult]:
    """
    Use this data source to get the list of ELB L7 policies.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_name = config.require_object("policyName")
    test = huaweicloud.DedicatedElb.get_l7policies(name=policy_name)
    ```


    :param str action: Specifies the requests are forwarded. The value can be one of the following:
           + **REDIRECT_TO_POOL**: Requests are forwarded to another backend server group.
           + **REDIRECT_TO_LISTENER**: Requests are redirected to an HTTPS listener.
           + **REDIRECT_TO_URL**: Requests are redirected to another URL.
           + **FIXED_RESPONSE**: A fixed response body is returned.
    :param str description: Specifies the supplementary information about the forwarding policy.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str l7policy_id: Specifies the forwarding policy ID.
    :param str listener_id: Specifies the ID of the listener to which the forwarding policy is added.
    :param str name: Specifies the forwarding policy name.
    :param int priority: Specifies the forwarding policy priority.
    :param str provisioning_status: Specifies the provisioning status of the forwarding policy.
    :param str redirect_listener_id: Specifies the ID of the listener to which requests are redirected.
    :param str redirect_pool_id: Specifies the ID of the backend server group to which requests will be forwarded.
    :param str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    """
    ...
