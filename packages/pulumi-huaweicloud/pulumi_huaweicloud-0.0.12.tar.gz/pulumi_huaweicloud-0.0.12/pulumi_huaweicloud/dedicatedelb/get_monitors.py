# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMonitorsResult',
    'AwaitableGetMonitorsResult',
    'get_monitors',
    'get_monitors_output',
]

@pulumi.output_type
class GetMonitorsResult:
    """
    A collection of values returned by getMonitors.
    """
    def __init__(__self__, domain_name=None, enterprise_project_id=None, http_method=None, id=None, interval=None, max_retries=None, max_retries_down=None, monitor_id=None, monitors=None, name=None, pool_id=None, port=None, protocol=None, region=None, status_code=None, timeout=None, url_path=None):
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if http_method and not isinstance(http_method, str):
            raise TypeError("Expected argument 'http_method' to be a str")
        pulumi.set(__self__, "http_method", http_method)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interval and not isinstance(interval, int):
            raise TypeError("Expected argument 'interval' to be a int")
        pulumi.set(__self__, "interval", interval)
        if max_retries and not isinstance(max_retries, int):
            raise TypeError("Expected argument 'max_retries' to be a int")
        pulumi.set(__self__, "max_retries", max_retries)
        if max_retries_down and not isinstance(max_retries_down, int):
            raise TypeError("Expected argument 'max_retries_down' to be a int")
        pulumi.set(__self__, "max_retries_down", max_retries_down)
        if monitor_id and not isinstance(monitor_id, str):
            raise TypeError("Expected argument 'monitor_id' to be a str")
        pulumi.set(__self__, "monitor_id", monitor_id)
        if monitors and not isinstance(monitors, list):
            raise TypeError("Expected argument 'monitors' to be a list")
        pulumi.set(__self__, "monitors", monitors)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status_code and not isinstance(status_code, str):
            raise TypeError("Expected argument 'status_code' to be a str")
        pulumi.set(__self__, "status_code", status_code)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)
        if url_path and not isinstance(url_path, str):
            raise TypeError("Expected argument 'url_path' to be a str")
        pulumi.set(__self__, "url_path", url_path)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        """
        The domain name that HTTP requests are sent to during the health check.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[str]:
        """
        The HTTP method
        """
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        The interval between health checks, in seconds.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[int]:
        """
        The number of consecutive health checks when the health check result of a backend server changes from
        **OFFLINE** to **ONLINE**.
        """
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="maxRetriesDown")
    def max_retries_down(self) -> Optional[int]:
        """
        The number of consecutive health checks when the health check result of a backend server changes from
        **ONLINE** to **OFFLINE**.
        """
        return pulumi.get(self, "max_retries_down")

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[str]:
        return pulumi.get(self, "monitor_id")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence['outputs.GetMonitorsMonitorResult']:
        """
        Lists the monitors.
        The monitors structure is documented below.
        """
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The health check name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[str]:
        """
        The ID of backend server groups for which the health check is configured.
        """
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port used for the health check.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The health check protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[str]:
        """
        The expected HTTP status code.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        The maximum time required for waiting for a response from the health check, in seconds.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[str]:
        """
        The HTTP request path for the health check.
        """
        return pulumi.get(self, "url_path")


class AwaitableGetMonitorsResult(GetMonitorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMonitorsResult(
            domain_name=self.domain_name,
            enterprise_project_id=self.enterprise_project_id,
            http_method=self.http_method,
            id=self.id,
            interval=self.interval,
            max_retries=self.max_retries,
            max_retries_down=self.max_retries_down,
            monitor_id=self.monitor_id,
            monitors=self.monitors,
            name=self.name,
            pool_id=self.pool_id,
            port=self.port,
            protocol=self.protocol,
            region=self.region,
            status_code=self.status_code,
            timeout=self.timeout,
            url_path=self.url_path)


def get_monitors(domain_name: Optional[str] = None,
                 enterprise_project_id: Optional[str] = None,
                 http_method: Optional[str] = None,
                 interval: Optional[int] = None,
                 max_retries: Optional[int] = None,
                 max_retries_down: Optional[int] = None,
                 monitor_id: Optional[str] = None,
                 name: Optional[str] = None,
                 pool_id: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 region: Optional[str] = None,
                 status_code: Optional[str] = None,
                 timeout: Optional[int] = None,
                 url_path: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMonitorsResult:
    """
    Use this data source to get the list of ELB monitors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.DedicatedElb.get_monitors(domain_name=domain_name)
    ```


    :param str domain_name: Specifies the domain name to which HTTP requests are sent during the health check.
           The value can be digits, letters, hyphens (-), or periods (.) and must start with a digit or letter.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str http_method: Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**.
    :param int interval: Specifies the interval between health checks, in seconds.  
           The value ranges from `1` to `50`.
    :param int max_retries: Specifies the number of consecutive health checks when the health check result of a
           backend server changes from **OFFLINE** to **ONLINE**.
    :param int max_retries_down: Specifies the number of consecutive health checks when the health check result of
           a backend server changes from **ONLINE** to **OFFLINE**. The value ranges from `1` to `10`.
    :param str monitor_id: Specifies the health check ID.
    :param str name: Specifies the health check name.
    :param str pool_id: Specifies the ID of backend server groups for which the health check is configured.
    :param int port: Specifies the port used for the health check.
    :param str protocol: Specifies the health check protocol. The value can be **TCP**, **UDP_CONNECT**,
           **HTTP**, **HTTPS**, **GRPC** or **TLS**.
    :param str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    :param str status_code: Specifies the expected HTTP status code. This parameter will take effect only when
           type is set to **HTTP** or **HTTPS**.Value options:
           + A specific value, for example, **200**
           + A list of values that are separated with commas (,), for example, **200**, **202**
           + A value range, for example, **200**-**204**
    :param int timeout: Specifies the maximum time required for waiting for a response from the health check, in
           seconds.
    :param str url_path: Specifies the HTTP request path for the health check. The value must start with a slash
           (/), and the default value is **/**. This parameter is available only when type is set to **HTTP**.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['httpMethod'] = http_method
    __args__['interval'] = interval
    __args__['maxRetries'] = max_retries
    __args__['maxRetriesDown'] = max_retries_down
    __args__['monitorId'] = monitor_id
    __args__['name'] = name
    __args__['poolId'] = pool_id
    __args__['port'] = port
    __args__['protocol'] = protocol
    __args__['region'] = region
    __args__['statusCode'] = status_code
    __args__['timeout'] = timeout
    __args__['urlPath'] = url_path
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getMonitors:getMonitors', __args__, opts=opts, typ=GetMonitorsResult).value

    return AwaitableGetMonitorsResult(
        domain_name=__ret__.domain_name,
        enterprise_project_id=__ret__.enterprise_project_id,
        http_method=__ret__.http_method,
        id=__ret__.id,
        interval=__ret__.interval,
        max_retries=__ret__.max_retries,
        max_retries_down=__ret__.max_retries_down,
        monitor_id=__ret__.monitor_id,
        monitors=__ret__.monitors,
        name=__ret__.name,
        pool_id=__ret__.pool_id,
        port=__ret__.port,
        protocol=__ret__.protocol,
        region=__ret__.region,
        status_code=__ret__.status_code,
        timeout=__ret__.timeout,
        url_path=__ret__.url_path)


@_utilities.lift_output_func(get_monitors)
def get_monitors_output(domain_name: Optional[pulumi.Input[Optional[str]]] = None,
                        enterprise_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                        http_method: Optional[pulumi.Input[Optional[str]]] = None,
                        interval: Optional[pulumi.Input[Optional[int]]] = None,
                        max_retries: Optional[pulumi.Input[Optional[int]]] = None,
                        max_retries_down: Optional[pulumi.Input[Optional[int]]] = None,
                        monitor_id: Optional[pulumi.Input[Optional[str]]] = None,
                        name: Optional[pulumi.Input[Optional[str]]] = None,
                        pool_id: Optional[pulumi.Input[Optional[str]]] = None,
                        port: Optional[pulumi.Input[Optional[int]]] = None,
                        protocol: Optional[pulumi.Input[Optional[str]]] = None,
                        region: Optional[pulumi.Input[Optional[str]]] = None,
                        status_code: Optional[pulumi.Input[Optional[str]]] = None,
                        timeout: Optional[pulumi.Input[Optional[int]]] = None,
                        url_path: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMonitorsResult]:
    """
    Use this data source to get the list of ELB monitors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    domain_name = config.require_object("domainName")
    test = huaweicloud.DedicatedElb.get_monitors(domain_name=domain_name)
    ```


    :param str domain_name: Specifies the domain name to which HTTP requests are sent during the health check.
           The value can be digits, letters, hyphens (-), or periods (.) and must start with a digit or letter.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str http_method: Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**.
    :param int interval: Specifies the interval between health checks, in seconds.  
           The value ranges from `1` to `50`.
    :param int max_retries: Specifies the number of consecutive health checks when the health check result of a
           backend server changes from **OFFLINE** to **ONLINE**.
    :param int max_retries_down: Specifies the number of consecutive health checks when the health check result of
           a backend server changes from **ONLINE** to **OFFLINE**. The value ranges from `1` to `10`.
    :param str monitor_id: Specifies the health check ID.
    :param str name: Specifies the health check name.
    :param str pool_id: Specifies the ID of backend server groups for which the health check is configured.
    :param int port: Specifies the port used for the health check.
    :param str protocol: Specifies the health check protocol. The value can be **TCP**, **UDP_CONNECT**,
           **HTTP**, **HTTPS**, **GRPC** or **TLS**.
    :param str region: Specifies the region in which to query the data source. If omitted, the provider-level
           region will be used.
    :param str status_code: Specifies the expected HTTP status code. This parameter will take effect only when
           type is set to **HTTP** or **HTTPS**.Value options:
           + A specific value, for example, **200**
           + A list of values that are separated with commas (,), for example, **200**, **202**
           + A value range, for example, **200**-**204**
    :param int timeout: Specifies the maximum time required for waiting for a response from the health check, in
           seconds.
    :param str url_path: Specifies the HTTP request path for the health check. The value must start with a slash
           (/), and the default value is **/**. This parameter is available only when type is set to **HTTP**.
    """
    ...
