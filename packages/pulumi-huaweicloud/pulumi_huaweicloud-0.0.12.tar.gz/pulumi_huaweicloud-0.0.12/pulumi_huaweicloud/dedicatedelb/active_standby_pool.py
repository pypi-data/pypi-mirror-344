# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ActiveStandbyPoolArgs', 'ActiveStandbyPool']

@pulumi.input_type
class ActiveStandbyPoolArgs:
    def __init__(__self__, *,
                 healthmonitor: pulumi.Input['ActiveStandbyPoolHealthmonitorArgs'],
                 members: pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolMemberArgs']]],
                 protocol: pulumi.Input[str],
                 any_port_enable: Optional[pulumi.Input[bool]] = None,
                 connection_drain_enabled: Optional[pulumi.Input[bool]] = None,
                 connection_drain_timeout: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 lb_algorithm: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ActiveStandbyPool resource.
        :param pulumi.Input['ActiveStandbyPoolHealthmonitorArgs'] healthmonitor: Specifies the health check configured for the active-standby pool.
               The healthmonitor structure is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolMemberArgs']]] members: Specifies the members in the active-standby pool.
               The members structure is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[str] protocol: Specifies the protocol used by the active-standby pool to receive requests.
               Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
               + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
               + If the listener's protocol is **TCP**, the value must be **TCP**.
               + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
        :param pulumi.Input[bool] any_port_enable: Specifies whether to enable forward to same port for active-standby
               pool. If this option is enabled, the listener routes the requests to the backend server over the same port as the
               frontend port. Value options:
               + **false**: Disable forward to same port.
               + **true**: Enable forward to same port.
        :param pulumi.Input[bool] connection_drain_enabled: Specifies whether to enable delayed logout. This parameter can
               be set to **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the
               associated listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
               + The pool member is removed from the pool.
               + The health monitor status is abnormal.
               + The pool member weight is changed to 0.
        :param pulumi.Input[int] connection_drain_timeout: Specifies the timeout of the delayed logout in seconds. Value
               ranges from `10` to `4,000`.
        :param pulumi.Input[str] description: Specifies the description of the active-standby pool. Changing this
               parameter will create a new resource.
        :param pulumi.Input[str] ip_version: Specifies the IP address version supported by active-standby pool.
               The value can be **dualstack**, **v6**, or **v4**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] lb_algorithm: Specifies the load balancing algorithm used by the load balancer to route
               requests to backend servers in the associated backend server group. Value options:
               + **ROUND_ROBIN**: weighted round robin.
               + **LEAST_CONNECTIONS**: weighted least connections.
               + **SOURCE_IP**: source IP hash.
               + **QUIC_CID**: connection ID.
        :param pulumi.Input[str] listener_id: Specifies the ID of the listener with which the active-standby pool is
               associated. Changing this parameter will create a new resource.
        :param pulumi.Input[str] loadbalancer_id: Specifies the ID of the load balancer with which the active-standby
               pool is associated. Changing this parameter will create a new resource.
        :param pulumi.Input[str] name: Specifies the health check name. The length range of value is from `1` to `255`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the ELB active-standby pool resource.
               If omitted, the provider-level region will be used.
        :param pulumi.Input[str] type: Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
               **HTTP**, and **HTTPS**.
               + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        :param pulumi.Input[str] vpc_id: Specifies the ID of the VPC where the active-standby pool works. Changing this
               parameter will create a new resource.
        """
        pulumi.set(__self__, "healthmonitor", healthmonitor)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "protocol", protocol)
        if any_port_enable is not None:
            pulumi.set(__self__, "any_port_enable", any_port_enable)
        if connection_drain_enabled is not None:
            pulumi.set(__self__, "connection_drain_enabled", connection_drain_enabled)
        if connection_drain_timeout is not None:
            pulumi.set(__self__, "connection_drain_timeout", connection_drain_timeout)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if lb_algorithm is not None:
            pulumi.set(__self__, "lb_algorithm", lb_algorithm)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if loadbalancer_id is not None:
            pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def healthmonitor(self) -> pulumi.Input['ActiveStandbyPoolHealthmonitorArgs']:
        """
        Specifies the health check configured for the active-standby pool.
        The healthmonitor structure is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "healthmonitor")

    @healthmonitor.setter
    def healthmonitor(self, value: pulumi.Input['ActiveStandbyPoolHealthmonitorArgs']):
        pulumi.set(self, "healthmonitor", value)

    @property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolMemberArgs']]]:
        """
        Specifies the members in the active-standby pool.
        The members structure is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolMemberArgs']]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Specifies the protocol used by the active-standby pool to receive requests.
        Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
        + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
        + If the listener's protocol is **TCP**, the value must be **TCP**.
        + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="anyPortEnable")
    def any_port_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable forward to same port for active-standby
        pool. If this option is enabled, the listener routes the requests to the backend server over the same port as the
        frontend port. Value options:
        + **false**: Disable forward to same port.
        + **true**: Enable forward to same port.
        """
        return pulumi.get(self, "any_port_enable")

    @any_port_enable.setter
    def any_port_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_port_enable", value)

    @property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable delayed logout. This parameter can
        be set to **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the
        associated listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
        + The pool member is removed from the pool.
        + The health monitor status is abnormal.
        + The pool member weight is changed to 0.
        """
        return pulumi.get(self, "connection_drain_enabled")

    @connection_drain_enabled.setter
    def connection_drain_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connection_drain_enabled", value)

    @property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the timeout of the delayed logout in seconds. Value
        ranges from `10` to `4,000`.
        """
        return pulumi.get(self, "connection_drain_timeout")

    @connection_drain_timeout.setter
    def connection_drain_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_drain_timeout", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the active-standby pool. Changing this
        parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the IP address version supported by active-standby pool.
        The value can be **dualstack**, **v6**, or **v4**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the load balancing algorithm used by the load balancer to route
        requests to backend servers in the associated backend server group. Value options:
        + **ROUND_ROBIN**: weighted round robin.
        + **LEAST_CONNECTIONS**: weighted least connections.
        + **SOURCE_IP**: source IP hash.
        + **QUIC_CID**: connection ID.
        """
        return pulumi.get(self, "lb_algorithm")

    @lb_algorithm.setter
    def lb_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_algorithm", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the listener with which the active-standby pool is
        associated. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the load balancer with which the active-standby
        pool is associated. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loadbalancer_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the health check name. The length range of value is from `1` to `255`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the ELB active-standby pool resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
        **HTTP**, and **HTTPS**.
        + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
        + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
        + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the VPC where the active-standby pool works. Changing this
        parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _ActiveStandbyPoolState:
    def __init__(__self__, *,
                 any_port_enable: Optional[pulumi.Input[bool]] = None,
                 connection_drain_enabled: Optional[pulumi.Input[bool]] = None,
                 connection_drain_timeout: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 healthmonitor: Optional[pulumi.Input['ActiveStandbyPoolHealthmonitorArgs']] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 lb_algorithm: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quic_cid_hash_strategies: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolQuicCidHashStrategyArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ActiveStandbyPool resources.
        :param pulumi.Input[bool] any_port_enable: Specifies whether to enable forward to same port for active-standby
               pool. If this option is enabled, the listener routes the requests to the backend server over the same port as the
               frontend port. Value options:
               + **false**: Disable forward to same port.
               + **true**: Enable forward to same port.
        :param pulumi.Input[bool] connection_drain_enabled: Specifies whether to enable delayed logout. This parameter can
               be set to **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the
               associated listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
               + The pool member is removed from the pool.
               + The health monitor status is abnormal.
               + The pool member weight is changed to 0.
        :param pulumi.Input[int] connection_drain_timeout: Specifies the timeout of the delayed logout in seconds. Value
               ranges from `10` to `4,000`.
        :param pulumi.Input[str] created_at: The create time of the active-standby pool.
        :param pulumi.Input[str] description: Specifies the description of the active-standby pool. Changing this
               parameter will create a new resource.
        :param pulumi.Input['ActiveStandbyPoolHealthmonitorArgs'] healthmonitor: Specifies the health check configured for the active-standby pool.
               The healthmonitor structure is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[str] ip_version: Specifies the IP address version supported by active-standby pool.
               The value can be **dualstack**, **v6**, or **v4**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] lb_algorithm: Specifies the load balancing algorithm used by the load balancer to route
               requests to backend servers in the associated backend server group. Value options:
               + **ROUND_ROBIN**: weighted round robin.
               + **LEAST_CONNECTIONS**: weighted least connections.
               + **SOURCE_IP**: source IP hash.
               + **QUIC_CID**: connection ID.
        :param pulumi.Input[str] listener_id: Specifies the ID of the listener with which the active-standby pool is
               associated. Changing this parameter will create a new resource.
        :param pulumi.Input[str] loadbalancer_id: Specifies the ID of the load balancer with which the active-standby
               pool is associated. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolMemberArgs']]] members: Specifies the members in the active-standby pool.
               The members structure is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[str] name: Specifies the health check name. The length range of value is from `1` to `255`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] protocol: Specifies the protocol used by the active-standby pool to receive requests.
               Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
               + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
               + If the listener's protocol is **TCP**, the value must be **TCP**.
               + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
        :param pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolQuicCidHashStrategyArgs']]] quic_cid_hash_strategies: The multi-path distribution configuration based on destination connection IDs.
               The quic_cid_hash_strategy structure is documented below.
        :param pulumi.Input[str] region: Specifies the region in which to create the ELB active-standby pool resource.
               If omitted, the provider-level region will be used.
        :param pulumi.Input[str] type: Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
               **HTTP**, and **HTTPS**.
               + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        :param pulumi.Input[str] updated_at: The update time of the active-standby pool.
        :param pulumi.Input[str] vpc_id: Specifies the ID of the VPC where the active-standby pool works. Changing this
               parameter will create a new resource.
        """
        if any_port_enable is not None:
            pulumi.set(__self__, "any_port_enable", any_port_enable)
        if connection_drain_enabled is not None:
            pulumi.set(__self__, "connection_drain_enabled", connection_drain_enabled)
        if connection_drain_timeout is not None:
            pulumi.set(__self__, "connection_drain_timeout", connection_drain_timeout)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if healthmonitor is not None:
            pulumi.set(__self__, "healthmonitor", healthmonitor)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if lb_algorithm is not None:
            pulumi.set(__self__, "lb_algorithm", lb_algorithm)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if loadbalancer_id is not None:
            pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quic_cid_hash_strategies is not None:
            pulumi.set(__self__, "quic_cid_hash_strategies", quic_cid_hash_strategies)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="anyPortEnable")
    def any_port_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable forward to same port for active-standby
        pool. If this option is enabled, the listener routes the requests to the backend server over the same port as the
        frontend port. Value options:
        + **false**: Disable forward to same port.
        + **true**: Enable forward to same port.
        """
        return pulumi.get(self, "any_port_enable")

    @any_port_enable.setter
    def any_port_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_port_enable", value)

    @property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable delayed logout. This parameter can
        be set to **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the
        associated listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
        + The pool member is removed from the pool.
        + The health monitor status is abnormal.
        + The pool member weight is changed to 0.
        """
        return pulumi.get(self, "connection_drain_enabled")

    @connection_drain_enabled.setter
    def connection_drain_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connection_drain_enabled", value)

    @property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the timeout of the delayed logout in seconds. Value
        ranges from `10` to `4,000`.
        """
        return pulumi.get(self, "connection_drain_timeout")

    @connection_drain_timeout.setter
    def connection_drain_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_drain_timeout", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the active-standby pool.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the active-standby pool. Changing this
        parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def healthmonitor(self) -> Optional[pulumi.Input['ActiveStandbyPoolHealthmonitorArgs']]:
        """
        Specifies the health check configured for the active-standby pool.
        The healthmonitor structure is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "healthmonitor")

    @healthmonitor.setter
    def healthmonitor(self, value: Optional[pulumi.Input['ActiveStandbyPoolHealthmonitorArgs']]):
        pulumi.set(self, "healthmonitor", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the IP address version supported by active-standby pool.
        The value can be **dualstack**, **v6**, or **v4**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the load balancing algorithm used by the load balancer to route
        requests to backend servers in the associated backend server group. Value options:
        + **ROUND_ROBIN**: weighted round robin.
        + **LEAST_CONNECTIONS**: weighted least connections.
        + **SOURCE_IP**: source IP hash.
        + **QUIC_CID**: connection ID.
        """
        return pulumi.get(self, "lb_algorithm")

    @lb_algorithm.setter
    def lb_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_algorithm", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the listener with which the active-standby pool is
        associated. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the load balancer with which the active-standby
        pool is associated. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loadbalancer_id", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolMemberArgs']]]]:
        """
        Specifies the members in the active-standby pool.
        The members structure is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the health check name. The length range of value is from `1` to `255`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the protocol used by the active-standby pool to receive requests.
        Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
        + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
        + If the listener's protocol is **TCP**, the value must be **TCP**.
        + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="quicCidHashStrategies")
    def quic_cid_hash_strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolQuicCidHashStrategyArgs']]]]:
        """
        The multi-path distribution configuration based on destination connection IDs.
        The quic_cid_hash_strategy structure is documented below.
        """
        return pulumi.get(self, "quic_cid_hash_strategies")

    @quic_cid_hash_strategies.setter
    def quic_cid_hash_strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveStandbyPoolQuicCidHashStrategyArgs']]]]):
        pulumi.set(self, "quic_cid_hash_strategies", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the ELB active-standby pool resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
        **HTTP**, and **HTTPS**.
        + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
        + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
        + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of the active-standby pool.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the VPC where the active-standby pool works. Changing this
        parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class ActiveStandbyPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 any_port_enable: Optional[pulumi.Input[bool]] = None,
                 connection_drain_enabled: Optional[pulumi.Input[bool]] = None,
                 connection_drain_timeout: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 healthmonitor: Optional[pulumi.Input[pulumi.InputType['ActiveStandbyPoolHealthmonitorArgs']]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 lb_algorithm: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveStandbyPoolMemberArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an ELB active-standby pool resource within HuaweiCloud.

        ## Example Usage
        ### Create an active-standby Pool

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        test = huaweicloud.dedicated_elb.ActiveStandbyPool("test",
            description="test description",
            protocol="TCP",
            vpc_id=vpc_id,
            type="instance",
            any_port_enable=False,
            members=[
                huaweicloud.dedicated_elb.ActiveStandbyPoolMemberArgs(
                    address="192.168.0.1",
                    role="master",
                    protocol_port=45,
                ),
                huaweicloud.dedicated_elb.ActiveStandbyPoolMemberArgs(
                    address="192.168.0.2",
                    role="slave",
                    protocol_port=36,
                ),
            ],
            healthmonitor=huaweicloud.dedicated_elb.ActiveStandbyPoolHealthmonitorArgs(
                delay=5,
                expected_codes="200",
                max_retries=3,
                max_retries_down=3,
                timeout=3,
                type="TCP",
            ))
        ```

        ## Import

        ELB active-standby pool can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:DedicatedElb/activeStandbyPool:ActiveStandbyPool test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] any_port_enable: Specifies whether to enable forward to same port for active-standby
               pool. If this option is enabled, the listener routes the requests to the backend server over the same port as the
               frontend port. Value options:
               + **false**: Disable forward to same port.
               + **true**: Enable forward to same port.
        :param pulumi.Input[bool] connection_drain_enabled: Specifies whether to enable delayed logout. This parameter can
               be set to **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the
               associated listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
               + The pool member is removed from the pool.
               + The health monitor status is abnormal.
               + The pool member weight is changed to 0.
        :param pulumi.Input[int] connection_drain_timeout: Specifies the timeout of the delayed logout in seconds. Value
               ranges from `10` to `4,000`.
        :param pulumi.Input[str] description: Specifies the description of the active-standby pool. Changing this
               parameter will create a new resource.
        :param pulumi.Input[pulumi.InputType['ActiveStandbyPoolHealthmonitorArgs']] healthmonitor: Specifies the health check configured for the active-standby pool.
               The healthmonitor structure is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[str] ip_version: Specifies the IP address version supported by active-standby pool.
               The value can be **dualstack**, **v6**, or **v4**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] lb_algorithm: Specifies the load balancing algorithm used by the load balancer to route
               requests to backend servers in the associated backend server group. Value options:
               + **ROUND_ROBIN**: weighted round robin.
               + **LEAST_CONNECTIONS**: weighted least connections.
               + **SOURCE_IP**: source IP hash.
               + **QUIC_CID**: connection ID.
        :param pulumi.Input[str] listener_id: Specifies the ID of the listener with which the active-standby pool is
               associated. Changing this parameter will create a new resource.
        :param pulumi.Input[str] loadbalancer_id: Specifies the ID of the load balancer with which the active-standby
               pool is associated. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveStandbyPoolMemberArgs']]]] members: Specifies the members in the active-standby pool.
               The members structure is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[str] name: Specifies the health check name. The length range of value is from `1` to `255`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] protocol: Specifies the protocol used by the active-standby pool to receive requests.
               Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
               + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
               + If the listener's protocol is **TCP**, the value must be **TCP**.
               + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
        :param pulumi.Input[str] region: Specifies the region in which to create the ELB active-standby pool resource.
               If omitted, the provider-level region will be used.
        :param pulumi.Input[str] type: Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
               **HTTP**, and **HTTPS**.
               + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        :param pulumi.Input[str] vpc_id: Specifies the ID of the VPC where the active-standby pool works. Changing this
               parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActiveStandbyPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an ELB active-standby pool resource within HuaweiCloud.

        ## Example Usage
        ### Create an active-standby Pool

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        vpc_id = config.require_object("vpcId")
        test = huaweicloud.dedicated_elb.ActiveStandbyPool("test",
            description="test description",
            protocol="TCP",
            vpc_id=vpc_id,
            type="instance",
            any_port_enable=False,
            members=[
                huaweicloud.dedicated_elb.ActiveStandbyPoolMemberArgs(
                    address="192.168.0.1",
                    role="master",
                    protocol_port=45,
                ),
                huaweicloud.dedicated_elb.ActiveStandbyPoolMemberArgs(
                    address="192.168.0.2",
                    role="slave",
                    protocol_port=36,
                ),
            ],
            healthmonitor=huaweicloud.dedicated_elb.ActiveStandbyPoolHealthmonitorArgs(
                delay=5,
                expected_codes="200",
                max_retries=3,
                max_retries_down=3,
                timeout=3,
                type="TCP",
            ))
        ```

        ## Import

        ELB active-standby pool can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:DedicatedElb/activeStandbyPool:ActiveStandbyPool test <id>
        ```

        :param str resource_name: The name of the resource.
        :param ActiveStandbyPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActiveStandbyPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 any_port_enable: Optional[pulumi.Input[bool]] = None,
                 connection_drain_enabled: Optional[pulumi.Input[bool]] = None,
                 connection_drain_timeout: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 healthmonitor: Optional[pulumi.Input[pulumi.InputType['ActiveStandbyPoolHealthmonitorArgs']]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 lb_algorithm: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveStandbyPoolMemberArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActiveStandbyPoolArgs.__new__(ActiveStandbyPoolArgs)

            __props__.__dict__["any_port_enable"] = any_port_enable
            __props__.__dict__["connection_drain_enabled"] = connection_drain_enabled
            __props__.__dict__["connection_drain_timeout"] = connection_drain_timeout
            __props__.__dict__["description"] = description
            if healthmonitor is None and not opts.urn:
                raise TypeError("Missing required property 'healthmonitor'")
            __props__.__dict__["healthmonitor"] = healthmonitor
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["lb_algorithm"] = lb_algorithm
            __props__.__dict__["listener_id"] = listener_id
            __props__.__dict__["loadbalancer_id"] = loadbalancer_id
            if members is None and not opts.urn:
                raise TypeError("Missing required property 'members'")
            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["region"] = region
            __props__.__dict__["type"] = type
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["quic_cid_hash_strategies"] = None
            __props__.__dict__["updated_at"] = None
        super(ActiveStandbyPool, __self__).__init__(
            'huaweicloud:DedicatedElb/activeStandbyPool:ActiveStandbyPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            any_port_enable: Optional[pulumi.Input[bool]] = None,
            connection_drain_enabled: Optional[pulumi.Input[bool]] = None,
            connection_drain_timeout: Optional[pulumi.Input[int]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            healthmonitor: Optional[pulumi.Input[pulumi.InputType['ActiveStandbyPoolHealthmonitorArgs']]] = None,
            ip_version: Optional[pulumi.Input[str]] = None,
            lb_algorithm: Optional[pulumi.Input[str]] = None,
            listener_id: Optional[pulumi.Input[str]] = None,
            loadbalancer_id: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveStandbyPoolMemberArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            quic_cid_hash_strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveStandbyPoolQuicCidHashStrategyArgs']]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'ActiveStandbyPool':
        """
        Get an existing ActiveStandbyPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] any_port_enable: Specifies whether to enable forward to same port for active-standby
               pool. If this option is enabled, the listener routes the requests to the backend server over the same port as the
               frontend port. Value options:
               + **false**: Disable forward to same port.
               + **true**: Enable forward to same port.
        :param pulumi.Input[bool] connection_drain_enabled: Specifies whether to enable delayed logout. This parameter can
               be set to **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the
               associated listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
               + The pool member is removed from the pool.
               + The health monitor status is abnormal.
               + The pool member weight is changed to 0.
        :param pulumi.Input[int] connection_drain_timeout: Specifies the timeout of the delayed logout in seconds. Value
               ranges from `10` to `4,000`.
        :param pulumi.Input[str] created_at: The create time of the active-standby pool.
        :param pulumi.Input[str] description: Specifies the description of the active-standby pool. Changing this
               parameter will create a new resource.
        :param pulumi.Input[pulumi.InputType['ActiveStandbyPoolHealthmonitorArgs']] healthmonitor: Specifies the health check configured for the active-standby pool.
               The healthmonitor structure is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[str] ip_version: Specifies the IP address version supported by active-standby pool.
               The value can be **dualstack**, **v6**, or **v4**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] lb_algorithm: Specifies the load balancing algorithm used by the load balancer to route
               requests to backend servers in the associated backend server group. Value options:
               + **ROUND_ROBIN**: weighted round robin.
               + **LEAST_CONNECTIONS**: weighted least connections.
               + **SOURCE_IP**: source IP hash.
               + **QUIC_CID**: connection ID.
        :param pulumi.Input[str] listener_id: Specifies the ID of the listener with which the active-standby pool is
               associated. Changing this parameter will create a new resource.
        :param pulumi.Input[str] loadbalancer_id: Specifies the ID of the load balancer with which the active-standby
               pool is associated. Changing this parameter will create a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveStandbyPoolMemberArgs']]]] members: Specifies the members in the active-standby pool.
               The members structure is documented below. Changing this parameter will create a new resource.
        :param pulumi.Input[str] name: Specifies the health check name. The length range of value is from `1` to `255`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] protocol: Specifies the protocol used by the active-standby pool to receive requests.
               Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
               + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
               + If the listener's protocol is **TCP**, the value must be **TCP**.
               + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveStandbyPoolQuicCidHashStrategyArgs']]]] quic_cid_hash_strategies: The multi-path distribution configuration based on destination connection IDs.
               The quic_cid_hash_strategy structure is documented below.
        :param pulumi.Input[str] region: Specifies the region in which to create the ELB active-standby pool resource.
               If omitted, the provider-level region will be used.
        :param pulumi.Input[str] type: Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
               **HTTP**, and **HTTPS**.
               + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
               + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
               + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        :param pulumi.Input[str] updated_at: The update time of the active-standby pool.
        :param pulumi.Input[str] vpc_id: Specifies the ID of the VPC where the active-standby pool works. Changing this
               parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ActiveStandbyPoolState.__new__(_ActiveStandbyPoolState)

        __props__.__dict__["any_port_enable"] = any_port_enable
        __props__.__dict__["connection_drain_enabled"] = connection_drain_enabled
        __props__.__dict__["connection_drain_timeout"] = connection_drain_timeout
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["healthmonitor"] = healthmonitor
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["lb_algorithm"] = lb_algorithm
        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["loadbalancer_id"] = loadbalancer_id
        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["quic_cid_hash_strategies"] = quic_cid_hash_strategies
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vpc_id"] = vpc_id
        return ActiveStandbyPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="anyPortEnable")
    def any_port_enable(self) -> pulumi.Output[bool]:
        """
        Specifies whether to enable forward to same port for active-standby
        pool. If this option is enabled, the listener routes the requests to the backend server over the same port as the
        frontend port. Value options:
        + **false**: Disable forward to same port.
        + **true**: Enable forward to same port.
        """
        return pulumi.get(self, "any_port_enable")

    @property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> pulumi.Output[bool]:
        """
        Specifies whether to enable delayed logout. This parameter can
        be set to **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the
        associated listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
        + The pool member is removed from the pool.
        + The health monitor status is abnormal.
        + The pool member weight is changed to 0.
        """
        return pulumi.get(self, "connection_drain_enabled")

    @property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> pulumi.Output[int]:
        """
        Specifies the timeout of the delayed logout in seconds. Value
        ranges from `10` to `4,000`.
        """
        return pulumi.get(self, "connection_drain_timeout")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The create time of the active-standby pool.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Specifies the description of the active-standby pool. Changing this
        parameter will create a new resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def healthmonitor(self) -> pulumi.Output['outputs.ActiveStandbyPoolHealthmonitor']:
        """
        Specifies the health check configured for the active-standby pool.
        The healthmonitor structure is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "healthmonitor")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[str]:
        """
        Specifies the IP address version supported by active-standby pool.
        The value can be **dualstack**, **v6**, or **v4**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the load balancing algorithm used by the load balancer to route
        requests to backend servers in the associated backend server group. Value options:
        + **ROUND_ROBIN**: weighted round robin.
        + **LEAST_CONNECTIONS**: weighted least connections.
        + **SOURCE_IP**: source IP hash.
        + **QUIC_CID**: connection ID.
        """
        return pulumi.get(self, "lb_algorithm")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the listener with which the active-standby pool is
        associated. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the load balancer with which the active-standby
        pool is associated. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "loadbalancer_id")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.ActiveStandbyPoolMember']]:
        """
        Specifies the members in the active-standby pool.
        The members structure is documented below. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the health check name. The length range of value is from `1` to `255`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Specifies the protocol used by the active-standby pool to receive requests.
        Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
        + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
        + If the listener's protocol is **TCP**, the value must be **TCP**.
        + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="quicCidHashStrategies")
    def quic_cid_hash_strategies(self) -> pulumi.Output[Sequence['outputs.ActiveStandbyPoolQuicCidHashStrategy']]:
        """
        The multi-path distribution configuration based on destination connection IDs.
        The quic_cid_hash_strategy structure is documented below.
        """
        return pulumi.get(self, "quic_cid_hash_strategies")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the ELB active-standby pool resource.
        If omitted, the provider-level region will be used.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
        **HTTP**, and **HTTPS**.
        + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
        + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
        + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The update time of the active-standby pool.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the VPC where the active-standby pool works. Changing this
        parameter will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

