# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPoolsResult',
    'AwaitableGetPoolsResult',
    'get_pools',
    'get_pools_output',
]

@pulumi.output_type
class GetPoolsResult:
    """
    A collection of values returned by getPools.
    """
    def __init__(__self__, any_port_enable=None, connection_drain=None, description=None, enterprise_project_id=None, healthmonitor_id=None, id=None, ip_version=None, lb_method=None, listener_id=None, loadbalancer_id=None, member_address=None, member_deletion_protection_enable=None, member_device_id=None, member_instance_id=None, name=None, pool_health=None, pool_id=None, pools=None, protection_status=None, protocol=None, public_border_group=None, quic_cid_len=None, quic_cid_offset=None, region=None, type=None, vpc_id=None):
        if any_port_enable and not isinstance(any_port_enable, str):
            raise TypeError("Expected argument 'any_port_enable' to be a str")
        pulumi.set(__self__, "any_port_enable", any_port_enable)
        if connection_drain and not isinstance(connection_drain, str):
            raise TypeError("Expected argument 'connection_drain' to be a str")
        pulumi.set(__self__, "connection_drain", connection_drain)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if healthmonitor_id and not isinstance(healthmonitor_id, str):
            raise TypeError("Expected argument 'healthmonitor_id' to be a str")
        pulumi.set(__self__, "healthmonitor_id", healthmonitor_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_version and not isinstance(ip_version, str):
            raise TypeError("Expected argument 'ip_version' to be a str")
        pulumi.set(__self__, "ip_version", ip_version)
        if lb_method and not isinstance(lb_method, str):
            raise TypeError("Expected argument 'lb_method' to be a str")
        pulumi.set(__self__, "lb_method", lb_method)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if loadbalancer_id and not isinstance(loadbalancer_id, str):
            raise TypeError("Expected argument 'loadbalancer_id' to be a str")
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if member_address and not isinstance(member_address, str):
            raise TypeError("Expected argument 'member_address' to be a str")
        pulumi.set(__self__, "member_address", member_address)
        if member_deletion_protection_enable and not isinstance(member_deletion_protection_enable, str):
            raise TypeError("Expected argument 'member_deletion_protection_enable' to be a str")
        pulumi.set(__self__, "member_deletion_protection_enable", member_deletion_protection_enable)
        if member_device_id and not isinstance(member_device_id, str):
            raise TypeError("Expected argument 'member_device_id' to be a str")
        pulumi.set(__self__, "member_device_id", member_device_id)
        if member_instance_id and not isinstance(member_instance_id, str):
            raise TypeError("Expected argument 'member_instance_id' to be a str")
        pulumi.set(__self__, "member_instance_id", member_instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pool_health and not isinstance(pool_health, str):
            raise TypeError("Expected argument 'pool_health' to be a str")
        pulumi.set(__self__, "pool_health", pool_health)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if pools and not isinstance(pools, list):
            raise TypeError("Expected argument 'pools' to be a list")
        pulumi.set(__self__, "pools", pools)
        if protection_status and not isinstance(protection_status, str):
            raise TypeError("Expected argument 'protection_status' to be a str")
        pulumi.set(__self__, "protection_status", protection_status)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if public_border_group and not isinstance(public_border_group, str):
            raise TypeError("Expected argument 'public_border_group' to be a str")
        pulumi.set(__self__, "public_border_group", public_border_group)
        if quic_cid_len and not isinstance(quic_cid_len, int):
            raise TypeError("Expected argument 'quic_cid_len' to be a int")
        pulumi.set(__self__, "quic_cid_len", quic_cid_len)
        if quic_cid_offset and not isinstance(quic_cid_offset, int):
            raise TypeError("Expected argument 'quic_cid_offset' to be a int")
        pulumi.set(__self__, "quic_cid_offset", quic_cid_offset)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="anyPortEnable")
    def any_port_enable(self) -> Optional[str]:
        """
        Whether forward to same port for a backend server group is enabled
        """
        return pulumi.get(self, "any_port_enable")

    @property
    @pulumi.getter(name="connectionDrain")
    def connection_drain(self) -> Optional[str]:
        return pulumi.get(self, "connection_drain")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[str]:
        """
        The ID of the enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="healthmonitorId")
    def healthmonitor_id(self) -> Optional[str]:
        """
        The health monitor ID of the LB pool.
        """
        return pulumi.get(self, "healthmonitor_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        """
        The IP version of the LB pool.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="lbMethod")
    def lb_method(self) -> Optional[str]:
        """
        The load balancing algorithm to distribute traffic to the pool's members.
        """
        return pulumi.get(self, "lb_method")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[str]:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[str]:
        return pulumi.get(self, "loadbalancer_id")

    @property
    @pulumi.getter(name="memberAddress")
    def member_address(self) -> Optional[str]:
        return pulumi.get(self, "member_address")

    @property
    @pulumi.getter(name="memberDeletionProtectionEnable")
    def member_deletion_protection_enable(self) -> Optional[str]:
        """
        Whether deletion protection is enabled
        """
        return pulumi.get(self, "member_deletion_protection_enable")

    @property
    @pulumi.getter(name="memberDeviceId")
    def member_device_id(self) -> Optional[str]:
        return pulumi.get(self, "member_device_id")

    @property
    @pulumi.getter(name="memberInstanceId")
    def member_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "member_instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The pool name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="poolHealth")
    def pool_health(self) -> Optional[str]:
        return pulumi.get(self, "pool_health")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[str]:
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter
    def pools(self) -> Sequence['outputs.GetPoolsPoolResult']:
        """
        Pool list. For details, see data structure of the pool field.
        The object structure is documented below.
        """
        return pulumi.get(self, "pools")

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[str]:
        """
        The protection status for update.
        """
        return pulumi.get(self, "protection_status")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol of pool.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> Optional[str]:
        """
        The public border group.
        """
        return pulumi.get(self, "public_border_group")

    @property
    @pulumi.getter(name="quicCidLen")
    def quic_cid_len(self) -> Optional[int]:
        return pulumi.get(self, "quic_cid_len")

    @property
    @pulumi.getter(name="quicCidOffset")
    def quic_cid_offset(self) -> Optional[int]:
        return pulumi.get(self, "quic_cid_offset")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of persistence mode.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        The ID of the VPC where the backend server group works.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetPoolsResult(GetPoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPoolsResult(
            any_port_enable=self.any_port_enable,
            connection_drain=self.connection_drain,
            description=self.description,
            enterprise_project_id=self.enterprise_project_id,
            healthmonitor_id=self.healthmonitor_id,
            id=self.id,
            ip_version=self.ip_version,
            lb_method=self.lb_method,
            listener_id=self.listener_id,
            loadbalancer_id=self.loadbalancer_id,
            member_address=self.member_address,
            member_deletion_protection_enable=self.member_deletion_protection_enable,
            member_device_id=self.member_device_id,
            member_instance_id=self.member_instance_id,
            name=self.name,
            pool_health=self.pool_health,
            pool_id=self.pool_id,
            pools=self.pools,
            protection_status=self.protection_status,
            protocol=self.protocol,
            public_border_group=self.public_border_group,
            quic_cid_len=self.quic_cid_len,
            quic_cid_offset=self.quic_cid_offset,
            region=self.region,
            type=self.type,
            vpc_id=self.vpc_id)


def get_pools(any_port_enable: Optional[str] = None,
              connection_drain: Optional[str] = None,
              description: Optional[str] = None,
              enterprise_project_id: Optional[str] = None,
              healthmonitor_id: Optional[str] = None,
              ip_version: Optional[str] = None,
              lb_method: Optional[str] = None,
              listener_id: Optional[str] = None,
              loadbalancer_id: Optional[str] = None,
              member_address: Optional[str] = None,
              member_deletion_protection_enable: Optional[str] = None,
              member_device_id: Optional[str] = None,
              member_instance_id: Optional[str] = None,
              name: Optional[str] = None,
              pool_health: Optional[str] = None,
              pool_id: Optional[str] = None,
              protection_status: Optional[str] = None,
              protocol: Optional[str] = None,
              public_border_group: Optional[str] = None,
              quic_cid_len: Optional[int] = None,
              quic_cid_offset: Optional[int] = None,
              region: Optional[str] = None,
              type: Optional[str] = None,
              vpc_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPoolsResult:
    """
    Use this data source to get the list of ELB pools.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    pool_name = config.require_object("poolName")
    test = huaweicloud.DedicatedElb.get_pools(name=pool_name)
    ```


    :param str any_port_enable: Specifies whether forward to same port for a backend server group is enabled.
           Value options:
           + **false**: Disable this option.
           + **true**: Enable this option.
    :param str connection_drain: Specifies whether delayed logout is enabled. Value options:
           + **false**: Disable this option.
           + **true**: Enable this option.
    :param str description: Specifies the description of the ELB pool.
    :param str enterprise_project_id: Specifies the ID of the enterprise project.
    :param str healthmonitor_id: Specifies the health monitor ID of the ELB pool.
    :param str ip_version: Specifies the IP address version supported by the backend server group.
    :param str lb_method: Specifies the method of the ELB pool. Value options: **ROUND_ROBIN**,
           **LEAST_CONNECTIONS**, **SOURCE_IP** or **QUIC_CID**.
    :param str listener_id: Specifies the listener ID of the ELB pool.
    :param str loadbalancer_id: Specifies the loadbalancer ID of the ELB pool.
    :param str member_address: Specifies the private IP address bound to the backend server.
    :param str member_deletion_protection_enable: Specifies whether deletion protection is enabled. Value options:
           + **false**: Disable this option.
           + **true**: Enable this option.
    :param str member_device_id: Specifies the ID of the cloud server that serves as a backend server.
    :param str member_instance_id: Specifies the backend server ID.
    :param str name: Specifies the name of the ELB pool.
    :param str pool_health: Specifies whether pool health is enabled. Value options:
           + **minimum_healthy_member_count=0**
           + **minimum_healthy_member_count=1**
    :param str pool_id: Specifies the ID of the ELB pool.
    :param str protection_status: Specifies the protection status for update.
           Value options: **nonProtection**, **consoleProtection**.
    :param str protocol: Specifies the protocol of the ELB pool. Value options: **TCP**, **UDP**, **HTTP**,
           **HTTPS**, **QUIC**, **GRPC** or **TLS**.
    :param str public_border_group: Specifies the public border group.
    :param int quic_cid_len: Specifies the QUIC connection ID len.
    :param int quic_cid_offset: Specifies the QUIC connection ID offset.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str type: Specifies the type of the backend server group. Value options: **instance**, **ip**.
    :param str vpc_id: Specifies the ID of the VPC where the backend server group works.
    """
    __args__ = dict()
    __args__['anyPortEnable'] = any_port_enable
    __args__['connectionDrain'] = connection_drain
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['healthmonitorId'] = healthmonitor_id
    __args__['ipVersion'] = ip_version
    __args__['lbMethod'] = lb_method
    __args__['listenerId'] = listener_id
    __args__['loadbalancerId'] = loadbalancer_id
    __args__['memberAddress'] = member_address
    __args__['memberDeletionProtectionEnable'] = member_deletion_protection_enable
    __args__['memberDeviceId'] = member_device_id
    __args__['memberInstanceId'] = member_instance_id
    __args__['name'] = name
    __args__['poolHealth'] = pool_health
    __args__['poolId'] = pool_id
    __args__['protectionStatus'] = protection_status
    __args__['protocol'] = protocol
    __args__['publicBorderGroup'] = public_border_group
    __args__['quicCidLen'] = quic_cid_len
    __args__['quicCidOffset'] = quic_cid_offset
    __args__['region'] = region
    __args__['type'] = type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getPools:getPools', __args__, opts=opts, typ=GetPoolsResult).value

    return AwaitableGetPoolsResult(
        any_port_enable=__ret__.any_port_enable,
        connection_drain=__ret__.connection_drain,
        description=__ret__.description,
        enterprise_project_id=__ret__.enterprise_project_id,
        healthmonitor_id=__ret__.healthmonitor_id,
        id=__ret__.id,
        ip_version=__ret__.ip_version,
        lb_method=__ret__.lb_method,
        listener_id=__ret__.listener_id,
        loadbalancer_id=__ret__.loadbalancer_id,
        member_address=__ret__.member_address,
        member_deletion_protection_enable=__ret__.member_deletion_protection_enable,
        member_device_id=__ret__.member_device_id,
        member_instance_id=__ret__.member_instance_id,
        name=__ret__.name,
        pool_health=__ret__.pool_health,
        pool_id=__ret__.pool_id,
        pools=__ret__.pools,
        protection_status=__ret__.protection_status,
        protocol=__ret__.protocol,
        public_border_group=__ret__.public_border_group,
        quic_cid_len=__ret__.quic_cid_len,
        quic_cid_offset=__ret__.quic_cid_offset,
        region=__ret__.region,
        type=__ret__.type,
        vpc_id=__ret__.vpc_id)


@_utilities.lift_output_func(get_pools)
def get_pools_output(any_port_enable: Optional[pulumi.Input[Optional[str]]] = None,
                     connection_drain: Optional[pulumi.Input[Optional[str]]] = None,
                     description: Optional[pulumi.Input[Optional[str]]] = None,
                     enterprise_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                     healthmonitor_id: Optional[pulumi.Input[Optional[str]]] = None,
                     ip_version: Optional[pulumi.Input[Optional[str]]] = None,
                     lb_method: Optional[pulumi.Input[Optional[str]]] = None,
                     listener_id: Optional[pulumi.Input[Optional[str]]] = None,
                     loadbalancer_id: Optional[pulumi.Input[Optional[str]]] = None,
                     member_address: Optional[pulumi.Input[Optional[str]]] = None,
                     member_deletion_protection_enable: Optional[pulumi.Input[Optional[str]]] = None,
                     member_device_id: Optional[pulumi.Input[Optional[str]]] = None,
                     member_instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                     name: Optional[pulumi.Input[Optional[str]]] = None,
                     pool_health: Optional[pulumi.Input[Optional[str]]] = None,
                     pool_id: Optional[pulumi.Input[Optional[str]]] = None,
                     protection_status: Optional[pulumi.Input[Optional[str]]] = None,
                     protocol: Optional[pulumi.Input[Optional[str]]] = None,
                     public_border_group: Optional[pulumi.Input[Optional[str]]] = None,
                     quic_cid_len: Optional[pulumi.Input[Optional[int]]] = None,
                     quic_cid_offset: Optional[pulumi.Input[Optional[int]]] = None,
                     region: Optional[pulumi.Input[Optional[str]]] = None,
                     type: Optional[pulumi.Input[Optional[str]]] = None,
                     vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPoolsResult]:
    """
    Use this data source to get the list of ELB pools.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    pool_name = config.require_object("poolName")
    test = huaweicloud.DedicatedElb.get_pools(name=pool_name)
    ```


    :param str any_port_enable: Specifies whether forward to same port for a backend server group is enabled.
           Value options:
           + **false**: Disable this option.
           + **true**: Enable this option.
    :param str connection_drain: Specifies whether delayed logout is enabled. Value options:
           + **false**: Disable this option.
           + **true**: Enable this option.
    :param str description: Specifies the description of the ELB pool.
    :param str enterprise_project_id: Specifies the ID of the enterprise project.
    :param str healthmonitor_id: Specifies the health monitor ID of the ELB pool.
    :param str ip_version: Specifies the IP address version supported by the backend server group.
    :param str lb_method: Specifies the method of the ELB pool. Value options: **ROUND_ROBIN**,
           **LEAST_CONNECTIONS**, **SOURCE_IP** or **QUIC_CID**.
    :param str listener_id: Specifies the listener ID of the ELB pool.
    :param str loadbalancer_id: Specifies the loadbalancer ID of the ELB pool.
    :param str member_address: Specifies the private IP address bound to the backend server.
    :param str member_deletion_protection_enable: Specifies whether deletion protection is enabled. Value options:
           + **false**: Disable this option.
           + **true**: Enable this option.
    :param str member_device_id: Specifies the ID of the cloud server that serves as a backend server.
    :param str member_instance_id: Specifies the backend server ID.
    :param str name: Specifies the name of the ELB pool.
    :param str pool_health: Specifies whether pool health is enabled. Value options:
           + **minimum_healthy_member_count=0**
           + **minimum_healthy_member_count=1**
    :param str pool_id: Specifies the ID of the ELB pool.
    :param str protection_status: Specifies the protection status for update.
           Value options: **nonProtection**, **consoleProtection**.
    :param str protocol: Specifies the protocol of the ELB pool. Value options: **TCP**, **UDP**, **HTTP**,
           **HTTPS**, **QUIC**, **GRPC** or **TLS**.
    :param str public_border_group: Specifies the public border group.
    :param int quic_cid_len: Specifies the QUIC connection ID len.
    :param int quic_cid_offset: Specifies the QUIC connection ID offset.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str type: Specifies the type of the backend server group. Value options: **instance**, **ip**.
    :param str vpc_id: Specifies the ID of the VPC where the backend server group works.
    """
    ...
