# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CertificatePrivateKeyEchoArgs', 'CertificatePrivateKeyEcho']

@pulumi.input_type
class CertificatePrivateKeyEchoArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CertificatePrivateKeyEcho resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CertificatePrivateKeyEchoState:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CertificatePrivateKeyEcho resources.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class CertificatePrivateKeyEcho(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an ELB certificate private key echo resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dedicated_elb.CertificatePrivateKeyEcho("test")
        ```

        ## Import

        The ELB certificate private key echo can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:DedicatedElb/certificatePrivateKeyEcho:CertificatePrivateKeyEcho test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CertificatePrivateKeyEchoArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an ELB certificate private key echo resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.dedicated_elb.CertificatePrivateKeyEcho("test")
        ```

        ## Import

        The ELB certificate private key echo can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:DedicatedElb/certificatePrivateKeyEcho:CertificatePrivateKeyEcho test <id>
        ```

        :param str resource_name: The name of the resource.
        :param CertificatePrivateKeyEchoArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificatePrivateKeyEchoArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificatePrivateKeyEchoArgs.__new__(CertificatePrivateKeyEchoArgs)

            __props__.__dict__["region"] = region
        super(CertificatePrivateKeyEcho, __self__).__init__(
            'huaweicloud:DedicatedElb/certificatePrivateKeyEcho:CertificatePrivateKeyEcho',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'CertificatePrivateKeyEcho':
        """
        Get an existing CertificatePrivateKeyEcho resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CertificatePrivateKeyEchoState.__new__(_CertificatePrivateKeyEchoState)

        __props__.__dict__["region"] = region
        return CertificatePrivateKeyEcho(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

