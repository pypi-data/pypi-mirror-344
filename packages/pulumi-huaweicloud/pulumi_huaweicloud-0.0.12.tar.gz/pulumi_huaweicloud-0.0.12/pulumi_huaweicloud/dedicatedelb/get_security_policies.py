# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecurityPoliciesResult',
    'AwaitableGetSecurityPoliciesResult',
    'get_security_policies',
    'get_security_policies_output',
]

@pulumi.output_type
class GetSecurityPoliciesResult:
    """
    A collection of values returned by getSecurityPolicies.
    """
    def __init__(__self__, cipher=None, description=None, id=None, name=None, protocol=None, region=None, security_policies=None, security_policy_id=None, type=None):
        if cipher and not isinstance(cipher, str):
            raise TypeError("Expected argument 'cipher' to be a str")
        pulumi.set(__self__, "cipher", cipher)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if security_policies and not isinstance(security_policies, list):
            raise TypeError("Expected argument 'security_policies' to be a list")
        pulumi.set(__self__, "security_policies", security_policies)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the security policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the security policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Sequence['outputs.GetSecurityPoliciesSecurityPolicyResult']:
        """
        Lists the security policies.
        The security_policies structure is documented below.
        """
        return pulumi.get(self, "security_policies")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the security policy.
        """
        return pulumi.get(self, "type")


class AwaitableGetSecurityPoliciesResult(GetSecurityPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityPoliciesResult(
            cipher=self.cipher,
            description=self.description,
            id=self.id,
            name=self.name,
            protocol=self.protocol,
            region=self.region,
            security_policies=self.security_policies,
            security_policy_id=self.security_policy_id,
            type=self.type)


def get_security_policies(cipher: Optional[str] = None,
                          description: Optional[str] = None,
                          name: Optional[str] = None,
                          protocol: Optional[str] = None,
                          region: Optional[str] = None,
                          security_policy_id: Optional[str] = None,
                          type: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityPoliciesResult:
    """
    Use this data source to get the list of ELB security policies.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    security_policies_name = config.require_object("securityPoliciesName")
    test = huaweicloud.DedicatedElb.get_security_policies(name=security_policies_name)
    ```


    :param str cipher: Specifies the cipher suite supported by the security policy.
    :param str description: Specifies the description of the security policy.
    :param str name: Specifies the name of the security policy.
    :param str protocol: Specifies the TLS protocol supported by the security policy.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str security_policy_id: Specifies the ID of the security policy.
    :param str type: Specifies the type of the security policy. Value options: **system**, **custom**.
    """
    __args__ = dict()
    __args__['cipher'] = cipher
    __args__['description'] = description
    __args__['name'] = name
    __args__['protocol'] = protocol
    __args__['region'] = region
    __args__['securityPolicyId'] = security_policy_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getSecurityPolicies:getSecurityPolicies', __args__, opts=opts, typ=GetSecurityPoliciesResult).value

    return AwaitableGetSecurityPoliciesResult(
        cipher=__ret__.cipher,
        description=__ret__.description,
        id=__ret__.id,
        name=__ret__.name,
        protocol=__ret__.protocol,
        region=__ret__.region,
        security_policies=__ret__.security_policies,
        security_policy_id=__ret__.security_policy_id,
        type=__ret__.type)


@_utilities.lift_output_func(get_security_policies)
def get_security_policies_output(cipher: Optional[pulumi.Input[Optional[str]]] = None,
                                 description: Optional[pulumi.Input[Optional[str]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 protocol: Optional[pulumi.Input[Optional[str]]] = None,
                                 region: Optional[pulumi.Input[Optional[str]]] = None,
                                 security_policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 type: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecurityPoliciesResult]:
    """
    Use this data source to get the list of ELB security policies.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    security_policies_name = config.require_object("securityPoliciesName")
    test = huaweicloud.DedicatedElb.get_security_policies(name=security_policies_name)
    ```


    :param str cipher: Specifies the cipher suite supported by the security policy.
    :param str description: Specifies the description of the security policy.
    :param str name: Specifies the name of the security policy.
    :param str protocol: Specifies the TLS protocol supported by the security policy.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str security_policy_id: Specifies the ID of the security policy.
    :param str type: Specifies the type of the security policy. Value options: **system**, **custom**.
    """
    ...
