# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetListenersResult',
    'AwaitableGetListenersResult',
    'get_listeners',
    'get_listeners_output',
]

@pulumi.output_type
class GetListenersResult:
    """
    A collection of values returned by getListeners.
    """
    def __init__(__self__, advanced_forwarding_enabled=None, ca_certificate=None, default_pool_id=None, description=None, enable_member_retry=None, enterprise_project_id=None, http2_enable=None, id=None, idle_timeout=None, listener_id=None, listeners=None, loadbalancer_id=None, member_address=None, member_device_id=None, member_instance_id=None, name=None, protection_status=None, protocol=None, protocol_port=None, proxy_protocol_enable=None, region=None, request_timeout=None, response_timeout=None, server_certificate=None, ssl_early_data_enable=None, tls_ciphers_policy=None):
        if advanced_forwarding_enabled and not isinstance(advanced_forwarding_enabled, str):
            raise TypeError("Expected argument 'advanced_forwarding_enabled' to be a str")
        pulumi.set(__self__, "advanced_forwarding_enabled", advanced_forwarding_enabled)
        if ca_certificate and not isinstance(ca_certificate, str):
            raise TypeError("Expected argument 'ca_certificate' to be a str")
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        if default_pool_id and not isinstance(default_pool_id, str):
            raise TypeError("Expected argument 'default_pool_id' to be a str")
        pulumi.set(__self__, "default_pool_id", default_pool_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_member_retry and not isinstance(enable_member_retry, str):
            raise TypeError("Expected argument 'enable_member_retry' to be a str")
        pulumi.set(__self__, "enable_member_retry", enable_member_retry)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if http2_enable and not isinstance(http2_enable, str):
            raise TypeError("Expected argument 'http2_enable' to be a str")
        pulumi.set(__self__, "http2_enable", http2_enable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idle_timeout and not isinstance(idle_timeout, int):
            raise TypeError("Expected argument 'idle_timeout' to be a int")
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if listeners and not isinstance(listeners, list):
            raise TypeError("Expected argument 'listeners' to be a list")
        pulumi.set(__self__, "listeners", listeners)
        if loadbalancer_id and not isinstance(loadbalancer_id, str):
            raise TypeError("Expected argument 'loadbalancer_id' to be a str")
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if member_address and not isinstance(member_address, str):
            raise TypeError("Expected argument 'member_address' to be a str")
        pulumi.set(__self__, "member_address", member_address)
        if member_device_id and not isinstance(member_device_id, str):
            raise TypeError("Expected argument 'member_device_id' to be a str")
        pulumi.set(__self__, "member_device_id", member_device_id)
        if member_instance_id and not isinstance(member_instance_id, str):
            raise TypeError("Expected argument 'member_instance_id' to be a str")
        pulumi.set(__self__, "member_instance_id", member_instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protection_status and not isinstance(protection_status, str):
            raise TypeError("Expected argument 'protection_status' to be a str")
        pulumi.set(__self__, "protection_status", protection_status)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if protocol_port and not isinstance(protocol_port, int):
            raise TypeError("Expected argument 'protocol_port' to be a int")
        pulumi.set(__self__, "protocol_port", protocol_port)
        if proxy_protocol_enable and not isinstance(proxy_protocol_enable, str):
            raise TypeError("Expected argument 'proxy_protocol_enable' to be a str")
        pulumi.set(__self__, "proxy_protocol_enable", proxy_protocol_enable)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if request_timeout and not isinstance(request_timeout, int):
            raise TypeError("Expected argument 'request_timeout' to be a int")
        pulumi.set(__self__, "request_timeout", request_timeout)
        if response_timeout and not isinstance(response_timeout, int):
            raise TypeError("Expected argument 'response_timeout' to be a int")
        pulumi.set(__self__, "response_timeout", response_timeout)
        if server_certificate and not isinstance(server_certificate, str):
            raise TypeError("Expected argument 'server_certificate' to be a str")
        pulumi.set(__self__, "server_certificate", server_certificate)
        if ssl_early_data_enable and not isinstance(ssl_early_data_enable, str):
            raise TypeError("Expected argument 'ssl_early_data_enable' to be a str")
        pulumi.set(__self__, "ssl_early_data_enable", ssl_early_data_enable)
        if tls_ciphers_policy and not isinstance(tls_ciphers_policy, str):
            raise TypeError("Expected argument 'tls_ciphers_policy' to be a str")
        pulumi.set(__self__, "tls_ciphers_policy", tls_ciphers_policy)

    @property
    @pulumi.getter(name="advancedForwardingEnabled")
    def advanced_forwarding_enabled(self) -> Optional[str]:
        """
        Whether to enable advanced forwarding.
        """
        return pulumi.get(self, "advanced_forwarding_enabled")

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        The ID of the CA certificate used by the listener.
        """
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="defaultPoolId")
    def default_pool_id(self) -> Optional[str]:
        """
        The ID of the default backend server group.
        """
        return pulumi.get(self, "default_pool_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the listener.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableMemberRetry")
    def enable_member_retry(self) -> Optional[str]:
        """
        Whether the health check retries for backend servers is enabled.
        """
        return pulumi.get(self, "enable_member_retry")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[str]:
        """
        The ID of the enterprise project.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="http2Enable")
    def http2_enable(self) -> Optional[str]:
        """
        Whether to use HTTP/2 if you want the clients to use HTTP/2 to communicate with the listener.
        """
        return pulumi.get(self, "http2_enable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[int]:
        """
        The idle timeout duration, in seconds.
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[str]:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetListenersListenerResult']:
        """
        Lists the listeners.
        The listeners structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[str]:
        """
        The ID of the load balancer that the listener is added to.
        """
        return pulumi.get(self, "loadbalancer_id")

    @property
    @pulumi.getter(name="memberAddress")
    def member_address(self) -> Optional[str]:
        return pulumi.get(self, "member_address")

    @property
    @pulumi.getter(name="memberDeviceId")
    def member_device_id(self) -> Optional[str]:
        return pulumi.get(self, "member_device_id")

    @property
    @pulumi.getter(name="memberInstanceId")
    def member_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "member_instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The listener name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> Optional[str]:
        """
        The protection status for update.
        """
        return pulumi.get(self, "protection_status")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol used by the listener.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> Optional[int]:
        """
        The port used by the listener.
        """
        return pulumi.get(self, "protocol_port")

    @property
    @pulumi.getter(name="proxyProtocolEnable")
    def proxy_protocol_enable(self) -> Optional[str]:
        """
        Whether to enable the proxy protocol option to pass the source IP addresses of the clients
        to backend servers.
        """
        return pulumi.get(self, "proxy_protocol_enable")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[int]:
        """
        The timeout duration for waiting for a response from a client, in seconds.
        """
        return pulumi.get(self, "request_timeout")

    @property
    @pulumi.getter(name="responseTimeout")
    def response_timeout(self) -> Optional[int]:
        """
        The timeout duration for waiting for a response from a backend server, in seconds.
        """
        return pulumi.get(self, "response_timeout")

    @property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> Optional[str]:
        """
        The ID of the server certificate used by the listener.
        """
        return pulumi.get(self, "server_certificate")

    @property
    @pulumi.getter(name="sslEarlyDataEnable")
    def ssl_early_data_enable(self) -> Optional[str]:
        """
        Whether the 0-RTT capability is enabled.
        """
        return pulumi.get(self, "ssl_early_data_enable")

    @property
    @pulumi.getter(name="tlsCiphersPolicy")
    def tls_ciphers_policy(self) -> Optional[str]:
        """
        The security policy used by the listener.
        """
        return pulumi.get(self, "tls_ciphers_policy")


class AwaitableGetListenersResult(GetListenersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListenersResult(
            advanced_forwarding_enabled=self.advanced_forwarding_enabled,
            ca_certificate=self.ca_certificate,
            default_pool_id=self.default_pool_id,
            description=self.description,
            enable_member_retry=self.enable_member_retry,
            enterprise_project_id=self.enterprise_project_id,
            http2_enable=self.http2_enable,
            id=self.id,
            idle_timeout=self.idle_timeout,
            listener_id=self.listener_id,
            listeners=self.listeners,
            loadbalancer_id=self.loadbalancer_id,
            member_address=self.member_address,
            member_device_id=self.member_device_id,
            member_instance_id=self.member_instance_id,
            name=self.name,
            protection_status=self.protection_status,
            protocol=self.protocol,
            protocol_port=self.protocol_port,
            proxy_protocol_enable=self.proxy_protocol_enable,
            region=self.region,
            request_timeout=self.request_timeout,
            response_timeout=self.response_timeout,
            server_certificate=self.server_certificate,
            ssl_early_data_enable=self.ssl_early_data_enable,
            tls_ciphers_policy=self.tls_ciphers_policy)


def get_listeners(advanced_forwarding_enabled: Optional[str] = None,
                  ca_certificate: Optional[str] = None,
                  default_pool_id: Optional[str] = None,
                  description: Optional[str] = None,
                  enable_member_retry: Optional[str] = None,
                  enterprise_project_id: Optional[str] = None,
                  http2_enable: Optional[str] = None,
                  idle_timeout: Optional[int] = None,
                  listener_id: Optional[str] = None,
                  loadbalancer_id: Optional[str] = None,
                  member_address: Optional[str] = None,
                  member_device_id: Optional[str] = None,
                  member_instance_id: Optional[str] = None,
                  name: Optional[str] = None,
                  protection_status: Optional[str] = None,
                  protocol: Optional[str] = None,
                  protocol_port: Optional[int] = None,
                  proxy_protocol_enable: Optional[str] = None,
                  region: Optional[str] = None,
                  request_timeout: Optional[int] = None,
                  response_timeout: Optional[int] = None,
                  server_certificate: Optional[str] = None,
                  ssl_early_data_enable: Optional[str] = None,
                  tls_ciphers_policy: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListenersResult:
    """
    Use this data source to get the list of ELB listeners.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    listener_name = config.require_object("listenerName")
    test = huaweicloud.DedicatedElb.get_listeners(name=listener_name)
    ```


    :param str advanced_forwarding_enabled: Specifies whether the advanced forwarding is enabled. Value options:
           **true**, **false**.
    :param str ca_certificate: Specifies the ID of the CA certificate used by the listener.
    :param str default_pool_id: Specifies the ID of the default pool with which the listener is associated.
    :param str description: Specifies the description of the ELB listener.
    :param str enable_member_retry: Specifies whether the health check retries for backend servers is enabled.
           Value options: **true**, **false**.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str http2_enable: Specifies whether the HTTP/2 is used. Value options: **true**, **false**.
    :param int idle_timeout: Specifies the idle timeout for the listener.
    :param str listener_id: Specifies the ID of the ELB listener.
    :param str loadbalancer_id: Specifies the ID of the load balancer that the listener is added to.
    :param str member_address: Specifies the private IP address bound to the backend server.
    :param str member_device_id: Specifies the ID of the cloud server that serves as a backend server.
    :param str member_instance_id: Specifies the backend server ID.
    :param str name: Specifies the name of the ELB listener.
    :param str protection_status: Specifies the protection status.
    :param str protocol: Specifies the protocol of the ELB listener. Value options:
           **TCP**, **UDP**, **HTTP**, **HTTPS** or **QUIC**.
    :param int protocol_port: Specifies the port used by the listener.
    :param str proxy_protocol_enable: Specifies whether the proxy protocol option to pass the source IP addresses
           of the clients to backend servers is enabled. Value options: **true**, **false**.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param int request_timeout: Specifies the request timeout for the listener. Value range: **1** to **300**.
    :param int response_timeout: Specifies the response timeout for the listener.
    :param str server_certificate: Specifies the ID of the server certificate used by the listener.
    :param str ssl_early_data_enable: Specifies whether the 0-RTT capability is enabled. Value options: **true**,
           **false**.
    :param str tls_ciphers_policy: Specifies the TLS cipher policy for the listener.
    """
    __args__ = dict()
    __args__['advancedForwardingEnabled'] = advanced_forwarding_enabled
    __args__['caCertificate'] = ca_certificate
    __args__['defaultPoolId'] = default_pool_id
    __args__['description'] = description
    __args__['enableMemberRetry'] = enable_member_retry
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['http2Enable'] = http2_enable
    __args__['idleTimeout'] = idle_timeout
    __args__['listenerId'] = listener_id
    __args__['loadbalancerId'] = loadbalancer_id
    __args__['memberAddress'] = member_address
    __args__['memberDeviceId'] = member_device_id
    __args__['memberInstanceId'] = member_instance_id
    __args__['name'] = name
    __args__['protectionStatus'] = protection_status
    __args__['protocol'] = protocol
    __args__['protocolPort'] = protocol_port
    __args__['proxyProtocolEnable'] = proxy_protocol_enable
    __args__['region'] = region
    __args__['requestTimeout'] = request_timeout
    __args__['responseTimeout'] = response_timeout
    __args__['serverCertificate'] = server_certificate
    __args__['sslEarlyDataEnable'] = ssl_early_data_enable
    __args__['tlsCiphersPolicy'] = tls_ciphers_policy
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getListeners:getListeners', __args__, opts=opts, typ=GetListenersResult).value

    return AwaitableGetListenersResult(
        advanced_forwarding_enabled=__ret__.advanced_forwarding_enabled,
        ca_certificate=__ret__.ca_certificate,
        default_pool_id=__ret__.default_pool_id,
        description=__ret__.description,
        enable_member_retry=__ret__.enable_member_retry,
        enterprise_project_id=__ret__.enterprise_project_id,
        http2_enable=__ret__.http2_enable,
        id=__ret__.id,
        idle_timeout=__ret__.idle_timeout,
        listener_id=__ret__.listener_id,
        listeners=__ret__.listeners,
        loadbalancer_id=__ret__.loadbalancer_id,
        member_address=__ret__.member_address,
        member_device_id=__ret__.member_device_id,
        member_instance_id=__ret__.member_instance_id,
        name=__ret__.name,
        protection_status=__ret__.protection_status,
        protocol=__ret__.protocol,
        protocol_port=__ret__.protocol_port,
        proxy_protocol_enable=__ret__.proxy_protocol_enable,
        region=__ret__.region,
        request_timeout=__ret__.request_timeout,
        response_timeout=__ret__.response_timeout,
        server_certificate=__ret__.server_certificate,
        ssl_early_data_enable=__ret__.ssl_early_data_enable,
        tls_ciphers_policy=__ret__.tls_ciphers_policy)


@_utilities.lift_output_func(get_listeners)
def get_listeners_output(advanced_forwarding_enabled: Optional[pulumi.Input[Optional[str]]] = None,
                         ca_certificate: Optional[pulumi.Input[Optional[str]]] = None,
                         default_pool_id: Optional[pulumi.Input[Optional[str]]] = None,
                         description: Optional[pulumi.Input[Optional[str]]] = None,
                         enable_member_retry: Optional[pulumi.Input[Optional[str]]] = None,
                         enterprise_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                         http2_enable: Optional[pulumi.Input[Optional[str]]] = None,
                         idle_timeout: Optional[pulumi.Input[Optional[int]]] = None,
                         listener_id: Optional[pulumi.Input[Optional[str]]] = None,
                         loadbalancer_id: Optional[pulumi.Input[Optional[str]]] = None,
                         member_address: Optional[pulumi.Input[Optional[str]]] = None,
                         member_device_id: Optional[pulumi.Input[Optional[str]]] = None,
                         member_instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                         name: Optional[pulumi.Input[Optional[str]]] = None,
                         protection_status: Optional[pulumi.Input[Optional[str]]] = None,
                         protocol: Optional[pulumi.Input[Optional[str]]] = None,
                         protocol_port: Optional[pulumi.Input[Optional[int]]] = None,
                         proxy_protocol_enable: Optional[pulumi.Input[Optional[str]]] = None,
                         region: Optional[pulumi.Input[Optional[str]]] = None,
                         request_timeout: Optional[pulumi.Input[Optional[int]]] = None,
                         response_timeout: Optional[pulumi.Input[Optional[int]]] = None,
                         server_certificate: Optional[pulumi.Input[Optional[str]]] = None,
                         ssl_early_data_enable: Optional[pulumi.Input[Optional[str]]] = None,
                         tls_ciphers_policy: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetListenersResult]:
    """
    Use this data source to get the list of ELB listeners.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    listener_name = config.require_object("listenerName")
    test = huaweicloud.DedicatedElb.get_listeners(name=listener_name)
    ```


    :param str advanced_forwarding_enabled: Specifies whether the advanced forwarding is enabled. Value options:
           **true**, **false**.
    :param str ca_certificate: Specifies the ID of the CA certificate used by the listener.
    :param str default_pool_id: Specifies the ID of the default pool with which the listener is associated.
    :param str description: Specifies the description of the ELB listener.
    :param str enable_member_retry: Specifies whether the health check retries for backend servers is enabled.
           Value options: **true**, **false**.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str http2_enable: Specifies whether the HTTP/2 is used. Value options: **true**, **false**.
    :param int idle_timeout: Specifies the idle timeout for the listener.
    :param str listener_id: Specifies the ID of the ELB listener.
    :param str loadbalancer_id: Specifies the ID of the load balancer that the listener is added to.
    :param str member_address: Specifies the private IP address bound to the backend server.
    :param str member_device_id: Specifies the ID of the cloud server that serves as a backend server.
    :param str member_instance_id: Specifies the backend server ID.
    :param str name: Specifies the name of the ELB listener.
    :param str protection_status: Specifies the protection status.
    :param str protocol: Specifies the protocol of the ELB listener. Value options:
           **TCP**, **UDP**, **HTTP**, **HTTPS** or **QUIC**.
    :param int protocol_port: Specifies the port used by the listener.
    :param str proxy_protocol_enable: Specifies whether the proxy protocol option to pass the source IP addresses
           of the clients to backend servers is enabled. Value options: **true**, **false**.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param int request_timeout: Specifies the request timeout for the listener. Value range: **1** to **300**.
    :param int response_timeout: Specifies the response timeout for the listener.
    :param str server_certificate: Specifies the ID of the server certificate used by the listener.
    :param str ssl_early_data_enable: Specifies whether the 0-RTT capability is enabled. Value options: **true**,
           **false**.
    :param str tls_ciphers_policy: Specifies the TLS cipher policy for the listener.
    """
    ...
