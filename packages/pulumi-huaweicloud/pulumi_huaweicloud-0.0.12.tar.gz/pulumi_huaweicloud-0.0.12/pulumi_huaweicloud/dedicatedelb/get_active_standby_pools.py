# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetActiveStandbyPoolsResult',
    'AwaitableGetActiveStandbyPoolsResult',
    'get_active_standby_pools',
    'get_active_standby_pools_output',
]

@pulumi.output_type
class GetActiveStandbyPoolsResult:
    """
    A collection of values returned by getActiveStandbyPools.
    """
    def __init__(__self__, connection_drain=None, description=None, healthmonitor_id=None, id=None, ip_version=None, lb_algorithm=None, listener_id=None, loadbalancer_id=None, member_address=None, member_instance_id=None, name=None, pool_id=None, pools=None, protocol=None, region=None, type=None, vpc_id=None):
        if connection_drain and not isinstance(connection_drain, str):
            raise TypeError("Expected argument 'connection_drain' to be a str")
        pulumi.set(__self__, "connection_drain", connection_drain)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if healthmonitor_id and not isinstance(healthmonitor_id, str):
            raise TypeError("Expected argument 'healthmonitor_id' to be a str")
        pulumi.set(__self__, "healthmonitor_id", healthmonitor_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_version and not isinstance(ip_version, str):
            raise TypeError("Expected argument 'ip_version' to be a str")
        pulumi.set(__self__, "ip_version", ip_version)
        if lb_algorithm and not isinstance(lb_algorithm, str):
            raise TypeError("Expected argument 'lb_algorithm' to be a str")
        pulumi.set(__self__, "lb_algorithm", lb_algorithm)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if loadbalancer_id and not isinstance(loadbalancer_id, str):
            raise TypeError("Expected argument 'loadbalancer_id' to be a str")
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if member_address and not isinstance(member_address, str):
            raise TypeError("Expected argument 'member_address' to be a str")
        pulumi.set(__self__, "member_address", member_address)
        if member_instance_id and not isinstance(member_instance_id, str):
            raise TypeError("Expected argument 'member_instance_id' to be a str")
        pulumi.set(__self__, "member_instance_id", member_instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if pools and not isinstance(pools, list):
            raise TypeError("Expected argument 'pools' to be a list")
        pulumi.set(__self__, "pools", pools)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="connectionDrain")
    def connection_drain(self) -> Optional[str]:
        return pulumi.get(self, "connection_drain")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the active-standby pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="healthmonitorId")
    def healthmonitor_id(self) -> Optional[str]:
        return pulumi.get(self, "healthmonitor_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        """
        The IP version supported by the member.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> Optional[str]:
        """
        The load balancing algorithm used by the load balancer to route requests to backend servers in the
        associated pool.
        """
        return pulumi.get(self, "lb_algorithm")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[str]:
        """
        The ID of the listener associated with the backend server.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[str]:
        return pulumi.get(self, "loadbalancer_id")

    @property
    @pulumi.getter(name="memberAddress")
    def member_address(self) -> Optional[str]:
        return pulumi.get(self, "member_address")

    @property
    @pulumi.getter(name="memberInstanceId")
    def member_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "member_instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The health check name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[str]:
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter
    def pools(self) -> Sequence['outputs.GetActiveStandbyPoolsPoolResult']:
        """
        The pool list. For details, see data structure of the pool field.
        The pools structure is documented below.
        """
        return pulumi.get(self, "pools")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol used by the active-standby pool to receive requests.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The health check protocol.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        The ID of the VPC where the active-standby pool works.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetActiveStandbyPoolsResult(GetActiveStandbyPoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetActiveStandbyPoolsResult(
            connection_drain=self.connection_drain,
            description=self.description,
            healthmonitor_id=self.healthmonitor_id,
            id=self.id,
            ip_version=self.ip_version,
            lb_algorithm=self.lb_algorithm,
            listener_id=self.listener_id,
            loadbalancer_id=self.loadbalancer_id,
            member_address=self.member_address,
            member_instance_id=self.member_instance_id,
            name=self.name,
            pool_id=self.pool_id,
            pools=self.pools,
            protocol=self.protocol,
            region=self.region,
            type=self.type,
            vpc_id=self.vpc_id)


def get_active_standby_pools(connection_drain: Optional[str] = None,
                             description: Optional[str] = None,
                             healthmonitor_id: Optional[str] = None,
                             ip_version: Optional[str] = None,
                             lb_algorithm: Optional[str] = None,
                             listener_id: Optional[str] = None,
                             loadbalancer_id: Optional[str] = None,
                             member_address: Optional[str] = None,
                             member_instance_id: Optional[str] = None,
                             name: Optional[str] = None,
                             pool_id: Optional[str] = None,
                             protocol: Optional[str] = None,
                             region: Optional[str] = None,
                             type: Optional[str] = None,
                             vpc_id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetActiveStandbyPoolsResult:
    """
    Use this data source to get the list of active standby ELB pools.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    pool_name = config.require_object("poolName")
    test = huaweicloud.DedicatedElb.get_active_standby_pools(name=pool_name)
    ```


    :param str connection_drain: Specifies whether delayed logout is enabled. Value options:
           + **false**: Disable this option.
           + **true**: Enable this option.
    :param str description: Specifies supplementary information about the active-standby pool.
    :param str healthmonitor_id: Specifies the ID of the health check configured for the active-standby pool.
    :param str ip_version: Specifies the IP address version supported by the pool.
    :param str lb_algorithm: Specifies the load balancing algorithm used by the load balancer to route requests
           to backend servers in the associated pool. Value options:
           + **ROUND_ROBIN**: weighted round robin.
           + **LEAST_CONNECTIONS**: weighted least connections.
           + **SOURCE_IP**: source IP hash.
           + **QUIC_CID**: connection ID.
    :param str listener_id: Specifies the ID of the listener to which the forwarding policy is added.
    :param str loadbalancer_id: Specifies the ID of the load balancer with which the active-standby pool is
           associated.
    :param str member_address: Specifies the private IP address bound to the member. This parameter is used
           only as a query condition and is not included in the response.
    :param str member_instance_id: Specifies the ID of the ECS used as the member. This parameter is used only
           as a query condition and is not included in the response.
    :param str name: Specifies the name of the active-standby pool.
    :param str pool_id: Specifies the ID of the active-standby pool.
    :param str protocol: Specifies the protocol used by the active-standby pool to receive requests from the
           load balancer. Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str type: Specifies the type of the active-standby pool.
           The valid values are as follows:
           + **instance**: Any type of backend servers can be added.
           + **ip**: Only IP as backend servers can be added.
    :param str vpc_id: Specifies the ID of the VPC where the active-standby pool works.
    """
    __args__ = dict()
    __args__['connectionDrain'] = connection_drain
    __args__['description'] = description
    __args__['healthmonitorId'] = healthmonitor_id
    __args__['ipVersion'] = ip_version
    __args__['lbAlgorithm'] = lb_algorithm
    __args__['listenerId'] = listener_id
    __args__['loadbalancerId'] = loadbalancer_id
    __args__['memberAddress'] = member_address
    __args__['memberInstanceId'] = member_instance_id
    __args__['name'] = name
    __args__['poolId'] = pool_id
    __args__['protocol'] = protocol
    __args__['region'] = region
    __args__['type'] = type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getActiveStandbyPools:getActiveStandbyPools', __args__, opts=opts, typ=GetActiveStandbyPoolsResult).value

    return AwaitableGetActiveStandbyPoolsResult(
        connection_drain=__ret__.connection_drain,
        description=__ret__.description,
        healthmonitor_id=__ret__.healthmonitor_id,
        id=__ret__.id,
        ip_version=__ret__.ip_version,
        lb_algorithm=__ret__.lb_algorithm,
        listener_id=__ret__.listener_id,
        loadbalancer_id=__ret__.loadbalancer_id,
        member_address=__ret__.member_address,
        member_instance_id=__ret__.member_instance_id,
        name=__ret__.name,
        pool_id=__ret__.pool_id,
        pools=__ret__.pools,
        protocol=__ret__.protocol,
        region=__ret__.region,
        type=__ret__.type,
        vpc_id=__ret__.vpc_id)


@_utilities.lift_output_func(get_active_standby_pools)
def get_active_standby_pools_output(connection_drain: Optional[pulumi.Input[Optional[str]]] = None,
                                    description: Optional[pulumi.Input[Optional[str]]] = None,
                                    healthmonitor_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    ip_version: Optional[pulumi.Input[Optional[str]]] = None,
                                    lb_algorithm: Optional[pulumi.Input[Optional[str]]] = None,
                                    listener_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    loadbalancer_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    member_address: Optional[pulumi.Input[Optional[str]]] = None,
                                    member_instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    name: Optional[pulumi.Input[Optional[str]]] = None,
                                    pool_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    protocol: Optional[pulumi.Input[Optional[str]]] = None,
                                    region: Optional[pulumi.Input[Optional[str]]] = None,
                                    type: Optional[pulumi.Input[Optional[str]]] = None,
                                    vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetActiveStandbyPoolsResult]:
    """
    Use this data source to get the list of active standby ELB pools.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    pool_name = config.require_object("poolName")
    test = huaweicloud.DedicatedElb.get_active_standby_pools(name=pool_name)
    ```


    :param str connection_drain: Specifies whether delayed logout is enabled. Value options:
           + **false**: Disable this option.
           + **true**: Enable this option.
    :param str description: Specifies supplementary information about the active-standby pool.
    :param str healthmonitor_id: Specifies the ID of the health check configured for the active-standby pool.
    :param str ip_version: Specifies the IP address version supported by the pool.
    :param str lb_algorithm: Specifies the load balancing algorithm used by the load balancer to route requests
           to backend servers in the associated pool. Value options:
           + **ROUND_ROBIN**: weighted round robin.
           + **LEAST_CONNECTIONS**: weighted least connections.
           + **SOURCE_IP**: source IP hash.
           + **QUIC_CID**: connection ID.
    :param str listener_id: Specifies the ID of the listener to which the forwarding policy is added.
    :param str loadbalancer_id: Specifies the ID of the load balancer with which the active-standby pool is
           associated.
    :param str member_address: Specifies the private IP address bound to the member. This parameter is used
           only as a query condition and is not included in the response.
    :param str member_instance_id: Specifies the ID of the ECS used as the member. This parameter is used only
           as a query condition and is not included in the response.
    :param str name: Specifies the name of the active-standby pool.
    :param str pool_id: Specifies the ID of the active-standby pool.
    :param str protocol: Specifies the protocol used by the active-standby pool to receive requests from the
           load balancer. Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str type: Specifies the type of the active-standby pool.
           The valid values are as follows:
           + **instance**: Any type of backend servers can be added.
           + **ip**: Only IP as backend servers can be added.
    :param str vpc_id: Specifies the ID of the VPC where the active-standby pool works.
    """
    ...
