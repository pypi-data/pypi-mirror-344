# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AlarmRuleDimensionArgs',
    'ServiceDiscoveryRuleDiscoveryRuleArgs',
    'ServiceDiscoveryRuleLogPathRuleArgs',
    'ServiceDiscoveryRuleNameRulesArgs',
    'ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs',
    'ServiceDiscoveryRuleNameRulesServiceNameRuleArgs',
]

@pulumi.input_type
class AlarmRuleDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Specifies the dimension name. Changing this creates a new resource.
        :param pulumi.Input[str] value: Specifies the dimension value. Changing this creates a new resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the dimension name. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Specifies the dimension value. Changing this creates a new resource.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceDiscoveryRuleDiscoveryRuleArgs:
    def __init__(__self__, *,
                 check_contents: pulumi.Input[Sequence[pulumi.Input[str]]],
                 check_mode: pulumi.Input[str],
                 check_type: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] check_contents: Specifies the matched value. This is a list of strings.
        :param pulumi.Input[str] check_mode: Specifies the match condition. The values can be **contain** and **equals**.
        :param pulumi.Input[str] check_type: Specifies the match type. The values can be **cmdLine**, **env** and **scope**.
        """
        pulumi.set(__self__, "check_contents", check_contents)
        pulumi.set(__self__, "check_mode", check_mode)
        pulumi.set(__self__, "check_type", check_type)

    @property
    @pulumi.getter(name="checkContents")
    def check_contents(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies the matched value. This is a list of strings.
        """
        return pulumi.get(self, "check_contents")

    @check_contents.setter
    def check_contents(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "check_contents", value)

    @property
    @pulumi.getter(name="checkMode")
    def check_mode(self) -> pulumi.Input[str]:
        """
        Specifies the match condition. The values can be **contain** and **equals**.
        """
        return pulumi.get(self, "check_mode")

    @check_mode.setter
    def check_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "check_mode", value)

    @property
    @pulumi.getter(name="checkType")
    def check_type(self) -> pulumi.Input[str]:
        """
        Specifies the match type. The values can be **cmdLine**, **env** and **scope**.
        """
        return pulumi.get(self, "check_type")

    @check_type.setter
    def check_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "check_type", value)


@pulumi.input_type
class ServiceDiscoveryRuleLogPathRuleArgs:
    def __init__(__self__, *,
                 args: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name_type: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Specifies the input value.
        :param pulumi.Input[str] name_type: Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
               and **str**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Specifies the application name, which is mandatory only when the value of `name_type` is
               **cmdLineHash**.
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def args(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies the input value.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter(name="nameType")
    def name_type(self) -> pulumi.Input[str]:
        """
        Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
        and **str**.
        """
        return pulumi.get(self, "name_type")

    @name_type.setter
    def name_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "name_type", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies the application name, which is mandatory only when the value of `name_type` is
        **cmdLineHash**.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceDiscoveryRuleNameRulesArgs:
    def __init__(__self__, *,
                 application_name_rules: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs']]],
                 service_name_rules: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesServiceNameRuleArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs']]] application_name_rules: Specifies the application name rule. If the value of `name_type` is
               **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end in
               the command are extracted. If the value of `name_type` is **env**, `args` is in the format of ["aa"], indicating that
               the environment variable named aa is extracted. If the value of `name_type` is **str**, `args` is in the format of
               ["fix"], indicating that the application name is suffixed with fix. If the value of `name_type` is **cmdLineHash**,
               `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the application name is
               ser when the startup command is 0001. The object structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesServiceNameRuleArgs']]] service_name_rules: Specifies the service name rule. If there are multiple objects in the array,
               the character strings extracted from these objects constitute the service name. If the value of `name_type` is
               **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end
               in the command are extracted. If the value of `name_type` is **env**, `args` is in the format of ["aa"],
               indicating that the environment variable named aa is extracted. If the value of `name_type` is **str**, `args` is in the
               format of ["fix"], indicating that the service name is suffixed with fix. If the value of `name_type` is
               **cmdLineHash**, `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the
               service name is ser when the startup command is 0001. The object structure is
               documented below.
        """
        pulumi.set(__self__, "application_name_rules", application_name_rules)
        pulumi.set(__self__, "service_name_rules", service_name_rules)

    @property
    @pulumi.getter(name="applicationNameRules")
    def application_name_rules(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs']]]:
        """
        Specifies the application name rule. If the value of `name_type` is
        **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end in
        the command are extracted. If the value of `name_type` is **env**, `args` is in the format of ["aa"], indicating that
        the environment variable named aa is extracted. If the value of `name_type` is **str**, `args` is in the format of
        ["fix"], indicating that the application name is suffixed with fix. If the value of `name_type` is **cmdLineHash**,
        `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the application name is
        ser when the startup command is 0001. The object structure is documented below.
        """
        return pulumi.get(self, "application_name_rules")

    @application_name_rules.setter
    def application_name_rules(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs']]]):
        pulumi.set(self, "application_name_rules", value)

    @property
    @pulumi.getter(name="serviceNameRules")
    def service_name_rules(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesServiceNameRuleArgs']]]:
        """
        Specifies the service name rule. If there are multiple objects in the array,
        the character strings extracted from these objects constitute the service name. If the value of `name_type` is
        **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end
        in the command are extracted. If the value of `name_type` is **env**, `args` is in the format of ["aa"],
        indicating that the environment variable named aa is extracted. If the value of `name_type` is **str**, `args` is in the
        format of ["fix"], indicating that the service name is suffixed with fix. If the value of `name_type` is
        **cmdLineHash**, `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the
        service name is ser when the startup command is 0001. The object structure is
        documented below.
        """
        return pulumi.get(self, "service_name_rules")

    @service_name_rules.setter
    def service_name_rules(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesServiceNameRuleArgs']]]):
        pulumi.set(self, "service_name_rules", value)


@pulumi.input_type
class ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs:
    def __init__(__self__, *,
                 args: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name_type: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Specifies the input value.
        :param pulumi.Input[str] name_type: Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
               and **str**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Specifies the application name, which is mandatory only when the value of `name_type` is
               **cmdLineHash**.
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def args(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies the input value.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter(name="nameType")
    def name_type(self) -> pulumi.Input[str]:
        """
        Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
        and **str**.
        """
        return pulumi.get(self, "name_type")

    @name_type.setter
    def name_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "name_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the application name, which is mandatory only when the value of `name_type` is
        **cmdLineHash**.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceDiscoveryRuleNameRulesServiceNameRuleArgs:
    def __init__(__self__, *,
                 args: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name_type: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Specifies the input value.
        :param pulumi.Input[str] name_type: Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
               and **str**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Specifies the application name, which is mandatory only when the value of `name_type` is
               **cmdLineHash**.
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def args(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies the input value.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter(name="nameType")
    def name_type(self) -> pulumi.Input[str]:
        """
        Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
        and **str**.
        """
        return pulumi.get(self, "name_type")

    @name_type.setter
    def name_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "name_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the application name, which is mandatory only when the value of `name_type` is
        **cmdLineHash**.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


