# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AlarmRuleDimension',
    'ServiceDiscoveryRuleDiscoveryRule',
    'ServiceDiscoveryRuleLogPathRule',
    'ServiceDiscoveryRuleNameRules',
    'ServiceDiscoveryRuleNameRulesApplicationNameRule',
    'ServiceDiscoveryRuleNameRulesServiceNameRule',
]

@pulumi.output_type
class AlarmRuleDimension(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Specifies the dimension name. Changing this creates a new resource.
        :param str value: Specifies the dimension value. Changing this creates a new resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the dimension name. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the dimension value. Changing this creates a new resource.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceDiscoveryRuleDiscoveryRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkContents":
            suggest = "check_contents"
        elif key == "checkMode":
            suggest = "check_mode"
        elif key == "checkType":
            suggest = "check_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleDiscoveryRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleDiscoveryRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleDiscoveryRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_contents: Sequence[str],
                 check_mode: str,
                 check_type: str):
        """
        :param Sequence[str] check_contents: Specifies the matched value. This is a list of strings.
        :param str check_mode: Specifies the match condition. The values can be **contain** and **equals**.
        :param str check_type: Specifies the match type. The values can be **cmdLine**, **env** and **scope**.
        """
        pulumi.set(__self__, "check_contents", check_contents)
        pulumi.set(__self__, "check_mode", check_mode)
        pulumi.set(__self__, "check_type", check_type)

    @property
    @pulumi.getter(name="checkContents")
    def check_contents(self) -> Sequence[str]:
        """
        Specifies the matched value. This is a list of strings.
        """
        return pulumi.get(self, "check_contents")

    @property
    @pulumi.getter(name="checkMode")
    def check_mode(self) -> str:
        """
        Specifies the match condition. The values can be **contain** and **equals**.
        """
        return pulumi.get(self, "check_mode")

    @property
    @pulumi.getter(name="checkType")
    def check_type(self) -> str:
        """
        Specifies the match type. The values can be **cmdLine**, **env** and **scope**.
        """
        return pulumi.get(self, "check_type")


@pulumi.output_type
class ServiceDiscoveryRuleLogPathRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameType":
            suggest = "name_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleLogPathRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleLogPathRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleLogPathRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Sequence[str],
                 name_type: str,
                 values: Sequence[str]):
        """
        :param Sequence[str] args: Specifies the input value.
        :param str name_type: Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
               and **str**.
        :param Sequence[str] values: Specifies the application name, which is mandatory only when the value of `name_type` is
               **cmdLineHash**.
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def args(self) -> Sequence[str]:
        """
        Specifies the input value.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="nameType")
    def name_type(self) -> str:
        """
        Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
        and **str**.
        """
        return pulumi.get(self, "name_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies the application name, which is mandatory only when the value of `name_type` is
        **cmdLineHash**.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ServiceDiscoveryRuleNameRules(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationNameRules":
            suggest = "application_name_rules"
        elif key == "serviceNameRules":
            suggest = "service_name_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleNameRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleNameRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleNameRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_name_rules: Sequence['outputs.ServiceDiscoveryRuleNameRulesApplicationNameRule'],
                 service_name_rules: Sequence['outputs.ServiceDiscoveryRuleNameRulesServiceNameRule']):
        """
        :param Sequence['ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs'] application_name_rules: Specifies the application name rule. If the value of `name_type` is
               **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end in
               the command are extracted. If the value of `name_type` is **env**, `args` is in the format of ["aa"], indicating that
               the environment variable named aa is extracted. If the value of `name_type` is **str**, `args` is in the format of
               ["fix"], indicating that the application name is suffixed with fix. If the value of `name_type` is **cmdLineHash**,
               `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the application name is
               ser when the startup command is 0001. The object structure is documented below.
        :param Sequence['ServiceDiscoveryRuleNameRulesServiceNameRuleArgs'] service_name_rules: Specifies the service name rule. If there are multiple objects in the array,
               the character strings extracted from these objects constitute the service name. If the value of `name_type` is
               **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end
               in the command are extracted. If the value of `name_type` is **env**, `args` is in the format of ["aa"],
               indicating that the environment variable named aa is extracted. If the value of `name_type` is **str**, `args` is in the
               format of ["fix"], indicating that the service name is suffixed with fix. If the value of `name_type` is
               **cmdLineHash**, `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the
               service name is ser when the startup command is 0001. The object structure is
               documented below.
        """
        pulumi.set(__self__, "application_name_rules", application_name_rules)
        pulumi.set(__self__, "service_name_rules", service_name_rules)

    @property
    @pulumi.getter(name="applicationNameRules")
    def application_name_rules(self) -> Sequence['outputs.ServiceDiscoveryRuleNameRulesApplicationNameRule']:
        """
        Specifies the application name rule. If the value of `name_type` is
        **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end in
        the command are extracted. If the value of `name_type` is **env**, `args` is in the format of ["aa"], indicating that
        the environment variable named aa is extracted. If the value of `name_type` is **str**, `args` is in the format of
        ["fix"], indicating that the application name is suffixed with fix. If the value of `name_type` is **cmdLineHash**,
        `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the application name is
        ser when the startup command is 0001. The object structure is documented below.
        """
        return pulumi.get(self, "application_name_rules")

    @property
    @pulumi.getter(name="serviceNameRules")
    def service_name_rules(self) -> Sequence['outputs.ServiceDiscoveryRuleNameRulesServiceNameRule']:
        """
        Specifies the service name rule. If there are multiple objects in the array,
        the character strings extracted from these objects constitute the service name. If the value of `name_type` is
        **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end
        in the command are extracted. If the value of `name_type` is **env**, `args` is in the format of ["aa"],
        indicating that the environment variable named aa is extracted. If the value of `name_type` is **str**, `args` is in the
        format of ["fix"], indicating that the service name is suffixed with fix. If the value of `name_type` is
        **cmdLineHash**, `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the
        service name is ser when the startup command is 0001. The object structure is
        documented below.
        """
        return pulumi.get(self, "service_name_rules")


@pulumi.output_type
class ServiceDiscoveryRuleNameRulesApplicationNameRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameType":
            suggest = "name_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleNameRulesApplicationNameRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleNameRulesApplicationNameRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleNameRulesApplicationNameRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Sequence[str],
                 name_type: str,
                 values: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] args: Specifies the input value.
        :param str name_type: Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
               and **str**.
        :param Sequence[str] values: Specifies the application name, which is mandatory only when the value of `name_type` is
               **cmdLineHash**.
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def args(self) -> Sequence[str]:
        """
        Specifies the input value.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="nameType")
    def name_type(self) -> str:
        """
        Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
        and **str**.
        """
        return pulumi.get(self, "name_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Specifies the application name, which is mandatory only when the value of `name_type` is
        **cmdLineHash**.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ServiceDiscoveryRuleNameRulesServiceNameRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameType":
            suggest = "name_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleNameRulesServiceNameRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleNameRulesServiceNameRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleNameRulesServiceNameRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Sequence[str],
                 name_type: str,
                 values: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] args: Specifies the input value.
        :param str name_type: Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
               and **str**.
        :param Sequence[str] values: Specifies the application name, which is mandatory only when the value of `name_type` is
               **cmdLineHash**.
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def args(self) -> Sequence[str]:
        """
        Specifies the input value.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="nameType")
    def name_type(self) -> str:
        """
        Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
        and **str**.
        """
        return pulumi.get(self, "name_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Specifies the application name, which is mandatory only when the value of `name_type` is
        **cmdLineHash**.
        """
        return pulumi.get(self, "values")


