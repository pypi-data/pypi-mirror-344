# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ListenerInsertHeadersArgs',
    'PoolPersistenceArgs',
]

@pulumi.input_type
class ListenerInsertHeadersArgs:
    def __init__(__self__, *,
                 x_forwarded_elb_ip: Optional[pulumi.Input[str]] = None,
                 x_forwarded_host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] x_forwarded_elb_ip: Specifies whether to transparently transmit the load balancer EIP to backend
               servers. After this function is enabled, the load balancer EIP is stored in the HTTP header and passes to backend servers.
               Value options:
               + **true**: This function is enabled.
               + **false (default)**: The function is disabled.
        :param pulumi.Input[str] x_forwarded_host: Specifies whether to rewrite the X-Forwarded-Host header. If this function is
               enabled, **X-Forwarded-Host** is rewritten based on Host in the request and sent to backend servers. Value options:
               + **true (default)**: This function is enabled.
               + **false**: The function is disabled.
        """
        if x_forwarded_elb_ip is not None:
            pulumi.set(__self__, "x_forwarded_elb_ip", x_forwarded_elb_ip)
        if x_forwarded_host is not None:
            pulumi.set(__self__, "x_forwarded_host", x_forwarded_host)

    @property
    @pulumi.getter(name="xForwardedElbIp")
    def x_forwarded_elb_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to transparently transmit the load balancer EIP to backend
        servers. After this function is enabled, the load balancer EIP is stored in the HTTP header and passes to backend servers.
        Value options:
        + **true**: This function is enabled.
        + **false (default)**: The function is disabled.
        """
        return pulumi.get(self, "x_forwarded_elb_ip")

    @x_forwarded_elb_ip.setter
    def x_forwarded_elb_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_forwarded_elb_ip", value)

    @property
    @pulumi.getter(name="xForwardedHost")
    def x_forwarded_host(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to rewrite the X-Forwarded-Host header. If this function is
        enabled, **X-Forwarded-Host** is rewritten based on Host in the request and sent to backend servers. Value options:
        + **true (default)**: This function is enabled.
        + **false**: The function is disabled.
        """
        return pulumi.get(self, "x_forwarded_host")

    @x_forwarded_host.setter
    def x_forwarded_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_forwarded_host", value)


@pulumi.input_type
class PoolPersistenceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cookie_name: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] type: The type of persistence mode. The current specification supports SOURCE_IP,
               HTTP_COOKIE, and APP_COOKIE.
        :param pulumi.Input[str] cookie_name: The name of the cookie if persistence mode is set appropriately. Required
               if `type = APP_COOKIE`.
        :param pulumi.Input[int] timeout: Specifies the sticky session timeout duration in minutes. This parameter is
               invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
               + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
               + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
        """
        pulumi.set(__self__, "type", type)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of persistence mode. The current specification supports SOURCE_IP,
        HTTP_COOKIE, and APP_COOKIE.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cookie if persistence mode is set appropriately. Required
        if `type = APP_COOKIE`.
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the sticky session timeout duration in minutes. This parameter is
        invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
        + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
        + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


