# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ListenerInsertHeaders',
    'PoolPersistence',
    'GetListenersListenerResult',
    'GetListenersListenerInsertHeaderResult',
    'GetListenersListenerLoadbalancerResult',
    'GetPoolsPoolResult',
    'GetPoolsPoolListenerResult',
    'GetPoolsPoolLoadbalancerResult',
    'GetPoolsPoolMemberResult',
    'GetPoolsPoolPersistenceResult',
]

@pulumi.output_type
class ListenerInsertHeaders(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xForwardedElbIp":
            suggest = "x_forwarded_elb_ip"
        elif key == "xForwardedHost":
            suggest = "x_forwarded_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerInsertHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerInsertHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerInsertHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 x_forwarded_elb_ip: Optional[str] = None,
                 x_forwarded_host: Optional[str] = None):
        """
        :param str x_forwarded_elb_ip: Specifies whether to transparently transmit the load balancer EIP to backend
               servers. After this function is enabled, the load balancer EIP is stored in the HTTP header and passes to backend servers.
               Value options:
               + **true**: This function is enabled.
               + **false (default)**: The function is disabled.
        :param str x_forwarded_host: Specifies whether to rewrite the X-Forwarded-Host header. If this function is
               enabled, **X-Forwarded-Host** is rewritten based on Host in the request and sent to backend servers. Value options:
               + **true (default)**: This function is enabled.
               + **false**: The function is disabled.
        """
        if x_forwarded_elb_ip is not None:
            pulumi.set(__self__, "x_forwarded_elb_ip", x_forwarded_elb_ip)
        if x_forwarded_host is not None:
            pulumi.set(__self__, "x_forwarded_host", x_forwarded_host)

    @property
    @pulumi.getter(name="xForwardedElbIp")
    def x_forwarded_elb_ip(self) -> Optional[str]:
        """
        Specifies whether to transparently transmit the load balancer EIP to backend
        servers. After this function is enabled, the load balancer EIP is stored in the HTTP header and passes to backend servers.
        Value options:
        + **true**: This function is enabled.
        + **false (default)**: The function is disabled.
        """
        return pulumi.get(self, "x_forwarded_elb_ip")

    @property
    @pulumi.getter(name="xForwardedHost")
    def x_forwarded_host(self) -> Optional[str]:
        """
        Specifies whether to rewrite the X-Forwarded-Host header. If this function is
        enabled, **X-Forwarded-Host** is rewritten based on Host in the request and sent to backend servers. Value options:
        + **true (default)**: This function is enabled.
        + **false**: The function is disabled.
        """
        return pulumi.get(self, "x_forwarded_host")


@pulumi.output_type
class PoolPersistence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoolPersistence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoolPersistence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoolPersistence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cookie_name: Optional[str] = None,
                 timeout: Optional[int] = None):
        """
        :param str type: The type of persistence mode. The current specification supports SOURCE_IP,
               HTTP_COOKIE, and APP_COOKIE.
        :param str cookie_name: The name of the cookie if persistence mode is set appropriately. Required
               if `type = APP_COOKIE`.
        :param int timeout: Specifies the sticky session timeout duration in minutes. This parameter is
               invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
               + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
               + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
        """
        pulumi.set(__self__, "type", type)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of persistence mode. The current specification supports SOURCE_IP,
        HTTP_COOKIE, and APP_COOKIE.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        """
        The name of the cookie if persistence mode is set appropriately. Required
        if `type = APP_COOKIE`.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Specifies the sticky session timeout duration in minutes. This parameter is
        invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
        + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
        + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetListenersListenerResult(dict):
    def __init__(__self__, *,
                 client_ca_tls_container_ref: str,
                 connection_limit: int,
                 created_at: str,
                 default_pool_id: str,
                 default_tls_container_ref: str,
                 description: str,
                 http2_enable: bool,
                 id: str,
                 insert_headers: Sequence['outputs.GetListenersListenerInsertHeaderResult'],
                 loadbalancers: Sequence['outputs.GetListenersListenerLoadbalancerResult'],
                 name: str,
                 protection_reason: str,
                 protection_status: str,
                 protocol: str,
                 protocol_port: int,
                 sni_container_refs: Sequence[str],
                 tags: Mapping[str, str],
                 tls_ciphers_policy: str,
                 updated_at: str):
        """
        :param str client_ca_tls_container_ref: The ID of the CA certificate used by the listener.
        :param int connection_limit: The maximum number of connections allowed for the listener.
        :param str created_at: The time when the listener was created.
        :param str default_pool_id: The ID of the default pool with which the listener is associated.
        :param str default_tls_container_ref: The ID of the server certificate used by the listener.
        :param str description: The description for the listener.
        :param bool http2_enable: Whether the ELB listener uses HTTP/2. Value options: **true**, **false**.
        :param str id: The ELB loadbalancer ID.
        :param Sequence['GetListenersListenerInsertHeaderArgs'] insert_headers: Whether to insert HTTP extension headers and sent them to backend servers.
               The insert_headers structure is documented below.
        :param Sequence['GetListenersListenerLoadbalancerArgs'] loadbalancers: The list of the associated load balancer.
               The loadbalancers structure is documented below.
        :param str name: The listener name.
        :param str protection_reason: The reason to enable modification protection.
        :param str protection_status: Whether modification protection is enabled.
        :param str protocol: The listener protocol.  
               The valid values are **TCP**, **UDP**, **HTTP** and **TERMINATED_HTTPS**.
        :param int protocol_port: The front-end listening port of the listener.  
               The valid value is range from `1` to `65535`.
        :param Sequence[str] sni_container_refs: List of the SNI certificate (server certificates with a domain name) IDs used by the listener.
        :param Mapping[str, str] tags: The key/value pairs to associate with the listener.
        :param str tls_ciphers_policy: The security policy used by the listener.
        :param str updated_at: The time when the listener was updated.
        """
        pulumi.set(__self__, "client_ca_tls_container_ref", client_ca_tls_container_ref)
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "default_pool_id", default_pool_id)
        pulumi.set(__self__, "default_tls_container_ref", default_tls_container_ref)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "http2_enable", http2_enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "insert_headers", insert_headers)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protection_reason", protection_reason)
        pulumi.set(__self__, "protection_status", protection_status)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_port", protocol_port)
        pulumi.set(__self__, "sni_container_refs", sni_container_refs)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tls_ciphers_policy", tls_ciphers_policy)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="clientCaTlsContainerRef")
    def client_ca_tls_container_ref(self) -> str:
        """
        The ID of the CA certificate used by the listener.
        """
        return pulumi.get(self, "client_ca_tls_container_ref")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> int:
        """
        The maximum number of connections allowed for the listener.
        """
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The time when the listener was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="defaultPoolId")
    def default_pool_id(self) -> str:
        """
        The ID of the default pool with which the listener is associated.
        """
        return pulumi.get(self, "default_pool_id")

    @property
    @pulumi.getter(name="defaultTlsContainerRef")
    def default_tls_container_ref(self) -> str:
        """
        The ID of the server certificate used by the listener.
        """
        return pulumi.get(self, "default_tls_container_ref")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description for the listener.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="http2Enable")
    def http2_enable(self) -> bool:
        """
        Whether the ELB listener uses HTTP/2. Value options: **true**, **false**.
        """
        return pulumi.get(self, "http2_enable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ELB loadbalancer ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="insertHeaders")
    def insert_headers(self) -> Sequence['outputs.GetListenersListenerInsertHeaderResult']:
        """
        Whether to insert HTTP extension headers and sent them to backend servers.
        The insert_headers structure is documented below.
        """
        return pulumi.get(self, "insert_headers")

    @property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetListenersListenerLoadbalancerResult']:
        """
        The list of the associated load balancer.
        The loadbalancers structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The listener name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protectionReason")
    def protection_reason(self) -> str:
        """
        The reason to enable modification protection.
        """
        return pulumi.get(self, "protection_reason")

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> str:
        """
        Whether modification protection is enabled.
        """
        return pulumi.get(self, "protection_status")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The listener protocol.  
        The valid values are **TCP**, **UDP**, **HTTP** and **TERMINATED_HTTPS**.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> int:
        """
        The front-end listening port of the listener.  
        The valid value is range from `1` to `65535`.
        """
        return pulumi.get(self, "protocol_port")

    @property
    @pulumi.getter(name="sniContainerRefs")
    def sni_container_refs(self) -> Sequence[str]:
        """
        List of the SNI certificate (server certificates with a domain name) IDs used by the listener.
        """
        return pulumi.get(self, "sni_container_refs")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        The key/value pairs to associate with the listener.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tlsCiphersPolicy")
    def tls_ciphers_policy(self) -> str:
        """
        The security policy used by the listener.
        """
        return pulumi.get(self, "tls_ciphers_policy")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The time when the listener was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetListenersListenerInsertHeaderResult(dict):
    def __init__(__self__, *,
                 x_forwarded_elb_ip: str,
                 x_forwarded_host: str):
        """
        :param str x_forwarded_elb_ip: Whether to transparently transmit the load balancer EIP to backend servers.
        :param str x_forwarded_host: Whether to rewrite the X-Forwarded-Host header.
        """
        pulumi.set(__self__, "x_forwarded_elb_ip", x_forwarded_elb_ip)
        pulumi.set(__self__, "x_forwarded_host", x_forwarded_host)

    @property
    @pulumi.getter(name="xForwardedElbIp")
    def x_forwarded_elb_ip(self) -> str:
        """
        Whether to transparently transmit the load balancer EIP to backend servers.
        """
        return pulumi.get(self, "x_forwarded_elb_ip")

    @property
    @pulumi.getter(name="xForwardedHost")
    def x_forwarded_host(self) -> str:
        """
        Whether to rewrite the X-Forwarded-Host header.
        """
        return pulumi.get(self, "x_forwarded_host")


@pulumi.output_type
class GetListenersListenerLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The ELB loadbalancer ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ELB loadbalancer ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolResult(dict):
    def __init__(__self__, *,
                 description: str,
                 healthmonitor_id: str,
                 id: str,
                 lb_method: str,
                 listeners: Sequence['outputs.GetPoolsPoolListenerResult'],
                 loadbalancers: Sequence['outputs.GetPoolsPoolLoadbalancerResult'],
                 members: Sequence['outputs.GetPoolsPoolMemberResult'],
                 name: str,
                 persistences: Sequence['outputs.GetPoolsPoolPersistenceResult'],
                 protection_reason: str,
                 protection_status: str,
                 protocol: str):
        """
        :param str description: Specifies the description of the ELB pool.
        :param str healthmonitor_id: Specifies the health monitor ID of the ELB pool.
        :param str id: The listener, loadbalancer or member ID.
        :param str lb_method: Specifies the method of the ELB pool. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS,
               or SOURCE_IP.
        :param Sequence['GetPoolsPoolListenerArgs'] listeners: The listener list. The object structure is documented below.
        :param Sequence['GetPoolsPoolLoadbalancerArgs'] loadbalancers: The loadbalancer list. The object structure is documented below.
        :param Sequence['GetPoolsPoolMemberArgs'] members: The member list. The object structure is documented below.
        :param str name: Specifies the name of the ELB pool.
        :param Sequence['GetPoolsPoolPersistenceArgs'] persistences: Indicates whether connections in the same session will be processed by the same pool member or not.
               The object structure is documented below.
        :param str protection_reason: The reason to enable modification protection.
        :param str protection_status: Whether modification protection is enabled.
        :param str protocol: Specifies the protocol of the ELB pool. This can either be TCP, UDP or HTTP.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "healthmonitor_id", healthmonitor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lb_method", lb_method)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "persistences", persistences)
        pulumi.set(__self__, "protection_reason", protection_reason)
        pulumi.set(__self__, "protection_status", protection_status)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Specifies the description of the ELB pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="healthmonitorId")
    def healthmonitor_id(self) -> str:
        """
        Specifies the health monitor ID of the ELB pool.
        """
        return pulumi.get(self, "healthmonitor_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lbMethod")
    def lb_method(self) -> str:
        """
        Specifies the method of the ELB pool. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS,
        or SOURCE_IP.
        """
        return pulumi.get(self, "lb_method")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetPoolsPoolListenerResult']:
        """
        The listener list. The object structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetPoolsPoolLoadbalancerResult']:
        """
        The loadbalancer list. The object structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetPoolsPoolMemberResult']:
        """
        The member list. The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the ELB pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def persistences(self) -> Sequence['outputs.GetPoolsPoolPersistenceResult']:
        """
        Indicates whether connections in the same session will be processed by the same pool member or not.
        The object structure is documented below.
        """
        return pulumi.get(self, "persistences")

    @property
    @pulumi.getter(name="protectionReason")
    def protection_reason(self) -> str:
        """
        The reason to enable modification protection.
        """
        return pulumi.get(self, "protection_reason")

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> str:
        """
        Whether modification protection is enabled.
        """
        return pulumi.get(self, "protection_status")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Specifies the protocol of the ELB pool. This can either be TCP, UDP or HTTP.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetPoolsPoolListenerResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolMemberResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPoolsPoolPersistenceResult(dict):
    def __init__(__self__, *,
                 cookie_name: str,
                 timeout: int,
                 type: str):
        """
        :param str cookie_name: The name of the cookie if persistence mode is set appropriately.
        :param int timeout: The sticky session timeout duration in minutes.
        :param str type: The type of persistence mode.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> str:
        """
        The name of the cookie if persistence mode is set appropriately.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        The sticky session timeout duration in minutes.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of persistence mode.
        """
        return pulumi.get(self, "type")


