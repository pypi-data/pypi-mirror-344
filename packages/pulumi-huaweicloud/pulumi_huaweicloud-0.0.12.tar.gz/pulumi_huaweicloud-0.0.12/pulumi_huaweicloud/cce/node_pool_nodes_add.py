# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NodePoolNodesAddArgs', 'NodePoolNodesAdd']

@pulumi.input_type
class NodePoolNodesAddArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 node_lists: pulumi.Input[Sequence[pulumi.Input['NodePoolNodesAddNodeListArgs']]],
                 nodepool_id: pulumi.Input[str],
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NodePoolNodesAdd resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolNodesAddNodeListArgs']]] node_lists: Specifies the list of nodes to add into the pool.
               The node_list structure is documented below.
        :param pulumi.Input[str] nodepool_id: Specifies the node pool ID.
        :param pulumi.Input[str] region: The region in which to create the CCE pool nodes add resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "node_lists", node_lists)
        pulumi.set(__self__, "nodepool_id", nodepool_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="nodeLists")
    def node_lists(self) -> pulumi.Input[Sequence[pulumi.Input['NodePoolNodesAddNodeListArgs']]]:
        """
        Specifies the list of nodes to add into the pool.
        The node_list structure is documented below.
        """
        return pulumi.get(self, "node_lists")

    @node_lists.setter
    def node_lists(self, value: pulumi.Input[Sequence[pulumi.Input['NodePoolNodesAddNodeListArgs']]]):
        pulumi.set(self, "node_lists", value)

    @property
    @pulumi.getter(name="nodepoolId")
    def nodepool_id(self) -> pulumi.Input[str]:
        """
        Specifies the node pool ID.
        """
        return pulumi.get(self, "nodepool_id")

    @nodepool_id.setter
    def nodepool_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nodepool_id", value)

    @property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_force_new", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region in which to create the CCE pool nodes add resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _NodePoolNodesAddState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 node_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodesAddNodeListArgs']]]] = None,
                 nodepool_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NodePoolNodesAdd resources.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolNodesAddNodeListArgs']]] node_lists: Specifies the list of nodes to add into the pool.
               The node_list structure is documented below.
        :param pulumi.Input[str] nodepool_id: Specifies the node pool ID.
        :param pulumi.Input[str] region: The region in which to create the CCE pool nodes add resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if node_lists is not None:
            pulumi.set(__self__, "node_lists", node_lists)
        if nodepool_id is not None:
            pulumi.set(__self__, "nodepool_id", nodepool_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_force_new", value)

    @property
    @pulumi.getter(name="nodeLists")
    def node_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodesAddNodeListArgs']]]]:
        """
        Specifies the list of nodes to add into the pool.
        The node_list structure is documented below.
        """
        return pulumi.get(self, "node_lists")

    @node_lists.setter
    def node_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodesAddNodeListArgs']]]]):
        pulumi.set(self, "node_lists", value)

    @property
    @pulumi.getter(name="nodepoolId")
    def nodepool_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the node pool ID.
        """
        return pulumi.get(self, "nodepool_id")

    @nodepool_id.setter
    def nodepool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nodepool_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region in which to create the CCE pool nodes add resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class NodePoolNodesAdd(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodesAddNodeListArgs']]]]] = None,
                 nodepool_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to add nodes into a node pool within HuaweiCloud.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodesAddNodeListArgs']]]] node_lists: Specifies the list of nodes to add into the pool.
               The node_list structure is documented below.
        :param pulumi.Input[str] nodepool_id: Specifies the node pool ID.
        :param pulumi.Input[str] region: The region in which to create the CCE pool nodes add resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NodePoolNodesAddArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to add nodes into a node pool within HuaweiCloud.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param NodePoolNodesAddArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodePoolNodesAddArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodesAddNodeListArgs']]]]] = None,
                 nodepool_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodePoolNodesAddArgs.__new__(NodePoolNodesAddArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            if node_lists is None and not opts.urn:
                raise TypeError("Missing required property 'node_lists'")
            __props__.__dict__["node_lists"] = node_lists
            if nodepool_id is None and not opts.urn:
                raise TypeError("Missing required property 'nodepool_id'")
            __props__.__dict__["nodepool_id"] = nodepool_id
            __props__.__dict__["region"] = region
        super(NodePoolNodesAdd, __self__).__init__(
            'huaweicloud:Cce/nodePoolNodesAdd:NodePoolNodesAdd',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            enable_force_new: Optional[pulumi.Input[str]] = None,
            node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodesAddNodeListArgs']]]]] = None,
            nodepool_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'NodePoolNodesAdd':
        """
        Get an existing NodePoolNodesAdd resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodesAddNodeListArgs']]]] node_lists: Specifies the list of nodes to add into the pool.
               The node_list structure is documented below.
        :param pulumi.Input[str] nodepool_id: Specifies the node pool ID.
        :param pulumi.Input[str] region: The region in which to create the CCE pool nodes add resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodePoolNodesAddState.__new__(_NodePoolNodesAddState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["node_lists"] = node_lists
        __props__.__dict__["nodepool_id"] = nodepool_id
        __props__.__dict__["region"] = region
        return NodePoolNodesAdd(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "enable_force_new")

    @property
    @pulumi.getter(name="nodeLists")
    def node_lists(self) -> pulumi.Output[Sequence['outputs.NodePoolNodesAddNodeList']]:
        """
        Specifies the list of nodes to add into the pool.
        The node_list structure is documented below.
        """
        return pulumi.get(self, "node_lists")

    @property
    @pulumi.getter(name="nodepoolId")
    def nodepool_id(self) -> pulumi.Output[str]:
        """
        Specifies the node pool ID.
        """
        return pulumi.get(self, "nodepool_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region in which to create the CCE pool nodes add resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

