# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAddonsResult',
    'AwaitableGetAddonsResult',
    'get_addons',
    'get_addons_output',
]

@pulumi.output_type
class GetAddonsResult:
    """
    A collection of values returned by getAddons.
    """
    def __init__(__self__, cluster_id=None, id=None, items=None, region=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAddonsItemResult']:
        """
        The add-on instance list.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


class AwaitableGetAddonsResult(GetAddonsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAddonsResult(
            cluster_id=self.cluster_id,
            id=self.id,
            items=self.items,
            region=self.region)


def get_addons(cluster_id: Optional[str] = None,
               region: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAddonsResult:
    """
    Use this data source to get the add-on instance list of a CCE cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Cce.get_addons(cluster_id=cluster_id)
    ```


    :param str cluster_id: Specifies the ID of the cluster to which the add-on instance belongs.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Cce/getAddons:getAddons', __args__, opts=opts, typ=GetAddonsResult).value

    return AwaitableGetAddonsResult(
        cluster_id=__ret__.cluster_id,
        id=__ret__.id,
        items=__ret__.items,
        region=__ret__.region)


@_utilities.lift_output_func(get_addons)
def get_addons_output(cluster_id: Optional[pulumi.Input[str]] = None,
                      region: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAddonsResult]:
    """
    Use this data source to get the add-on instance list of a CCE cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    cluster_id = config.require_object("clusterId")
    test = huaweicloud.Cce.get_addons(cluster_id=cluster_id)
    ```


    :param str cluster_id: Specifies the ID of the cluster to which the add-on instance belongs.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    ...
