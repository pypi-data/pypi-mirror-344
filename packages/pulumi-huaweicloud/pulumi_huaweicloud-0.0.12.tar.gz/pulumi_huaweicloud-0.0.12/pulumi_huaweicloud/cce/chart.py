# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ChartArgs', 'Chart']

@pulumi.input_type
class ChartArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Chart resource.
        :param pulumi.Input[str] content: Specifies the path of the chart package to be uploaded.
        :param pulumi.Input[str] parameters: Specifies the parameters of the CCE chart.
        :param pulumi.Input[str] region: Specifies the region in which to create the CCE chart resource.
               If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
        """
        pulumi.set(__self__, "content", content)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Specifies the path of the chart package to be uploaded.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the parameters of the CCE chart.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the CCE chart resource.
        If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ChartState:
    def __init__(__self__, *,
                 chart_url: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instruction: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 translate: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Chart resources.
        :param pulumi.Input[str] chart_url: The chart url.
        :param pulumi.Input[str] content: Specifies the path of the chart package to be uploaded.
        :param pulumi.Input[str] created_at: The create time.
        :param pulumi.Input[str] description: The description of the chart.
        :param pulumi.Input[str] instruction: The instruction of the chart.
        :param pulumi.Input[str] name: The chart name.
        :param pulumi.Input[str] parameters: Specifies the parameters of the CCE chart.
        :param pulumi.Input[bool] public: Whether the chart is public.
        :param pulumi.Input[str] region: Specifies the region in which to create the CCE chart resource.
               If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
        :param pulumi.Input[str] source: The source of the chart.
        :param pulumi.Input[str] translate: The traslate source of the chart.
        :param pulumi.Input[str] updated_at: The update time.
        :param pulumi.Input[str] value: The value of the chart.
        :param pulumi.Input[str] version: The chart version.
        """
        if chart_url is not None:
            pulumi.set(__self__, "chart_url", chart_url)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instruction is not None:
            pulumi.set(__self__, "instruction", instruction)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if translate is not None:
            pulumi.set(__self__, "translate", translate)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="chartUrl")
    def chart_url(self) -> Optional[pulumi.Input[str]]:
        """
        The chart url.
        """
        return pulumi.get(self, "chart_url")

    @chart_url.setter
    def chart_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_url", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the path of the chart package to be uploaded.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the chart.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def instruction(self) -> Optional[pulumi.Input[str]]:
        """
        The instruction of the chart.
        """
        return pulumi.get(self, "instruction")

    @instruction.setter
    def instruction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instruction", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The chart name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the parameters of the CCE chart.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the chart is public.
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the CCE chart resource.
        If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The source of the chart.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def translate(self) -> Optional[pulumi.Input[str]]:
        """
        The traslate source of the chart.
        """
        return pulumi.get(self, "translate")

    @translate.setter
    def translate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the chart.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The chart version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class Chart(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a CCE chart resource within HuaweiCloud.

        ## Example Usage
        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cce.Chart("test",
            content="./kube-prometheus-stack-55.4.1.tgz",
            parameters="{\\"override\\":true,\\"skip_lint\\":true,\\"source\\":\\"package\\"}")
        ```

        ## Import

        CCE chart can be imported using the `id`, e.g.bash

        ```sh
         $ pulumi import huaweicloud:Cce/chart:Chart test 19413aa0-9fe4-11ee-83b0-0255ac10026b
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`content` and `parameters`. It is generally recommended running `terraform plan` after importing an CCE chart. You can then decide if changes should be applied to the chart, or the resource definition should be updated to align with the chart. Also you can ignore changes as below. hcl resource "huaweicloud_cce_chart" "test" {

         ...

         lifecycle {

         ignore_changes = [

         content, parameters,

         ]

         } }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Specifies the path of the chart package to be uploaded.
        :param pulumi.Input[str] parameters: Specifies the parameters of the CCE chart.
        :param pulumi.Input[str] region: Specifies the region in which to create the CCE chart resource.
               If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ChartArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a CCE chart resource within HuaweiCloud.

        ## Example Usage
        ### Basic Example

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.cce.Chart("test",
            content="./kube-prometheus-stack-55.4.1.tgz",
            parameters="{\\"override\\":true,\\"skip_lint\\":true,\\"source\\":\\"package\\"}")
        ```

        ## Import

        CCE chart can be imported using the `id`, e.g.bash

        ```sh
         $ pulumi import huaweicloud:Cce/chart:Chart test 19413aa0-9fe4-11ee-83b0-0255ac10026b
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`content` and `parameters`. It is generally recommended running `terraform plan` after importing an CCE chart. You can then decide if changes should be applied to the chart, or the resource definition should be updated to align with the chart. Also you can ignore changes as below. hcl resource "huaweicloud_cce_chart" "test" {

         ...

         lifecycle {

         ignore_changes = [

         content, parameters,

         ]

         } }

        :param str resource_name: The name of the resource.
        :param ChartArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ChartArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ChartArgs.__new__(ChartArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["region"] = region
            __props__.__dict__["chart_url"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["instruction"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["public"] = None
            __props__.__dict__["source"] = None
            __props__.__dict__["translate"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["value"] = None
            __props__.__dict__["version"] = None
        super(Chart, __self__).__init__(
            'huaweicloud:Cce/chart:Chart',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            chart_url: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            instruction: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[str]] = None,
            public: Optional[pulumi.Input[bool]] = None,
            region: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None,
            translate: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'Chart':
        """
        Get an existing Chart resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] chart_url: The chart url.
        :param pulumi.Input[str] content: Specifies the path of the chart package to be uploaded.
        :param pulumi.Input[str] created_at: The create time.
        :param pulumi.Input[str] description: The description of the chart.
        :param pulumi.Input[str] instruction: The instruction of the chart.
        :param pulumi.Input[str] name: The chart name.
        :param pulumi.Input[str] parameters: Specifies the parameters of the CCE chart.
        :param pulumi.Input[bool] public: Whether the chart is public.
        :param pulumi.Input[str] region: Specifies the region in which to create the CCE chart resource.
               If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
        :param pulumi.Input[str] source: The source of the chart.
        :param pulumi.Input[str] translate: The traslate source of the chart.
        :param pulumi.Input[str] updated_at: The update time.
        :param pulumi.Input[str] value: The value of the chart.
        :param pulumi.Input[str] version: The chart version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ChartState.__new__(_ChartState)

        __props__.__dict__["chart_url"] = chart_url
        __props__.__dict__["content"] = content
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["instruction"] = instruction
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["public"] = public
        __props__.__dict__["region"] = region
        __props__.__dict__["source"] = source
        __props__.__dict__["translate"] = translate
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["value"] = value
        __props__.__dict__["version"] = version
        return Chart(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="chartUrl")
    def chart_url(self) -> pulumi.Output[str]:
        """
        The chart url.
        """
        return pulumi.get(self, "chart_url")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Specifies the path of the chart package to be uploaded.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the chart.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def instruction(self) -> pulumi.Output[str]:
        """
        The instruction of the chart.
        """
        return pulumi.get(self, "instruction")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The chart name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the parameters of the CCE chart.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def public(self) -> pulumi.Output[bool]:
        """
        Whether the chart is public.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the CCE chart resource.
        If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        The source of the chart.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def translate(self) -> pulumi.Output[str]:
        """
        The traslate source of the chart.
        """
        return pulumi.get(self, "translate")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        """
        The value of the chart.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The chart version.
        """
        return pulumi.get(self, "version")

