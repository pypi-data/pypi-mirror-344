# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AddonValues',
    'ClusterCertificateCluster',
    'ClusterCertificateUser',
    'ClusterComponentConfiguration',
    'ClusterExtendParam',
    'ClusterLogConfigLogConfig',
    'ClusterMaster',
    'ClusterUpgradeAddon',
    'ClusterUpgradeAddonValues',
    'ClusterUpgradeStrategy',
    'ClusterUpgradeStrategyInPlaceRollingUpdate',
    'NodeAttachDataVolume',
    'NodeAttachExtensionNic',
    'NodeAttachHostnameConfig',
    'NodeAttachRootVolume',
    'NodeAttachStorage',
    'NodeAttachStorageGroup',
    'NodeAttachStorageGroupVirtualSpace',
    'NodeAttachStorageSelector',
    'NodeAttachTaint',
    'NodeDataVolume',
    'NodeExtendParams',
    'NodeExtensionNic',
    'NodeHostnameConfig',
    'NodePoolDataVolume',
    'NodePoolExtendParams',
    'NodePoolExtensionScaleGroup',
    'NodePoolExtensionScaleGroupMetadata',
    'NodePoolExtensionScaleGroupSpec',
    'NodePoolExtensionScaleGroupSpecAutoscaling',
    'NodePoolExtensionScaleGroupSpecCapacityReservationSpecification',
    'NodePoolHostnameConfig',
    'NodePoolNodesAddNodeList',
    'NodePoolRootVolume',
    'NodePoolStorage',
    'NodePoolStorageGroup',
    'NodePoolStorageGroupVirtualSpace',
    'NodePoolStorageSelector',
    'NodePoolTaint',
    'NodeRootVolume',
    'NodeStorage',
    'NodeStorageGroup',
    'NodeStorageGroupVirtualSpace',
    'NodeStorageSelector',
    'NodeTaint',
    'GetAddonTemplateSupportVersionResult',
    'GetAddonsItemResult',
    'GetAddonsItemMetadataResult',
    'GetAddonsItemSpecResult',
    'GetAddonsItemStatusResult',
    'GetAddonsItemStatusCurrentVersionResult',
    'GetAddonsItemStatusCurrentVersionSupportVersionResult',
    'GetChartsChartResult',
    'GetClusterCertificateClusterResult',
    'GetClusterCertificateUserResult',
    'GetClusterCertificatesClusterResult',
    'GetClusterCertificatesContextResult',
    'GetClusterCertificatesUserResult',
    'GetClusterEndpointResult',
    'GetClusterMasterResult',
    'GetClustersClusterResult',
    'GetClustersClusterCertificateClusterResult',
    'GetClustersClusterCertificateUserResult',
    'GetClustersClusterEndpointResult',
    'GetClustersClusterMasterResult',
    'GetNodeDataVolumeResult',
    'GetNodeHostnameConfigResult',
    'GetNodePoolDataVolumeResult',
    'GetNodePoolHostnameConfigResult',
    'GetNodePoolRootVolumeResult',
    'GetNodeRootVolumeResult',
    'GetNodesNodeResult',
    'GetNodesNodeDataVolumeResult',
    'GetNodesNodeHostnameConfigResult',
    'GetNodesNodeRootVolumeResult',
]

@pulumi.output_type
class AddonValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicJson":
            suggest = "basic_json"
        elif key == "customJson":
            suggest = "custom_json"
        elif key == "flavorJson":
            suggest = "flavor_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddonValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddonValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddonValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basic: Optional[Mapping[str, str]] = None,
                 basic_json: Optional[str] = None,
                 custom: Optional[Mapping[str, str]] = None,
                 custom_json: Optional[str] = None,
                 flavor: Optional[Mapping[str, str]] = None,
                 flavor_json: Optional[str] = None):
        """
        :param Mapping[str, str] basic: Specifies the key/value pairs vary depending on the add-on.
               Only supports non-nested structure and only supports string type elements.
               This is an alternative to `basic_json`, but it is not recommended.
        :param str basic_json: Specifies the json string vary depending on the add-on.
        :param Mapping[str, str] custom: Specifies the key/value pairs vary depending on the add-on.
               Only supports non-nested structure and only supports string type elements.
               This is an alternative to `custom_json`, but it is not recommended.
        :param str custom_json: Specifies the json string vary depending on the add-on.
        :param Mapping[str, str] flavor: Specifies the key/value pairs vary depending on the add-on.
               Only supports non-nested structure and only supports string type elements.
               This is an alternative to `flavor_json`, but it is not recommended.
        :param str flavor_json: Specifies the json string vary depending on the add-on.
        """
        if basic is not None:
            pulumi.set(__self__, "basic", basic)
        if basic_json is not None:
            pulumi.set(__self__, "basic_json", basic_json)
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if custom_json is not None:
            pulumi.set(__self__, "custom_json", custom_json)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if flavor_json is not None:
            pulumi.set(__self__, "flavor_json", flavor_json)

    @property
    @pulumi.getter
    def basic(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the key/value pairs vary depending on the add-on.
        Only supports non-nested structure and only supports string type elements.
        This is an alternative to `basic_json`, but it is not recommended.
        """
        return pulumi.get(self, "basic")

    @property
    @pulumi.getter(name="basicJson")
    def basic_json(self) -> Optional[str]:
        """
        Specifies the json string vary depending on the add-on.
        """
        return pulumi.get(self, "basic_json")

    @property
    @pulumi.getter
    def custom(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the key/value pairs vary depending on the add-on.
        Only supports non-nested structure and only supports string type elements.
        This is an alternative to `custom_json`, but it is not recommended.
        """
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter(name="customJson")
    def custom_json(self) -> Optional[str]:
        """
        Specifies the json string vary depending on the add-on.
        """
        return pulumi.get(self, "custom_json")

    @property
    @pulumi.getter
    def flavor(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the key/value pairs vary depending on the add-on.
        Only supports non-nested structure and only supports string type elements.
        This is an alternative to `flavor_json`, but it is not recommended.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="flavorJson")
    def flavor_json(self) -> Optional[str]:
        """
        Specifies the json string vary depending on the add-on.
        """
        return pulumi.get(self, "flavor_json")


@pulumi.output_type
class ClusterCertificateCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateAuthorityData":
            suggest = "certificate_authority_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCertificateCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCertificateCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCertificateCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_authority_data: Optional[str] = None,
                 name: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str certificate_authority_data: The certificate data.
        :param str name: Specifies the component name.
        :param str server: The server IP address.
        """
        if certificate_authority_data is not None:
            pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> Optional[str]:
        """
        The certificate data.
        """
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies the component name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        The server IP address.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ClusterCertificateUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificateData":
            suggest = "client_certificate_data"
        elif key == "clientKeyData":
            suggest = "client_key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCertificateUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCertificateUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCertificateUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate_data: Optional[str] = None,
                 client_key_data: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str client_certificate_data: The client certificate data.
        :param str client_key_data: The client key data.
        :param str name: Specifies the component name.
        """
        if client_certificate_data is not None:
            pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        if client_key_data is not None:
            pulumi.set(__self__, "client_key_data", client_key_data)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> Optional[str]:
        """
        The client certificate data.
        """
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> Optional[str]:
        """
        The client key data.
        """
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies the component name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClusterComponentConfiguration(dict):
    def __init__(__self__, *,
                 name: str,
                 configurations: Optional[str] = None):
        """
        :param str name: Specifies the component name.
        :param str configurations: Specifies JSON string of the component configurations.
        """
        pulumi.set(__self__, "name", name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the component name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[str]:
        """
        Specifies JSON string of the component configurations.
        """
        return pulumi.get(self, "configurations")


@pulumi.output_type
class ClusterExtendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterAz":
            suggest = "cluster_az"
        elif key == "cpuManagerPolicy":
            suggest = "cpu_manager_policy"
        elif key == "decMasterFlavor":
            suggest = "dec_master_flavor"
        elif key == "dockerUmaskMode":
            suggest = "docker_umask_mode"
        elif key == "dssMasterVolumes":
            suggest = "dss_master_volumes"
        elif key == "fixPoolMask":
            suggest = "fix_pool_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterExtendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterExtendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterExtendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_az: Optional[str] = None,
                 cpu_manager_policy: Optional[str] = None,
                 dec_master_flavor: Optional[str] = None,
                 docker_umask_mode: Optional[str] = None,
                 dss_master_volumes: Optional[str] = None,
                 fix_pool_mask: Optional[str] = None):
        """
        :param str cluster_az: Specifies the AZ of master nodes in the cluster. The value can be:
               + **multi_az**: The cluster will span across AZs. This field is configurable only for high-availability clusters.
               + **AZ of the dedicated cloud computing pool**: The cluster will be deployed in the AZ of Dedicated Cloud (DeC).
               This parameter is mandatory for dedicated CCE clusters.
        :param str cpu_manager_policy: Specifies the cluster CPU management policy.
               The value can be:
               + **none**: CPU cores will not be exclusively allocated to workload pods.
               Select this value if you want a large pool of shareable CPU cores.
               + **static**: CPU cores can be exclusively allocated to workload pods.
               Select this value if your workload is sensitive to latency in CPU cache and scheduling.In a CCE Turbo cluster,
               this setting is valid only for nodes where common containers, not Kata containers, run.
        :param str dec_master_flavor: Specifies the specifications of the master node
               in the dedicated hybrid cluster.
               Changing this parameter will create a new cluster resource.
        :param str docker_umask_mode: Specifies the default UmaskMode configuration of Docker in a
               cluster. The value can be **secure** or **normal**, defaults to normal.
               Changing this parameter will create a new cluster resource.
        :param str dss_master_volumes: Specifies whether the system and data disks of a master node
               use dedicated distributed storage. If left unspecified, EVS disks are used by default.
               This parameter is mandatory for dedicated CCE clusters.
               It is in the following format:
        :param str fix_pool_mask: Specifies the number of mask bits of the fixed IP address pool
               of the container network model. This field can only be used when `container_network_type` is set to **vpc-router**.
               Changing this parameter will create a new cluster resource.
        """
        if cluster_az is not None:
            pulumi.set(__self__, "cluster_az", cluster_az)
        if cpu_manager_policy is not None:
            pulumi.set(__self__, "cpu_manager_policy", cpu_manager_policy)
        if dec_master_flavor is not None:
            pulumi.set(__self__, "dec_master_flavor", dec_master_flavor)
        if docker_umask_mode is not None:
            pulumi.set(__self__, "docker_umask_mode", docker_umask_mode)
        if dss_master_volumes is not None:
            pulumi.set(__self__, "dss_master_volumes", dss_master_volumes)
        if fix_pool_mask is not None:
            pulumi.set(__self__, "fix_pool_mask", fix_pool_mask)

    @property
    @pulumi.getter(name="clusterAz")
    def cluster_az(self) -> Optional[str]:
        """
        Specifies the AZ of master nodes in the cluster. The value can be:
        + **multi_az**: The cluster will span across AZs. This field is configurable only for high-availability clusters.
        + **AZ of the dedicated cloud computing pool**: The cluster will be deployed in the AZ of Dedicated Cloud (DeC).
        This parameter is mandatory for dedicated CCE clusters.
        """
        return pulumi.get(self, "cluster_az")

    @property
    @pulumi.getter(name="cpuManagerPolicy")
    def cpu_manager_policy(self) -> Optional[str]:
        """
        Specifies the cluster CPU management policy.
        The value can be:
        + **none**: CPU cores will not be exclusively allocated to workload pods.
        Select this value if you want a large pool of shareable CPU cores.
        + **static**: CPU cores can be exclusively allocated to workload pods.
        Select this value if your workload is sensitive to latency in CPU cache and scheduling.In a CCE Turbo cluster,
        this setting is valid only for nodes where common containers, not Kata containers, run.
        """
        return pulumi.get(self, "cpu_manager_policy")

    @property
    @pulumi.getter(name="decMasterFlavor")
    def dec_master_flavor(self) -> Optional[str]:
        """
        Specifies the specifications of the master node
        in the dedicated hybrid cluster.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "dec_master_flavor")

    @property
    @pulumi.getter(name="dockerUmaskMode")
    def docker_umask_mode(self) -> Optional[str]:
        """
        Specifies the default UmaskMode configuration of Docker in a
        cluster. The value can be **secure** or **normal**, defaults to normal.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "docker_umask_mode")

    @property
    @pulumi.getter(name="dssMasterVolumes")
    def dss_master_volumes(self) -> Optional[str]:
        """
        Specifies whether the system and data disks of a master node
        use dedicated distributed storage. If left unspecified, EVS disks are used by default.
        This parameter is mandatory for dedicated CCE clusters.
        It is in the following format:
        """
        return pulumi.get(self, "dss_master_volumes")

    @property
    @pulumi.getter(name="fixPoolMask")
    def fix_pool_mask(self) -> Optional[str]:
        """
        Specifies the number of mask bits of the fixed IP address pool
        of the container network model. This field can only be used when `container_network_type` is set to **vpc-router**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "fix_pool_mask")


@pulumi.output_type
class ClusterLogConfigLogConfig(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 name: Optional[str] = None):
        """
        :param bool enable: Specifies whether to collect the log.
        :param str name: Specifies the log type.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Specifies whether to collect the log.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies the log type.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClusterMaster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMaster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMaster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMaster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[str] = None):
        """
        :param str availability_zone: Specifies the availability zone of the master node.
               Changing this parameter will create a new cluster resource.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        Specifies the availability zone of the master node.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class ClusterUpgradeAddon(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addonTemplateName":
            suggest = "addon_template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterUpgradeAddon. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterUpgradeAddon.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterUpgradeAddon.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addon_template_name: str,
                 operation: str,
                 version: str,
                 values: Optional['outputs.ClusterUpgradeAddonValues'] = None):
        """
        :param str addon_template_name: Specifies the add-on name.
        :param str operation: Specifies the execution action.
               For current upgrades, the value can be **patch**.
        :param str version: Specifies the target add-on version.
               The target add-on version must match the target cluster version.
        :param 'ClusterUpgradeAddonValuesArgs' values: Specifies the add-on template installation parameters.
               These parameters vary depending on the add-on. The values is documented below.
        """
        pulumi.set(__self__, "addon_template_name", addon_template_name)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "version", version)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="addonTemplateName")
    def addon_template_name(self) -> str:
        """
        Specifies the add-on name.
        """
        return pulumi.get(self, "addon_template_name")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        Specifies the execution action.
        For current upgrades, the value can be **patch**.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Specifies the target add-on version.
        The target add-on version must match the target cluster version.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def values(self) -> Optional['outputs.ClusterUpgradeAddonValues']:
        """
        Specifies the add-on template installation parameters.
        These parameters vary depending on the add-on. The values is documented below.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ClusterUpgradeAddonValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicJson":
            suggest = "basic_json"
        elif key == "customJson":
            suggest = "custom_json"
        elif key == "flavorJson":
            suggest = "flavor_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterUpgradeAddonValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterUpgradeAddonValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterUpgradeAddonValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basic_json: Optional[str] = None,
                 custom_json: Optional[str] = None,
                 flavor_json: Optional[str] = None):
        """
        :param str basic_json: Specifies the json string vary depending on the add-on.
        :param str custom_json: Specifies the json string vary depending on the add-on.
        :param str flavor_json: Specifies the json string vary depending on the add-on.
        """
        if basic_json is not None:
            pulumi.set(__self__, "basic_json", basic_json)
        if custom_json is not None:
            pulumi.set(__self__, "custom_json", custom_json)
        if flavor_json is not None:
            pulumi.set(__self__, "flavor_json", flavor_json)

    @property
    @pulumi.getter(name="basicJson")
    def basic_json(self) -> Optional[str]:
        """
        Specifies the json string vary depending on the add-on.
        """
        return pulumi.get(self, "basic_json")

    @property
    @pulumi.getter(name="customJson")
    def custom_json(self) -> Optional[str]:
        """
        Specifies the json string vary depending on the add-on.
        """
        return pulumi.get(self, "custom_json")

    @property
    @pulumi.getter(name="flavorJson")
    def flavor_json(self) -> Optional[str]:
        """
        Specifies the json string vary depending on the add-on.
        """
        return pulumi.get(self, "flavor_json")


@pulumi.output_type
class ClusterUpgradeStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inPlaceRollingUpdate":
            suggest = "in_place_rolling_update"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterUpgradeStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterUpgradeStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterUpgradeStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 in_place_rolling_update: Optional['outputs.ClusterUpgradeStrategyInPlaceRollingUpdate'] = None):
        """
        :param str type: Specifies the upgrade strategy type.
               The value can be **inPlaceRollingUpdate**.
        :param 'ClusterUpgradeStrategyInPlaceRollingUpdateArgs' in_place_rolling_update: Specifies the in-place upgrade settings.
               It's mandatory when the `type` is set to **inPlaceRollingUpdate**.
               The in_place_rolling_update structure is documented below.
        """
        pulumi.set(__self__, "type", type)
        if in_place_rolling_update is not None:
            pulumi.set(__self__, "in_place_rolling_update", in_place_rolling_update)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the upgrade strategy type.
        The value can be **inPlaceRollingUpdate**.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="inPlaceRollingUpdate")
    def in_place_rolling_update(self) -> Optional['outputs.ClusterUpgradeStrategyInPlaceRollingUpdate']:
        """
        Specifies the in-place upgrade settings.
        It's mandatory when the `type` is set to **inPlaceRollingUpdate**.
        The in_place_rolling_update structure is documented below.
        """
        return pulumi.get(self, "in_place_rolling_update")


@pulumi.output_type
class ClusterUpgradeStrategyInPlaceRollingUpdate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userDefinedStep":
            suggest = "user_defined_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterUpgradeStrategyInPlaceRollingUpdate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterUpgradeStrategyInPlaceRollingUpdate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterUpgradeStrategyInPlaceRollingUpdate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_defined_step: Optional[int] = None):
        """
        :param int user_defined_step: Specifies the node upgrade step.
               The value ranges from **1** to **40**. The recommended value is **20**.
        """
        if user_defined_step is not None:
            pulumi.set(__self__, "user_defined_step", user_defined_step)

    @property
    @pulumi.getter(name="userDefinedStep")
    def user_defined_step(self) -> Optional[int]:
        """
        Specifies the node upgrade step.
        The value ranges from **1** to **40**. The recommended value is **20**.
        """
        return pulumi.get(self, "user_defined_step")


@pulumi.output_type
class NodeAttachDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeAttachDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeAttachDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeAttachDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dss_pool_id: Optional[str] = None,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 iops: Optional[int] = None,
                 kms_key_id: Optional[str] = None,
                 size: Optional[int] = None,
                 throughput: Optional[int] = None,
                 volumetype: Optional[str] = None):
        """
        :param str dss_pool_id: The DSS pool ID. This field is used only for dedicated storage.
        :param Mapping[str, str] extend_params: The disk expansion parameters.
        :param int iops: The iops of the disk.
        :param str kms_key_id: The ID of a KMS key. This is used to encrypt the volume.
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
               Changing this parameter will reset the node.
        :param int throughput: The throughput of the disk.
        :param str volumetype: The disk type.
        """
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if volumetype is not None:
            pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[str]:
        """
        The DSS pool ID. This field is used only for dedicated storage.
        """
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        The disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        """
        The iops of the disk.
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The ID of a KMS key. This is used to encrypt the volume.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        Changing this parameter will reset the node.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[int]:
        """
        The throughput of the disk.
        """
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter
    def volumetype(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class NodeAttachExtensionNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeAttachExtensionNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeAttachExtensionNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeAttachExtensionNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None):
        """
        :param str subnet_id: The ID of the subnet to which the NIC belongs.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the subnet to which the NIC belongs.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class NodeAttachHostnameConfig(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Specifies the hostname type of the kubernetes node.
               The value can be:
               + **privateIp**: The Kubernetes node is named after its IP address.
               + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the hostname type of the kubernetes node.
        The value can be:
        + **privateIp**: The Kubernetes node is named after its IP address.
        + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodeAttachRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeAttachRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeAttachRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeAttachRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dss_pool_id: Optional[str] = None,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 iops: Optional[int] = None,
                 kms_key_id: Optional[str] = None,
                 size: Optional[int] = None,
                 throughput: Optional[int] = None,
                 volumetype: Optional[str] = None):
        """
        :param str dss_pool_id: The DSS pool ID. This field is used only for dedicated storage.
        :param Mapping[str, str] extend_params: The disk expansion parameters.
        :param int iops: The iops of the disk.
        :param str kms_key_id: The ID of a KMS key. This is used to encrypt the volume.
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
               Changing this parameter will reset the node.
        :param int throughput: The throughput of the disk.
        :param str volumetype: The disk type.
        """
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if volumetype is not None:
            pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[str]:
        """
        The DSS pool ID. This field is used only for dedicated storage.
        """
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        The disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        """
        The iops of the disk.
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The ID of a KMS key. This is used to encrypt the volume.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        Changing this parameter will reset the node.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[int]:
        """
        The throughput of the disk.
        """
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter
    def volumetype(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class NodeAttachStorage(dict):
    def __init__(__self__, *,
                 groups: Sequence['outputs.NodeAttachStorageGroup'],
                 selectors: Sequence['outputs.NodeAttachStorageSelector']):
        """
        :param Sequence['NodeAttachStorageGroupArgs'] groups: Specifies the storage group consists of multiple storage devices.
               This is used to divide storage space. Structure is documented below.
               Changing this parameter will reset the node.
        :param Sequence['NodeAttachStorageSelectorArgs'] selectors: Specifies the disk selection.
               Matched disks are managed according to match labels and storage type. Structure is documented below.
               Changing this parameter will reset the node.
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.NodeAttachStorageGroup']:
        """
        Specifies the storage group consists of multiple storage devices.
        This is used to divide storage space. Structure is documented below.
        Changing this parameter will reset the node.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.NodeAttachStorageSelector']:
        """
        Specifies the disk selection.
        Matched disks are managed according to match labels and storage type. Structure is documented below.
        Changing this parameter will reset the node.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class NodeAttachStorageGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorNames":
            suggest = "selector_names"
        elif key == "virtualSpaces":
            suggest = "virtual_spaces"
        elif key == "cceManaged":
            suggest = "cce_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeAttachStorageGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeAttachStorageGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeAttachStorageGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 selector_names: Sequence[str],
                 virtual_spaces: Sequence['outputs.NodeAttachStorageGroupVirtualSpace'],
                 cce_managed: Optional[bool] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported. Changing this parameter will reset the node.
        :param Sequence[str] selector_names: Specifies the list of names of selectors to match.
               This parameter corresponds to name in `selectors`. A group can match multiple selectors,
               but a selector can match only one group. Changing this parameter will reset the node.
        :param Sequence['NodeAttachStorageGroupVirtualSpaceArgs'] virtual_spaces: Specifies the detailed management of space configuration in a group.
               Changing this parameter will reset the node.
        :param bool cce_managed: Specifies the whether the storage space is for **kubernetes** and
               **runtime** components. Only one group can be set to true. The default value is **false**.
               Changing this parameter will reset the node.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selector_names", selector_names)
        pulumi.set(__self__, "virtual_spaces", virtual_spaces)
        if cce_managed is not None:
            pulumi.set(__self__, "cce_managed", cce_managed)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selectorNames")
    def selector_names(self) -> Sequence[str]:
        """
        Specifies the list of names of selectors to match.
        This parameter corresponds to name in `selectors`. A group can match multiple selectors,
        but a selector can match only one group. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "selector_names")

    @property
    @pulumi.getter(name="virtualSpaces")
    def virtual_spaces(self) -> Sequence['outputs.NodeAttachStorageGroupVirtualSpace']:
        """
        Specifies the detailed management of space configuration in a group.
        Changing this parameter will reset the node.
        """
        return pulumi.get(self, "virtual_spaces")

    @property
    @pulumi.getter(name="cceManaged")
    def cce_managed(self) -> Optional[bool]:
        """
        Specifies the whether the storage space is for **kubernetes** and
        **runtime** components. Only one group can be set to true. The default value is **false**.
        Changing this parameter will reset the node.
        """
        return pulumi.get(self, "cce_managed")


@pulumi.output_type
class NodeAttachStorageGroupVirtualSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lvmLvType":
            suggest = "lvm_lv_type"
        elif key == "lvmPath":
            suggest = "lvm_path"
        elif key == "runtimeLvType":
            suggest = "runtime_lv_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeAttachStorageGroupVirtualSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeAttachStorageGroupVirtualSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeAttachStorageGroupVirtualSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 size: str,
                 lvm_lv_type: Optional[str] = None,
                 lvm_path: Optional[str] = None,
                 runtime_lv_type: Optional[str] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported. Changing this parameter will reset the node.
        :param str size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
               Changing this parameter will reset the node.
        :param str lvm_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
               a new resource.
        :param str lvm_path: Specifies the absolute path to which the disk is attached.
               This parameter takes effect only in **user** configuration. Changing this parameter will reset the node.
        :param str runtime_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **runtime** configuration. Changing this parameter will reset the node.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if lvm_lv_type is not None:
            pulumi.set(__self__, "lvm_lv_type", lvm_lv_type)
        if lvm_path is not None:
            pulumi.set(__self__, "lvm_path", lvm_path)
        if runtime_lv_type is not None:
            pulumi.set(__self__, "runtime_lv_type", runtime_lv_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        Changing this parameter will reset the node.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="lvmLvType")
    def lvm_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "lvm_lv_type")

    @property
    @pulumi.getter(name="lvmPath")
    def lvm_path(self) -> Optional[str]:
        """
        Specifies the absolute path to which the disk is attached.
        This parameter takes effect only in **user** configuration. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "lvm_path")

    @property
    @pulumi.getter(name="runtimeLvType")
    def runtime_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **runtime** configuration. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "runtime_lv_type")


@pulumi.output_type
class NodeAttachStorageSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabelCount":
            suggest = "match_label_count"
        elif key == "matchLabelMetadataCmkid":
            suggest = "match_label_metadata_cmkid"
        elif key == "matchLabelMetadataEncrypted":
            suggest = "match_label_metadata_encrypted"
        elif key == "matchLabelSize":
            suggest = "match_label_size"
        elif key == "matchLabelVolumeType":
            suggest = "match_label_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeAttachStorageSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeAttachStorageSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeAttachStorageSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 match_label_count: Optional[str] = None,
                 match_label_metadata_cmkid: Optional[str] = None,
                 match_label_metadata_encrypted: Optional[str] = None,
                 match_label_size: Optional[str] = None,
                 match_label_volume_type: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported. Changing this parameter will reset the node.
        :param str match_label_count: Specifies the number of disks to be selected. If omitted,
               all disks of this type are selected. Changing this parameter will reset the node.
        :param str match_label_metadata_cmkid: Specifies the customer master key ID of an encrypted
               disk. Changing this parameter will reset the node.
        :param str match_label_metadata_encrypted: Specifies the disk encryption identifier.
               Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
               If omitted, whether the disk is encrypted is not limited. Changing this parameter will reset the node.
        :param str match_label_size: Specifies the matched disk size. If omitted,
               the disk size is not limited. Example: 100. Changing this parameter will reset the node.
        :param str match_label_volume_type: Specifies the EVS disk type. Currently,
               **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
               Changing this parameter will reset the node.
        :param str type: Specifies the hostname type of the kubernetes node.
               The value can be:
               + **privateIp**: The Kubernetes node is named after its IP address.
               + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        pulumi.set(__self__, "name", name)
        if match_label_count is not None:
            pulumi.set(__self__, "match_label_count", match_label_count)
        if match_label_metadata_cmkid is not None:
            pulumi.set(__self__, "match_label_metadata_cmkid", match_label_metadata_cmkid)
        if match_label_metadata_encrypted is not None:
            pulumi.set(__self__, "match_label_metadata_encrypted", match_label_metadata_encrypted)
        if match_label_size is not None:
            pulumi.set(__self__, "match_label_size", match_label_size)
        if match_label_volume_type is not None:
            pulumi.set(__self__, "match_label_volume_type", match_label_volume_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="matchLabelCount")
    def match_label_count(self) -> Optional[str]:
        """
        Specifies the number of disks to be selected. If omitted,
        all disks of this type are selected. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "match_label_count")

    @property
    @pulumi.getter(name="matchLabelMetadataCmkid")
    def match_label_metadata_cmkid(self) -> Optional[str]:
        """
        Specifies the customer master key ID of an encrypted
        disk. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "match_label_metadata_cmkid")

    @property
    @pulumi.getter(name="matchLabelMetadataEncrypted")
    def match_label_metadata_encrypted(self) -> Optional[str]:
        """
        Specifies the disk encryption identifier.
        Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
        If omitted, whether the disk is encrypted is not limited. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "match_label_metadata_encrypted")

    @property
    @pulumi.getter(name="matchLabelSize")
    def match_label_size(self) -> Optional[str]:
        """
        Specifies the matched disk size. If omitted,
        the disk size is not limited. Example: 100. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "match_label_size")

    @property
    @pulumi.getter(name="matchLabelVolumeType")
    def match_label_volume_type(self) -> Optional[str]:
        """
        Specifies the EVS disk type. Currently,
        **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
        Changing this parameter will reset the node.
        """
        return pulumi.get(self, "match_label_volume_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the hostname type of the kubernetes node.
        The value can be:
        + **privateIp**: The Kubernetes node is named after its IP address.
        + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodeAttachTaint(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: Available options are NoSchedule, PreferNoSchedule, and NoExecute.
               Changing this parameter will reset the node.
        :param str key: A key must contain 1 to 63 characters starting with a letter or digit.
               Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
               as the prefix of a key. Changing this parameter will reset the node.
        :param str value: A value must start with a letter or digit and can contain a maximum of 63
               characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
               reset the node.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Available options are NoSchedule, PreferNoSchedule, and NoExecute.
        Changing this parameter will reset the node.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A key must contain 1 to 63 characters starting with a letter or digit.
        Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
        as the prefix of a key. Changing this parameter will reset the node.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A value must start with a letter or digit and can contain a maximum of 63
        characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
        reset the node.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodeDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: int,
                 volumetype: str,
                 dss_pool_id: Optional[str] = None,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 iops: Optional[int] = None,
                 kms_key_id: Optional[str] = None,
                 throughput: Optional[int] = None):
        """
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        :param str volumetype: Specifies the disk type.
        :param str dss_pool_id: Specifies the DSS pool ID. This field is used only for
        :param Mapping[str, str] extend_params: Specifies the extended parameters.
               The object structure is documented below.
        :param int iops: Specifies the iops of the disk,
               required when `volumetype` is **GPSSD2** or **ESSD2**.
        :param str kms_key_id: Specifies the ID of a KMS key. This is used to encrypt the volume.
        :param int throughput: Specifies the throughput of the disk in MiB/s,
               required when `volumetype` is **GPSSD2**.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Specifies the disk type.
        """
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[str]:
        """
        Specifies the DSS pool ID. This field is used only for
        """
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the extended parameters.
        The object structure is documented below.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        """
        Specifies the iops of the disk,
        required when `volumetype` is **GPSSD2** or **ESSD2**.
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Specifies the ID of a KMS key. This is used to encrypt the volume.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[int]:
        """
        Specifies the throughput of the disk in MiB/s,
        required when `volumetype` is **GPSSD2**.
        """
        return pulumi.get(self, "throughput")


@pulumi.output_type
class NodeExtendParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agencyName":
            suggest = "agency_name"
        elif key == "dockerBaseSize":
            suggest = "docker_base_size"
        elif key == "kubeReservedMem":
            suggest = "kube_reserved_mem"
        elif key == "marketType":
            suggest = "market_type"
        elif key == "maxPods":
            suggest = "max_pods"
        elif key == "nicThreshold":
            suggest = "nic_threshold"
        elif key == "nodeImageId":
            suggest = "node_image_id"
        elif key == "nodeMultiQueue":
            suggest = "node_multi_queue"
        elif key == "securityReinforcementType":
            suggest = "security_reinforcement_type"
        elif key == "spotPrice":
            suggest = "spot_price"
        elif key == "systemReservedMem":
            suggest = "system_reserved_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeExtendParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeExtendParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeExtendParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agency_name: Optional[str] = None,
                 docker_base_size: Optional[int] = None,
                 kube_reserved_mem: Optional[int] = None,
                 market_type: Optional[str] = None,
                 max_pods: Optional[int] = None,
                 nic_threshold: Optional[str] = None,
                 node_image_id: Optional[str] = None,
                 node_multi_queue: Optional[str] = None,
                 postinstall: Optional[str] = None,
                 preinstall: Optional[str] = None,
                 security_reinforcement_type: Optional[str] = None,
                 spot_price: Optional[str] = None,
                 system_reserved_mem: Optional[int] = None):
        """
        :param str agency_name: Specifies the agency name.
        :param int docker_base_size: Specifies the available disk space of a single container on a node,
               in GB.
        :param int kube_reserved_mem: Specifies the reserved node memory, which is reserved for
               Kubernetes-related components.
        :param int max_pods: Specifies the maximum number of instances a node is allowed to create.
        :param str nic_threshold: Specifies the ENI pre-binding thresholds.
               Example setting: **"0.3:0.6"**.
        :param str node_image_id: Specifies the image ID to create the node.
        :param str node_multi_queue: Specifies the number of ENI queues.
               Example setting: **"[{\\"queue\\":4}]"**.
        :param str postinstall: Specifies the script to be executed after installation.
               The input value can be a Base64 encoded string or not.
        :param str preinstall: Specifies the script to be executed before installation.
               The input value can be a Base64 encoded string or not.
        :param str security_reinforcement_type: Specifies the security reinforcement type.
               The value can be: **null** or **cybersecurity**.
        :param int system_reserved_mem: Specifies the reserved node memory, which is reserved
               value for system components.
        """
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if docker_base_size is not None:
            pulumi.set(__self__, "docker_base_size", docker_base_size)
        if kube_reserved_mem is not None:
            pulumi.set(__self__, "kube_reserved_mem", kube_reserved_mem)
        if market_type is not None:
            pulumi.set(__self__, "market_type", market_type)
        if max_pods is not None:
            pulumi.set(__self__, "max_pods", max_pods)
        if nic_threshold is not None:
            pulumi.set(__self__, "nic_threshold", nic_threshold)
        if node_image_id is not None:
            pulumi.set(__self__, "node_image_id", node_image_id)
        if node_multi_queue is not None:
            pulumi.set(__self__, "node_multi_queue", node_multi_queue)
        if postinstall is not None:
            pulumi.set(__self__, "postinstall", postinstall)
        if preinstall is not None:
            pulumi.set(__self__, "preinstall", preinstall)
        if security_reinforcement_type is not None:
            pulumi.set(__self__, "security_reinforcement_type", security_reinforcement_type)
        if spot_price is not None:
            pulumi.set(__self__, "spot_price", spot_price)
        if system_reserved_mem is not None:
            pulumi.set(__self__, "system_reserved_mem", system_reserved_mem)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[str]:
        """
        Specifies the agency name.
        """
        return pulumi.get(self, "agency_name")

    @property
    @pulumi.getter(name="dockerBaseSize")
    def docker_base_size(self) -> Optional[int]:
        """
        Specifies the available disk space of a single container on a node,
        in GB.
        """
        return pulumi.get(self, "docker_base_size")

    @property
    @pulumi.getter(name="kubeReservedMem")
    def kube_reserved_mem(self) -> Optional[int]:
        """
        Specifies the reserved node memory, which is reserved for
        Kubernetes-related components.
        """
        return pulumi.get(self, "kube_reserved_mem")

    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[str]:
        return pulumi.get(self, "market_type")

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[int]:
        """
        Specifies the maximum number of instances a node is allowed to create.
        """
        return pulumi.get(self, "max_pods")

    @property
    @pulumi.getter(name="nicThreshold")
    def nic_threshold(self) -> Optional[str]:
        """
        Specifies the ENI pre-binding thresholds.
        Example setting: **"0.3:0.6"**.
        """
        return pulumi.get(self, "nic_threshold")

    @property
    @pulumi.getter(name="nodeImageId")
    def node_image_id(self) -> Optional[str]:
        """
        Specifies the image ID to create the node.
        """
        return pulumi.get(self, "node_image_id")

    @property
    @pulumi.getter(name="nodeMultiQueue")
    def node_multi_queue(self) -> Optional[str]:
        """
        Specifies the number of ENI queues.
        Example setting: **"[{\\"queue\\":4}]"**.
        """
        return pulumi.get(self, "node_multi_queue")

    @property
    @pulumi.getter
    def postinstall(self) -> Optional[str]:
        """
        Specifies the script to be executed after installation.
        The input value can be a Base64 encoded string or not.
        """
        return pulumi.get(self, "postinstall")

    @property
    @pulumi.getter
    def preinstall(self) -> Optional[str]:
        """
        Specifies the script to be executed before installation.
        The input value can be a Base64 encoded string or not.
        """
        return pulumi.get(self, "preinstall")

    @property
    @pulumi.getter(name="securityReinforcementType")
    def security_reinforcement_type(self) -> Optional[str]:
        """
        Specifies the security reinforcement type.
        The value can be: **null** or **cybersecurity**.
        """
        return pulumi.get(self, "security_reinforcement_type")

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[str]:
        return pulumi.get(self, "spot_price")

    @property
    @pulumi.getter(name="systemReservedMem")
    def system_reserved_mem(self) -> Optional[int]:
        """
        Specifies the reserved node memory, which is reserved
        value for system components.
        """
        return pulumi.get(self, "system_reserved_mem")


@pulumi.output_type
class NodeExtensionNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeExtensionNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeExtensionNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeExtensionNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str):
        """
        :param str subnet_id: Specifies the ID of the subnet to which the NIC belongs.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Specifies the ID of the subnet to which the NIC belongs.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class NodeHostnameConfig(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Specifies the hostname type of the kubernetes node.
               The value can be:
               + **privateIp**: The Kubernetes node is named after its IP address.
               + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the hostname type of the kubernetes node.
        The value can be:
        + **privateIp**: The Kubernetes node is named after its IP address.
        + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: int,
                 volumetype: str,
                 dss_pool_id: Optional[str] = None,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 iops: Optional[int] = None,
                 kms_key_id: Optional[str] = None,
                 throughput: Optional[int] = None):
        """
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        :param str volumetype: Specifies the disk type.
        :param str dss_pool_id: Specifies the DSS pool ID. This field is used only for dedicated storage.
        :param Mapping[str, str] extend_params: Specifies the disk expansion parameters.
        :param int iops: Specifies the iops of the disk,
               required when `volumetype` is **GPSSD2** or **ESSD2**.
        :param str kms_key_id: Specifies the KMS key ID. This is used to encrypt the volume.
        :param int throughput: Specifies the throughput of the disk in MiB/s,
               required when `volumetype` is **GPSSD2**.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Specifies the disk type.
        """
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[str]:
        """
        Specifies the DSS pool ID. This field is used only for dedicated storage.
        """
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        """
        Specifies the iops of the disk,
        required when `volumetype` is **GPSSD2** or **ESSD2**.
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Specifies the KMS key ID. This is used to encrypt the volume.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[int]:
        """
        Specifies the throughput of the disk in MiB/s,
        required when `volumetype` is **GPSSD2**.
        """
        return pulumi.get(self, "throughput")


@pulumi.output_type
class NodePoolExtendParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agencyName":
            suggest = "agency_name"
        elif key == "dockerBaseSize":
            suggest = "docker_base_size"
        elif key == "kubeReservedMem":
            suggest = "kube_reserved_mem"
        elif key == "marketType":
            suggest = "market_type"
        elif key == "maxPods":
            suggest = "max_pods"
        elif key == "nicThreshold":
            suggest = "nic_threshold"
        elif key == "nodeImageId":
            suggest = "node_image_id"
        elif key == "nodeMultiQueue":
            suggest = "node_multi_queue"
        elif key == "securityReinforcementType":
            suggest = "security_reinforcement_type"
        elif key == "spotPrice":
            suggest = "spot_price"
        elif key == "systemReservedMem":
            suggest = "system_reserved_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolExtendParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolExtendParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolExtendParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agency_name: Optional[str] = None,
                 docker_base_size: Optional[int] = None,
                 kube_reserved_mem: Optional[int] = None,
                 market_type: Optional[str] = None,
                 max_pods: Optional[int] = None,
                 nic_threshold: Optional[str] = None,
                 node_image_id: Optional[str] = None,
                 node_multi_queue: Optional[str] = None,
                 postinstall: Optional[str] = None,
                 preinstall: Optional[str] = None,
                 security_reinforcement_type: Optional[str] = None,
                 spot_price: Optional[str] = None,
                 system_reserved_mem: Optional[int] = None):
        """
        :param str agency_name: Specifies the agency name.
        :param int docker_base_size: Specifies the available disk space of a single container on a node,
               in GB.
        :param int kube_reserved_mem: Specifies the reserved node memory, which is reserved for
               Kubernetes-related components.
        :param int max_pods: Specifies the maximum number of instances a node is allowed to create.
        :param str nic_threshold: Specifies the ENI pre-binding thresholds.
               Example setting: **"0.3:0.6"**.
        :param str node_image_id: Specifies the image ID to create the node.
        :param str node_multi_queue: Specifies the number of ENI queues.
               Example setting: **"[{\\"queue\\":4}]"**.
        :param str postinstall: Specifies the script to be executed after installation.
               The input value can be a Base64 encoded string or not.
        :param str preinstall: Specifies the script to be executed before installation.
               The input value can be a Base64 encoded string or not.
        :param str security_reinforcement_type: Specifies the security reinforcement type.
               The value can be: **null** or **cybersecurity**.
        :param int system_reserved_mem: Specifies the reserved node memory, which is reserved
               value for system components.
        """
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if docker_base_size is not None:
            pulumi.set(__self__, "docker_base_size", docker_base_size)
        if kube_reserved_mem is not None:
            pulumi.set(__self__, "kube_reserved_mem", kube_reserved_mem)
        if market_type is not None:
            pulumi.set(__self__, "market_type", market_type)
        if max_pods is not None:
            pulumi.set(__self__, "max_pods", max_pods)
        if nic_threshold is not None:
            pulumi.set(__self__, "nic_threshold", nic_threshold)
        if node_image_id is not None:
            pulumi.set(__self__, "node_image_id", node_image_id)
        if node_multi_queue is not None:
            pulumi.set(__self__, "node_multi_queue", node_multi_queue)
        if postinstall is not None:
            pulumi.set(__self__, "postinstall", postinstall)
        if preinstall is not None:
            pulumi.set(__self__, "preinstall", preinstall)
        if security_reinforcement_type is not None:
            pulumi.set(__self__, "security_reinforcement_type", security_reinforcement_type)
        if spot_price is not None:
            pulumi.set(__self__, "spot_price", spot_price)
        if system_reserved_mem is not None:
            pulumi.set(__self__, "system_reserved_mem", system_reserved_mem)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[str]:
        """
        Specifies the agency name.
        """
        return pulumi.get(self, "agency_name")

    @property
    @pulumi.getter(name="dockerBaseSize")
    def docker_base_size(self) -> Optional[int]:
        """
        Specifies the available disk space of a single container on a node,
        in GB.
        """
        return pulumi.get(self, "docker_base_size")

    @property
    @pulumi.getter(name="kubeReservedMem")
    def kube_reserved_mem(self) -> Optional[int]:
        """
        Specifies the reserved node memory, which is reserved for
        Kubernetes-related components.
        """
        return pulumi.get(self, "kube_reserved_mem")

    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[str]:
        return pulumi.get(self, "market_type")

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[int]:
        """
        Specifies the maximum number of instances a node is allowed to create.
        """
        return pulumi.get(self, "max_pods")

    @property
    @pulumi.getter(name="nicThreshold")
    def nic_threshold(self) -> Optional[str]:
        """
        Specifies the ENI pre-binding thresholds.
        Example setting: **"0.3:0.6"**.
        """
        return pulumi.get(self, "nic_threshold")

    @property
    @pulumi.getter(name="nodeImageId")
    def node_image_id(self) -> Optional[str]:
        """
        Specifies the image ID to create the node.
        """
        return pulumi.get(self, "node_image_id")

    @property
    @pulumi.getter(name="nodeMultiQueue")
    def node_multi_queue(self) -> Optional[str]:
        """
        Specifies the number of ENI queues.
        Example setting: **"[{\\"queue\\":4}]"**.
        """
        return pulumi.get(self, "node_multi_queue")

    @property
    @pulumi.getter
    def postinstall(self) -> Optional[str]:
        """
        Specifies the script to be executed after installation.
        The input value can be a Base64 encoded string or not.
        """
        return pulumi.get(self, "postinstall")

    @property
    @pulumi.getter
    def preinstall(self) -> Optional[str]:
        """
        Specifies the script to be executed before installation.
        The input value can be a Base64 encoded string or not.
        """
        return pulumi.get(self, "preinstall")

    @property
    @pulumi.getter(name="securityReinforcementType")
    def security_reinforcement_type(self) -> Optional[str]:
        """
        Specifies the security reinforcement type.
        The value can be: **null** or **cybersecurity**.
        """
        return pulumi.get(self, "security_reinforcement_type")

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[str]:
        return pulumi.get(self, "spot_price")

    @property
    @pulumi.getter(name="systemReservedMem")
    def system_reserved_mem(self) -> Optional[int]:
        """
        Specifies the reserved node memory, which is reserved
        value for system components.
        """
        return pulumi.get(self, "system_reserved_mem")


@pulumi.output_type
class NodePoolExtensionScaleGroup(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.NodePoolExtensionScaleGroupMetadata'] = None,
                 spec: Optional['outputs.NodePoolExtensionScaleGroupSpec'] = None):
        """
        :param 'NodePoolExtensionScaleGroupMetadataArgs' metadata: Specifies the basic information about the extended scaling group.
               The object structure is documented below.
        :param 'NodePoolExtensionScaleGroupSpecArgs' spec: Specifies the configurations of the extended scaling group,
               which carry different configurations from those of the default scaling group.
               The object structure is documented below.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.NodePoolExtensionScaleGroupMetadata']:
        """
        Specifies the basic information about the extended scaling group.
        The object structure is documented below.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.NodePoolExtensionScaleGroupSpec']:
        """
        Specifies the configurations of the extended scaling group,
        which carry different configurations from those of the default scaling group.
        The object structure is documented below.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class NodePoolExtensionScaleGroupMetadata(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Specifies the name of an extended scaling group.
               The value cannot be default and can contain a maximum of 55 characters.
               Only digits, lowercase letters, and hyphens (-) are allowed.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies the name of an extended scaling group.
        The value cannot be default and can contain a maximum of 55 characters.
        Only digits, lowercase letters, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NodePoolExtensionScaleGroupSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityReservationSpecification":
            suggest = "capacity_reservation_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolExtensionScaleGroupSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolExtensionScaleGroupSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolExtensionScaleGroupSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoscaling: Optional['outputs.NodePoolExtensionScaleGroupSpecAutoscaling'] = None,
                 az: Optional[str] = None,
                 capacity_reservation_specification: Optional['outputs.NodePoolExtensionScaleGroupSpecCapacityReservationSpecification'] = None,
                 flavor: Optional[str] = None):
        """
        :param 'NodePoolExtensionScaleGroupSpecAutoscalingArgs' autoscaling: Specifies the auto scaling configurations of the extended scaling group.
               The object structure is documented below.
        :param str az: Specifies the availability zone of a node.
               If this parameter is not specified or left blank, the default scaling group configurations take effect.
        :param 'NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs' capacity_reservation_specification: Specifies the capacity reservation
               configurations of the extended scaling group.
               The object structure is documented below.
        :param str flavor: Specifies the node flavor.
        """
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if az is not None:
            pulumi.set(__self__, "az", az)
        if capacity_reservation_specification is not None:
            pulumi.set(__self__, "capacity_reservation_specification", capacity_reservation_specification)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional['outputs.NodePoolExtensionScaleGroupSpecAutoscaling']:
        """
        Specifies the auto scaling configurations of the extended scaling group.
        The object structure is documented below.
        """
        return pulumi.get(self, "autoscaling")

    @property
    @pulumi.getter
    def az(self) -> Optional[str]:
        """
        Specifies the availability zone of a node.
        If this parameter is not specified or left blank, the default scaling group configurations take effect.
        """
        return pulumi.get(self, "az")

    @property
    @pulumi.getter(name="capacityReservationSpecification")
    def capacity_reservation_specification(self) -> Optional['outputs.NodePoolExtensionScaleGroupSpecCapacityReservationSpecification']:
        """
        Specifies the capacity reservation
        configurations of the extended scaling group.
        The object structure is documented below.
        """
        return pulumi.get(self, "capacity_reservation_specification")

    @property
    @pulumi.getter
    def flavor(self) -> Optional[str]:
        """
        Specifies the node flavor.
        """
        return pulumi.get(self, "flavor")


@pulumi.output_type
class NodePoolExtensionScaleGroupSpecAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extensionPriority":
            suggest = "extension_priority"
        elif key == "maxNodeCount":
            suggest = "max_node_count"
        elif key == "minNodeCount":
            suggest = "min_node_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolExtensionScaleGroupSpecAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolExtensionScaleGroupSpecAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolExtensionScaleGroupSpecAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 extension_priority: Optional[int] = None,
                 max_node_count: Optional[int] = None,
                 min_node_count: Optional[int] = None):
        """
        :param bool enable: Specifies whether to enable auto scaling for the scaling group, defaults to **false**.
        :param int extension_priority: Specifies the priority of the scaling group, defaults to **0**.
               A higher value indicates a greater priority.
        :param int max_node_count: Specifies the maximum number of nodes that can be retained in the scaling group
               during auto scaling. The value must be greater than or equal to that of `min_node_count`, and can neither be greater
               than the maximum number of nodes allowed by the cluster nor the maximum number of nodes in the node pool.
        :param int min_node_count: Specifies the minimum number of nodes in the scaling group during auto scaling.
               The value must be greater than **0**.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if extension_priority is not None:
            pulumi.set(__self__, "extension_priority", extension_priority)
        if max_node_count is not None:
            pulumi.set(__self__, "max_node_count", max_node_count)
        if min_node_count is not None:
            pulumi.set(__self__, "min_node_count", min_node_count)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Specifies whether to enable auto scaling for the scaling group, defaults to **false**.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="extensionPriority")
    def extension_priority(self) -> Optional[int]:
        """
        Specifies the priority of the scaling group, defaults to **0**.
        A higher value indicates a greater priority.
        """
        return pulumi.get(self, "extension_priority")

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[int]:
        """
        Specifies the maximum number of nodes that can be retained in the scaling group
        during auto scaling. The value must be greater than or equal to that of `min_node_count`, and can neither be greater
        than the maximum number of nodes allowed by the cluster nor the maximum number of nodes in the node pool.
        """
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> Optional[int]:
        """
        Specifies the minimum number of nodes in the scaling group during auto scaling.
        The value must be greater than **0**.
        """
        return pulumi.get(self, "min_node_count")


@pulumi.output_type
class NodePoolExtensionScaleGroupSpecCapacityReservationSpecification(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 preference: Optional[str] = None):
        """
        :param str id: Specifies the private pool ID.
               The parameter value can be ignored when preference is set to none.
        :param str preference: Specifies the capacity of a private storage pool. If the value is none,
               the capacity reservation is not specified. If the value is targeted, the capacity reservation is specified.
               In this case, the `id` cannot be left blank.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Specifies the private pool ID.
        The parameter value can be ignored when preference is set to none.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def preference(self) -> Optional[str]:
        """
        Specifies the capacity of a private storage pool. If the value is none,
        the capacity reservation is not specified. If the value is targeted, the capacity reservation is specified.
        In this case, the `id` cannot be left blank.
        """
        return pulumi.get(self, "preference")


@pulumi.output_type
class NodePoolHostnameConfig(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Specifies the hostname type of the kubernetes node.
               The value can be:
               + **privateIp**: The Kubernetes node is named after its IP address.
               + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the hostname type of the kubernetes node.
        The value can be:
        + **privateIp**: The Kubernetes node is named after its IP address.
        + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolNodesAddNodeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverId":
            suggest = "server_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodesAddNodeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodesAddNodeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodesAddNodeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_id: str):
        """
        :param str server_id: Specifies server ID.
        """
        pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> str:
        """
        Specifies server ID.
        """
        return pulumi.get(self, "server_id")


@pulumi.output_type
class NodePoolRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: int,
                 volumetype: str,
                 dss_pool_id: Optional[str] = None,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 iops: Optional[int] = None,
                 kms_key_id: Optional[str] = None,
                 throughput: Optional[int] = None):
        """
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        :param str volumetype: Specifies the disk type.
        :param str dss_pool_id: Specifies the DSS pool ID. This field is used only for dedicated storage.
        :param Mapping[str, str] extend_params: Specifies the disk expansion parameters.
        :param int iops: Specifies the iops of the disk,
               required when `volumetype` is **GPSSD2** or **ESSD2**.
        :param str kms_key_id: Specifies the KMS key ID. This is used to encrypt the volume.
        :param int throughput: Specifies the throughput of the disk in MiB/s,
               required when `volumetype` is **GPSSD2**.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Specifies the disk type.
        """
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[str]:
        """
        Specifies the DSS pool ID. This field is used only for dedicated storage.
        """
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        """
        Specifies the iops of the disk,
        required when `volumetype` is **GPSSD2** or **ESSD2**.
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Specifies the KMS key ID. This is used to encrypt the volume.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[int]:
        """
        Specifies the throughput of the disk in MiB/s,
        required when `volumetype` is **GPSSD2**.
        """
        return pulumi.get(self, "throughput")


@pulumi.output_type
class NodePoolStorage(dict):
    def __init__(__self__, *,
                 groups: Sequence['outputs.NodePoolStorageGroup'],
                 selectors: Sequence['outputs.NodePoolStorageSelector']):
        """
        :param Sequence['NodePoolStorageGroupArgs'] groups: Specifies the storage group consists of multiple storage devices.
               This is used to divide storage space. Structure is documented below.
        :param Sequence['NodePoolStorageSelectorArgs'] selectors: Specifies the disk selection.
               Matched disks are managed according to match labels and storage type. Structure is documented below.
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.NodePoolStorageGroup']:
        """
        Specifies the storage group consists of multiple storage devices.
        This is used to divide storage space. Structure is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.NodePoolStorageSelector']:
        """
        Specifies the disk selection.
        Matched disks are managed according to match labels and storage type. Structure is documented below.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class NodePoolStorageGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorNames":
            suggest = "selector_names"
        elif key == "virtualSpaces":
            suggest = "virtual_spaces"
        elif key == "cceManaged":
            suggest = "cce_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolStorageGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolStorageGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolStorageGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 selector_names: Sequence[str],
                 virtual_spaces: Sequence['outputs.NodePoolStorageGroupVirtualSpace'],
                 cce_managed: Optional[bool] = None):
        """
        :param str name: Specifies the name of an extended scaling group.
               The value cannot be default and can contain a maximum of 55 characters.
               Only digits, lowercase letters, and hyphens (-) are allowed.
        :param Sequence[str] selector_names: Specifies the list of names of selectors to match.
               This parameter corresponds to name in `selectors`. A group can match multiple selectors,
               but a selector can match only one group.
        :param Sequence['NodePoolStorageGroupVirtualSpaceArgs'] virtual_spaces: Specifies the detailed management of space configuration in a group.
        :param bool cce_managed: Specifies the whether the storage space is for **kubernetes** and
               **runtime** components. Only one group can be set to true. The default value is **false**.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selector_names", selector_names)
        pulumi.set(__self__, "virtual_spaces", virtual_spaces)
        if cce_managed is not None:
            pulumi.set(__self__, "cce_managed", cce_managed)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of an extended scaling group.
        The value cannot be default and can contain a maximum of 55 characters.
        Only digits, lowercase letters, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selectorNames")
    def selector_names(self) -> Sequence[str]:
        """
        Specifies the list of names of selectors to match.
        This parameter corresponds to name in `selectors`. A group can match multiple selectors,
        but a selector can match only one group.
        """
        return pulumi.get(self, "selector_names")

    @property
    @pulumi.getter(name="virtualSpaces")
    def virtual_spaces(self) -> Sequence['outputs.NodePoolStorageGroupVirtualSpace']:
        """
        Specifies the detailed management of space configuration in a group.
        """
        return pulumi.get(self, "virtual_spaces")

    @property
    @pulumi.getter(name="cceManaged")
    def cce_managed(self) -> Optional[bool]:
        """
        Specifies the whether the storage space is for **kubernetes** and
        **runtime** components. Only one group can be set to true. The default value is **false**.
        """
        return pulumi.get(self, "cce_managed")


@pulumi.output_type
class NodePoolStorageGroupVirtualSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lvmLvType":
            suggest = "lvm_lv_type"
        elif key == "lvmPath":
            suggest = "lvm_path"
        elif key == "runtimeLvType":
            suggest = "runtime_lv_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolStorageGroupVirtualSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolStorageGroupVirtualSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolStorageGroupVirtualSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 size: str,
                 lvm_lv_type: Optional[str] = None,
                 lvm_path: Optional[str] = None,
                 runtime_lv_type: Optional[str] = None):
        """
        :param str name: Specifies the name of an extended scaling group.
               The value cannot be default and can contain a maximum of 55 characters.
               Only digits, lowercase letters, and hyphens (-) are allowed.
        :param str size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        :param str lvm_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **kubernetes** and **user** configuration.
        :param str lvm_path: Specifies the absolute path to which the disk is attached.
               This parameter takes effect only in **user** configuration.
        :param str runtime_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **runtime** configuration.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if lvm_lv_type is not None:
            pulumi.set(__self__, "lvm_lv_type", lvm_lv_type)
        if lvm_path is not None:
            pulumi.set(__self__, "lvm_path", lvm_path)
        if runtime_lv_type is not None:
            pulumi.set(__self__, "runtime_lv_type", runtime_lv_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of an extended scaling group.
        The value cannot be default and can contain a maximum of 55 characters.
        Only digits, lowercase letters, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="lvmLvType")
    def lvm_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **kubernetes** and **user** configuration.
        """
        return pulumi.get(self, "lvm_lv_type")

    @property
    @pulumi.getter(name="lvmPath")
    def lvm_path(self) -> Optional[str]:
        """
        Specifies the absolute path to which the disk is attached.
        This parameter takes effect only in **user** configuration.
        """
        return pulumi.get(self, "lvm_path")

    @property
    @pulumi.getter(name="runtimeLvType")
    def runtime_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **runtime** configuration.
        """
        return pulumi.get(self, "runtime_lv_type")


@pulumi.output_type
class NodePoolStorageSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabelCount":
            suggest = "match_label_count"
        elif key == "matchLabelMetadataCmkid":
            suggest = "match_label_metadata_cmkid"
        elif key == "matchLabelMetadataEncrypted":
            suggest = "match_label_metadata_encrypted"
        elif key == "matchLabelSize":
            suggest = "match_label_size"
        elif key == "matchLabelVolumeType":
            suggest = "match_label_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolStorageSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolStorageSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolStorageSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 match_label_count: Optional[str] = None,
                 match_label_metadata_cmkid: Optional[str] = None,
                 match_label_metadata_encrypted: Optional[str] = None,
                 match_label_size: Optional[str] = None,
                 match_label_volume_type: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: Specifies the name of an extended scaling group.
               The value cannot be default and can contain a maximum of 55 characters.
               Only digits, lowercase letters, and hyphens (-) are allowed.
        :param str match_label_count: Specifies the number of disks to be selected. If omitted,
               all disks of this type are selected.
        :param str match_label_metadata_cmkid: Specifies the customer master key ID of an encrypted
               disk.
        :param str match_label_metadata_encrypted: Specifies the disk encryption identifier.
               Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
               If omitted, whether the disk is encrypted is not limited.
        :param str match_label_size: Specifies the matched disk size. If omitted,
               the disk size is not limited. Example: 100.
        :param str match_label_volume_type: Specifies the EVS disk type. Currently,
               **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
        :param str type: Specifies the hostname type of the kubernetes node.
               The value can be:
               + **privateIp**: The Kubernetes node is named after its IP address.
               + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        pulumi.set(__self__, "name", name)
        if match_label_count is not None:
            pulumi.set(__self__, "match_label_count", match_label_count)
        if match_label_metadata_cmkid is not None:
            pulumi.set(__self__, "match_label_metadata_cmkid", match_label_metadata_cmkid)
        if match_label_metadata_encrypted is not None:
            pulumi.set(__self__, "match_label_metadata_encrypted", match_label_metadata_encrypted)
        if match_label_size is not None:
            pulumi.set(__self__, "match_label_size", match_label_size)
        if match_label_volume_type is not None:
            pulumi.set(__self__, "match_label_volume_type", match_label_volume_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of an extended scaling group.
        The value cannot be default and can contain a maximum of 55 characters.
        Only digits, lowercase letters, and hyphens (-) are allowed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="matchLabelCount")
    def match_label_count(self) -> Optional[str]:
        """
        Specifies the number of disks to be selected. If omitted,
        all disks of this type are selected.
        """
        return pulumi.get(self, "match_label_count")

    @property
    @pulumi.getter(name="matchLabelMetadataCmkid")
    def match_label_metadata_cmkid(self) -> Optional[str]:
        """
        Specifies the customer master key ID of an encrypted
        disk.
        """
        return pulumi.get(self, "match_label_metadata_cmkid")

    @property
    @pulumi.getter(name="matchLabelMetadataEncrypted")
    def match_label_metadata_encrypted(self) -> Optional[str]:
        """
        Specifies the disk encryption identifier.
        Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
        If omitted, whether the disk is encrypted is not limited.
        """
        return pulumi.get(self, "match_label_metadata_encrypted")

    @property
    @pulumi.getter(name="matchLabelSize")
    def match_label_size(self) -> Optional[str]:
        """
        Specifies the matched disk size. If omitted,
        the disk size is not limited. Example: 100.
        """
        return pulumi.get(self, "match_label_size")

    @property
    @pulumi.getter(name="matchLabelVolumeType")
    def match_label_volume_type(self) -> Optional[str]:
        """
        Specifies the EVS disk type. Currently,
        **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
        """
        return pulumi.get(self, "match_label_volume_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the hostname type of the kubernetes node.
        The value can be:
        + **privateIp**: The Kubernetes node is named after its IP address.
        + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: Available options are NoSchedule, PreferNoSchedule, and NoExecute.
        :param str key: A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
               digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
               prefix of a key.
        :param str value: A value must start with a letter or digit and can contain a maximum of 63 characters,
               including letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Available options are NoSchedule, PreferNoSchedule, and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
        digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
        prefix of a key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A value must start with a letter or digit and can contain a maximum of 63 characters,
        including letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodeRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dssPoolId":
            suggest = "dss_pool_id"
        elif key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: int,
                 volumetype: str,
                 dss_pool_id: Optional[str] = None,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 iops: Optional[int] = None,
                 kms_key_id: Optional[str] = None,
                 throughput: Optional[int] = None):
        """
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        :param str volumetype: Specifies the disk type.
        :param str dss_pool_id: Specifies the DSS pool ID. This field is used only for
        :param Mapping[str, str] extend_params: Specifies the extended parameters.
               The object structure is documented below.
        :param int iops: Specifies the iops of the disk,
               required when `volumetype` is **GPSSD2** or **ESSD2**.
        :param str kms_key_id: Specifies the ID of a KMS key. This is used to encrypt the volume.
        :param int throughput: Specifies the throughput of the disk in MiB/s,
               required when `volumetype` is **GPSSD2**.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if dss_pool_id is not None:
            pulumi.set(__self__, "dss_pool_id", dss_pool_id)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Specifies the disk type.
        """
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="dssPoolId")
    def dss_pool_id(self) -> Optional[str]:
        """
        Specifies the DSS pool ID. This field is used only for
        """
        return pulumi.get(self, "dss_pool_id")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the extended parameters.
        The object structure is documented below.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        """
        Specifies the iops of the disk,
        required when `volumetype` is **GPSSD2** or **ESSD2**.
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Specifies the ID of a KMS key. This is used to encrypt the volume.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[int]:
        """
        Specifies the throughput of the disk in MiB/s,
        required when `volumetype` is **GPSSD2**.
        """
        return pulumi.get(self, "throughput")


@pulumi.output_type
class NodeStorage(dict):
    def __init__(__self__, *,
                 groups: Sequence['outputs.NodeStorageGroup'],
                 selectors: Sequence['outputs.NodeStorageSelector']):
        """
        :param Sequence['NodeStorageGroupArgs'] groups: Specifies the storage group consists of multiple storage devices.
               This is used to divide storage space. Structure is documented below.
        :param Sequence['NodeStorageSelectorArgs'] selectors: Specifies the disk selection.
               Matched disks are managed according to match labels and storage type. Structure is documented below.
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.NodeStorageGroup']:
        """
        Specifies the storage group consists of multiple storage devices.
        This is used to divide storage space. Structure is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.NodeStorageSelector']:
        """
        Specifies the disk selection.
        Matched disks are managed according to match labels and storage type. Structure is documented below.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class NodeStorageGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorNames":
            suggest = "selector_names"
        elif key == "virtualSpaces":
            suggest = "virtual_spaces"
        elif key == "cceManaged":
            suggest = "cce_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeStorageGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeStorageGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeStorageGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 selector_names: Sequence[str],
                 virtual_spaces: Sequence['outputs.NodeStorageGroupVirtualSpace'],
                 cce_managed: Optional[bool] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported.
        :param Sequence[str] selector_names: Specifies the list of names of selectors to match.
               This parameter corresponds to name in `selectors`. A group can match multiple selectors,
               but a selector can match only one group.
        :param Sequence['NodeStorageGroupVirtualSpaceArgs'] virtual_spaces: Specifies the detailed management of space configuration in a group.
        :param bool cce_managed: Specifies the whether the storage space is for **kubernetes** and
               **runtime** components. Only one group can be set to true. The default value is **false**.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selector_names", selector_names)
        pulumi.set(__self__, "virtual_spaces", virtual_spaces)
        if cce_managed is not None:
            pulumi.set(__self__, "cce_managed", cce_managed)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selectorNames")
    def selector_names(self) -> Sequence[str]:
        """
        Specifies the list of names of selectors to match.
        This parameter corresponds to name in `selectors`. A group can match multiple selectors,
        but a selector can match only one group.
        """
        return pulumi.get(self, "selector_names")

    @property
    @pulumi.getter(name="virtualSpaces")
    def virtual_spaces(self) -> Sequence['outputs.NodeStorageGroupVirtualSpace']:
        """
        Specifies the detailed management of space configuration in a group.
        """
        return pulumi.get(self, "virtual_spaces")

    @property
    @pulumi.getter(name="cceManaged")
    def cce_managed(self) -> Optional[bool]:
        """
        Specifies the whether the storage space is for **kubernetes** and
        **runtime** components. Only one group can be set to true. The default value is **false**.
        """
        return pulumi.get(self, "cce_managed")


@pulumi.output_type
class NodeStorageGroupVirtualSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lvmLvType":
            suggest = "lvm_lv_type"
        elif key == "lvmPath":
            suggest = "lvm_path"
        elif key == "runtimeLvType":
            suggest = "runtime_lv_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeStorageGroupVirtualSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeStorageGroupVirtualSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeStorageGroupVirtualSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 size: str,
                 lvm_lv_type: Optional[str] = None,
                 lvm_path: Optional[str] = None,
                 runtime_lv_type: Optional[str] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported.
        :param str size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        :param str lvm_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **kubernetes** and **user** configuration.
        :param str lvm_path: Specifies the absolute path to which the disk is attached.
               This parameter takes effect only in **user** configuration.
        :param str runtime_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **runtime** configuration.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if lvm_lv_type is not None:
            pulumi.set(__self__, "lvm_lv_type", lvm_lv_type)
        if lvm_path is not None:
            pulumi.set(__self__, "lvm_path", lvm_path)
        if runtime_lv_type is not None:
            pulumi.set(__self__, "runtime_lv_type", runtime_lv_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="lvmLvType")
    def lvm_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **kubernetes** and **user** configuration.
        """
        return pulumi.get(self, "lvm_lv_type")

    @property
    @pulumi.getter(name="lvmPath")
    def lvm_path(self) -> Optional[str]:
        """
        Specifies the absolute path to which the disk is attached.
        This parameter takes effect only in **user** configuration.
        """
        return pulumi.get(self, "lvm_path")

    @property
    @pulumi.getter(name="runtimeLvType")
    def runtime_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **runtime** configuration.
        """
        return pulumi.get(self, "runtime_lv_type")


@pulumi.output_type
class NodeStorageSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabelCount":
            suggest = "match_label_count"
        elif key == "matchLabelMetadataCmkid":
            suggest = "match_label_metadata_cmkid"
        elif key == "matchLabelMetadataEncrypted":
            suggest = "match_label_metadata_encrypted"
        elif key == "matchLabelSize":
            suggest = "match_label_size"
        elif key == "matchLabelVolumeType":
            suggest = "match_label_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeStorageSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeStorageSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeStorageSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 match_label_count: Optional[str] = None,
                 match_label_metadata_cmkid: Optional[str] = None,
                 match_label_metadata_encrypted: Optional[str] = None,
                 match_label_size: Optional[str] = None,
                 match_label_volume_type: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported.
        :param str match_label_count: Specifies the number of disks to be selected. If omitted,
               all disks of this type are selected.
        :param str match_label_metadata_cmkid: Specifies the customer master key ID of an encrypted
               disk.
        :param str match_label_metadata_encrypted: Specifies the disk encryption identifier.
               Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
               If omitted, whether the disk is encrypted is not limited.
        :param str match_label_size: Specifies the matched disk size. If omitted,
               the disk size is not limited. Example: 100.
        :param str match_label_volume_type: Specifies the EVS disk type. Currently,
               **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
        :param str type: Specifies the hostname type of the kubernetes node.
               The value can be:
               + **privateIp**: The Kubernetes node is named after its IP address.
               + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        pulumi.set(__self__, "name", name)
        if match_label_count is not None:
            pulumi.set(__self__, "match_label_count", match_label_count)
        if match_label_metadata_cmkid is not None:
            pulumi.set(__self__, "match_label_metadata_cmkid", match_label_metadata_cmkid)
        if match_label_metadata_encrypted is not None:
            pulumi.set(__self__, "match_label_metadata_encrypted", match_label_metadata_encrypted)
        if match_label_size is not None:
            pulumi.set(__self__, "match_label_size", match_label_size)
        if match_label_volume_type is not None:
            pulumi.set(__self__, "match_label_volume_type", match_label_volume_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="matchLabelCount")
    def match_label_count(self) -> Optional[str]:
        """
        Specifies the number of disks to be selected. If omitted,
        all disks of this type are selected.
        """
        return pulumi.get(self, "match_label_count")

    @property
    @pulumi.getter(name="matchLabelMetadataCmkid")
    def match_label_metadata_cmkid(self) -> Optional[str]:
        """
        Specifies the customer master key ID of an encrypted
        disk.
        """
        return pulumi.get(self, "match_label_metadata_cmkid")

    @property
    @pulumi.getter(name="matchLabelMetadataEncrypted")
    def match_label_metadata_encrypted(self) -> Optional[str]:
        """
        Specifies the disk encryption identifier.
        Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
        If omitted, whether the disk is encrypted is not limited.
        """
        return pulumi.get(self, "match_label_metadata_encrypted")

    @property
    @pulumi.getter(name="matchLabelSize")
    def match_label_size(self) -> Optional[str]:
        """
        Specifies the matched disk size. If omitted,
        the disk size is not limited. Example: 100.
        """
        return pulumi.get(self, "match_label_size")

    @property
    @pulumi.getter(name="matchLabelVolumeType")
    def match_label_volume_type(self) -> Optional[str]:
        """
        Specifies the EVS disk type. Currently,
        **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
        """
        return pulumi.get(self, "match_label_volume_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the hostname type of the kubernetes node.
        The value can be:
        + **privateIp**: The Kubernetes node is named after its IP address.
        + **cceNodeName**: The Kubernetes node is named after the CCE node.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodeTaint(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: Optional[str] = None):
        """
        :param str effect: Available options are NoSchedule, PreferNoSchedule, and NoExecute.
        :param str key: A key must contain 1 to 63 characters starting with a letter or digit.
               Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
               as the prefix of a key.
        :param str value: A value must start with a letter or digit and can contain a maximum of 63
               characters, including letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Available options are NoSchedule, PreferNoSchedule, and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A key must contain 1 to 63 characters starting with a letter or digit.
        Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
        as the prefix of a key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        A value must start with a letter or digit and can contain a maximum of 63
        characters, including letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAddonTemplateSupportVersionResult(dict):
    def __init__(__self__, *,
                 bare_metals: Sequence[str],
                 virtual_machines: Sequence[str]):
        """
        :param Sequence[str] bare_metals: The cluster (Bare Metal) version that the add-on template supported.
        :param Sequence[str] virtual_machines: The cluster (Virtual Machine) version that the add-on template supported.
        """
        pulumi.set(__self__, "bare_metals", bare_metals)
        pulumi.set(__self__, "virtual_machines", virtual_machines)

    @property
    @pulumi.getter(name="bareMetals")
    def bare_metals(self) -> Sequence[str]:
        """
        The cluster (Bare Metal) version that the add-on template supported.
        """
        return pulumi.get(self, "bare_metals")

    @property
    @pulumi.getter(name="virtualMachines")
    def virtual_machines(self) -> Sequence[str]:
        """
        The cluster (Virtual Machine) version that the add-on template supported.
        """
        return pulumi.get(self, "virtual_machines")


@pulumi.output_type
class GetAddonsItemResult(dict):
    def __init__(__self__, *,
                 metadatas: Sequence['outputs.GetAddonsItemMetadataResult'],
                 specs: Sequence['outputs.GetAddonsItemSpecResult'],
                 statuses: Sequence['outputs.GetAddonsItemStatusResult']):
        """
        :param Sequence['GetAddonsItemMetadataArgs'] metadatas: The metadata of the add-on instance.
        :param Sequence['GetAddonsItemSpecArgs'] specs: The detailed description of the add-on instance.
        :param Sequence['GetAddonsItemStatusArgs'] statuses: The statuses of add-on instances.
        """
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "specs", specs)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetAddonsItemMetadataResult']:
        """
        The metadata of the add-on instance.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetAddonsItemSpecResult']:
        """
        The detailed description of the add-on instance.
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetAddonsItemStatusResult']:
        """
        The statuses of add-on instances.
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetAddonsItemMetadataResult(dict):
    def __init__(__self__, *,
                 alias: str,
                 annotations: Mapping[str, str],
                 creation_timestamp: str,
                 labels: Mapping[str, str],
                 name: str,
                 uid: str,
                 update_timestamp: str):
        """
        :param str alias: The add-on instance alias.
        :param Mapping[str, str] annotations: The add-on annotations in the format of key/value pairs.
        :param str creation_timestamp: The creation time.
        :param Mapping[str, str] labels: The add-on labels in key/value pairs.
        :param str name: The add-on instance name.
        :param str uid: The add-on instance ID.
        :param str update_timestamp: The update time.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "update_timestamp", update_timestamp)

    @property
    @pulumi.getter
    def alias(self) -> str:
        """
        The add-on instance alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        The add-on annotations in the format of key/value pairs.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> str:
        """
        The creation time.
        """
        return pulumi.get(self, "creation_timestamp")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The add-on labels in key/value pairs.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The add-on instance name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The add-on instance ID.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTimestamp")
    def update_timestamp(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "update_timestamp")


@pulumi.output_type
class GetAddonsItemSpecResult(dict):
    def __init__(__self__, *,
                 addon_template_labels: Sequence[str],
                 addon_template_logo: str,
                 addon_template_name: str,
                 addon_template_type: str,
                 cluster_id: str,
                 description: str,
                 values: Sequence[str],
                 version: str):
        """
        :param Sequence[str] addon_template_labels: The labels of the add-on template.
        :param str addon_template_logo: The URL for obtaining the add-on template logo.
        :param str addon_template_name: The add-on name.
        :param str addon_template_type: The add-on type.
        :param str cluster_id: Specifies the ID of the cluster to which the add-on instance belongs.
        :param str description: The add-on description.
        :param Sequence[str] values: The add-on installation parameters.
        :param str version: The add-on version.
        """
        pulumi.set(__self__, "addon_template_labels", addon_template_labels)
        pulumi.set(__self__, "addon_template_logo", addon_template_logo)
        pulumi.set(__self__, "addon_template_name", addon_template_name)
        pulumi.set(__self__, "addon_template_type", addon_template_type)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "values", values)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="addonTemplateLabels")
    def addon_template_labels(self) -> Sequence[str]:
        """
        The labels of the add-on template.
        """
        return pulumi.get(self, "addon_template_labels")

    @property
    @pulumi.getter(name="addonTemplateLogo")
    def addon_template_logo(self) -> str:
        """
        The URL for obtaining the add-on template logo.
        """
        return pulumi.get(self, "addon_template_logo")

    @property
    @pulumi.getter(name="addonTemplateName")
    def addon_template_name(self) -> str:
        """
        The add-on name.
        """
        return pulumi.get(self, "addon_template_name")

    @property
    @pulumi.getter(name="addonTemplateType")
    def addon_template_type(self) -> str:
        """
        The add-on type.
        """
        return pulumi.get(self, "addon_template_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Specifies the ID of the cluster to which the add-on instance belongs.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The add-on description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The add-on installation parameters.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The add-on version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAddonsItemStatusResult(dict):
    def __init__(__self__, *,
                 _reason: str,
                 current_versions: Sequence['outputs.GetAddonsItemStatusCurrentVersionResult'],
                 is_rollbackable: bool,
                 message: str,
                 previous_version: str,
                 status: str,
                 target_versions: Sequence[str]):
        """
        :param str _reason: The cause of the add-on installation failure.
        :param Sequence['GetAddonsItemStatusCurrentVersionArgs'] current_versions: The information about the current add-on version.
        :param bool is_rollbackable: Whether the add-on version can be rolled back to the source version.
        :param str message: The installation error details.
        :param str previous_version: The add-on version before upgrade or rollback
        :param str status: The statuses of add-on instances.
        :param Sequence[str] target_versions: The versions to which the current add-on version can be upgraded.
        """
        pulumi.set(__self__, "_reason", _reason)
        pulumi.set(__self__, "current_versions", current_versions)
        pulumi.set(__self__, "is_rollbackable", is_rollbackable)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "previous_version", previous_version)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_versions", target_versions)

    @property
    @pulumi.getter
    def _reason(self) -> str:
        """
        The cause of the add-on installation failure.
        """
        return pulumi.get(self, "_reason")

    @property
    @pulumi.getter(name="currentVersions")
    def current_versions(self) -> Sequence['outputs.GetAddonsItemStatusCurrentVersionResult']:
        """
        The information about the current add-on version.
        """
        return pulumi.get(self, "current_versions")

    @property
    @pulumi.getter(name="isRollbackable")
    def is_rollbackable(self) -> bool:
        """
        Whether the add-on version can be rolled back to the source version.
        """
        return pulumi.get(self, "is_rollbackable")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The installation error details.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="previousVersion")
    def previous_version(self) -> str:
        """
        The add-on version before upgrade or rollback
        """
        return pulumi.get(self, "previous_version")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The statuses of add-on instances.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetVersions")
    def target_versions(self) -> Sequence[str]:
        """
        The versions to which the current add-on version can be upgraded.
        """
        return pulumi.get(self, "target_versions")


@pulumi.output_type
class GetAddonsItemStatusCurrentVersionResult(dict):
    def __init__(__self__, *,
                 creation_timestamp: str,
                 inputs: Sequence[str],
                 stable: bool,
                 support_versions: Sequence['outputs.GetAddonsItemStatusCurrentVersionSupportVersionResult'],
                 translates: Sequence[str],
                 update_timestamp: str,
                 version: str):
        """
        :param str creation_timestamp: The creation time.
        :param Sequence[str] inputs: The add-on installation parameters.
        :param bool stable: Whether the add-on version is a stable release.
        :param Sequence['GetAddonsItemStatusCurrentVersionSupportVersionArgs'] support_versions: The cluster versions that support the add-on.
        :param Sequence[str] translates: The translation information used by the GUI.
        :param str update_timestamp: The update time.
        :param str version: The add-on version.
        """
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        pulumi.set(__self__, "inputs", inputs)
        pulumi.set(__self__, "stable", stable)
        pulumi.set(__self__, "support_versions", support_versions)
        pulumi.set(__self__, "translates", translates)
        pulumi.set(__self__, "update_timestamp", update_timestamp)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> str:
        """
        The creation time.
        """
        return pulumi.get(self, "creation_timestamp")

    @property
    @pulumi.getter
    def inputs(self) -> Sequence[str]:
        """
        The add-on installation parameters.
        """
        return pulumi.get(self, "inputs")

    @property
    @pulumi.getter
    def stable(self) -> bool:
        """
        Whether the add-on version is a stable release.
        """
        return pulumi.get(self, "stable")

    @property
    @pulumi.getter(name="supportVersions")
    def support_versions(self) -> Sequence['outputs.GetAddonsItemStatusCurrentVersionSupportVersionResult']:
        """
        The cluster versions that support the add-on.
        """
        return pulumi.get(self, "support_versions")

    @property
    @pulumi.getter
    def translates(self) -> Sequence[str]:
        """
        The translation information used by the GUI.
        """
        return pulumi.get(self, "translates")

    @property
    @pulumi.getter(name="updateTimestamp")
    def update_timestamp(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "update_timestamp")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The add-on version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAddonsItemStatusCurrentVersionSupportVersionResult(dict):
    def __init__(__self__, *,
                 categories: Sequence[str],
                 cluster_type: str,
                 cluster_versions: Sequence[str]):
        """
        :param Sequence[str] categories: The current support version category.
        :param str cluster_type: The cluster type that supports the add-on.
        :param Sequence[str] cluster_versions: The cluster versions that support the add-on. The value is a regular expression.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cluster_versions", cluster_versions)

    @property
    @pulumi.getter
    def categories(self) -> Sequence[str]:
        """
        The current support version category.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        The cluster type that supports the add-on.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="clusterVersions")
    def cluster_versions(self) -> Sequence[str]:
        """
        The cluster versions that support the add-on. The value is a regular expression.
        """
        return pulumi.get(self, "cluster_versions")


@pulumi.output_type
class GetChartsChartResult(dict):
    def __init__(__self__, *,
                 chart_url: str,
                 created_at: str,
                 description: str,
                 icon_url: str,
                 id: str,
                 instruction: str,
                 name: str,
                 public: bool,
                 source: str,
                 translate: str,
                 updated_at: str,
                 values: str,
                 version: str):
        """
        :param str chart_url: The chart URL.
        :param str created_at: The create time.
        :param str description: The description of the chart.
        :param str icon_url: The icon URL.
        :param str id: The chart ID.
        :param str instruction: The instruction of the chart.
        :param str name: The chart name.
        :param bool public: Whether the chart is public.
        :param str source: The source of the chart.
        :param str translate: The traslate source of the chart.
        :param str updated_at: The update time.
        :param str values: The values of the chart.
        :param str version: The chart version.
        """
        pulumi.set(__self__, "chart_url", chart_url)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "icon_url", icon_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instruction", instruction)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "translate", translate)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "values", values)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="chartUrl")
    def chart_url(self) -> str:
        """
        The chart URL.
        """
        return pulumi.get(self, "chart_url")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the chart.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> str:
        """
        The icon URL.
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The chart ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def instruction(self) -> str:
        """
        The instruction of the chart.
        """
        return pulumi.get(self, "instruction")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The chart name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        Whether the chart is public.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        The source of the chart.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def translate(self) -> str:
        """
        The traslate source of the chart.
        """
        return pulumi.get(self, "translate")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def values(self) -> str:
        """
        The values of the chart.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The chart version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetClusterCertificateClusterResult(dict):
    def __init__(__self__, *,
                 certificate_authority_data: str,
                 name: str,
                 server: str):
        """
        :param str certificate_authority_data: The certificate data.
        :param str name: Specifies the name of the cluster.
        :param str server: The server IP address.
        """
        pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> str:
        """
        The certificate data.
        """
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The server IP address.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class GetClusterCertificateUserResult(dict):
    def __init__(__self__, *,
                 client_certificate_data: str,
                 client_key_data: str,
                 name: str):
        """
        :param str client_certificate_data: The client certificate data.
        :param str client_key_data: The client key data.
        :param str name: Specifies the name of the cluster.
        """
        pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        pulumi.set(__self__, "client_key_data", client_key_data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> str:
        """
        The client certificate data.
        """
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> str:
        """
        The client key data.
        """
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterCertificatesClusterResult(dict):
    def __init__(__self__, *,
                 certificate_authority_data: str,
                 insecure_skip_tls_verify: bool,
                 name: str,
                 server: str):
        """
        :param str certificate_authority_data: The certificate authority data of the cluster certificate.
        :param bool insecure_skip_tls_verify: Whether insecure skip tls verify of the cluster certificate.
        :param str name: The context name of the cluster certificate.
        :param str server: The server address of the cluster certificate.
        """
        pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        pulumi.set(__self__, "insecure_skip_tls_verify", insecure_skip_tls_verify)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> str:
        """
        The certificate authority data of the cluster certificate.
        """
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter(name="insecureSkipTlsVerify")
    def insecure_skip_tls_verify(self) -> bool:
        """
        Whether insecure skip tls verify of the cluster certificate.
        """
        return pulumi.get(self, "insecure_skip_tls_verify")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The context name of the cluster certificate.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The server address of the cluster certificate.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class GetClusterCertificatesContextResult(dict):
    def __init__(__self__, *,
                 cluster: str,
                 name: str,
                 user: str):
        """
        :param str cluster: The context cluster of the cluster certificate.
        :param str name: The context name of the cluster certificate.
        :param str user: The context user of the cluster certificate.
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def cluster(self) -> str:
        """
        The context cluster of the cluster certificate.
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The context name of the cluster certificate.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        The context user of the cluster certificate.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetClusterCertificatesUserResult(dict):
    def __init__(__self__, *,
                 client_certificate_data: str,
                 client_key_data: str,
                 name: str):
        """
        :param str client_certificate_data: The client certificate data of the cluster certificate.
        :param str client_key_data: The client key data of the cluster certificate.
        :param str name: The context name of the cluster certificate.
        """
        pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        pulumi.set(__self__, "client_key_data", client_key_data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> str:
        """
        The client certificate data of the cluster certificate.
        """
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> str:
        """
        The client key data of the cluster certificate.
        """
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The context name of the cluster certificate.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterEndpointResult(dict):
    def __init__(__self__, *,
                 type: str,
                 url: str):
        """
        :param str type: The type of the cluster access address.
               + **Internal**: The user's subnet access address.
               + **External**: The public network access address.
        :param str url: The URL of the cluster access address.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the cluster access address.
        + **Internal**: The user's subnet access address.
        + **External**: The public network access address.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the cluster access address.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetClusterMasterResult(dict):
    def __init__(__self__, *,
                 availability_zone: str):
        """
        :param str availability_zone: The availability zone (AZ) of the master node.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The availability zone (AZ) of the master node.
        """
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 authentication_mode: str,
                 billing_mode: int,
                 certificate_clusters: Sequence['outputs.GetClustersClusterCertificateClusterResult'],
                 certificate_users: Sequence['outputs.GetClustersClusterCertificateUserResult'],
                 cluster_type: str,
                 cluster_version: str,
                 container_network_cidr: str,
                 container_network_type: str,
                 description: str,
                 endpoints: Sequence['outputs.GetClustersClusterEndpointResult'],
                 eni_subnet_cidr: str,
                 eni_subnet_id: str,
                 enterprise_project_id: str,
                 flavor_id: str,
                 id: str,
                 kube_config_raw: str,
                 masters: Sequence['outputs.GetClustersClusterMasterResult'],
                 name: str,
                 security_group_id: str,
                 service_network_cidr: str,
                 status: str,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str authentication_mode: The authentication mode of the cluster, possible values are x509 and rbac. Defaults to **rbac**.
        :param int billing_mode: The charging mode of the cluster.
        :param Sequence['GetClustersClusterCertificateClusterArgs'] certificate_clusters: The certificate clusters. Structure is documented below.
        :param Sequence['GetClustersClusterCertificateUserArgs'] certificate_users: The certificate users. Structure is documented below.
        :param str cluster_type: Specifies the type of the cluster. Possible values: **VirtualMachine**, **BareMetal**.
        :param str cluster_version: The version of the cluster.
        :param str container_network_cidr: The container network segment.
        :param str container_network_type: The container network type: **overlay_l2** , **underlay_ipvlan**, **vpc-router** or **eni**.
        :param str description: The description of the cluster.
        :param Sequence['GetClustersClusterEndpointArgs'] endpoints: The access addresses of kube-apiserver in the cluster. Structure is documented below.
        :param str eni_subnet_cidr: The ENI network segment.
        :param str eni_subnet_id: The **IPv4 subnet ID** of the subnet where the ENI resides.
        :param str enterprise_project_id: Specifies the enterprise project ID of the cluster.
        :param str flavor_id: The specification of the cluster.
        :param str id: The ID of the cluster.
        :param str kube_config_raw: The raw Kubernetes config to be used by kubectl and other compatible tools.
        :param Sequence['GetClustersClusterMasterArgs'] masters: The advanced configuration of master nodes. Structure is documented below.
        :param str name: Specifies the name of the cluster.
        :param str security_group_id: The security group ID of the cluster.
        :param str service_network_cidr: The service network segment.
        :param str status: Specifies the status of the cluster.
        :param str subnet_id: The ID of the subnet used to create the node.
        :param str vpc_id: Specifies the VPC ID to which the cluster belongs.
        """
        pulumi.set(__self__, "authentication_mode", authentication_mode)
        pulumi.set(__self__, "billing_mode", billing_mode)
        pulumi.set(__self__, "certificate_clusters", certificate_clusters)
        pulumi.set(__self__, "certificate_users", certificate_users)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "container_network_cidr", container_network_cidr)
        pulumi.set(__self__, "container_network_type", container_network_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "eni_subnet_cidr", eni_subnet_cidr)
        pulumi.set(__self__, "eni_subnet_id", eni_subnet_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kube_config_raw", kube_config_raw)
        pulumi.set(__self__, "masters", masters)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "service_network_cidr", service_network_cidr)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> str:
        """
        The authentication mode of the cluster, possible values are x509 and rbac. Defaults to **rbac**.
        """
        return pulumi.get(self, "authentication_mode")

    @property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> int:
        """
        The charging mode of the cluster.
        """
        return pulumi.get(self, "billing_mode")

    @property
    @pulumi.getter(name="certificateClusters")
    def certificate_clusters(self) -> Sequence['outputs.GetClustersClusterCertificateClusterResult']:
        """
        The certificate clusters. Structure is documented below.
        """
        return pulumi.get(self, "certificate_clusters")

    @property
    @pulumi.getter(name="certificateUsers")
    def certificate_users(self) -> Sequence['outputs.GetClustersClusterCertificateUserResult']:
        """
        The certificate users. Structure is documented below.
        """
        return pulumi.get(self, "certificate_users")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        Specifies the type of the cluster. Possible values: **VirtualMachine**, **BareMetal**.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> str:
        """
        The version of the cluster.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="containerNetworkCidr")
    def container_network_cidr(self) -> str:
        """
        The container network segment.
        """
        return pulumi.get(self, "container_network_cidr")

    @property
    @pulumi.getter(name="containerNetworkType")
    def container_network_type(self) -> str:
        """
        The container network type: **overlay_l2** , **underlay_ipvlan**, **vpc-router** or **eni**.
        """
        return pulumi.get(self, "container_network_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetClustersClusterEndpointResult']:
        """
        The access addresses of kube-apiserver in the cluster. Structure is documented below.
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="eniSubnetCidr")
    def eni_subnet_cidr(self) -> str:
        """
        The ENI network segment.
        """
        return pulumi.get(self, "eni_subnet_cidr")

    @property
    @pulumi.getter(name="eniSubnetId")
    def eni_subnet_id(self) -> str:
        """
        The **IPv4 subnet ID** of the subnet where the ENI resides.
        """
        return pulumi.get(self, "eni_subnet_id")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> str:
        """
        Specifies the enterprise project ID of the cluster.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> str:
        """
        The specification of the cluster.
        """
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kubeConfigRaw")
    def kube_config_raw(self) -> str:
        """
        The raw Kubernetes config to be used by kubectl and other compatible tools.
        """
        return pulumi.get(self, "kube_config_raw")

    @property
    @pulumi.getter
    def masters(self) -> Sequence['outputs.GetClustersClusterMasterResult']:
        """
        The advanced configuration of master nodes. Structure is documented below.
        """
        return pulumi.get(self, "masters")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        The security group ID of the cluster.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="serviceNetworkCidr")
    def service_network_cidr(self) -> str:
        """
        The service network segment.
        """
        return pulumi.get(self, "service_network_cidr")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Specifies the status of the cluster.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the subnet used to create the node.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Specifies the VPC ID to which the cluster belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetClustersClusterCertificateClusterResult(dict):
    def __init__(__self__, *,
                 certificate_authority_data: str,
                 name: str,
                 server: str):
        """
        :param str certificate_authority_data: The certificate data.
        :param str name: Specifies the name of the cluster.
        :param str server: The server IP address.
        """
        pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> str:
        """
        The certificate data.
        """
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The server IP address.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class GetClustersClusterCertificateUserResult(dict):
    def __init__(__self__, *,
                 client_certificate_data: str,
                 client_key_data: str,
                 name: str):
        """
        :param str client_certificate_data: The client certificate data.
        :param str client_key_data: The client key data.
        :param str name: Specifies the name of the cluster.
        """
        pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        pulumi.set(__self__, "client_key_data", client_key_data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> str:
        """
        The client certificate data.
        """
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> str:
        """
        The client key data.
        """
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClustersClusterEndpointResult(dict):
    def __init__(__self__, *,
                 type: str,
                 url: str):
        """
        :param str type: The type of the cluster access address.
               + **Internal**: The user's subnet access address.
               + **External**: The public network access address.
        :param str url: The URL of the cluster access address.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the cluster access address.
        + **Internal**: The user's subnet access address.
        + **External**: The public network access address.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the cluster access address.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetClustersClusterMasterResult(dict):
    def __init__(__self__, *,
                 availability_zone: str):
        """
        :param str availability_zone: The availability zone (AZ) of the master node.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The availability zone (AZ) of the master node.
        """
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class GetNodeDataVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodeHostnameConfigResult(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: The hostname type of the kubernetes node.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The hostname type of the kubernetes node.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNodePoolDataVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodePoolHostnameConfigResult(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: The hostname type of the kubernetes node.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The hostname type of the kubernetes node.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNodePoolRootVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodeRootVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodesNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 billing_mode: int,
                 data_volumes: Sequence['outputs.GetNodesNodeDataVolumeResult'],
                 ecs_group_id: str,
                 enterprise_project_id: str,
                 flavor_id: str,
                 hostname_configs: Sequence['outputs.GetNodesNodeHostnameConfigResult'],
                 id: str,
                 key_pair: str,
                 name: str,
                 os: str,
                 private_ip: str,
                 public_ip: str,
                 root_volumes: Sequence['outputs.GetNodesNodeRootVolumeResult'],
                 server_id: str,
                 status: str,
                 subnet_id: str,
                 tags: Mapping[str, str]):
        """
        :param str availability_zone: The available partitions where the node is located.
        :param int billing_mode: The node's billing mode: The value is 0 (on demand).
        :param Sequence['GetNodesNodeDataVolumeArgs'] data_volumes: The data related configuration. Structure is documented below.
        :param str ecs_group_id: The ID of ECS group to which the node belongs.
        :param str enterprise_project_id: The enterprise project ID of the node.
        :param str flavor_id: The flavor ID to be used.
        :param Sequence['GetNodesNodeHostnameConfigArgs'] hostname_configs: The hostname config of the kubernetes node.
               The object structure is documented below.
        :param str id: The ID of the node.
        :param str key_pair: The key pair name when logging in to select the key pair mode.
        :param str name: Specifies the of the node.
        :param str os: The operating System of the node.
        :param str private_ip: The private IP of the node.
        :param str public_ip: The elastic IP parameters of the node.
        :param Sequence['GetNodesNodeRootVolumeArgs'] root_volumes: The system disk related configuration. Structure is documented below.
        :param str server_id: The node's virtual machine ID in ECS.
        :param str status: Specifies the status of the node.
        :param str subnet_id: The ID of the subnet to which the NIC belongs.
        :param Mapping[str, str] tags: The tags of a VM node, key/value pair format.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "billing_mode", billing_mode)
        pulumi.set(__self__, "data_volumes", data_volumes)
        pulumi.set(__self__, "ecs_group_id", ecs_group_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "hostname_configs", hostname_configs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_pair", key_pair)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "root_volumes", root_volumes)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The available partitions where the node is located.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> int:
        """
        The node's billing mode: The value is 0 (on demand).
        """
        return pulumi.get(self, "billing_mode")

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Sequence['outputs.GetNodesNodeDataVolumeResult']:
        """
        The data related configuration. Structure is documented below.
        """
        return pulumi.get(self, "data_volumes")

    @property
    @pulumi.getter(name="ecsGroupId")
    def ecs_group_id(self) -> str:
        """
        The ID of ECS group to which the node belongs.
        """
        return pulumi.get(self, "ecs_group_id")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> str:
        """
        The enterprise project ID of the node.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> str:
        """
        The flavor ID to be used.
        """
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter(name="hostnameConfigs")
    def hostname_configs(self) -> Sequence['outputs.GetNodesNodeHostnameConfigResult']:
        """
        The hostname config of the kubernetes node.
        The object structure is documented below.
        """
        return pulumi.get(self, "hostname_configs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> str:
        """
        The key pair name when logging in to select the key pair mode.
        """
        return pulumi.get(self, "key_pair")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the of the node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def os(self) -> str:
        """
        The operating System of the node.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The private IP of the node.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        The elastic IP parameters of the node.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="rootVolumes")
    def root_volumes(self) -> Sequence['outputs.GetNodesNodeRootVolumeResult']:
        """
        The system disk related configuration. Structure is documented below.
        """
        return pulumi.get(self, "root_volumes")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> str:
        """
        The node's virtual machine ID in ECS.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Specifies the status of the node.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the subnet to which the NIC belongs.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        The tags of a VM node, key/value pair format.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNodesNodeDataVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodesNodeHostnameConfigResult(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: The hostname type of the kubernetes node.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The hostname type of the kubernetes node.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNodesNodeRootVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


