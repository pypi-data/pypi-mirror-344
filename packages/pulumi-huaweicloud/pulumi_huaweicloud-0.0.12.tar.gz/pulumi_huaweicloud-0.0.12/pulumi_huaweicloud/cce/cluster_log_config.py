# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterLogConfigArgs', 'ClusterLogConfig']

@pulumi.input_type
class ClusterLogConfigArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLogConfigLogConfigArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 ttl_in_days: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ClusterLogConfig resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterLogConfigLogConfigArgs']]] log_configs: Specifies the list of log configs.
               The log_configs structure is documented below.
        :param pulumi.Input[str] region: Specifies the region in which to create the cluster log config resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[int] ttl_in_days: Specifies the log keeping days, default to `7`.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if log_configs is not None:
            pulumi.set(__self__, "log_configs", log_configs)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ttl_in_days is not None:
            pulumi.set(__self__, "ttl_in_days", ttl_in_days)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="logConfigs")
    def log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLogConfigLogConfigArgs']]]]:
        """
        Specifies the list of log configs.
        The log_configs structure is documented below.
        """
        return pulumi.get(self, "log_configs")

    @log_configs.setter
    def log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLogConfigLogConfigArgs']]]]):
        pulumi.set(self, "log_configs", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the cluster log config resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="ttlInDays")
    def ttl_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the log keeping days, default to `7`.
        """
        return pulumi.get(self, "ttl_in_days")

    @ttl_in_days.setter
    def ttl_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl_in_days", value)


@pulumi.input_type
class _ClusterLogConfigState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLogConfigLogConfigArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 ttl_in_days: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ClusterLogConfig resources.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterLogConfigLogConfigArgs']]] log_configs: Specifies the list of log configs.
               The log_configs structure is documented below.
        :param pulumi.Input[str] region: Specifies the region in which to create the cluster log config resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[int] ttl_in_days: Specifies the log keeping days, default to `7`.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if log_configs is not None:
            pulumi.set(__self__, "log_configs", log_configs)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ttl_in_days is not None:
            pulumi.set(__self__, "ttl_in_days", ttl_in_days)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="logConfigs")
    def log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLogConfigLogConfigArgs']]]]:
        """
        Specifies the list of log configs.
        The log_configs structure is documented below.
        """
        return pulumi.get(self, "log_configs")

    @log_configs.setter
    def log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLogConfigLogConfigArgs']]]]):
        pulumi.set(self, "log_configs", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the cluster log config resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="ttlInDays")
    def ttl_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the log keeping days, default to `7`.
        """
        return pulumi.get(self, "ttl_in_days")

    @ttl_in_days.setter
    def ttl_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl_in_days", value)


class ClusterLogConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 log_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterLogConfigLogConfigArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 ttl_in_days: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Use this resource to manage the log config of a CCE cluster within HuaweiCloud.

        ## Example Usage
        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.cce.ClusterLogConfig("test",
            cluster_id=cluster_id,
            ttl_in_days=3,
            log_configs=[
                huaweicloud.cce.ClusterLogConfigLogConfigArgs(
                    name="kube-apiserver",
                    enable=True,
                ),
                huaweicloud.cce.ClusterLogConfigLogConfigArgs(
                    name="kube-controller-manager",
                    enable=False,
                ),
                huaweicloud.cce.ClusterLogConfigLogConfigArgs(
                    name="kube-scheduler",
                    enable=False,
                ),
                huaweicloud.cce.ClusterLogConfigLogConfigArgs(
                    name="audit",
                    enable=True,
                ),
            ])
        ```

        ## Import

        The cluster log config can be imported using the cluster ID, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Cce/clusterLogConfig:ClusterLogConfig test <cluster_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterLogConfigLogConfigArgs']]]] log_configs: Specifies the list of log configs.
               The log_configs structure is documented below.
        :param pulumi.Input[str] region: Specifies the region in which to create the cluster log config resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[int] ttl_in_days: Specifies the log keeping days, default to `7`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterLogConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to manage the log config of a CCE cluster within HuaweiCloud.

        ## Example Usage
        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        test = huaweicloud.cce.ClusterLogConfig("test",
            cluster_id=cluster_id,
            ttl_in_days=3,
            log_configs=[
                huaweicloud.cce.ClusterLogConfigLogConfigArgs(
                    name="kube-apiserver",
                    enable=True,
                ),
                huaweicloud.cce.ClusterLogConfigLogConfigArgs(
                    name="kube-controller-manager",
                    enable=False,
                ),
                huaweicloud.cce.ClusterLogConfigLogConfigArgs(
                    name="kube-scheduler",
                    enable=False,
                ),
                huaweicloud.cce.ClusterLogConfigLogConfigArgs(
                    name="audit",
                    enable=True,
                ),
            ])
        ```

        ## Import

        The cluster log config can be imported using the cluster ID, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Cce/clusterLogConfig:ClusterLogConfig test <cluster_id>
        ```

        :param str resource_name: The name of the resource.
        :param ClusterLogConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterLogConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 log_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterLogConfigLogConfigArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 ttl_in_days: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterLogConfigArgs.__new__(ClusterLogConfigArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["log_configs"] = log_configs
            __props__.__dict__["region"] = region
            __props__.__dict__["ttl_in_days"] = ttl_in_days
        super(ClusterLogConfig, __self__).__init__(
            'huaweicloud:Cce/clusterLogConfig:ClusterLogConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            log_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterLogConfigLogConfigArgs']]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            ttl_in_days: Optional[pulumi.Input[int]] = None) -> 'ClusterLogConfig':
        """
        Get an existing ClusterLogConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterLogConfigLogConfigArgs']]]] log_configs: Specifies the list of log configs.
               The log_configs structure is documented below.
        :param pulumi.Input[str] region: Specifies the region in which to create the cluster log config resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[int] ttl_in_days: Specifies the log keeping days, default to `7`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterLogConfigState.__new__(_ClusterLogConfigState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["log_configs"] = log_configs
        __props__.__dict__["region"] = region
        __props__.__dict__["ttl_in_days"] = ttl_in_days
        return ClusterLogConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="logConfigs")
    def log_configs(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterLogConfigLogConfig']]]:
        """
        Specifies the list of log configs.
        The log_configs structure is documented below.
        """
        return pulumi.get(self, "log_configs")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the cluster log config resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="ttlInDays")
    def ttl_in_days(self) -> pulumi.Output[int]:
        """
        Specifies the log keeping days, default to `7`.
        """
        return pulumi.get(self, "ttl_in_days")

