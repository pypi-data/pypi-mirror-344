# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NodePoolScaleArgs', 'NodePoolScale']

@pulumi.input_type
class NodePoolScaleArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 desired_node_count: pulumi.Input[int],
                 nodepool_id: pulumi.Input[str],
                 scale_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
                 auto_renew: Optional[pulumi.Input[str]] = None,
                 charging_mode: Optional[pulumi.Input[str]] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 period_unit: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 scalable_checking: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NodePoolScale resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[int] desired_node_count: Specifies the number of desired nodes.
        :param pulumi.Input[str] nodepool_id: Specifies the node pool ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scale_groups: Specifies the IDs of scale groups to scale.
               **default** indicates the default group.
        :param pulumi.Input[str] auto_renew: Specifies whether auto renew is enabled. Valid values are **true** and **false**.
        :param pulumi.Input[str] charging_mode: Specifies the charging mode of the nodes.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[int] period: Specifies the charging period of the nodes.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] period_unit: Specifies the charging period unit of the nodes.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the node pool scale resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[str] scalable_checking: Specifies the scalable checking.
               The value can be **instant** and **async**, defaults to **instant**.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "desired_node_count", desired_node_count)
        pulumi.set(__self__, "nodepool_id", nodepool_id)
        pulumi.set(__self__, "scale_groups", scale_groups)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scalable_checking is not None:
            pulumi.set(__self__, "scalable_checking", scalable_checking)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="desiredNodeCount")
    def desired_node_count(self) -> pulumi.Input[int]:
        """
        Specifies the number of desired nodes.
        """
        return pulumi.get(self, "desired_node_count")

    @desired_node_count.setter
    def desired_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "desired_node_count", value)

    @property
    @pulumi.getter(name="nodepoolId")
    def nodepool_id(self) -> pulumi.Input[str]:
        """
        Specifies the node pool ID.
        """
        return pulumi.get(self, "nodepool_id")

    @nodepool_id.setter
    def nodepool_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nodepool_id", value)

    @property
    @pulumi.getter(name="scaleGroups")
    def scale_groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies the IDs of scale groups to scale.
        **default** indicates the default group.
        """
        return pulumi.get(self, "scale_groups")

    @scale_groups.setter
    def scale_groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "scale_groups", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether auto renew is enabled. Valid values are **true** and **false**.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the charging mode of the nodes.
        Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charging_mode", value)

    @property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_force_new", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the charging period of the nodes.
        If `period_unit` is set to **month**, the value ranges from 1 to 9.
        If `period_unit` is set to **year**, the value ranges from 1 to 3.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the charging period unit of the nodes.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period_unit", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the node pool scale resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="scalableChecking")
    def scalable_checking(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the scalable checking.
        The value can be **instant** and **async**, defaults to **instant**.
        """
        return pulumi.get(self, "scalable_checking")

    @scalable_checking.setter
    def scalable_checking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scalable_checking", value)


@pulumi.input_type
class _NodePoolScaleState:
    def __init__(__self__, *,
                 auto_renew: Optional[pulumi.Input[str]] = None,
                 charging_mode: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 desired_node_count: Optional[pulumi.Input[int]] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 nodepool_id: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 period_unit: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 scalable_checking: Optional[pulumi.Input[str]] = None,
                 scale_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering NodePoolScale resources.
        :param pulumi.Input[str] auto_renew: Specifies whether auto renew is enabled. Valid values are **true** and **false**.
        :param pulumi.Input[str] charging_mode: Specifies the charging mode of the nodes.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[int] desired_node_count: Specifies the number of desired nodes.
        :param pulumi.Input[str] nodepool_id: Specifies the node pool ID.
        :param pulumi.Input[int] period: Specifies the charging period of the nodes.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] period_unit: Specifies the charging period unit of the nodes.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the node pool scale resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[str] scalable_checking: Specifies the scalable checking.
               The value can be **instant** and **async**, defaults to **instant**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scale_groups: Specifies the IDs of scale groups to scale.
               **default** indicates the default group.
        """
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if desired_node_count is not None:
            pulumi.set(__self__, "desired_node_count", desired_node_count)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if nodepool_id is not None:
            pulumi.set(__self__, "nodepool_id", nodepool_id)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scalable_checking is not None:
            pulumi.set(__self__, "scalable_checking", scalable_checking)
        if scale_groups is not None:
            pulumi.set(__self__, "scale_groups", scale_groups)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether auto renew is enabled. Valid values are **true** and **false**.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the charging mode of the nodes.
        Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charging_mode", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="desiredNodeCount")
    def desired_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of desired nodes.
        """
        return pulumi.get(self, "desired_node_count")

    @desired_node_count.setter
    def desired_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_node_count", value)

    @property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_force_new", value)

    @property
    @pulumi.getter(name="nodepoolId")
    def nodepool_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the node pool ID.
        """
        return pulumi.get(self, "nodepool_id")

    @nodepool_id.setter
    def nodepool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nodepool_id", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the charging period of the nodes.
        If `period_unit` is set to **month**, the value ranges from 1 to 9.
        If `period_unit` is set to **year**, the value ranges from 1 to 3.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the charging period unit of the nodes.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period_unit", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the node pool scale resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="scalableChecking")
    def scalable_checking(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the scalable checking.
        The value can be **instant** and **async**, defaults to **instant**.
        """
        return pulumi.get(self, "scalable_checking")

    @scalable_checking.setter
    def scalable_checking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scalable_checking", value)

    @property
    @pulumi.getter(name="scaleGroups")
    def scale_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the IDs of scale groups to scale.
        **default** indicates the default group.
        """
        return pulumi.get(self, "scale_groups")

    @scale_groups.setter
    def scale_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scale_groups", value)


class NodePoolScale(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[str]] = None,
                 charging_mode: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 desired_node_count: Optional[pulumi.Input[int]] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 nodepool_id: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 period_unit: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 scalable_checking: Optional[pulumi.Input[str]] = None,
                 scale_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Use this resource to scale the CCE node pool within HuaweiCloud.

        ## Example Usage
        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        nodepool_id = config.require_object("nodepoolId")
        test = huaweicloud.cce.NodePoolScale("test",
            cluster_id=cluster_id,
            nodepool_id=nodepool_id,
            scale_groups=["default"],
            desired_node_count=2)
        ```

        > Deleting node pool scale is not supported, it will only be removed from the state.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_renew: Specifies whether auto renew is enabled. Valid values are **true** and **false**.
        :param pulumi.Input[str] charging_mode: Specifies the charging mode of the nodes.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[int] desired_node_count: Specifies the number of desired nodes.
        :param pulumi.Input[str] nodepool_id: Specifies the node pool ID.
        :param pulumi.Input[int] period: Specifies the charging period of the nodes.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] period_unit: Specifies the charging period unit of the nodes.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the node pool scale resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[str] scalable_checking: Specifies the scalable checking.
               The value can be **instant** and **async**, defaults to **instant**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scale_groups: Specifies the IDs of scale groups to scale.
               **default** indicates the default group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NodePoolScaleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to scale the CCE node pool within HuaweiCloud.

        ## Example Usage
        ### Basic Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        cluster_id = config.require_object("clusterId")
        nodepool_id = config.require_object("nodepoolId")
        test = huaweicloud.cce.NodePoolScale("test",
            cluster_id=cluster_id,
            nodepool_id=nodepool_id,
            scale_groups=["default"],
            desired_node_count=2)
        ```

        > Deleting node pool scale is not supported, it will only be removed from the state.

        :param str resource_name: The name of the resource.
        :param NodePoolScaleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodePoolScaleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[str]] = None,
                 charging_mode: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 desired_node_count: Optional[pulumi.Input[int]] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 nodepool_id: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 period_unit: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 scalable_checking: Optional[pulumi.Input[str]] = None,
                 scale_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodePoolScaleArgs.__new__(NodePoolScaleArgs)

            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["charging_mode"] = charging_mode
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if desired_node_count is None and not opts.urn:
                raise TypeError("Missing required property 'desired_node_count'")
            __props__.__dict__["desired_node_count"] = desired_node_count
            __props__.__dict__["enable_force_new"] = enable_force_new
            if nodepool_id is None and not opts.urn:
                raise TypeError("Missing required property 'nodepool_id'")
            __props__.__dict__["nodepool_id"] = nodepool_id
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["region"] = region
            __props__.__dict__["scalable_checking"] = scalable_checking
            if scale_groups is None and not opts.urn:
                raise TypeError("Missing required property 'scale_groups'")
            __props__.__dict__["scale_groups"] = scale_groups
        super(NodePoolScale, __self__).__init__(
            'huaweicloud:Cce/nodePoolScale:NodePoolScale',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew: Optional[pulumi.Input[str]] = None,
            charging_mode: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            desired_node_count: Optional[pulumi.Input[int]] = None,
            enable_force_new: Optional[pulumi.Input[str]] = None,
            nodepool_id: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            period_unit: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            scalable_checking: Optional[pulumi.Input[str]] = None,
            scale_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'NodePoolScale':
        """
        Get an existing NodePoolScale resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_renew: Specifies whether auto renew is enabled. Valid values are **true** and **false**.
        :param pulumi.Input[str] charging_mode: Specifies the charging mode of the nodes.
               Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[int] desired_node_count: Specifies the number of desired nodes.
        :param pulumi.Input[str] nodepool_id: Specifies the node pool ID.
        :param pulumi.Input[int] period: Specifies the charging period of the nodes.
               If `period_unit` is set to **month**, the value ranges from 1 to 9.
               If `period_unit` is set to **year**, the value ranges from 1 to 3.
               This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] period_unit: Specifies the charging period unit of the nodes.
               Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
               Changing this parameter will create a new cluster resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the node pool scale resource.
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[str] scalable_checking: Specifies the scalable checking.
               The value can be **instant** and **async**, defaults to **instant**.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scale_groups: Specifies the IDs of scale groups to scale.
               **default** indicates the default group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodePoolScaleState.__new__(_NodePoolScaleState)

        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["desired_node_count"] = desired_node_count
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["nodepool_id"] = nodepool_id
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["region"] = region
        __props__.__dict__["scalable_checking"] = scalable_checking
        __props__.__dict__["scale_groups"] = scale_groups
        return NodePoolScale(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether auto renew is enabled. Valid values are **true** and **false**.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[str]:
        """
        Specifies the charging mode of the nodes.
        Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "charging_mode")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="desiredNodeCount")
    def desired_node_count(self) -> pulumi.Output[int]:
        """
        Specifies the number of desired nodes.
        """
        return pulumi.get(self, "desired_node_count")

    @property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "enable_force_new")

    @property
    @pulumi.getter(name="nodepoolId")
    def nodepool_id(self) -> pulumi.Output[str]:
        """
        Specifies the node pool ID.
        """
        return pulumi.get(self, "nodepool_id")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the charging period of the nodes.
        If `period_unit` is set to **month**, the value ranges from 1 to 9.
        If `period_unit` is set to **year**, the value ranges from 1 to 3.
        This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the charging period unit of the nodes.
        Valid values are **month** and **year**. This parameter is mandatory if `charging_mode` is set to **prePaid**.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "period_unit")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the node pool scale resource.
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="scalableChecking")
    def scalable_checking(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the scalable checking.
        The value can be **instant** and **async**, defaults to **instant**.
        """
        return pulumi.get(self, "scalable_checking")

    @property
    @pulumi.getter(name="scaleGroups")
    def scale_groups(self) -> pulumi.Output[Sequence[str]]:
        """
        Specifies the IDs of scale groups to scale.
        **default** indicates the default group.
        """
        return pulumi.get(self, "scale_groups")

