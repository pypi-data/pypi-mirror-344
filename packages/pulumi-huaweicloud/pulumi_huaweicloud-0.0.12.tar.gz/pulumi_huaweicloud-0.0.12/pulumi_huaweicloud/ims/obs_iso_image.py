# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ObsIsoImageArgs', 'ObsIsoImage']

@pulumi.input_type
class ObsIsoImageArgs:
    def __init__(__self__, *,
                 image_url: pulumi.Input[str],
                 min_disk: pulumi.Input[int],
                 os_version: pulumi.Input[str],
                 architecture: Optional[pulumi.Input[str]] = None,
                 cmk_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 is_config: Optional[pulumi.Input[bool]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ObsIsoImage resource.
        :param pulumi.Input[str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
               storage, and the image file must be ISO format. Changing this parameter will create a new resource.
        :param pulumi.Input[int] min_disk: Specifies the minimum size of the system disk, in GB unit.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[str] os_version: Specifies the operating system version of the image.
               Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[str] architecture: Specifies the schema type of the image. The value can be **x86** or
               **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] cmk_id: Specifies the custom key for creating encrypted image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] description: Specifies the description of the image.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[bool] is_config: Specifies whether to automatically configure. The value can be **true** or
               **false**. Defaults to **false**. Changing this parameter will create a new resource.
               About the content of automatic backend configuration, please refer to
               [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the image, in MB unit.
        :param pulumi.Input[str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the image.
        """
        pulumi.set(__self__, "image_url", image_url)
        pulumi.set(__self__, "min_disk", min_disk)
        pulumi.set(__self__, "os_version", os_version)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if cmk_id is not None:
            pulumi.set(__self__, "cmk_id", cmk_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if is_config is not None:
            pulumi.set(__self__, "is_config", is_config)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Input[str]:
        """
        Specifies the URL of the external image file in the OBS bucket, the format
        is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
        storage, and the image file must be ISO format. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> pulumi.Input[int]:
        """
        Specifies the minimum size of the system disk, in GB unit.
        Changing this parameter will create a new resource.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk")

    @min_disk.setter
    def min_disk(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_disk", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> pulumi.Input[str]:
        """
        Specifies the operating system version of the image.
        Changing this parameter will create a new resource.
        For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the schema type of the image. The value can be **x86** or
        **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the custom key for creating encrypted image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cmk_id")

    @cmk_id.setter
    def cmk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmk_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID to which the IMS image belongs.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="isConfig")
    def is_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to automatically configure. The value can be **true** or
        **false**. Defaults to **false**. Changing this parameter will create a new resource.
        About the content of automatic backend configuration, please refer to
        [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        """
        return pulumi.get(self, "is_config")

    @is_config.setter
    def is_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_config", value)

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum memory of the image, in MB unit.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ram", value)

    @property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum memory of the image, in MB unit.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ram", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the image.
        The valid length is limited from `1` to `128` characters.
        The first and last letters of the name cannot be spaces.
        The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ObsIsoImageState:
    def __init__(__self__, *,
                 active_at: Optional[pulumi.Input[str]] = None,
                 architecture: Optional[pulumi.Input[str]] = None,
                 cmk_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_format: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 image_size: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 is_config: Optional[pulumi.Input[bool]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_disk: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ObsIsoImage resources.
        :param pulumi.Input[str] active_at: The time when the image status changes to active, in RFC3339 format.
        :param pulumi.Input[str] architecture: Specifies the schema type of the image. The value can be **x86** or
               **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] cmk_id: Specifies the custom key for creating encrypted image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] created_at: The creation time of the image, in RFC3339 format.
        :param pulumi.Input[str] data_origin: The image source. The format is **file,image_url**.
        :param pulumi.Input[str] description: Specifies the description of the image.
        :param pulumi.Input[str] disk_format: The image format. The valid value is **iso**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[str] image_size: The size of the image file, in bytes unit.
        :param pulumi.Input[str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
               storage, and the image file must be ISO format. Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_config: Specifies whether to automatically configure. The value can be **true** or
               **false**. Defaults to **false**. Changing this parameter will create a new resource.
               About the content of automatic backend configuration, please refer to
               [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[int] min_disk: Specifies the minimum size of the system disk, in GB unit.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the image, in MB unit.
        :param pulumi.Input[str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[str] os_type: The operating system type of the image. The value can be **Windows** or **Linux**.
        :param pulumi.Input[str] os_version: Specifies the operating system version of the image.
               Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] status: The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
               only image with a status of **active** can be used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[str] updated_at: The last update time of the image, in RFC3339 format.
        :param pulumi.Input[str] visibility: Whether the image is visible to other tenants.
        """
        if active_at is not None:
            pulumi.set(__self__, "active_at", active_at)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if cmk_id is not None:
            pulumi.set(__self__, "cmk_id", cmk_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_format is not None:
            pulumi.set(__self__, "disk_format", disk_format)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if image_size is not None:
            pulumi.set(__self__, "image_size", image_size)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if is_config is not None:
            pulumi.set(__self__, "is_config", is_config)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_disk is not None:
            pulumi.set(__self__, "min_disk", min_disk)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the image status changes to active, in RFC3339 format.
        """
        return pulumi.get(self, "active_at")

    @active_at.setter
    def active_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_at", value)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the schema type of the image. The value can be **x86** or
        **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the custom key for creating encrypted image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cmk_id")

    @cmk_id.setter
    def cmk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmk_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[str]]:
        """
        The image source. The format is **file,image_url**.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> Optional[pulumi.Input[str]]:
        """
        The image format. The valid value is **iso**.
        """
        return pulumi.get(self, "disk_format")

    @disk_format.setter
    def disk_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_format", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID to which the IMS image belongs.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the image file, in bytes unit.
        """
        return pulumi.get(self, "image_size")

    @image_size.setter
    def image_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_size", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the URL of the external image file in the OBS bucket, the format
        is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
        storage, and the image file must be ISO format. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="isConfig")
    def is_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to automatically configure. The value can be **true** or
        **false**. Defaults to **false**. Changing this parameter will create a new resource.
        About the content of automatic backend configuration, please refer to
        [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        """
        return pulumi.get(self, "is_config")

    @is_config.setter
    def is_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_config", value)

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum memory of the image, in MB unit.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ram", value)

    @property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum size of the system disk, in GB unit.
        Changing this parameter will create a new resource.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk")

    @min_disk.setter
    def min_disk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_disk", value)

    @property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum memory of the image, in MB unit.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ram", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the image.
        The valid length is limited from `1` to `128` characters.
        The first and last letters of the name cannot be spaces.
        The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The operating system type of the image. The value can be **Windows** or **Linux**.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the operating system version of the image.
        Changing this parameter will create a new resource.
        For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
        only image with a status of **active** can be used.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the image is visible to other tenants.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class ObsIsoImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[str]] = None,
                 cmk_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 is_config: Optional[pulumi.Input[bool]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_disk: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages an IMS ISO image resource created from external image file in the OBS bucket within HuaweiCloud.

        ## Example Usage
        ### Creating an IMS ISO image from an external image file in the OBS bucket

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        image_url = config.require_object("imageUrl")
        min_disk = config.require_object("minDisk")
        os_version = config.require_object("osVersion")
        test = huaweicloud.ims.ObsIsoImage("test",
            image_url=image_url,
            min_disk=min_disk,
            os_version=os_version)
        ```

        ## Import

        The IMS OBS ISO image resource can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Ims/obsIsoImage:ObsIsoImage test <id>
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`is_config`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the image. Also, you can ignore changes as below. resource "huaweicloud_ims_obs_iso_image" "test" {

         ...

         lifecycle {

         ignore_changes = [

         is_config,

         ]

         } }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] architecture: Specifies the schema type of the image. The value can be **x86** or
               **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] cmk_id: Specifies the custom key for creating encrypted image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] description: Specifies the description of the image.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
               storage, and the image file must be ISO format. Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_config: Specifies whether to automatically configure. The value can be **true** or
               **false**. Defaults to **false**. Changing this parameter will create a new resource.
               About the content of automatic backend configuration, please refer to
               [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[int] min_disk: Specifies the minimum size of the system disk, in GB unit.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the image, in MB unit.
        :param pulumi.Input[str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[str] os_version: Specifies the operating system version of the image.
               Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the image.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ObsIsoImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IMS ISO image resource created from external image file in the OBS bucket within HuaweiCloud.

        ## Example Usage
        ### Creating an IMS ISO image from an external image file in the OBS bucket

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        image_url = config.require_object("imageUrl")
        min_disk = config.require_object("minDisk")
        os_version = config.require_object("osVersion")
        test = huaweicloud.ims.ObsIsoImage("test",
            image_url=image_url,
            min_disk=min_disk,
            os_version=os_version)
        ```

        ## Import

        The IMS OBS ISO image resource can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Ims/obsIsoImage:ObsIsoImage test <id>
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`is_config`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the image. Also, you can ignore changes as below. resource "huaweicloud_ims_obs_iso_image" "test" {

         ...

         lifecycle {

         ignore_changes = [

         is_config,

         ]

         } }

        :param str resource_name: The name of the resource.
        :param ObsIsoImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ObsIsoImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[str]] = None,
                 cmk_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 is_config: Optional[pulumi.Input[bool]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_disk: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ObsIsoImageArgs.__new__(ObsIsoImageArgs)

            __props__.__dict__["architecture"] = architecture
            __props__.__dict__["cmk_id"] = cmk_id
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if image_url is None and not opts.urn:
                raise TypeError("Missing required property 'image_url'")
            __props__.__dict__["image_url"] = image_url
            __props__.__dict__["is_config"] = is_config
            __props__.__dict__["max_ram"] = max_ram
            if min_disk is None and not opts.urn:
                raise TypeError("Missing required property 'min_disk'")
            __props__.__dict__["min_disk"] = min_disk
            __props__.__dict__["min_ram"] = min_ram
            __props__.__dict__["name"] = name
            if os_version is None and not opts.urn:
                raise TypeError("Missing required property 'os_version'")
            __props__.__dict__["os_version"] = os_version
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            __props__.__dict__["active_at"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["data_origin"] = None
            __props__.__dict__["disk_format"] = None
            __props__.__dict__["image_size"] = None
            __props__.__dict__["os_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["visibility"] = None
        super(ObsIsoImage, __self__).__init__(
            'huaweicloud:Ims/obsIsoImage:ObsIsoImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_at: Optional[pulumi.Input[str]] = None,
            architecture: Optional[pulumi.Input[str]] = None,
            cmk_id: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            data_origin: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disk_format: Optional[pulumi.Input[str]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            image_size: Optional[pulumi.Input[str]] = None,
            image_url: Optional[pulumi.Input[str]] = None,
            is_config: Optional[pulumi.Input[bool]] = None,
            max_ram: Optional[pulumi.Input[int]] = None,
            min_disk: Optional[pulumi.Input[int]] = None,
            min_ram: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            os_version: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'ObsIsoImage':
        """
        Get an existing ObsIsoImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] active_at: The time when the image status changes to active, in RFC3339 format.
        :param pulumi.Input[str] architecture: Specifies the schema type of the image. The value can be **x86** or
               **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] cmk_id: Specifies the custom key for creating encrypted image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] created_at: The creation time of the image, in RFC3339 format.
        :param pulumi.Input[str] data_origin: The image source. The format is **file,image_url**.
        :param pulumi.Input[str] description: Specifies the description of the image.
        :param pulumi.Input[str] disk_format: The image format. The valid value is **iso**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[str] image_size: The size of the image file, in bytes unit.
        :param pulumi.Input[str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
               storage, and the image file must be ISO format. Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_config: Specifies whether to automatically configure. The value can be **true** or
               **false**. Defaults to **false**. Changing this parameter will create a new resource.
               About the content of automatic backend configuration, please refer to
               [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[int] min_disk: Specifies the minimum size of the system disk, in GB unit.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the image, in MB unit.
        :param pulumi.Input[str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[str] os_type: The operating system type of the image. The value can be **Windows** or **Linux**.
        :param pulumi.Input[str] os_version: Specifies the operating system version of the image.
               Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] status: The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
               only image with a status of **active** can be used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[str] updated_at: The last update time of the image, in RFC3339 format.
        :param pulumi.Input[str] visibility: Whether the image is visible to other tenants.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ObsIsoImageState.__new__(_ObsIsoImageState)

        __props__.__dict__["active_at"] = active_at
        __props__.__dict__["architecture"] = architecture
        __props__.__dict__["cmk_id"] = cmk_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_origin"] = data_origin
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_format"] = disk_format
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["image_size"] = image_size
        __props__.__dict__["image_url"] = image_url
        __props__.__dict__["is_config"] = is_config
        __props__.__dict__["max_ram"] = max_ram
        __props__.__dict__["min_disk"] = min_disk
        __props__.__dict__["min_ram"] = min_ram
        __props__.__dict__["name"] = name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["os_version"] = os_version
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["visibility"] = visibility
        return ObsIsoImage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> pulumi.Output[str]:
        """
        The time when the image status changes to active, in RFC3339 format.
        """
        return pulumi.get(self, "active_at")

    @property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[str]:
        """
        Specifies the schema type of the image. The value can be **x86** or
        **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> pulumi.Output[str]:
        """
        Specifies the custom key for creating encrypted image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cmk_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The creation time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> pulumi.Output[str]:
        """
        The image source. The format is **file,image_url**.
        """
        return pulumi.get(self, "data_origin")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> pulumi.Output[str]:
        """
        The image format. The valid value is **iso**.
        """
        return pulumi.get(self, "disk_format")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[str]:
        """
        Specifies the enterprise project ID to which the IMS image belongs.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> pulumi.Output[str]:
        """
        The size of the image file, in bytes unit.
        """
        return pulumi.get(self, "image_size")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Output[str]:
        """
        Specifies the URL of the external image file in the OBS bucket, the format
        is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
        storage, and the image file must be ISO format. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="isConfig")
    def is_config(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether to automatically configure. The value can be **true** or
        **false**. Defaults to **false**. Changing this parameter will create a new resource.
        About the content of automatic backend configuration, please refer to
        [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        """
        return pulumi.get(self, "is_config")

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> pulumi.Output[int]:
        """
        Specifies the maximum memory of the image, in MB unit.
        """
        return pulumi.get(self, "max_ram")

    @property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> pulumi.Output[int]:
        """
        Specifies the minimum size of the system disk, in GB unit.
        Changing this parameter will create a new resource.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk")

    @property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> pulumi.Output[int]:
        """
        Specifies the minimum memory of the image, in MB unit.
        """
        return pulumi.get(self, "min_ram")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the image.
        The valid length is limited from `1` to `128` characters.
        The first and last letters of the name cannot be spaces.
        The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[str]:
        """
        The operating system type of the image. The value can be **Windows** or **Linux**.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> pulumi.Output[str]:
        """
        Specifies the operating system version of the image.
        Changing this parameter will create a new resource.
        For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
        only image with a status of **active** can be used.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The last update time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[str]:
        """
        Whether the image is visible to other tenants.
        """
        return pulumi.get(self, "visibility")

