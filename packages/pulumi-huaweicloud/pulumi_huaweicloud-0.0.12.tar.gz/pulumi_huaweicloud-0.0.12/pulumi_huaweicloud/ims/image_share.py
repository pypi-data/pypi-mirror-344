# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ImageShareArgs', 'ImageShare']

@pulumi.input_type
class ImageShareArgs:
    def __init__(__self__, *,
                 source_image_id: pulumi.Input[str],
                 target_project_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ImageShare resource.
        :param pulumi.Input[str] source_image_id: Specifies the ID of the source image. The source image must be in the
               same region as the current resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_project_ids: Specifies the IDs of the target projects.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "source_image_id", source_image_id)
        pulumi.set(__self__, "target_project_ids", target_project_ids)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the source image. The source image must be in the
        same region as the current resource.
        """
        return pulumi.get(self, "source_image_id")

    @source_image_id.setter
    def source_image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_image_id", value)

    @property
    @pulumi.getter(name="targetProjectIds")
    def target_project_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies the IDs of the target projects.
        """
        return pulumi.get(self, "target_project_ids")

    @target_project_ids.setter
    def target_project_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "target_project_ids", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ImageShareState:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None,
                 source_image_id: Optional[pulumi.Input[str]] = None,
                 target_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ImageShare resources.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] source_image_id: Specifies the ID of the source image. The source image must be in the
               same region as the current resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_project_ids: Specifies the IDs of the target projects.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_image_id is not None:
            pulumi.set(__self__, "source_image_id", source_image_id)
        if target_project_ids is not None:
            pulumi.set(__self__, "target_project_ids", target_project_ids)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the source image. The source image must be in the
        same region as the current resource.
        """
        return pulumi.get(self, "source_image_id")

    @source_image_id.setter
    def source_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_image_id", value)

    @property
    @pulumi.getter(name="targetProjectIds")
    def target_project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the IDs of the target projects.
        """
        return pulumi.get(self, "target_project_ids")

    @target_project_ids.setter
    def target_project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_project_ids", value)


class ImageShare(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 source_image_id: Optional[pulumi.Input[str]] = None,
                 target_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages an IMS image share resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_image_id = config.require_object("sourceImageId")
        target_project_ids = config.require_object("targetProjectIds")
        test = huaweicloud.ims.ImageShare("test",
            source_image_id=source_image_id,
            target_project_ids=target_project_ids)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] source_image_id: Specifies the ID of the source image. The source image must be in the
               same region as the current resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_project_ids: Specifies the IDs of the target projects.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageShareArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IMS image share resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_image_id = config.require_object("sourceImageId")
        target_project_ids = config.require_object("targetProjectIds")
        test = huaweicloud.ims.ImageShare("test",
            source_image_id=source_image_id,
            target_project_ids=target_project_ids)
        ```

        :param str resource_name: The name of the resource.
        :param ImageShareArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageShareArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 source_image_id: Optional[pulumi.Input[str]] = None,
                 target_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageShareArgs.__new__(ImageShareArgs)

            __props__.__dict__["region"] = region
            if source_image_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_image_id'")
            __props__.__dict__["source_image_id"] = source_image_id
            if target_project_ids is None and not opts.urn:
                raise TypeError("Missing required property 'target_project_ids'")
            __props__.__dict__["target_project_ids"] = target_project_ids
        super(ImageShare, __self__).__init__(
            'huaweicloud:Ims/imageShare:ImageShare',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            region: Optional[pulumi.Input[str]] = None,
            source_image_id: Optional[pulumi.Input[str]] = None,
            target_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'ImageShare':
        """
        Get an existing ImageShare resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] source_image_id: Specifies the ID of the source image. The source image must be in the
               same region as the current resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_project_ids: Specifies the IDs of the target projects.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageShareState.__new__(_ImageShareState)

        __props__.__dict__["region"] = region
        __props__.__dict__["source_image_id"] = source_image_id
        __props__.__dict__["target_project_ids"] = target_project_ids
        return ImageShare(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the source image. The source image must be in the
        same region as the current resource.
        """
        return pulumi.get(self, "source_image_id")

    @property
    @pulumi.getter(name="targetProjectIds")
    def target_project_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Specifies the IDs of the target projects.
        """
        return pulumi.get(self, "target_project_ids")

