# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ImageCopyArgs', 'ImageCopy']

@pulumi.input_type
class ImageCopyArgs:
    def __init__(__self__, *,
                 source_image_id: pulumi.Input[str],
                 agency_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_region: Optional[pulumi.Input[str]] = None,
                 vault_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ImageCopy resource.
        :param pulumi.Input[str] source_image_id: Specifies the ID of the copied image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] agency_name: Specifies the agency name. It is required in the cross-region scene.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] description: Specifies the description of the copy image.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the image.
               Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
               be used.
        :param pulumi.Input[str] kms_key_id: Specifies the master key used for encrypting an image.
               Only copying scene within a region is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the copy image in the unit of MB.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the copy image in the unit of MB. The default value is
               `0`, indicating that the memory is not restricted.
        :param pulumi.Input[str] name: Specifies the name of the copy image. The name can contain `1` to `128` characters,
               only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
               start or end with a space.
        :param pulumi.Input[str] region: Specifies the region to which the source image belongs.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the copy image.
        :param pulumi.Input[str] target_region: Specifies the target region name.
               If specified, it means cross-region replication.
        :param pulumi.Input[str] vault_id: Specifies the ID of the vault. It is used in the cross-region scene, it is
               mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
               the value of `target_region`.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "source_image_id", source_image_id)
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_region is not None:
            pulumi.set(__self__, "target_region", target_region)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the copied image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_image_id")

    @source_image_id.setter
    def source_image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_image_id", value)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the agency name. It is required in the cross-region scene.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agency_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the copy image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the image.
        Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
        be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the master key used for encrypting an image.
        Only copying scene within a region is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum memory of the copy image in the unit of MB.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ram", value)

    @property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum memory of the copy image in the unit of MB. The default value is
        `0`, indicating that the memory is not restricted.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ram", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the copy image. The name can contain `1` to `128` characters,
        only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
        start or end with a space.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region to which the source image belongs.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the copy image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetRegion")
    def target_region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the target region name.
        If specified, it means cross-region replication.
        """
        return pulumi.get(self, "target_region")

    @target_region.setter
    def target_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_region", value)

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the vault. It is used in the cross-region scene, it is
        mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
        the value of `target_region`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vault_id", value)


@pulumi.input_type
class _ImageCopyState:
    def __init__(__self__, *,
                 active_at: Optional[pulumi.Input[str]] = None,
                 agency_name: Optional[pulumi.Input[str]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_format: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 image_size: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_disk: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 source_image_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_region: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 vault_id: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ImageCopy resources.
        :param pulumi.Input[str] active_at: The time when the image status changes to active, in RFC3339 format.
        :param pulumi.Input[str] agency_name: Specifies the agency name. It is required in the cross-region scene.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] checksum: checksum is deprecated
        :param pulumi.Input[str] created_at: The creation time of the image, in RFC3339 format.
        :param pulumi.Input[str] data_origin: Indicates the image source.
               The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
        :param pulumi.Input[str] description: Specifies the description of the copy image.
        :param pulumi.Input[str] disk_format: Indicates the image file format.
               The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the image.
               Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
               be used.
        :param pulumi.Input[str] image_size: Indicates the size(bytes) of the image file.
        :param pulumi.Input[str] instance_id: Indicates the ID of the ECS that needs to be converted into an image.
        :param pulumi.Input[str] kms_key_id: Specifies the master key used for encrypting an image.
               Only copying scene within a region is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the copy image in the unit of MB.
        :param pulumi.Input[int] min_disk: The minimum disk space required to run an image, in GB unit.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the copy image in the unit of MB. The default value is
               `0`, indicating that the memory is not restricted.
        :param pulumi.Input[str] name: Specifies the name of the copy image. The name can contain `1` to `128` characters,
               only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
               start or end with a space.
        :param pulumi.Input[str] os_version: Indicates the OS version.
        :param pulumi.Input[str] region: Specifies the region to which the source image belongs.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] source_image_id: Specifies the ID of the copied image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] status: Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
               or **killed*, only image with a status of **active** can be used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the copy image.
        :param pulumi.Input[str] target_region: Specifies the target region name.
               If specified, it means cross-region replication.
        :param pulumi.Input[str] updated_at: The last update time of the image, in RFC3339 format.
        :param pulumi.Input[str] vault_id: Specifies the ID of the vault. It is used in the cross-region scene, it is
               mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
               the value of `target_region`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] visibility: Indicates whether the image is visible to other tenants.
        """
        if active_at is not None:
            pulumi.set(__self__, "active_at", active_at)
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_format is not None:
            pulumi.set(__self__, "disk_format", disk_format)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if image_size is not None:
            pulumi.set(__self__, "image_size", image_size)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_disk is not None:
            pulumi.set(__self__, "min_disk", min_disk)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_image_id is not None:
            pulumi.set(__self__, "source_image_id", source_image_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_region is not None:
            pulumi.set(__self__, "target_region", target_region)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the image status changes to active, in RFC3339 format.
        """
        return pulumi.get(self, "active_at")

    @active_at.setter
    def active_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_at", value)

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the agency name. It is required in the cross-region scene.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agency_name", value)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[str]]:
        """
        checksum is deprecated
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the image source.
        The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the copy image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the image file format.
        The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        """
        return pulumi.get(self, "disk_format")

    @disk_format.setter
    def disk_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_format", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the image.
        Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
        be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the size(bytes) of the image file.
        """
        return pulumi.get(self, "image_size")

    @image_size.setter
    def image_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_size", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the ID of the ECS that needs to be converted into an image.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the master key used for encrypting an image.
        Only copying scene within a region is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum memory of the copy image in the unit of MB.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ram", value)

    @property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum disk space required to run an image, in GB unit.
        """
        return pulumi.get(self, "min_disk")

    @min_disk.setter
    def min_disk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_disk", value)

    @property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum memory of the copy image in the unit of MB. The default value is
        `0`, indicating that the memory is not restricted.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ram", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the copy image. The name can contain `1` to `128` characters,
        only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
        start or end with a space.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the OS version.
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region to which the source image belongs.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the copied image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_image_id")

    @source_image_id.setter
    def source_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_image_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
        or **killed*, only image with a status of **active** can be used.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the copy image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetRegion")
    def target_region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the target region name.
        If specified, it means cross-region replication.
        """
        return pulumi.get(self, "target_region")

    @target_region.setter
    def target_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_region", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the vault. It is used in the cross-region scene, it is
        mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
        the value of `target_region`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vault_id", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether the image is visible to other tenants.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class ImageCopy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 source_image_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_region: Optional[pulumi.Input[str]] = None,
                 vault_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an IMS image copy resource within HuaweiCloud.

        ## Example Usage
        ### Copy image within region

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_image_id = config.require_object("sourceImageId")
        name = config.require_object("name")
        kms_key_id = config.require_object("kmsKeyId")
        test = huaweicloud.ims.ImageCopy("test",
            source_image_id=source_image_id,
            kms_key_id=kms_key_id)
        ```
        ### Copy image cross region

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_image_id = config.require_object("sourceImageId")
        name = config.require_object("name")
        target_region = config.require_object("targetRegion")
        agency_name = config.require_object("agencyName")
        test = huaweicloud.ims.ImageCopy("test",
            source_image_id=source_image_id,
            target_region=target_region,
            agency_name=agency_name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] agency_name: Specifies the agency name. It is required in the cross-region scene.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] description: Specifies the description of the copy image.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the image.
               Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
               be used.
        :param pulumi.Input[str] kms_key_id: Specifies the master key used for encrypting an image.
               Only copying scene within a region is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the copy image in the unit of MB.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the copy image in the unit of MB. The default value is
               `0`, indicating that the memory is not restricted.
        :param pulumi.Input[str] name: Specifies the name of the copy image. The name can contain `1` to `128` characters,
               only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
               start or end with a space.
        :param pulumi.Input[str] region: Specifies the region to which the source image belongs.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] source_image_id: Specifies the ID of the copied image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the copy image.
        :param pulumi.Input[str] target_region: Specifies the target region name.
               If specified, it means cross-region replication.
        :param pulumi.Input[str] vault_id: Specifies the ID of the vault. It is used in the cross-region scene, it is
               mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
               the value of `target_region`.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageCopyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IMS image copy resource within HuaweiCloud.

        ## Example Usage
        ### Copy image within region

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_image_id = config.require_object("sourceImageId")
        name = config.require_object("name")
        kms_key_id = config.require_object("kmsKeyId")
        test = huaweicloud.ims.ImageCopy("test",
            source_image_id=source_image_id,
            kms_key_id=kms_key_id)
        ```
        ### Copy image cross region

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_image_id = config.require_object("sourceImageId")
        name = config.require_object("name")
        target_region = config.require_object("targetRegion")
        agency_name = config.require_object("agencyName")
        test = huaweicloud.ims.ImageCopy("test",
            source_image_id=source_image_id,
            target_region=target_region,
            agency_name=agency_name)
        ```

        :param str resource_name: The name of the resource.
        :param ImageCopyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageCopyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 source_image_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_region: Optional[pulumi.Input[str]] = None,
                 vault_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageCopyArgs.__new__(ImageCopyArgs)

            __props__.__dict__["agency_name"] = agency_name
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["max_ram"] = max_ram
            __props__.__dict__["min_ram"] = min_ram
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if source_image_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_image_id'")
            __props__.__dict__["source_image_id"] = source_image_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["target_region"] = target_region
            __props__.__dict__["vault_id"] = vault_id
            __props__.__dict__["active_at"] = None
            __props__.__dict__["checksum"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["data_origin"] = None
            __props__.__dict__["disk_format"] = None
            __props__.__dict__["image_size"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["min_disk"] = None
            __props__.__dict__["os_version"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["visibility"] = None
        super(ImageCopy, __self__).__init__(
            'huaweicloud:Ims/imageCopy:ImageCopy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_at: Optional[pulumi.Input[str]] = None,
            agency_name: Optional[pulumi.Input[str]] = None,
            checksum: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            data_origin: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disk_format: Optional[pulumi.Input[str]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            image_size: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            kms_key_id: Optional[pulumi.Input[str]] = None,
            max_ram: Optional[pulumi.Input[int]] = None,
            min_disk: Optional[pulumi.Input[int]] = None,
            min_ram: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            os_version: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            source_image_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            target_region: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            vault_id: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'ImageCopy':
        """
        Get an existing ImageCopy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] active_at: The time when the image status changes to active, in RFC3339 format.
        :param pulumi.Input[str] agency_name: Specifies the agency name. It is required in the cross-region scene.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] checksum: checksum is deprecated
        :param pulumi.Input[str] created_at: The creation time of the image, in RFC3339 format.
        :param pulumi.Input[str] data_origin: Indicates the image source.
               The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
        :param pulumi.Input[str] description: Specifies the description of the copy image.
        :param pulumi.Input[str] disk_format: Indicates the image file format.
               The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the image.
               Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
               be used.
        :param pulumi.Input[str] image_size: Indicates the size(bytes) of the image file.
        :param pulumi.Input[str] instance_id: Indicates the ID of the ECS that needs to be converted into an image.
        :param pulumi.Input[str] kms_key_id: Specifies the master key used for encrypting an image.
               Only copying scene within a region is supported. Changing this parameter will create a new resource.
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the copy image in the unit of MB.
        :param pulumi.Input[int] min_disk: The minimum disk space required to run an image, in GB unit.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the copy image in the unit of MB. The default value is
               `0`, indicating that the memory is not restricted.
        :param pulumi.Input[str] name: Specifies the name of the copy image. The name can contain `1` to `128` characters,
               only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
               start or end with a space.
        :param pulumi.Input[str] os_version: Indicates the OS version.
        :param pulumi.Input[str] region: Specifies the region to which the source image belongs.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] source_image_id: Specifies the ID of the copied image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] status: Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
               or **killed*, only image with a status of **active** can be used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the copy image.
        :param pulumi.Input[str] target_region: Specifies the target region name.
               If specified, it means cross-region replication.
        :param pulumi.Input[str] updated_at: The last update time of the image, in RFC3339 format.
        :param pulumi.Input[str] vault_id: Specifies the ID of the vault. It is used in the cross-region scene, it is
               mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
               the value of `target_region`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] visibility: Indicates whether the image is visible to other tenants.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageCopyState.__new__(_ImageCopyState)

        __props__.__dict__["active_at"] = active_at
        __props__.__dict__["agency_name"] = agency_name
        __props__.__dict__["checksum"] = checksum
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_origin"] = data_origin
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_format"] = disk_format
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["image_size"] = image_size
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["kms_key_id"] = kms_key_id
        __props__.__dict__["max_ram"] = max_ram
        __props__.__dict__["min_disk"] = min_disk
        __props__.__dict__["min_ram"] = min_ram
        __props__.__dict__["name"] = name
        __props__.__dict__["os_version"] = os_version
        __props__.__dict__["region"] = region
        __props__.__dict__["source_image_id"] = source_image_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target_region"] = target_region
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vault_id"] = vault_id
        __props__.__dict__["visibility"] = visibility
        return ImageCopy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> pulumi.Output[str]:
        """
        The time when the image status changes to active, in RFC3339 format.
        """
        return pulumi.get(self, "active_at")

    @property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Output[str]:
        """
        Specifies the agency name. It is required in the cross-region scene.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "agency_name")

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Output[str]:
        """
        checksum is deprecated
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The creation time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> pulumi.Output[str]:
        """
        Indicates the image source.
        The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
        """
        return pulumi.get(self, "data_origin")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the description of the copy image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> pulumi.Output[str]:
        """
        Indicates the image file format.
        The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        """
        return pulumi.get(self, "disk_format")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[str]:
        """
        Specifies the enterprise project ID of the image.
        Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
        be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> pulumi.Output[str]:
        """
        Indicates the size(bytes) of the image file.
        """
        return pulumi.get(self, "image_size")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Indicates the ID of the ECS that needs to be converted into an image.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[str]:
        """
        Specifies the master key used for encrypting an image.
        Only copying scene within a region is supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> pulumi.Output[int]:
        """
        Specifies the maximum memory of the copy image in the unit of MB.
        """
        return pulumi.get(self, "max_ram")

    @property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> pulumi.Output[int]:
        """
        The minimum disk space required to run an image, in GB unit.
        """
        return pulumi.get(self, "min_disk")

    @property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> pulumi.Output[int]:
        """
        Specifies the minimum memory of the copy image in the unit of MB. The default value is
        `0`, indicating that the memory is not restricted.
        """
        return pulumi.get(self, "min_ram")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the copy image. The name can contain `1` to `128` characters,
        only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
        start or end with a space.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> pulumi.Output[str]:
        """
        Indicates the OS version.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region to which the source image belongs.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the copied image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "source_image_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
        or **killed*, only image with a status of **active** can be used.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies the key/value pairs to associate with the copy image.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetRegion")
    def target_region(self) -> pulumi.Output[str]:
        """
        Specifies the target region name.
        If specified, it means cross-region replication.
        """
        return pulumi.get(self, "target_region")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The last update time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the vault. It is used in the cross-region scene, it is
        mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
        the value of `target_region`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[str]:
        """
        Indicates whether the image is visible to other tenants.
        """
        return pulumi.get(self, "visibility")

