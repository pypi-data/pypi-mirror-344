# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ImageExportArgs', 'ImageExport']

@pulumi.input_type
class ImageExportArgs:
    def __init__(__self__, *,
                 bucket_url: pulumi.Input[str],
                 image_id: pulumi.Input[str],
                 file_format: Optional[pulumi.Input[str]] = None,
                 is_quick_export: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ImageExport resource.
        :param pulumi.Input[str] bucket_url: Specifies the URL of the image file to be exported to the OBS bucket, the
               format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
               bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
        :param pulumi.Input[str] image_id: Specifies the image ID to export.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] file_format: Specifies the format of the image file to be exported. The valid values
               are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_quick_export: Specifies whether to use quick export. The valid value is **true** or
               **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "bucket_url", bucket_url)
        pulumi.set(__self__, "image_id", image_id)
        if file_format is not None:
            pulumi.set(__self__, "file_format", file_format)
        if is_quick_export is not None:
            pulumi.set(__self__, "is_quick_export", is_quick_export)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> pulumi.Input[str]:
        """
        Specifies the URL of the image file to be exported to the OBS bucket, the
        format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
        bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        """
        Specifies the image ID to export.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="fileFormat")
    def file_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the format of the image file to be exported. The valid values
        are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "file_format")

    @file_format.setter
    def file_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_format", value)

    @property
    @pulumi.getter(name="isQuickExport")
    def is_quick_export(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to use quick export. The valid value is **true** or
        **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "is_quick_export")

    @is_quick_export.setter
    def is_quick_export(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_quick_export", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ImageExportState:
    def __init__(__self__, *,
                 bucket_url: Optional[pulumi.Input[str]] = None,
                 file_format: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 is_quick_export: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ImageExport resources.
        :param pulumi.Input[str] bucket_url: Specifies the URL of the image file to be exported to the OBS bucket, the
               format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
               bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
        :param pulumi.Input[str] file_format: Specifies the format of the image file to be exported. The valid values
               are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] image_id: Specifies the image ID to export.
               Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_quick_export: Specifies whether to use quick export. The valid value is **true** or
               **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if bucket_url is not None:
            pulumi.set(__self__, "bucket_url", bucket_url)
        if file_format is not None:
            pulumi.set(__self__, "file_format", file_format)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if is_quick_export is not None:
            pulumi.set(__self__, "is_quick_export", is_quick_export)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the URL of the image file to be exported to the OBS bucket, the
        format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
        bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bucket_url")

    @bucket_url.setter
    def bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_url", value)

    @property
    @pulumi.getter(name="fileFormat")
    def file_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the format of the image file to be exported. The valid values
        are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "file_format")

    @file_format.setter
    def file_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_format", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the image ID to export.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="isQuickExport")
    def is_quick_export(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to use quick export. The valid value is **true** or
        **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "is_quick_export")

    @is_quick_export.setter
    def is_quick_export(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_quick_export", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class ImageExport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_url: Optional[pulumi.Input[str]] = None,
                 file_format: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 is_quick_export: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an IMS image export resource within HuaweiCloud.

        > 1. The whole image, ISO image, private images created by public images of Windows, SUSE, Red Hat, Ubuntu, and
        >       Oracle Linux, and private images created by market images are not allowed to be exported.
        >       <br/>2. The image size must be less than `1` TB. The images larger than `128` GB only support fast export, the
        >       maximum image size supported for export in some regions may be greater than `128` GB, please refer to the actual
        >       operation prompts on the console for accuracy.<br/>3. Destroying resource does not change the current action of the
        >       image export resource.

        ## Example Usage
        ### Ordinary export image

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_id = config.require_object("imageId")
        bucket_url = config.require_object("bucketUrl")
        file_format = config.require_object("fileFormat")
        test = huaweicloud.ims.ImageExport("test",
            image_id=image_id,
            bucket_url=bucket_url,
            file_format=file_format)
        ```
        ### Quickly export image

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_id = config.require_object("imageId")
        bucket_url = config.require_object("bucketUrl")
        test = huaweicloud.ims.ImageExport("test",
            image_id=image_id,
            bucket_url=bucket_url,
            is_quick_export=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_url: Specifies the URL of the image file to be exported to the OBS bucket, the
               format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
               bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
        :param pulumi.Input[str] file_format: Specifies the format of the image file to be exported. The valid values
               are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] image_id: Specifies the image ID to export.
               Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_quick_export: Specifies whether to use quick export. The valid value is **true** or
               **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageExportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IMS image export resource within HuaweiCloud.

        > 1. The whole image, ISO image, private images created by public images of Windows, SUSE, Red Hat, Ubuntu, and
        >       Oracle Linux, and private images created by market images are not allowed to be exported.
        >       <br/>2. The image size must be less than `1` TB. The images larger than `128` GB only support fast export, the
        >       maximum image size supported for export in some regions may be greater than `128` GB, please refer to the actual
        >       operation prompts on the console for accuracy.<br/>3. Destroying resource does not change the current action of the
        >       image export resource.

        ## Example Usage
        ### Ordinary export image

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_id = config.require_object("imageId")
        bucket_url = config.require_object("bucketUrl")
        file_format = config.require_object("fileFormat")
        test = huaweicloud.ims.ImageExport("test",
            image_id=image_id,
            bucket_url=bucket_url,
            file_format=file_format)
        ```
        ### Quickly export image

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        image_id = config.require_object("imageId")
        bucket_url = config.require_object("bucketUrl")
        test = huaweicloud.ims.ImageExport("test",
            image_id=image_id,
            bucket_url=bucket_url,
            is_quick_export=True)
        ```

        :param str resource_name: The name of the resource.
        :param ImageExportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageExportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_url: Optional[pulumi.Input[str]] = None,
                 file_format: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 is_quick_export: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageExportArgs.__new__(ImageExportArgs)

            if bucket_url is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_url'")
            __props__.__dict__["bucket_url"] = bucket_url
            __props__.__dict__["file_format"] = file_format
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["is_quick_export"] = is_quick_export
            __props__.__dict__["region"] = region
        super(ImageExport, __self__).__init__(
            'huaweicloud:Ims/imageExport:ImageExport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket_url: Optional[pulumi.Input[str]] = None,
            file_format: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            is_quick_export: Optional[pulumi.Input[bool]] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'ImageExport':
        """
        Get an existing ImageExport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_url: Specifies the URL of the image file to be exported to the OBS bucket, the
               format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
               bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
        :param pulumi.Input[str] file_format: Specifies the format of the image file to be exported. The valid values
               are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] image_id: Specifies the image ID to export.
               Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_quick_export: Specifies whether to use quick export. The valid value is **true** or
               **false**. Changing this parameter will create a new resource.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageExportState.__new__(_ImageExportState)

        __props__.__dict__["bucket_url"] = bucket_url
        __props__.__dict__["file_format"] = file_format
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["is_quick_export"] = is_quick_export
        __props__.__dict__["region"] = region
        return ImageExport(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bucketUrl")
    def bucket_url(self) -> pulumi.Output[str]:
        """
        Specifies the URL of the image file to be exported to the OBS bucket, the
        format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
        bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bucket_url")

    @property
    @pulumi.getter(name="fileFormat")
    def file_format(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the format of the image file to be exported. The valid values
        are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "file_format")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[str]:
        """
        Specifies the image ID to export.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="isQuickExport")
    def is_quick_export(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether to use quick export. The valid value is **true** or
        **false**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "is_quick_export")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

