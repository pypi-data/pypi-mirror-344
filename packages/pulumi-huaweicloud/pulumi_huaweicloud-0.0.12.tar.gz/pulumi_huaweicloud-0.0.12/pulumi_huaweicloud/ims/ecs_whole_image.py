# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EcsWholeImageArgs', 'EcsWholeImage']

@pulumi.input_type
class EcsWholeImageArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 vault_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 is_delete_backup: Optional[pulumi.Input[bool]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a EcsWholeImage resource.
        :param pulumi.Input[str] instance_id: Specifies the source ECS instance ID used to create the image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] vault_id: Specifies the ID of the vault to which an ECS instance is to be added or has
               been added. Changing this parameter will create a new resource.
        :param pulumi.Input[str] description: Specifies the description of the image.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[bool] is_delete_backup: Specifies whether to delete the associated CBR backup when deleting image.
               The value can be **true** or **false**.
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the image, in MB unit.
               The default value is `0`, indicating that the memory is not restricted.
        :param pulumi.Input[str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the image.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "vault_id", vault_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if is_delete_backup is not None:
            pulumi.set(__self__, "is_delete_backup", is_delete_backup)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Specifies the source ECS instance ID used to create the image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the vault to which an ECS instance is to be added or has
        been added. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vault_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID to which the IMS image belongs.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="isDeleteBackup")
    def is_delete_backup(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to delete the associated CBR backup when deleting image.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "is_delete_backup")

    @is_delete_backup.setter
    def is_delete_backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_delete_backup", value)

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum memory of the image, in MB unit.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ram", value)

    @property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum memory of the image, in MB unit.
        The default value is `0`, indicating that the memory is not restricted.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ram", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the image.
        The valid length is limited from `1` to `128` characters.
        The first and last letters of the name cannot be spaces.
        The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _EcsWholeImageState:
    def __init__(__self__, *,
                 active_at: Optional[pulumi.Input[str]] = None,
                 backup_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_format: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_delete_backup: Optional[pulumi.Input[bool]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_disk: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 vault_id: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EcsWholeImage resources.
        :param pulumi.Input[str] active_at: The time when the image status changes to active, in RFC3339 format.
        :param pulumi.Input[str] backup_id: The ID of CBR backup.
        :param pulumi.Input[str] created_at: The creation time of the image, in RFC3339 format.
        :param pulumi.Input[str] data_origin: The image resource. The format is **server_backup,vault_id**.
        :param pulumi.Input[str] description: Specifies the description of the image.
        :param pulumi.Input[str] disk_format: The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[str] instance_id: Specifies the source ECS instance ID used to create the image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_delete_backup: Specifies whether to delete the associated CBR backup when deleting image.
               The value can be **true** or **false**.
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[int] min_disk: The minimum disk space required to run an image, in GB unit.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the image, in MB unit.
               The default value is `0`, indicating that the memory is not restricted.
        :param pulumi.Input[str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[str] os_version: The operating system version of the image.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] status: The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
               only image with a status of **active** can be used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[str] updated_at: The last update time of the image, in RFC3339 format.
        :param pulumi.Input[str] vault_id: Specifies the ID of the vault to which an ECS instance is to be added or has
               been added. Changing this parameter will create a new resource.
        :param pulumi.Input[str] visibility: Whether the image is visible to other tenants.
        """
        if active_at is not None:
            pulumi.set(__self__, "active_at", active_at)
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_format is not None:
            pulumi.set(__self__, "disk_format", disk_format)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_delete_backup is not None:
            pulumi.set(__self__, "is_delete_backup", is_delete_backup)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_disk is not None:
            pulumi.set(__self__, "min_disk", min_disk)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the image status changes to active, in RFC3339 format.
        """
        return pulumi.get(self, "active_at")

    @active_at.setter
    def active_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_at", value)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of CBR backup.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[str]]:
        """
        The image resource. The format is **server_backup,vault_id**.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> Optional[pulumi.Input[str]]:
        """
        The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
        """
        return pulumi.get(self, "disk_format")

    @disk_format.setter
    def disk_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_format", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID to which the IMS image belongs.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the source ECS instance ID used to create the image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="isDeleteBackup")
    def is_delete_backup(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to delete the associated CBR backup when deleting image.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "is_delete_backup")

    @is_delete_backup.setter
    def is_delete_backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_delete_backup", value)

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum memory of the image, in MB unit.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ram", value)

    @property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum disk space required to run an image, in GB unit.
        """
        return pulumi.get(self, "min_disk")

    @min_disk.setter
    def min_disk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_disk", value)

    @property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum memory of the image, in MB unit.
        The default value is `0`, indicating that the memory is not restricted.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ram", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the image.
        The valid length is limited from `1` to `128` characters.
        The first and last letters of the name cannot be spaces.
        The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[str]]:
        """
        The operating system version of the image.
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
        only image with a status of **active** can be used.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the vault to which an ECS instance is to be added or has
        been added. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vault_id", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the image is visible to other tenants.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class EcsWholeImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_delete_backup: Optional[pulumi.Input[bool]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vault_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an IMS whole image resource created from ECS instance within HuaweiCloud.

        > After deleting the image, the CBR backup that has not been deleted will be retained and continue to be charged.
           If you need to delete it later, you can delete the corresponding CBR backup in the CBR backup console.

        ## Example Usage
        ### Creating an IMS whole image from an existing ECS instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        instance_id = config.require_object("instanceId")
        vault_id = config.require_object("vaultId")
        test = huaweicloud.ims.EcsWholeImage("test",
            instance_id=instance_id,
            vault_id=vault_id)
        ```

        ## Import

        The IMS ECS whole image resource can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Ims/ecsWholeImage:EcsWholeImage test <id>
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`is_delete_backup`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the image. Also, you can ignore changes as below. resource "huaweicloud_ims_ecs_whole_image" "test" {

         ...

         lifecycle {

         ignore_changes = [

         is_delete_backup,

         ]

         } }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Specifies the description of the image.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[str] instance_id: Specifies the source ECS instance ID used to create the image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_delete_backup: Specifies whether to delete the associated CBR backup when deleting image.
               The value can be **true** or **false**.
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the image, in MB unit.
               The default value is `0`, indicating that the memory is not restricted.
        :param pulumi.Input[str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[str] vault_id: Specifies the ID of the vault to which an ECS instance is to be added or has
               been added. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EcsWholeImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IMS whole image resource created from ECS instance within HuaweiCloud.

        > After deleting the image, the CBR backup that has not been deleted will be retained and continue to be charged.
           If you need to delete it later, you can delete the corresponding CBR backup in the CBR backup console.

        ## Example Usage
        ### Creating an IMS whole image from an existing ECS instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        instance_id = config.require_object("instanceId")
        vault_id = config.require_object("vaultId")
        test = huaweicloud.ims.EcsWholeImage("test",
            instance_id=instance_id,
            vault_id=vault_id)
        ```

        ## Import

        The IMS ECS whole image resource can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Ims/ecsWholeImage:EcsWholeImage test <id>
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`is_delete_backup`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the image. Also, you can ignore changes as below. resource "huaweicloud_ims_ecs_whole_image" "test" {

         ...

         lifecycle {

         ignore_changes = [

         is_delete_backup,

         ]

         } }

        :param str resource_name: The name of the resource.
        :param EcsWholeImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EcsWholeImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_delete_backup: Optional[pulumi.Input[bool]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 min_ram: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vault_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EcsWholeImageArgs.__new__(EcsWholeImageArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_delete_backup"] = is_delete_backup
            __props__.__dict__["max_ram"] = max_ram
            __props__.__dict__["min_ram"] = min_ram
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            if vault_id is None and not opts.urn:
                raise TypeError("Missing required property 'vault_id'")
            __props__.__dict__["vault_id"] = vault_id
            __props__.__dict__["active_at"] = None
            __props__.__dict__["backup_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["data_origin"] = None
            __props__.__dict__["disk_format"] = None
            __props__.__dict__["min_disk"] = None
            __props__.__dict__["os_version"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["visibility"] = None
        super(EcsWholeImage, __self__).__init__(
            'huaweicloud:Ims/ecsWholeImage:EcsWholeImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_at: Optional[pulumi.Input[str]] = None,
            backup_id: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            data_origin: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disk_format: Optional[pulumi.Input[str]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            is_delete_backup: Optional[pulumi.Input[bool]] = None,
            max_ram: Optional[pulumi.Input[int]] = None,
            min_disk: Optional[pulumi.Input[int]] = None,
            min_ram: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            os_version: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            vault_id: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'EcsWholeImage':
        """
        Get an existing EcsWholeImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] active_at: The time when the image status changes to active, in RFC3339 format.
        :param pulumi.Input[str] backup_id: The ID of CBR backup.
        :param pulumi.Input[str] created_at: The creation time of the image, in RFC3339 format.
        :param pulumi.Input[str] data_origin: The image resource. The format is **server_backup,vault_id**.
        :param pulumi.Input[str] description: Specifies the description of the image.
        :param pulumi.Input[str] disk_format: The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[str] instance_id: Specifies the source ECS instance ID used to create the image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[bool] is_delete_backup: Specifies whether to delete the associated CBR backup when deleting image.
               The value can be **true** or **false**.
        :param pulumi.Input[int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[int] min_disk: The minimum disk space required to run an image, in GB unit.
        :param pulumi.Input[int] min_ram: Specifies the minimum memory of the image, in MB unit.
               The default value is `0`, indicating that the memory is not restricted.
        :param pulumi.Input[str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[str] os_version: The operating system version of the image.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[str] status: The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
               only image with a status of **active** can be used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[str] updated_at: The last update time of the image, in RFC3339 format.
        :param pulumi.Input[str] vault_id: Specifies the ID of the vault to which an ECS instance is to be added or has
               been added. Changing this parameter will create a new resource.
        :param pulumi.Input[str] visibility: Whether the image is visible to other tenants.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EcsWholeImageState.__new__(_EcsWholeImageState)

        __props__.__dict__["active_at"] = active_at
        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_origin"] = data_origin
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_format"] = disk_format
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_delete_backup"] = is_delete_backup
        __props__.__dict__["max_ram"] = max_ram
        __props__.__dict__["min_disk"] = min_disk
        __props__.__dict__["min_ram"] = min_ram
        __props__.__dict__["name"] = name
        __props__.__dict__["os_version"] = os_version
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vault_id"] = vault_id
        __props__.__dict__["visibility"] = visibility
        return EcsWholeImage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> pulumi.Output[str]:
        """
        The time when the image status changes to active, in RFC3339 format.
        """
        return pulumi.get(self, "active_at")

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[str]:
        """
        The ID of CBR backup.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The creation time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> pulumi.Output[str]:
        """
        The image resource. The format is **server_backup,vault_id**.
        """
        return pulumi.get(self, "data_origin")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> pulumi.Output[str]:
        """
        The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
        """
        return pulumi.get(self, "disk_format")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[str]:
        """
        Specifies the enterprise project ID to which the IMS image belongs.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Specifies the source ECS instance ID used to create the image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isDeleteBackup")
    def is_delete_backup(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether to delete the associated CBR backup when deleting image.
        The value can be **true** or **false**.
        """
        return pulumi.get(self, "is_delete_backup")

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> pulumi.Output[int]:
        """
        Specifies the maximum memory of the image, in MB unit.
        """
        return pulumi.get(self, "max_ram")

    @property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> pulumi.Output[int]:
        """
        The minimum disk space required to run an image, in GB unit.
        """
        return pulumi.get(self, "min_disk")

    @property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> pulumi.Output[int]:
        """
        Specifies the minimum memory of the image, in MB unit.
        The default value is `0`, indicating that the memory is not restricted.
        """
        return pulumi.get(self, "min_ram")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the image.
        The valid length is limited from `1` to `128` characters.
        The first and last letters of the name cannot be spaces.
        The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> pulumi.Output[str]:
        """
        The operating system version of the image.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
        only image with a status of **active** can be used.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The last update time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the vault to which an ECS instance is to be added or has
        been added. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[str]:
        """
        Whether the image is visible to other tenants.
        """
        return pulumi.get(self, "visibility")

