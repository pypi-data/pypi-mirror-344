# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAssociationsResult',
    'AwaitableGetAssociationsResult',
    'get_associations',
    'get_associations_output',
]

@pulumi.output_type
class GetAssociationsResult:
    """
    A collection of values returned by getAssociations.
    """
    def __init__(__self__, associations=None, attachment_id=None, attachment_type=None, id=None, instance_id=None, region=None, route_table_id=None, status=None):
        if associations and not isinstance(associations, list):
            raise TypeError("Expected argument 'associations' to be a list")
        pulumi.set(__self__, "associations", associations)
        if attachment_id and not isinstance(attachment_id, str):
            raise TypeError("Expected argument 'attachment_id' to be a str")
        pulumi.set(__self__, "attachment_id", attachment_id)
        if attachment_type and not isinstance(attachment_type, str):
            raise TypeError("Expected argument 'attachment_type' to be a str")
        pulumi.set(__self__, "attachment_type", attachment_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if route_table_id and not isinstance(route_table_id, str):
            raise TypeError("Expected argument 'route_table_id' to be a str")
        pulumi.set(__self__, "route_table_id", route_table_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def associations(self) -> Sequence['outputs.GetAssociationsAssociationResult']:
        """
        All associations that match the filter parameters.
        The associations structure is documented below.
        """
        return pulumi.get(self, "associations")

    @property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> Optional[str]:
        return pulumi.get(self, "attachment_id")

    @property
    @pulumi.getter(name="attachmentType")
    def attachment_type(self) -> Optional[str]:
        return pulumi.get(self, "attachment_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The current status of the association.
        """
        return pulumi.get(self, "status")


class AwaitableGetAssociationsResult(GetAssociationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssociationsResult(
            associations=self.associations,
            attachment_id=self.attachment_id,
            attachment_type=self.attachment_type,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            route_table_id=self.route_table_id,
            status=self.status)


def get_associations(attachment_id: Optional[str] = None,
                     attachment_type: Optional[str] = None,
                     instance_id: Optional[str] = None,
                     region: Optional[str] = None,
                     route_table_id: Optional[str] = None,
                     status: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAssociationsResult:
    """
    Use this data source to get the list of associations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    route_table_id = config.require_object("routeTableId")
    test = huaweicloud.Er.get_associations(instance_id=instance_id,
        route_table_id=route_table_id)
    ```


    :param str attachment_id: Specifies the attachment ID corresponding to the association.
    :param str attachment_type: Specifies the attachment type corresponding to the association.
    :param str instance_id: Specifies the ER instance ID to which the association belongs.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str route_table_id: Specifies the route table ID to which the association belongs.
    :param str status: Specifies the status of the association. Default value is `available`.
           The valid values are as follows:
           + **available**
           + **failed**
    """
    __args__ = dict()
    __args__['attachmentId'] = attachment_id
    __args__['attachmentType'] = attachment_type
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['routeTableId'] = route_table_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Er/getAssociations:getAssociations', __args__, opts=opts, typ=GetAssociationsResult).value

    return AwaitableGetAssociationsResult(
        associations=__ret__.associations,
        attachment_id=__ret__.attachment_id,
        attachment_type=__ret__.attachment_type,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        region=__ret__.region,
        route_table_id=__ret__.route_table_id,
        status=__ret__.status)


@_utilities.lift_output_func(get_associations)
def get_associations_output(attachment_id: Optional[pulumi.Input[Optional[str]]] = None,
                            attachment_type: Optional[pulumi.Input[Optional[str]]] = None,
                            instance_id: Optional[pulumi.Input[str]] = None,
                            region: Optional[pulumi.Input[Optional[str]]] = None,
                            route_table_id: Optional[pulumi.Input[str]] = None,
                            status: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAssociationsResult]:
    """
    Use this data source to get the list of associations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    route_table_id = config.require_object("routeTableId")
    test = huaweicloud.Er.get_associations(instance_id=instance_id,
        route_table_id=route_table_id)
    ```


    :param str attachment_id: Specifies the attachment ID corresponding to the association.
    :param str attachment_type: Specifies the attachment type corresponding to the association.
    :param str instance_id: Specifies the ER instance ID to which the association belongs.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str route_table_id: Specifies the route table ID to which the association belongs.
    :param str status: Specifies the status of the association. Default value is `available`.
           The valid values are as follows:
           + **available**
           + **failed**
    """
    ...
