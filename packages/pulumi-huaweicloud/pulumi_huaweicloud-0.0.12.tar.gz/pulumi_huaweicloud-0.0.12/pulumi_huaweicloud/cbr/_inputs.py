# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'PolicyBackupCycleArgs',
    'PolicyLongTermRetentionArgs',
    'VaultPolicyArgs',
    'VaultResourceArgs',
]

@pulumi.input_type
class PolicyBackupCycleArgs:
    def __init__(__self__, *,
                 execution_times: pulumi.Input[Sequence[pulumi.Input[str]]],
                 days: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] execution_times: Specifies the backup time. Automated backups will be triggered at the backup
               time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
               cannot be repeated. In the replication policy, you are advised to set one time point for one day.
        :param pulumi.Input[str] days: Specifies the weekly backup day of backup schedule.  
               It supports seven days a week (MO, TU, WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without
               spaces, between date and date during the configuration.
        :param pulumi.Input[int] interval: Specifies the interval (in days) of backup schedule.  
               The valid value ranges from `1` to `30`.
        """
        pulumi.set(__self__, "execution_times", execution_times)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter(name="executionTimes")
    def execution_times(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies the backup time. Automated backups will be triggered at the backup
        time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
        cannot be repeated. In the replication policy, you are advised to set one time point for one day.
        """
        return pulumi.get(self, "execution_times")

    @execution_times.setter
    def execution_times(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "execution_times", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the weekly backup day of backup schedule.  
        It supports seven days a week (MO, TU, WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without
        spaces, between date and date during the configuration.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the interval (in days) of backup schedule.  
        The valid value ranges from `1` to `30`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class PolicyLongTermRetentionArgs:
    def __init__(__self__, *,
                 daily: Optional[pulumi.Input[int]] = None,
                 full_backup_interval: Optional[pulumi.Input[int]] = None,
                 monthly: Optional[pulumi.Input[int]] = None,
                 weekly: Optional[pulumi.Input[int]] = None,
                 yearly: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] daily: - Specifies the latest backup of each day is saved in the long term.
        :param pulumi.Input[int] full_backup_interval: Specifies how often (after how many incremental backups) a full backup is
               performed. The valid value ranges from `-1` to `100`.
               If `-1` is specified, full backup will not be performed.
        :param pulumi.Input[int] monthly: - Specifies the latest backup of each month is saved in the long term.
        :param pulumi.Input[int] weekly: - Specifies the latest backup of each week is saved in the long term.
        :param pulumi.Input[int] yearly: - Specifies the latest backup of each year is saved in the long term.
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if full_backup_interval is not None:
            pulumi.set(__self__, "full_backup_interval", full_backup_interval)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)
        if yearly is not None:
            pulumi.set(__self__, "yearly", yearly)

    @property
    @pulumi.getter
    def daily(self) -> Optional[pulumi.Input[int]]:
        """
        - Specifies the latest backup of each day is saved in the long term.
        """
        return pulumi.get(self, "daily")

    @daily.setter
    def daily(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily", value)

    @property
    @pulumi.getter(name="fullBackupInterval")
    def full_backup_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how often (after how many incremental backups) a full backup is
        performed. The valid value ranges from `-1` to `100`.
        If `-1` is specified, full backup will not be performed.
        """
        return pulumi.get(self, "full_backup_interval")

    @full_backup_interval.setter
    def full_backup_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_backup_interval", value)

    @property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input[int]]:
        """
        - Specifies the latest backup of each month is saved in the long term.
        """
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly", value)

    @property
    @pulumi.getter
    def weekly(self) -> Optional[pulumi.Input[int]]:
        """
        - Specifies the latest backup of each week is saved in the long term.
        """
        return pulumi.get(self, "weekly")

    @weekly.setter
    def weekly(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weekly", value)

    @property
    @pulumi.getter
    def yearly(self) -> Optional[pulumi.Input[int]]:
        """
        - Specifies the latest backup of each year is saved in the long term.
        """
        return pulumi.get(self, "yearly")

    @yearly.setter
    def yearly(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yearly", value)


@pulumi.input_type
class VaultPolicyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 destination_vault_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Specifies the policy ID.
        :param pulumi.Input[str] destination_vault_id: Specifies the ID of destination vault to which the replication policy
               will associated.
        """
        pulumi.set(__self__, "id", id)
        if destination_vault_id is not None:
            pulumi.set(__self__, "destination_vault_id", destination_vault_id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Specifies the policy ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of destination vault to which the replication policy
        will associated.
        """
        return pulumi.get(self, "destination_vault_id")

    @destination_vault_id.setter
    def destination_vault_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_vault_id", value)


@pulumi.input_type
class VaultResourceArgs:
    def __init__(__self__, *,
                 excludes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excludes: Specifies the array of disk IDs which will be excluded in the backup.
               Only **server** vault support this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includes: Specifies the array of disk or SFS file system IDs which will be included in the backup.
               Only **disk** and **turbo** vault support this parameter.
        :param pulumi.Input[str] server_id: Specifies the ID of the ECS instance to be backed up.
        """
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter
    def excludes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the array of disk IDs which will be excluded in the backup.
        Only **server** vault support this parameter.
        """
        return pulumi.get(self, "excludes")

    @excludes.setter
    def excludes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excludes", value)

    @property
    @pulumi.getter
    def includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the array of disk or SFS file system IDs which will be included in the backup.
        Only **disk** and **turbo** vault support this parameter.
        """
        return pulumi.get(self, "includes")

    @includes.setter
    def includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "includes", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the ECS instance to be backed up.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)


