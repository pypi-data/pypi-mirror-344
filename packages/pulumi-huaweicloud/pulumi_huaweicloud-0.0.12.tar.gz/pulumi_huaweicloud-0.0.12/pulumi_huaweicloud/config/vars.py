# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

import types

__config__ = pulumi.Config('huaweicloud')


class _ExportableConfig(types.ModuleType):
    @property
    def access_key(self) -> Optional[str]:
        """
        The access key of the HuaweiCloud to use.
        """
        return __config__.get('accessKey')

    @property
    def agency_domain_name(self) -> Optional[str]:
        """
        The name of domain who created the agency (Identity v3).
        """
        return __config__.get('agencyDomainName')

    @property
    def agency_name(self) -> Optional[str]:
        """
        The name of agency
        """
        return __config__.get('agencyName')

    @property
    def assume_role(self) -> Optional[str]:
        return __config__.get('assumeRole')

    @property
    def auth_url(self) -> Optional[str]:
        """
        The Identity authentication URL.
        """
        return __config__.get('authUrl')

    @property
    def cacert_file(self) -> Optional[str]:
        """
        A Custom CA certificate.
        """
        return __config__.get('cacertFile')

    @property
    def cert(self) -> Optional[str]:
        """
        A client certificate to authenticate with.
        """
        return __config__.get('cert')

    @property
    def cloud(self) -> Optional[str]:
        """
        The endpoint of cloud provider, defaults to myhuaweicloud.com
        """
        return __config__.get('cloud')

    @property
    def delegated_project(self) -> Optional[str]:
        """
        The name of delegated project (Identity v3).
        """
        return __config__.get('delegatedProject')

    @property
    def domain_id(self) -> Optional[str]:
        """
        The ID of the Domain to scope to.
        """
        return __config__.get('domainId')

    @property
    def domain_name(self) -> Optional[str]:
        """
        The name of the Domain to scope to.
        """
        return __config__.get('domainName')

    @property
    def enable_force_new(self) -> Optional[bool]:
        """
        Whether to enable ForceNew
        """
        return __config__.get_bool('enableForceNew')

    @property
    def endpoints(self) -> Optional[str]:
        """
        The custom endpoints used to override the default endpoint URL.
        """
        return __config__.get('endpoints')

    @property
    def enterprise_project_id(self) -> Optional[str]:
        """
        enterprise project id
        """
        return __config__.get('enterpriseProjectId')

    @property
    def insecure(self) -> Optional[bool]:
        """
        Trust self-signed certificates.
        """
        return __config__.get_bool('insecure')

    @property
    def key(self) -> Optional[str]:
        """
        A client private key to authenticate with.
        """
        return __config__.get('key')

    @property
    def max_retries(self) -> Optional[int]:
        """
        How many times HTTP connection should be retried until giving up.
        """
        return __config__.get_int('maxRetries')

    @property
    def password(self) -> Optional[str]:
        """
        Password to login with.
        """
        return __config__.get('password')

    @property
    def profile(self) -> Optional[str]:
        """
        The profile name as set in the shared config file.
        """
        return __config__.get('profile')

    @property
    def project_id(self) -> Optional[str]:
        """
        The ID of the project to login with.
        """
        return __config__.get('projectId')

    @property
    def project_name(self) -> Optional[str]:
        """
        The name of the project to login with.
        """
        return __config__.get('projectName')

    @property
    def region(self) -> Optional[str]:
        """
        The HuaweiCloud region to connect to.
        """
        return __config__.get('region')

    @property
    def regional(self) -> Optional[bool]:
        """
        Whether the service endpoints are regional
        """
        return __config__.get_bool('regional')

    @property
    def secret_key(self) -> Optional[str]:
        """
        The secret key of the HuaweiCloud to use.
        """
        return __config__.get('secretKey')

    @property
    def security_token(self) -> Optional[str]:
        """
        The security token to authenticate with a temporary security credential.
        """
        return __config__.get('securityToken')

    @property
    def shared_config_file(self) -> Optional[str]:
        """
        The path to the shared config file. If not set, the default is ~/.hcloud/config.json.
        """
        return __config__.get('sharedConfigFile')

    @property
    def signing_algorithm(self) -> Optional[str]:
        """
        The signing algorithm for authentication
        """
        return __config__.get('signingAlgorithm')

    @property
    def skip_check_upgrade(self) -> Optional[bool]:
        """
        Whether to skip upgrade check
        """
        return __config__.get_bool('skipCheckUpgrade')

    @property
    def skip_check_website_type(self) -> Optional[bool]:
        """
        Whether to skip website type check
        """
        return __config__.get_bool('skipCheckWebsiteType')

    @property
    def tenant_id(self) -> Optional[str]:
        """
        The ID of the Tenant (Identity v2) to login with.
        """
        return __config__.get('tenantId')

    @property
    def tenant_name(self) -> Optional[str]:
        """
        The name of the Tenant (Identity v2) to login with.
        """
        return __config__.get('tenantName')

    @property
    def token(self) -> Optional[str]:
        """
        Authentication token to use as an alternative to username/password.
        """
        return __config__.get('token')

    @property
    def user_id(self) -> Optional[str]:
        """
        User ID to login with.
        """
        return __config__.get('userId')

    @property
    def user_name(self) -> Optional[str]:
        """
        Username to login with.
        """
        return __config__.get('userName')

