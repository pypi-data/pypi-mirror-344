# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClusterInstanceArgs',
    'JobConfigArgs',
]

@pulumi.input_type
class ClusterInstanceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 manage_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 traffic_ip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Instance ID.
        :param pulumi.Input[str] manage_ip: Management IP address.
        :param pulumi.Input[str] name: Specifies cluster name. Changing this parameter will create a new resource.
        :param pulumi.Input[str] private_ip: Private IP.
        :param pulumi.Input[str] public_ip: Public IP.
        :param pulumi.Input[str] role: Instance role.
        :param pulumi.Input[str] traffic_ip: Traffic IP.
        :param pulumi.Input[str] type: Instance type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manage_ip is not None:
            pulumi.set(__self__, "manage_ip", manage_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if traffic_ip is not None:
            pulumi.set(__self__, "traffic_ip", traffic_ip)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="manageIp")
    def manage_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Management IP address.
        """
        return pulumi.get(self, "manage_ip")

    @manage_ip.setter
    def manage_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manage_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies cluster name. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Private IP.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Instance role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="trafficIp")
    def traffic_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic IP.
        """
        return pulumi.get(self, "traffic_ip")

    @traffic_ip.setter
    def traffic_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Instance type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class JobConfigArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[str]] = None,
                 retry_type: Optional[pulumi.Input[str]] = None,
                 scheduler_cycle: Optional[pulumi.Input[int]] = None,
                 scheduler_cycle_type: Optional[pulumi.Input[str]] = None,
                 scheduler_disposable_type: Optional[pulumi.Input[str]] = None,
                 scheduler_enabled: Optional[pulumi.Input[bool]] = None,
                 scheduler_run_at: Optional[pulumi.Input[str]] = None,
                 scheduler_start_date: Optional[pulumi.Input[str]] = None,
                 scheduler_stop_date: Optional[pulumi.Input[str]] = None,
                 throttling_dirty_write_to_bucket: Optional[pulumi.Input[str]] = None,
                 throttling_dirty_write_to_directory: Optional[pulumi.Input[str]] = None,
                 throttling_dirty_write_to_link: Optional[pulumi.Input[str]] = None,
                 throttling_extractors_number: Optional[pulumi.Input[int]] = None,
                 throttling_loader_number: Optional[pulumi.Input[int]] = None,
                 throttling_max_error_records: Optional[pulumi.Input[int]] = None,
                 throttling_record_dirty_data: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] group_name: Specifies group to which a job belongs. The default group is `DEFAULT`.
        :param pulumi.Input[str] retry_type: Specifies whether to automatically retry if a job fails to be executed.
               The options are as follows:
               + **NONE**: Do not retry.
               + **RETRY_TRIPLE**: Retry three times.
        :param pulumi.Input[int] scheduler_cycle: Specifies cycle of a scheduled task. If `scheduler_cycle_type` is set to minute
               and `scheduler_cycle` is set to 10, the scheduled task is executed every 10 minutes.
        :param pulumi.Input[str] scheduler_cycle_type: Specifies cycle type of a scheduled task. The options are as follows:
               `minute`, `hour`, `day`, `week`, `month`.
        :param pulumi.Input[str] scheduler_disposable_type: Specifies whether to delete a job after the job is executed.
               The options are as follows:
               + **NONE**: The job will not be deleted after it is executed.
               + **DELETE_AFTER_SUCCEED**: The job will be deleted only after it is successfully executed. It is applicable to
               massive one-time jobs.
               + **DELETE**: The job will be deleted after it is executed, regardless of the execution result.
        :param pulumi.Input[bool] scheduler_enabled: Specifies whether to enable a scheduled task.  Default value is `false`.
        :param pulumi.Input[str] scheduler_run_at: Specifies time when a scheduled task is triggered in a cycle. This parameter
               is valid only when `scheduler_cycle_type` is set to `hour`, `week`, or `month`.
               + If `scheduler_cycle_type` is set to month, cycle is set to 1, and runAt is set to 15, the scheduled task is executed
               on the 15th day of each month. You can set runAt to multiple values and separate the values with commas (,).
               For example, if runAt is set to 1,2,3,4,5, the scheduled task is executed on the first day, second day, third day,
               fourth day, and fifth day of each month.
               + If `scheduler_cycle_type` is set to week and runAt is set to mon,tue,wed,thu,fri, the scheduled task is executed on
               Monday to Friday.
               + If `scheduler_cycle_type` is set to hour and runAt is set to 27,57, the scheduled task is executed at the 27th and
               57th minute in the cycle.
        :param pulumi.Input[str] scheduler_start_date: Specifies start time of a scheduled task.
               For example, `2018-01-24 19:56:19`
        :param pulumi.Input[str] scheduler_stop_date: Specifies End time of a scheduled task. For example, `2018-01-27 23:59:00`.
               If you do not set the end time, the scheduled task is always executed and will never stop.
        :param pulumi.Input[str] throttling_dirty_write_to_bucket: Specifies name of the OBS bucket to which dirty data is
               written. This parameter is valid only when dirty data is written to `OBS`.
        :param pulumi.Input[str] throttling_dirty_write_to_directory: Specifies the directory in the OBS bucket or HDFS which
               dirty data is written to. For example, `/data/dirtydata/`.
        :param pulumi.Input[str] throttling_dirty_write_to_link: Specifies the link name to which dirty data is written to.
               The Dirty data can be written only to `OBS` or `HDFS`.
        :param pulumi.Input[int] throttling_extractors_number: Specifies maximum number of concurrent extraction jobs.
        :param pulumi.Input[int] throttling_loader_number: Specifies maximum number of loading jobs. This parameter is available
               only when HBase or Hive serves as the destination data source.
        :param pulumi.Input[int] throttling_max_error_records: Specifies maximum number of error records in a single
               shard. When the number of error records of a map exceeds the upper limit, the task automatically ends.
        :param pulumi.Input[bool] throttling_record_dirty_data: Specifies whether to write dirty data.
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if retry_type is not None:
            pulumi.set(__self__, "retry_type", retry_type)
        if scheduler_cycle is not None:
            pulumi.set(__self__, "scheduler_cycle", scheduler_cycle)
        if scheduler_cycle_type is not None:
            pulumi.set(__self__, "scheduler_cycle_type", scheduler_cycle_type)
        if scheduler_disposable_type is not None:
            pulumi.set(__self__, "scheduler_disposable_type", scheduler_disposable_type)
        if scheduler_enabled is not None:
            pulumi.set(__self__, "scheduler_enabled", scheduler_enabled)
        if scheduler_run_at is not None:
            pulumi.set(__self__, "scheduler_run_at", scheduler_run_at)
        if scheduler_start_date is not None:
            pulumi.set(__self__, "scheduler_start_date", scheduler_start_date)
        if scheduler_stop_date is not None:
            pulumi.set(__self__, "scheduler_stop_date", scheduler_stop_date)
        if throttling_dirty_write_to_bucket is not None:
            pulumi.set(__self__, "throttling_dirty_write_to_bucket", throttling_dirty_write_to_bucket)
        if throttling_dirty_write_to_directory is not None:
            pulumi.set(__self__, "throttling_dirty_write_to_directory", throttling_dirty_write_to_directory)
        if throttling_dirty_write_to_link is not None:
            pulumi.set(__self__, "throttling_dirty_write_to_link", throttling_dirty_write_to_link)
        if throttling_extractors_number is not None:
            pulumi.set(__self__, "throttling_extractors_number", throttling_extractors_number)
        if throttling_loader_number is not None:
            pulumi.set(__self__, "throttling_loader_number", throttling_loader_number)
        if throttling_max_error_records is not None:
            pulumi.set(__self__, "throttling_max_error_records", throttling_max_error_records)
        if throttling_record_dirty_data is not None:
            pulumi.set(__self__, "throttling_record_dirty_data", throttling_record_dirty_data)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies group to which a job belongs. The default group is `DEFAULT`.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="retryType")
    def retry_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to automatically retry if a job fails to be executed.
        The options are as follows:
        + **NONE**: Do not retry.
        + **RETRY_TRIPLE**: Retry three times.
        """
        return pulumi.get(self, "retry_type")

    @retry_type.setter
    def retry_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retry_type", value)

    @property
    @pulumi.getter(name="schedulerCycle")
    def scheduler_cycle(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies cycle of a scheduled task. If `scheduler_cycle_type` is set to minute
        and `scheduler_cycle` is set to 10, the scheduled task is executed every 10 minutes.
        """
        return pulumi.get(self, "scheduler_cycle")

    @scheduler_cycle.setter
    def scheduler_cycle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scheduler_cycle", value)

    @property
    @pulumi.getter(name="schedulerCycleType")
    def scheduler_cycle_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies cycle type of a scheduled task. The options are as follows:
        `minute`, `hour`, `day`, `week`, `month`.
        """
        return pulumi.get(self, "scheduler_cycle_type")

    @scheduler_cycle_type.setter
    def scheduler_cycle_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_cycle_type", value)

    @property
    @pulumi.getter(name="schedulerDisposableType")
    def scheduler_disposable_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to delete a job after the job is executed.
        The options are as follows:
        + **NONE**: The job will not be deleted after it is executed.
        + **DELETE_AFTER_SUCCEED**: The job will be deleted only after it is successfully executed. It is applicable to
        massive one-time jobs.
        + **DELETE**: The job will be deleted after it is executed, regardless of the execution result.
        """
        return pulumi.get(self, "scheduler_disposable_type")

    @scheduler_disposable_type.setter
    def scheduler_disposable_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_disposable_type", value)

    @property
    @pulumi.getter(name="schedulerEnabled")
    def scheduler_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable a scheduled task.  Default value is `false`.
        """
        return pulumi.get(self, "scheduler_enabled")

    @scheduler_enabled.setter
    def scheduler_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scheduler_enabled", value)

    @property
    @pulumi.getter(name="schedulerRunAt")
    def scheduler_run_at(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies time when a scheduled task is triggered in a cycle. This parameter
        is valid only when `scheduler_cycle_type` is set to `hour`, `week`, or `month`.
        + If `scheduler_cycle_type` is set to month, cycle is set to 1, and runAt is set to 15, the scheduled task is executed
        on the 15th day of each month. You can set runAt to multiple values and separate the values with commas (,).
        For example, if runAt is set to 1,2,3,4,5, the scheduled task is executed on the first day, second day, third day,
        fourth day, and fifth day of each month.
        + If `scheduler_cycle_type` is set to week and runAt is set to mon,tue,wed,thu,fri, the scheduled task is executed on
        Monday to Friday.
        + If `scheduler_cycle_type` is set to hour and runAt is set to 27,57, the scheduled task is executed at the 27th and
        57th minute in the cycle.
        """
        return pulumi.get(self, "scheduler_run_at")

    @scheduler_run_at.setter
    def scheduler_run_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_run_at", value)

    @property
    @pulumi.getter(name="schedulerStartDate")
    def scheduler_start_date(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies start time of a scheduled task.
        For example, `2018-01-24 19:56:19`
        """
        return pulumi.get(self, "scheduler_start_date")

    @scheduler_start_date.setter
    def scheduler_start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_start_date", value)

    @property
    @pulumi.getter(name="schedulerStopDate")
    def scheduler_stop_date(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies End time of a scheduled task. For example, `2018-01-27 23:59:00`.
        If you do not set the end time, the scheduled task is always executed and will never stop.
        """
        return pulumi.get(self, "scheduler_stop_date")

    @scheduler_stop_date.setter
    def scheduler_stop_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_stop_date", value)

    @property
    @pulumi.getter(name="throttlingDirtyWriteToBucket")
    def throttling_dirty_write_to_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies name of the OBS bucket to which dirty data is
        written. This parameter is valid only when dirty data is written to `OBS`.
        """
        return pulumi.get(self, "throttling_dirty_write_to_bucket")

    @throttling_dirty_write_to_bucket.setter
    def throttling_dirty_write_to_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "throttling_dirty_write_to_bucket", value)

    @property
    @pulumi.getter(name="throttlingDirtyWriteToDirectory")
    def throttling_dirty_write_to_directory(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the directory in the OBS bucket or HDFS which
        dirty data is written to. For example, `/data/dirtydata/`.
        """
        return pulumi.get(self, "throttling_dirty_write_to_directory")

    @throttling_dirty_write_to_directory.setter
    def throttling_dirty_write_to_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "throttling_dirty_write_to_directory", value)

    @property
    @pulumi.getter(name="throttlingDirtyWriteToLink")
    def throttling_dirty_write_to_link(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the link name to which dirty data is written to.
        The Dirty data can be written only to `OBS` or `HDFS`.
        """
        return pulumi.get(self, "throttling_dirty_write_to_link")

    @throttling_dirty_write_to_link.setter
    def throttling_dirty_write_to_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "throttling_dirty_write_to_link", value)

    @property
    @pulumi.getter(name="throttlingExtractorsNumber")
    def throttling_extractors_number(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies maximum number of concurrent extraction jobs.
        """
        return pulumi.get(self, "throttling_extractors_number")

    @throttling_extractors_number.setter
    def throttling_extractors_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttling_extractors_number", value)

    @property
    @pulumi.getter(name="throttlingLoaderNumber")
    def throttling_loader_number(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies maximum number of loading jobs. This parameter is available
        only when HBase or Hive serves as the destination data source.
        """
        return pulumi.get(self, "throttling_loader_number")

    @throttling_loader_number.setter
    def throttling_loader_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttling_loader_number", value)

    @property
    @pulumi.getter(name="throttlingMaxErrorRecords")
    def throttling_max_error_records(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies maximum number of error records in a single
        shard. When the number of error records of a map exceeds the upper limit, the task automatically ends.
        """
        return pulumi.get(self, "throttling_max_error_records")

    @throttling_max_error_records.setter
    def throttling_max_error_records(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttling_max_error_records", value)

    @property
    @pulumi.getter(name="throttlingRecordDirtyData")
    def throttling_record_dirty_data(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to write dirty data.
        """
        return pulumi.get(self, "throttling_record_dirty_data")

    @throttling_record_dirty_data.setter
    def throttling_record_dirty_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttling_record_dirty_data", value)


