# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CassandraInstanceBackupStrategyArgs',
    'CassandraInstanceDatastoreArgs',
    'CassandraInstanceNodeArgs',
    'InfluxInstanceBackupStrategyArgs',
    'InfluxInstanceDatastoreArgs',
    'InfluxInstanceNodeArgs',
    'MongoInstanceBackupStrategyArgs',
    'MongoInstanceDatastoreArgs',
    'MongoInstanceNodeArgs',
    'RedisInstanceAvailabilityZoneDetailArgs',
    'RedisInstanceBackupStrategyArgs',
    'RedisInstanceDatastoreArgs',
    'RedisInstanceNodeArgs',
]

@pulumi.input_type
class CassandraInstanceBackupStrategyArgs:
    def __init__(__self__, *,
                 start_time: pulumi.Input[str],
                 keep_days: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
               HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
               value: 08:00-09:00, 03:00-04:00.
        :param pulumi.Input[int] keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               0 to 35. If this parameter is set to 0, the automated backup policy is not set. If this parameter is not transferred,
               the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
        HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
        value: 08:00-09:00, 03:00-04:00.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        0 to 35. If this parameter is set to 0, the automated backup policy is not set. If this parameter is not transferred,
        the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_days", value)


@pulumi.input_type
class CassandraInstanceDatastoreArgs:
    def __init__(__self__, *,
                 engine: pulumi.Input[str],
                 storage_engine: pulumi.Input[str],
                 version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] engine: Specifies the database engine. Only "GeminiDB-Cassandra" is supported now.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] storage_engine: Specifies the storage engine. Only "rocksDB" is supported now.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] version: Specifies the database version.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Input[str]:
        """
        Specifies the database engine. Only "GeminiDB-Cassandra" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> pulumi.Input[str]:
        """
        Specifies the storage engine. Only "rocksDB" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_engine")

    @storage_engine.setter
    def storage_engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_engine", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Specifies the database version.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class CassandraInstanceNodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 support_reduce: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] id: Indicates the node ID.
        :param pulumi.Input[str] name: Specifies the instance name, which can be the same as an existing instance name. The value
               must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only letters,
               digits, hyphens (-), and underscores (_).
        :param pulumi.Input[str] private_ip: Indicates the private IP address of a node.
        :param pulumi.Input[str] status: Indicates the node status.
        :param pulumi.Input[bool] support_reduce: Indicates whether the node support reduce or not.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_reduce is not None:
            pulumi.set(__self__, "support_reduce", support_reduce)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the instance name, which can be the same as an existing instance name. The value
        must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only letters,
        digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the node support reduce or not.
        """
        return pulumi.get(self, "support_reduce")

    @support_reduce.setter
    def support_reduce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_reduce", value)


@pulumi.input_type
class InfluxInstanceBackupStrategyArgs:
    def __init__(__self__, *,
                 start_time: pulumi.Input[str],
                 keep_days: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
               HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
               value: 08:00-09:00, 03:00-04:00.
        :param pulumi.Input[int] keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not
               transferred, the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
        HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
        value: 08:00-09:00, 03:00-04:00.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not
        transferred, the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_days", value)


@pulumi.input_type
class InfluxInstanceDatastoreArgs:
    def __init__(__self__, *,
                 engine: pulumi.Input[str],
                 storage_engine: pulumi.Input[str],
                 version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] engine: Specifies the database engine. Only **influxdb** is supported now.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] storage_engine: Specifies the storage engine. Only **rocksDB** is supported now.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] version: Specifies the database version.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Input[str]:
        """
        Specifies the database engine. Only **influxdb** is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> pulumi.Input[str]:
        """
        Specifies the storage engine. Only **rocksDB** is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_engine")

    @storage_engine.setter
    def storage_engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_engine", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Specifies the database version.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class InfluxInstanceNodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 support_reduce: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] id: Indicates the node ID.
        :param pulumi.Input[str] name: Specifies the instance name, which can be the same as an existing instance name. The
               value must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only
               letters, digits, hyphens (-), and underscores (_).
        :param pulumi.Input[str] private_ip: Indicates the private IP address of a node.
        :param pulumi.Input[str] status: Indicates the node status.
        :param pulumi.Input[bool] support_reduce: Indicates whether the node support reduce or not.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_reduce is not None:
            pulumi.set(__self__, "support_reduce", support_reduce)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the instance name, which can be the same as an existing instance name. The
        value must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only
        letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the node support reduce or not.
        """
        return pulumi.get(self, "support_reduce")

    @support_reduce.setter
    def support_reduce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_reduce", value)


@pulumi.input_type
class MongoInstanceBackupStrategyArgs:
    def __init__(__self__, *,
                 start_time: pulumi.Input[str],
                 keep_days: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
               HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
               value: 08:00-09:00, 03:00-04:00.
        :param pulumi.Input[int] keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not
               transferred, the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
        HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
        value: 08:00-09:00, 03:00-04:00.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not
        transferred, the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_days", value)


@pulumi.input_type
class MongoInstanceDatastoreArgs:
    def __init__(__self__, *,
                 engine: pulumi.Input[str],
                 storage_engine: pulumi.Input[str],
                 version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] engine: Specifies the database engine. Only **mongodb** is supported now.
        :param pulumi.Input[str] storage_engine: Specifies the storage engine. Only **rocksDB** is supported now.
        :param pulumi.Input[str] version: Specifies the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Input[str]:
        """
        Specifies the database engine. Only **mongodb** is supported now.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> pulumi.Input[str]:
        """
        Specifies the storage engine. Only **rocksDB** is supported now.
        """
        return pulumi.get(self, "storage_engine")

    @storage_engine.setter
    def storage_engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_engine", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Specifies the database version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MongoInstanceNodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 support_reduce: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] id: Indicates the node ID.
        :param pulumi.Input[str] name: Specifies the instance name, which can be the same as an existing instance name. The
               value must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only
               letters, digits, hyphens (-), and underscores (_).
        :param pulumi.Input[str] private_ip: Indicates the private IP address of a node.
        :param pulumi.Input[str] status: Indicates the node status.
        :param pulumi.Input[bool] support_reduce: Indicates whether the node support reduce or not.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_reduce is not None:
            pulumi.set(__self__, "support_reduce", support_reduce)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the instance name, which can be the same as an existing instance name. The
        value must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only
        letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the node support reduce or not.
        """
        return pulumi.get(self, "support_reduce")

    @support_reduce.setter
    def support_reduce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_reduce", value)


@pulumi.input_type
class RedisInstanceAvailabilityZoneDetailArgs:
    def __init__(__self__, *,
                 primary_availability_zone: pulumi.Input[str],
                 secondary_availability_zone: pulumi.Input[str]):
        """
        :param pulumi.Input[str] primary_availability_zone: Specifies the primary AZ, it must be a single AZ and be
               different from the standby AZ. Changing this parameter will create a new resource.
        :param pulumi.Input[str] secondary_availability_zone: Specifies the standby AZ, it must be a single AZ and be
               different from the primary AZ. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "primary_availability_zone", primary_availability_zone)
        pulumi.set(__self__, "secondary_availability_zone", secondary_availability_zone)

    @property
    @pulumi.getter(name="primaryAvailabilityZone")
    def primary_availability_zone(self) -> pulumi.Input[str]:
        """
        Specifies the primary AZ, it must be a single AZ and be
        different from the standby AZ. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "primary_availability_zone")

    @primary_availability_zone.setter
    def primary_availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_availability_zone", value)

    @property
    @pulumi.getter(name="secondaryAvailabilityZone")
    def secondary_availability_zone(self) -> pulumi.Input[str]:
        """
        Specifies the standby AZ, it must be a single AZ and be
        different from the primary AZ. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "secondary_availability_zone")

    @secondary_availability_zone.setter
    def secondary_availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "secondary_availability_zone", value)


@pulumi.input_type
class RedisInstanceBackupStrategyArgs:
    def __init__(__self__, *,
                 start_time: pulumi.Input[str],
                 keep_days: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
               HH value must be `1` greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
               value: **08:00-09:00**, **03:00-04:00**.
        :param pulumi.Input[int] keep_days: Specifies the number of days to retain the generated backup files. The value ranges from
               0 to 35. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not transferred,
               the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
        HH value must be `1` greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
        value: **08:00-09:00**, **03:00-04:00**.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days to retain the generated backup files. The value ranges from
        0 to 35. If this parameter is set to `0`, the automated backup policy is not set. If this parameter is not transferred,
        the automated backup policy is enabled by default. Backup files are stored for seven days by default.
        """
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_days", value)


@pulumi.input_type
class RedisInstanceDatastoreArgs:
    def __init__(__self__, *,
                 engine: pulumi.Input[str],
                 storage_engine: pulumi.Input[str],
                 version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] engine: Specifies the database engine. Only "redis" is supported now.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] storage_engine: Specifies the storage engine. Only "rocksDB" is supported now.
               Changing this parameter will create a new resource.
        :param pulumi.Input[str] version: Specifies the database version. Only "5.0" is supported now.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "storage_engine", storage_engine)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Input[str]:
        """
        Specifies the database engine. Only "redis" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> pulumi.Input[str]:
        """
        Specifies the storage engine. Only "rocksDB" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "storage_engine")

    @storage_engine.setter
    def storage_engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_engine", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Specifies the database version. Only "5.0" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RedisInstanceNodeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 support_reduce: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] id: Indicates the node ID.
        :param pulumi.Input[str] name: Specifies the instance name, which can be the same as an existing instance name. The value
               must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only letters,
               digits, hyphens (-), and underscores (_). Chinese characters must be in UTF-8 or Unicode format.
        :param pulumi.Input[str] private_ip: Indicates the private IP address of a node.
        :param pulumi.Input[str] public_ip: Indicates the public IP address of a node.
        :param pulumi.Input[str] status: Indicates the node status.
        :param pulumi.Input[bool] support_reduce: Indicates whether the node support reduce or not.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_reduce is not None:
            pulumi.set(__self__, "support_reduce", support_reduce)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the instance name, which can be the same as an existing instance name. The value
        must be `4` to `64` characters in length and start with a letter. It is case-sensitive and can contain only letters,
        digits, hyphens (-), and underscores (_). Chinese characters must be in UTF-8 or Unicode format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the public IP address of a node.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the node support reduce or not.
        """
        return pulumi.get(self, "support_reduce")

    @support_reduce.setter
    def support_reduce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_reduce", value)


