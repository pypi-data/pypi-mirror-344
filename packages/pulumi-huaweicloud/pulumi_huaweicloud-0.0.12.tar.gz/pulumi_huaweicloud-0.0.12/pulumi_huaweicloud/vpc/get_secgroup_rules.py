# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecgroupRulesResult',
    'AwaitableGetSecgroupRulesResult',
    'get_secgroup_rules',
    'get_secgroup_rules_output',
]

@pulumi.output_type
class GetSecgroupRulesResult:
    """
    A collection of values returned by getSecgroupRules.
    """
    def __init__(__self__, action=None, description=None, direction=None, id=None, protocol=None, region=None, remote_group_id=None, rule_id=None, rules=None, security_group_id=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if remote_group_id and not isinstance(remote_group_id, str):
            raise TypeError("Expected argument 'remote_group_id' to be a str")
        pulumi.set(__self__, "remote_group_id", remote_group_id)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if security_group_id and not isinstance(security_group_id, str):
            raise TypeError("Expected argument 'security_group_id' to be a str")
        pulumi.set(__self__, "security_group_id", security_group_id)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The effective policy of the security group rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the security group rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The direction of the security group rule.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The security group rule protocol type.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> Optional[str]:
        """
        The remote security group ID.  
        This field is mutually exclusive with `remote_ip_prefix` and `remote_address_group_id`.
        """
        return pulumi.get(self, "remote_group_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetSecgroupRulesRuleResult']:
        """
        All security group rules that match the filter parameters.
        The rules structure is documented below.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        The security group ID that the rule should belong to.
        """
        return pulumi.get(self, "security_group_id")


class AwaitableGetSecgroupRulesResult(GetSecgroupRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecgroupRulesResult(
            action=self.action,
            description=self.description,
            direction=self.direction,
            id=self.id,
            protocol=self.protocol,
            region=self.region,
            remote_group_id=self.remote_group_id,
            rule_id=self.rule_id,
            rules=self.rules,
            security_group_id=self.security_group_id)


def get_secgroup_rules(action: Optional[str] = None,
                       description: Optional[str] = None,
                       direction: Optional[str] = None,
                       protocol: Optional[str] = None,
                       region: Optional[str] = None,
                       remote_group_id: Optional[str] = None,
                       rule_id: Optional[str] = None,
                       security_group_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecgroupRulesResult:
    """
    Use this data source to get the list of the available HuaweiCloud security group rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    security_group_id = config.require_object("securityGroupId")
    test = huaweicloud.Vpc.get_secgroup_rules(security_group_id=security_group_id)
    ```


    :param str action: Specifies the effective policy of the security group rule used for query.  
           The valid values are as follows:
           + **allow**
           + **deny**
    :param str description: Specifies the security group rule description used for query.
    :param str direction: Specifies the direction of the security group rule used for query.  
           The valid values are as follows:
           + **ingress**
           + **egress**
    :param str protocol: Specifies the security group rule protocol type used for query.  
           The value can be **tcp**, **udp**, **icmp**, **icmpv6** or IP protocol number, if empty, it indicates support for
           all protocols.
    :param str region: Specifies the region in which to obtain the security group rules. If omitted, the
           provider-level region will be used.
    :param str remote_group_id: Specifies the remote security group ID used for query.
    :param str rule_id: Specifies the security group rule ID used for query.
    :param str security_group_id: Specifies the security group ID that the rule should belong to.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['description'] = description
    __args__['direction'] = direction
    __args__['protocol'] = protocol
    __args__['region'] = region
    __args__['remoteGroupId'] = remote_group_id
    __args__['ruleId'] = rule_id
    __args__['securityGroupId'] = security_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getSecgroupRules:getSecgroupRules', __args__, opts=opts, typ=GetSecgroupRulesResult).value

    return AwaitableGetSecgroupRulesResult(
        action=__ret__.action,
        description=__ret__.description,
        direction=__ret__.direction,
        id=__ret__.id,
        protocol=__ret__.protocol,
        region=__ret__.region,
        remote_group_id=__ret__.remote_group_id,
        rule_id=__ret__.rule_id,
        rules=__ret__.rules,
        security_group_id=__ret__.security_group_id)


@_utilities.lift_output_func(get_secgroup_rules)
def get_secgroup_rules_output(action: Optional[pulumi.Input[Optional[str]]] = None,
                              description: Optional[pulumi.Input[Optional[str]]] = None,
                              direction: Optional[pulumi.Input[Optional[str]]] = None,
                              protocol: Optional[pulumi.Input[Optional[str]]] = None,
                              region: Optional[pulumi.Input[Optional[str]]] = None,
                              remote_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                              rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                              security_group_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecgroupRulesResult]:
    """
    Use this data source to get the list of the available HuaweiCloud security group rules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    security_group_id = config.require_object("securityGroupId")
    test = huaweicloud.Vpc.get_secgroup_rules(security_group_id=security_group_id)
    ```


    :param str action: Specifies the effective policy of the security group rule used for query.  
           The valid values are as follows:
           + **allow**
           + **deny**
    :param str description: Specifies the security group rule description used for query.
    :param str direction: Specifies the direction of the security group rule used for query.  
           The valid values are as follows:
           + **ingress**
           + **egress**
    :param str protocol: Specifies the security group rule protocol type used for query.  
           The value can be **tcp**, **udp**, **icmp**, **icmpv6** or IP protocol number, if empty, it indicates support for
           all protocols.
    :param str region: Specifies the region in which to obtain the security group rules. If omitted, the
           provider-level region will be used.
    :param str remote_group_id: Specifies the remote security group ID used for query.
    :param str rule_id: Specifies the security group rule ID used for query.
    :param str security_group_id: Specifies the security group ID that the rule should belong to.
    """
    ...
