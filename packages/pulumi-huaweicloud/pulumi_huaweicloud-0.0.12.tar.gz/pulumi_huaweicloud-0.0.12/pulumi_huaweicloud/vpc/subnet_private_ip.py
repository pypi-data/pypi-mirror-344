# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SubnetPrivateIpArgs', 'SubnetPrivateIp']

@pulumi.input_type
class SubnetPrivateIpArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SubnetPrivateIp resource.
        :param pulumi.Input[str] subnet_id: Specifies the ID of the subnet to which the private IP belongs.
        :param pulumi.Input[str] ip_address: Specifies the IP address. The value must be an unused address
               within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the subnet to which the private IP belongs.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_force_new", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the IP address. The value must be an unused address
        within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SubnetPrivateIpState:
    def __init__(__self__, *,
                 device_owner: Optional[pulumi.Input[str]] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SubnetPrivateIp resources.
        :param pulumi.Input[str] device_owner: The resource using the private IP address. The parameter is left blank if it is not used.
        :param pulumi.Input[str] ip_address: Specifies the IP address. The value must be an unused address
               within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[str] status: The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
        :param pulumi.Input[str] subnet_id: Specifies the ID of the subnet to which the private IP belongs.
        """
        if device_owner is not None:
            pulumi.set(__self__, "device_owner", device_owner)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> Optional[pulumi.Input[str]]:
        """
        The resource using the private IP address. The parameter is left blank if it is not used.
        """
        return pulumi.get(self, "device_owner")

    @device_owner.setter
    def device_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_owner", value)

    @property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_force_new", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the IP address. The value must be an unused address
        within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the subnet to which the private IP belongs.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


class SubnetPrivateIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a VPC subnet private IP resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        subnet_id = config.require_object("subnetId")
        ip_address = config.require_object("ipAddress")
        test = huaweicloud.vpc.SubnetPrivateIp("test",
            subnet_id=subnet_id,
            ip_address=ip_address)
        ```

        ## Import

        The private IP can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Vpc/subnetPrivateIp:SubnetPrivateIp test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ip_address: Specifies the IP address. The value must be an unused address
               within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[str] subnet_id: Specifies the ID of the subnet to which the private IP belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubnetPrivateIpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a VPC subnet private IP resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        subnet_id = config.require_object("subnetId")
        ip_address = config.require_object("ipAddress")
        test = huaweicloud.vpc.SubnetPrivateIp("test",
            subnet_id=subnet_id,
            ip_address=ip_address)
        ```

        ## Import

        The private IP can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Vpc/subnetPrivateIp:SubnetPrivateIp test <id>
        ```

        :param str resource_name: The name of the resource.
        :param SubnetPrivateIpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubnetPrivateIpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubnetPrivateIpArgs.__new__(SubnetPrivateIpArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["region"] = region
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["device_owner"] = None
            __props__.__dict__["status"] = None
        super(SubnetPrivateIp, __self__).__init__(
            'huaweicloud:Vpc/subnetPrivateIp:SubnetPrivateIp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device_owner: Optional[pulumi.Input[str]] = None,
            enable_force_new: Optional[pulumi.Input[str]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None) -> 'SubnetPrivateIp':
        """
        Get an existing SubnetPrivateIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device_owner: The resource using the private IP address. The parameter is left blank if it is not used.
        :param pulumi.Input[str] ip_address: Specifies the IP address. The value must be an unused address
               within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[str] status: The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
        :param pulumi.Input[str] subnet_id: Specifies the ID of the subnet to which the private IP belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubnetPrivateIpState.__new__(_SubnetPrivateIpState)

        __props__.__dict__["device_owner"] = device_owner
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        return SubnetPrivateIp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deviceOwner")
    def device_owner(self) -> pulumi.Output[str]:
        """
        The resource using the private IP address. The parameter is left blank if it is not used.
        """
        return pulumi.get(self, "device_owner")

    @property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "enable_force_new")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        Specifies the IP address. The value must be an unused address
        within the subnet cidr. If it is not specified, the system automatically assigns an IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the private IP address. Possible values are **ACTIVE** and **DOWN**.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the subnet to which the private IP belongs.
        """
        return pulumi.get(self, "subnet_id")

