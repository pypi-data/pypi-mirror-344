# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSubnetIdsResult',
    'AwaitableGetSubnetIdsResult',
    'get_subnet_ids',
    'get_subnet_ids_output',
]

@pulumi.output_type
class GetSubnetIdsResult:
    """
    A collection of values returned by getSubnetIds.
    """
    def __init__(__self__, id=None, ids=None, region=None, vpc_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        A set of all the subnet ids found. This data source will fail if none are found.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


class AwaitableGetSubnetIdsResult(GetSubnetIdsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubnetIdsResult(
            id=self.id,
            ids=self.ids,
            region=self.region,
            vpc_id=self.vpc_id)


def get_subnet_ids(region: Optional[str] = None,
                   vpc_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubnetIdsResult:
    """
    Provides a list of subnet ids for a vpc.

    This resource can be useful for getting back a list of subnet ids for a vpc.


    :param str region: The region in which to obtain the subnet ids. If omitted, the provider-level region will
           be used.
    :param str vpc_id: Specifies the VPC ID used as the query filter.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getSubnetIds:getSubnetIds', __args__, opts=opts, typ=GetSubnetIdsResult).value

    return AwaitableGetSubnetIdsResult(
        id=__ret__.id,
        ids=__ret__.ids,
        region=__ret__.region,
        vpc_id=__ret__.vpc_id)


@_utilities.lift_output_func(get_subnet_ids)
def get_subnet_ids_output(region: Optional[pulumi.Input[Optional[str]]] = None,
                          vpc_id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubnetIdsResult]:
    """
    Provides a list of subnet ids for a vpc.

    This resource can be useful for getting back a list of subnet ids for a vpc.


    :param str region: The region in which to obtain the subnet ids. If omitted, the provider-level region will
           be used.
    :param str vpc_id: Specifies the VPC ID used as the query filter.
    """
    ...
