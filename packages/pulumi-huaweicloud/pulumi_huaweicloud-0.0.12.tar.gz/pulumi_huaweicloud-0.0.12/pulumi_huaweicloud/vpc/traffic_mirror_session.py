# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TrafficMirrorSessionArgs', 'TrafficMirrorSession']

@pulumi.input_type
class TrafficMirrorSessionArgs:
    def __init__(__self__, *,
                 priority: pulumi.Input[int],
                 traffic_mirror_filter_id: pulumi.Input[str],
                 traffic_mirror_sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 traffic_mirror_target_id: pulumi.Input[str],
                 traffic_mirror_target_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_length: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 virtual_network_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a TrafficMirrorSession resource.
        :param pulumi.Input[int] priority: Specifies the mirror session priority. The value range is **1-32766**.
               A smaller value indicates a higher priority.
        :param pulumi.Input[str] traffic_mirror_filter_id: Specifies the traffic mirror filter ID used in the session.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_mirror_sources: Specifies the mirror source IDs.
               An elastic network interface can be used as a mirror source.
        :param pulumi.Input[str] traffic_mirror_target_id: Specifies the mirror target ID.
        :param pulumi.Input[str] traffic_mirror_target_type: Specifies the mirror target type. The value can be:
               + **eni**: elastic network interface;
               + **elb**: private network load balancer;
        :param pulumi.Input[str] description: Specifies the description of the traffic mirror session.
        :param pulumi.Input[bool] enabled: Specifies whether the mirror session is enabled. Defaults to **true**.
        :param pulumi.Input[str] name: Specifies the name of the traffic mirror session.
        :param pulumi.Input[int] packet_length: Specifies the maximum transmission unit (MTU).
               The valid value is range from `1` to `1,460`, defaults to `96`.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[str] type: Specifies the mirror source type. The value can be **eni**(elastic network interface).
        :param pulumi.Input[int] virtual_network_id: Specifies the VNI, which is used to distinguish mirrored traffic of
               different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
        """
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        pulumi.set(__self__, "traffic_mirror_sources", traffic_mirror_sources)
        pulumi.set(__self__, "traffic_mirror_target_id", traffic_mirror_target_id)
        pulumi.set(__self__, "traffic_mirror_target_type", traffic_mirror_target_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_network_id is not None:
            pulumi.set(__self__, "virtual_network_id", virtual_network_id)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        Specifies the mirror session priority. The value range is **1-32766**.
        A smaller value indicates a higher priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> pulumi.Input[str]:
        """
        Specifies the traffic mirror filter ID used in the session.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @traffic_mirror_filter_id.setter
    def traffic_mirror_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "traffic_mirror_filter_id", value)

    @property
    @pulumi.getter(name="trafficMirrorSources")
    def traffic_mirror_sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies the mirror source IDs.
        An elastic network interface can be used as a mirror source.
        """
        return pulumi.get(self, "traffic_mirror_sources")

    @traffic_mirror_sources.setter
    def traffic_mirror_sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "traffic_mirror_sources", value)

    @property
    @pulumi.getter(name="trafficMirrorTargetId")
    def traffic_mirror_target_id(self) -> pulumi.Input[str]:
        """
        Specifies the mirror target ID.
        """
        return pulumi.get(self, "traffic_mirror_target_id")

    @traffic_mirror_target_id.setter
    def traffic_mirror_target_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "traffic_mirror_target_id", value)

    @property
    @pulumi.getter(name="trafficMirrorTargetType")
    def traffic_mirror_target_type(self) -> pulumi.Input[str]:
        """
        Specifies the mirror target type. The value can be:
        + **eni**: elastic network interface;
        + **elb**: private network load balancer;
        """
        return pulumi.get(self, "traffic_mirror_target_type")

    @traffic_mirror_target_type.setter
    def traffic_mirror_target_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "traffic_mirror_target_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the traffic mirror session.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the mirror session is enabled. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the traffic mirror session.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum transmission unit (MTU).
        The valid value is range from `1` to `1,460`, defaults to `96`.
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_length", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the mirror source type. The value can be **eni**(elastic network interface).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the VNI, which is used to distinguish mirrored traffic of
        different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
        """
        return pulumi.get(self, "virtual_network_id")

    @virtual_network_id.setter
    def virtual_network_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_network_id", value)


@pulumi.input_type
class _TrafficMirrorSessionState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_length: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_filter_id: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_mirror_target_id: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_target_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 virtual_network_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering TrafficMirrorSession resources.
        :param pulumi.Input[str] created_at: The creation time of the traffic mirror session.
        :param pulumi.Input[str] description: Specifies the description of the traffic mirror session.
        :param pulumi.Input[bool] enabled: Specifies whether the mirror session is enabled. Defaults to **true**.
        :param pulumi.Input[str] name: Specifies the name of the traffic mirror session.
        :param pulumi.Input[int] packet_length: Specifies the maximum transmission unit (MTU).
               The valid value is range from `1` to `1,460`, defaults to `96`.
        :param pulumi.Input[int] priority: Specifies the mirror session priority. The value range is **1-32766**.
               A smaller value indicates a higher priority.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[str] traffic_mirror_filter_id: Specifies the traffic mirror filter ID used in the session.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_mirror_sources: Specifies the mirror source IDs.
               An elastic network interface can be used as a mirror source.
        :param pulumi.Input[str] traffic_mirror_target_id: Specifies the mirror target ID.
        :param pulumi.Input[str] traffic_mirror_target_type: Specifies the mirror target type. The value can be:
               + **eni**: elastic network interface;
               + **elb**: private network load balancer;
        :param pulumi.Input[str] type: Specifies the mirror source type. The value can be **eni**(elastic network interface).
        :param pulumi.Input[str] updated_at: The latest update time of the traffic mirror session.
        :param pulumi.Input[int] virtual_network_id: Specifies the VNI, which is used to distinguish mirrored traffic of
               different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if traffic_mirror_filter_id is not None:
            pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        if traffic_mirror_sources is not None:
            pulumi.set(__self__, "traffic_mirror_sources", traffic_mirror_sources)
        if traffic_mirror_target_id is not None:
            pulumi.set(__self__, "traffic_mirror_target_id", traffic_mirror_target_id)
        if traffic_mirror_target_type is not None:
            pulumi.set(__self__, "traffic_mirror_target_type", traffic_mirror_target_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if virtual_network_id is not None:
            pulumi.set(__self__, "virtual_network_id", virtual_network_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the traffic mirror session.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the traffic mirror session.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the mirror session is enabled. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the traffic mirror session.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum transmission unit (MTU).
        The valid value is range from `1` to `1,460`, defaults to `96`.
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_length", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the mirror session priority. The value range is **1-32766**.
        A smaller value indicates a higher priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the traffic mirror filter ID used in the session.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @traffic_mirror_filter_id.setter
    def traffic_mirror_filter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_mirror_filter_id", value)

    @property
    @pulumi.getter(name="trafficMirrorSources")
    def traffic_mirror_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the mirror source IDs.
        An elastic network interface can be used as a mirror source.
        """
        return pulumi.get(self, "traffic_mirror_sources")

    @traffic_mirror_sources.setter
    def traffic_mirror_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "traffic_mirror_sources", value)

    @property
    @pulumi.getter(name="trafficMirrorTargetId")
    def traffic_mirror_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the mirror target ID.
        """
        return pulumi.get(self, "traffic_mirror_target_id")

    @traffic_mirror_target_id.setter
    def traffic_mirror_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_mirror_target_id", value)

    @property
    @pulumi.getter(name="trafficMirrorTargetType")
    def traffic_mirror_target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the mirror target type. The value can be:
        + **eni**: elastic network interface;
        + **elb**: private network load balancer;
        """
        return pulumi.get(self, "traffic_mirror_target_type")

    @traffic_mirror_target_type.setter
    def traffic_mirror_target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_mirror_target_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the mirror source type. The value can be **eni**(elastic network interface).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The latest update time of the traffic mirror session.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the VNI, which is used to distinguish mirrored traffic of
        different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
        """
        return pulumi.get(self, "virtual_network_id")

    @virtual_network_id.setter
    def virtual_network_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_network_id", value)


class TrafficMirrorSession(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_length: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_filter_id: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_mirror_target_id: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_target_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 virtual_network_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Manages a VPC traffic mirror session resource within HuaweiCloud.

        ## Import

        The traffic mirror session can be imported using `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Vpc/trafficMirrorSession:TrafficMirrorSession test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Specifies the description of the traffic mirror session.
        :param pulumi.Input[bool] enabled: Specifies whether the mirror session is enabled. Defaults to **true**.
        :param pulumi.Input[str] name: Specifies the name of the traffic mirror session.
        :param pulumi.Input[int] packet_length: Specifies the maximum transmission unit (MTU).
               The valid value is range from `1` to `1,460`, defaults to `96`.
        :param pulumi.Input[int] priority: Specifies the mirror session priority. The value range is **1-32766**.
               A smaller value indicates a higher priority.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[str] traffic_mirror_filter_id: Specifies the traffic mirror filter ID used in the session.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_mirror_sources: Specifies the mirror source IDs.
               An elastic network interface can be used as a mirror source.
        :param pulumi.Input[str] traffic_mirror_target_id: Specifies the mirror target ID.
        :param pulumi.Input[str] traffic_mirror_target_type: Specifies the mirror target type. The value can be:
               + **eni**: elastic network interface;
               + **elb**: private network load balancer;
        :param pulumi.Input[str] type: Specifies the mirror source type. The value can be **eni**(elastic network interface).
        :param pulumi.Input[int] virtual_network_id: Specifies the VNI, which is used to distinguish mirrored traffic of
               different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TrafficMirrorSessionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a VPC traffic mirror session resource within HuaweiCloud.

        ## Import

        The traffic mirror session can be imported using `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Vpc/trafficMirrorSession:TrafficMirrorSession test <id>
        ```

        :param str resource_name: The name of the resource.
        :param TrafficMirrorSessionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrafficMirrorSessionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_length: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_filter_id: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_mirror_target_id: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_target_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 virtual_network_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrafficMirrorSessionArgs.__new__(TrafficMirrorSessionArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["packet_length"] = packet_length
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__.__dict__["priority"] = priority
            __props__.__dict__["region"] = region
            if traffic_mirror_filter_id is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_mirror_filter_id'")
            __props__.__dict__["traffic_mirror_filter_id"] = traffic_mirror_filter_id
            if traffic_mirror_sources is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_mirror_sources'")
            __props__.__dict__["traffic_mirror_sources"] = traffic_mirror_sources
            if traffic_mirror_target_id is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_mirror_target_id'")
            __props__.__dict__["traffic_mirror_target_id"] = traffic_mirror_target_id
            if traffic_mirror_target_type is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_mirror_target_type'")
            __props__.__dict__["traffic_mirror_target_type"] = traffic_mirror_target_type
            __props__.__dict__["type"] = type
            __props__.__dict__["virtual_network_id"] = virtual_network_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(TrafficMirrorSession, __self__).__init__(
            'huaweicloud:Vpc/trafficMirrorSession:TrafficMirrorSession',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            packet_length: Optional[pulumi.Input[int]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            region: Optional[pulumi.Input[str]] = None,
            traffic_mirror_filter_id: Optional[pulumi.Input[str]] = None,
            traffic_mirror_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            traffic_mirror_target_id: Optional[pulumi.Input[str]] = None,
            traffic_mirror_target_type: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            virtual_network_id: Optional[pulumi.Input[int]] = None) -> 'TrafficMirrorSession':
        """
        Get an existing TrafficMirrorSession resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The creation time of the traffic mirror session.
        :param pulumi.Input[str] description: Specifies the description of the traffic mirror session.
        :param pulumi.Input[bool] enabled: Specifies whether the mirror session is enabled. Defaults to **true**.
        :param pulumi.Input[str] name: Specifies the name of the traffic mirror session.
        :param pulumi.Input[int] packet_length: Specifies the maximum transmission unit (MTU).
               The valid value is range from `1` to `1,460`, defaults to `96`.
        :param pulumi.Input[int] priority: Specifies the mirror session priority. The value range is **1-32766**.
               A smaller value indicates a higher priority.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[str] traffic_mirror_filter_id: Specifies the traffic mirror filter ID used in the session.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_mirror_sources: Specifies the mirror source IDs.
               An elastic network interface can be used as a mirror source.
        :param pulumi.Input[str] traffic_mirror_target_id: Specifies the mirror target ID.
        :param pulumi.Input[str] traffic_mirror_target_type: Specifies the mirror target type. The value can be:
               + **eni**: elastic network interface;
               + **elb**: private network load balancer;
        :param pulumi.Input[str] type: Specifies the mirror source type. The value can be **eni**(elastic network interface).
        :param pulumi.Input[str] updated_at: The latest update time of the traffic mirror session.
        :param pulumi.Input[int] virtual_network_id: Specifies the VNI, which is used to distinguish mirrored traffic of
               different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TrafficMirrorSessionState.__new__(_TrafficMirrorSessionState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["packet_length"] = packet_length
        __props__.__dict__["priority"] = priority
        __props__.__dict__["region"] = region
        __props__.__dict__["traffic_mirror_filter_id"] = traffic_mirror_filter_id
        __props__.__dict__["traffic_mirror_sources"] = traffic_mirror_sources
        __props__.__dict__["traffic_mirror_target_id"] = traffic_mirror_target_id
        __props__.__dict__["traffic_mirror_target_type"] = traffic_mirror_target_type
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["virtual_network_id"] = virtual_network_id
        return TrafficMirrorSession(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The creation time of the traffic mirror session.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the description of the traffic mirror session.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the mirror session is enabled. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the traffic mirror session.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> pulumi.Output[int]:
        """
        Specifies the maximum transmission unit (MTU).
        The valid value is range from `1` to `1,460`, defaults to `96`.
        """
        return pulumi.get(self, "packet_length")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Specifies the mirror session priority. The value range is **1-32766**.
        A smaller value indicates a higher priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> pulumi.Output[str]:
        """
        Specifies the traffic mirror filter ID used in the session.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @property
    @pulumi.getter(name="trafficMirrorSources")
    def traffic_mirror_sources(self) -> pulumi.Output[Sequence[str]]:
        """
        Specifies the mirror source IDs.
        An elastic network interface can be used as a mirror source.
        """
        return pulumi.get(self, "traffic_mirror_sources")

    @property
    @pulumi.getter(name="trafficMirrorTargetId")
    def traffic_mirror_target_id(self) -> pulumi.Output[str]:
        """
        Specifies the mirror target ID.
        """
        return pulumi.get(self, "traffic_mirror_target_id")

    @property
    @pulumi.getter(name="trafficMirrorTargetType")
    def traffic_mirror_target_type(self) -> pulumi.Output[str]:
        """
        Specifies the mirror target type. The value can be:
        + **eni**: elastic network interface;
        + **elb**: private network load balancer;
        """
        return pulumi.get(self, "traffic_mirror_target_type")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Specifies the mirror source type. The value can be **eni**(elastic network interface).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The latest update time of the traffic mirror session.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> pulumi.Output[int]:
        """
        Specifies the VNI, which is used to distinguish mirrored traffic of
        different sessions. The valid value is range from `0` to `16,777,215`, defaults to `1`.
        """
        return pulumi.get(self, "virtual_network_id")

