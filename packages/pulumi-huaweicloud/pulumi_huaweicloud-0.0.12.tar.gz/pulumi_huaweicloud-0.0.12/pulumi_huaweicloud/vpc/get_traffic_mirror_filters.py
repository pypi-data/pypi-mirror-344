# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTrafficMirrorFiltersResult',
    'AwaitableGetTrafficMirrorFiltersResult',
    'get_traffic_mirror_filters',
    'get_traffic_mirror_filters_output',
]

@pulumi.output_type
class GetTrafficMirrorFiltersResult:
    """
    A collection of values returned by getTrafficMirrorFilters.
    """
    def __init__(__self__, id=None, name=None, region=None, traffic_mirror_filter_id=None, traffic_mirror_filters=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if traffic_mirror_filter_id and not isinstance(traffic_mirror_filter_id, str):
            raise TypeError("Expected argument 'traffic_mirror_filter_id' to be a str")
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        if traffic_mirror_filters and not isinstance(traffic_mirror_filters, list):
            raise TypeError("Expected argument 'traffic_mirror_filters' to be a list")
        pulumi.set(__self__, "traffic_mirror_filters", traffic_mirror_filters)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Traffic mirror filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> Optional[str]:
        """
        Traffic mirror filter ID.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @property
    @pulumi.getter(name="trafficMirrorFilters")
    def traffic_mirror_filters(self) -> Sequence['outputs.GetTrafficMirrorFiltersTrafficMirrorFilterResult']:
        """
        List of traffic mirror filters.
        """
        return pulumi.get(self, "traffic_mirror_filters")


class AwaitableGetTrafficMirrorFiltersResult(GetTrafficMirrorFiltersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficMirrorFiltersResult(
            id=self.id,
            name=self.name,
            region=self.region,
            traffic_mirror_filter_id=self.traffic_mirror_filter_id,
            traffic_mirror_filters=self.traffic_mirror_filters)


def get_traffic_mirror_filters(name: Optional[str] = None,
                               region: Optional[str] = None,
                               traffic_mirror_filter_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficMirrorFiltersResult:
    """
    Use this data source to get the traffic mirror filters.

    ## Example Usage
    ### query traffic mirror filter list

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    filter_test1 = huaweicloud.Vpc.get_traffic_mirror_filters()
    ```
    ### query traffic mirror filter by name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    filter_test2 = huaweicloud.Vpc.get_traffic_mirror_filters(name="test-filter")
    ```


    :param str name: Specifies the name of the traffic mirror filter.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str traffic_mirror_filter_id: Specifies the ID of the traffic mirror filter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['trafficMirrorFilterId'] = traffic_mirror_filter_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getTrafficMirrorFilters:getTrafficMirrorFilters', __args__, opts=opts, typ=GetTrafficMirrorFiltersResult).value

    return AwaitableGetTrafficMirrorFiltersResult(
        id=__ret__.id,
        name=__ret__.name,
        region=__ret__.region,
        traffic_mirror_filter_id=__ret__.traffic_mirror_filter_id,
        traffic_mirror_filters=__ret__.traffic_mirror_filters)


@_utilities.lift_output_func(get_traffic_mirror_filters)
def get_traffic_mirror_filters_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                                      region: Optional[pulumi.Input[Optional[str]]] = None,
                                      traffic_mirror_filter_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTrafficMirrorFiltersResult]:
    """
    Use this data source to get the traffic mirror filters.

    ## Example Usage
    ### query traffic mirror filter list

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    filter_test1 = huaweicloud.Vpc.get_traffic_mirror_filters()
    ```
    ### query traffic mirror filter by name

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    filter_test2 = huaweicloud.Vpc.get_traffic_mirror_filters(name="test-filter")
    ```


    :param str name: Specifies the name of the traffic mirror filter.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param str traffic_mirror_filter_id: Specifies the ID of the traffic mirror filter.
    """
    ...
