# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSubnetIpAvailabilitiesResult',
    'AwaitableGetSubnetIpAvailabilitiesResult',
    'get_subnet_ip_availabilities',
    'get_subnet_ip_availabilities_output',
]

@pulumi.output_type
class GetSubnetIpAvailabilitiesResult:
    """
    A collection of values returned by getSubnetIpAvailabilities.
    """
    def __init__(__self__, id=None, network_id=None, network_ip_availabilities=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if network_ip_availabilities and not isinstance(network_ip_availabilities, list):
            raise TypeError("Expected argument 'network_ip_availabilities' to be a list")
        pulumi.set(__self__, "network_ip_availabilities", network_ip_availabilities)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        The network ID.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="networkIpAvailabilities")
    def network_ip_availabilities(self) -> Sequence['outputs.GetSubnetIpAvailabilitiesNetworkIpAvailabilityResult']:
        """
        The network IP address usage objects.
        """
        return pulumi.get(self, "network_ip_availabilities")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


class AwaitableGetSubnetIpAvailabilitiesResult(GetSubnetIpAvailabilitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubnetIpAvailabilitiesResult(
            id=self.id,
            network_id=self.network_id,
            network_ip_availabilities=self.network_ip_availabilities,
            region=self.region)


def get_subnet_ip_availabilities(network_id: Optional[str] = None,
                                 region: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubnetIpAvailabilitiesResult:
    """
    Use this data source to get IP availabilities of a subnet.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    network_id = config.require_object("networkId")
    test = huaweicloud.Vpc.get_subnet_ip_availabilities(network_id=network_id)
    ```


    :param str network_id: Specifies the subnet ID.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['networkId'] = network_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Vpc/getSubnetIpAvailabilities:getSubnetIpAvailabilities', __args__, opts=opts, typ=GetSubnetIpAvailabilitiesResult).value

    return AwaitableGetSubnetIpAvailabilitiesResult(
        id=__ret__.id,
        network_id=__ret__.network_id,
        network_ip_availabilities=__ret__.network_ip_availabilities,
        region=__ret__.region)


@_utilities.lift_output_func(get_subnet_ip_availabilities)
def get_subnet_ip_availabilities_output(network_id: Optional[pulumi.Input[str]] = None,
                                        region: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubnetIpAvailabilitiesResult]:
    """
    Use this data source to get IP availabilities of a subnet.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    network_id = config.require_object("networkId")
    test = huaweicloud.Vpc.get_subnet_ip_availabilities(network_id=network_id)
    ```


    :param str network_id: Specifies the subnet ID.
    :param str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    ...
