# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkAclArgs', 'NetworkAcl']

@pulumi.input_type
class NetworkAclArgs:
    def __init__(__self__, *,
                 associated_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclAssociatedSubnetArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclEgressRuleArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclIngressRuleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a NetworkAcl resource.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAclAssociatedSubnetArgs']]] associated_subnets: Specifies the associated subnets of the network ACL.
               The associated_subnets structure is documented below.
        :param pulumi.Input[str] description: Specifies the network ACL rule description. The value can contain no more
               than 255 characters. The value cannot contain angle brackets (< or >).
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAclEgressRuleArgs']]] egress_rules: Specifies the egress rules of the network ACL.
               The rules structure is documented below.
        :param pulumi.Input[bool] enabled: Specifies whether the network ACL is enabled. The default value is **true**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the network ACL.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAclIngressRuleArgs']]] ingress_rules: Specifies the ingress rules of the network ACL.
               The rules structure is documented below.
        :param pulumi.Input[str] name: Specifies the network ACL rule name. The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the network ACL.
        """
        if associated_subnets is not None:
            pulumi.set(__self__, "associated_subnets", associated_subnets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egress_rules is not None:
            pulumi.set(__self__, "egress_rules", egress_rules)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if ingress_rules is not None:
            pulumi.set(__self__, "ingress_rules", ingress_rules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="associatedSubnets")
    def associated_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclAssociatedSubnetArgs']]]]:
        """
        Specifies the associated subnets of the network ACL.
        The associated_subnets structure is documented below.
        """
        return pulumi.get(self, "associated_subnets")

    @associated_subnets.setter
    def associated_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclAssociatedSubnetArgs']]]]):
        pulumi.set(self, "associated_subnets", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the network ACL rule description. The value can contain no more
        than 255 characters. The value cannot contain angle brackets (< or >).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="egressRules")
    def egress_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclEgressRuleArgs']]]]:
        """
        Specifies the egress rules of the network ACL.
        The rules structure is documented below.
        """
        return pulumi.get(self, "egress_rules")

    @egress_rules.setter
    def egress_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclEgressRuleArgs']]]]):
        pulumi.set(self, "egress_rules", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the network ACL is enabled. The default value is **true**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the network ACL.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="ingressRules")
    def ingress_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclIngressRuleArgs']]]]:
        """
        Specifies the ingress rules of the network ACL.
        The rules structure is documented below.
        """
        return pulumi.get(self, "ingress_rules")

    @ingress_rules.setter
    def ingress_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclIngressRuleArgs']]]]):
        pulumi.set(self, "ingress_rules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the network ACL rule name. The value can contain no more than 64 characters,
        including letters, digits, underscores (_), hyphens (-), and periods (.).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the network ACL.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _NetworkAclState:
    def __init__(__self__, *,
                 associated_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclAssociatedSubnetArgs']]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclEgressRuleArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclIngressRuleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkAcl resources.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAclAssociatedSubnetArgs']]] associated_subnets: Specifies the associated subnets of the network ACL.
               The associated_subnets structure is documented below.
        :param pulumi.Input[str] created_at: The created time of the ACL.
        :param pulumi.Input[str] description: Specifies the network ACL rule description. The value can contain no more
               than 255 characters. The value cannot contain angle brackets (< or >).
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAclEgressRuleArgs']]] egress_rules: Specifies the egress rules of the network ACL.
               The rules structure is documented below.
        :param pulumi.Input[bool] enabled: Specifies whether the network ACL is enabled. The default value is **true**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the network ACL.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAclIngressRuleArgs']]] ingress_rules: Specifies the ingress rules of the network ACL.
               The rules structure is documented below.
        :param pulumi.Input[str] name: Specifies the network ACL rule name. The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[str] status: The status of the ACL.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the network ACL.
        :param pulumi.Input[str] updated_at: The updated time of the ACL.
        """
        if associated_subnets is not None:
            pulumi.set(__self__, "associated_subnets", associated_subnets)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egress_rules is not None:
            pulumi.set(__self__, "egress_rules", egress_rules)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if ingress_rules is not None:
            pulumi.set(__self__, "ingress_rules", ingress_rules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="associatedSubnets")
    def associated_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclAssociatedSubnetArgs']]]]:
        """
        Specifies the associated subnets of the network ACL.
        The associated_subnets structure is documented below.
        """
        return pulumi.get(self, "associated_subnets")

    @associated_subnets.setter
    def associated_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclAssociatedSubnetArgs']]]]):
        pulumi.set(self, "associated_subnets", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The created time of the ACL.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the network ACL rule description. The value can contain no more
        than 255 characters. The value cannot contain angle brackets (< or >).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="egressRules")
    def egress_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclEgressRuleArgs']]]]:
        """
        Specifies the egress rules of the network ACL.
        The rules structure is documented below.
        """
        return pulumi.get(self, "egress_rules")

    @egress_rules.setter
    def egress_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclEgressRuleArgs']]]]):
        pulumi.set(self, "egress_rules", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the network ACL is enabled. The default value is **true**.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the network ACL.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="ingressRules")
    def ingress_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclIngressRuleArgs']]]]:
        """
        Specifies the ingress rules of the network ACL.
        The rules structure is documented below.
        """
        return pulumi.get(self, "ingress_rules")

    @ingress_rules.setter
    def ingress_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAclIngressRuleArgs']]]]):
        pulumi.set(self, "ingress_rules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the network ACL rule name. The value can contain no more than 64 characters,
        including letters, digits, underscores (_), hyphens (-), and periods (.).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the ACL.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the network ACL.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The updated time of the ACL.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class NetworkAcl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclAssociatedSubnetArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclEgressRuleArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclIngressRuleArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages a VPC network ACL resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        subnet_id1 = config.require_object("subnetId1")
        subnet_id2 = config.require_object("subnetId2")
        test = huaweicloud.vpc.NetworkAcl("test",
            description="created by terraform",
            enterprise_project_id="0",
            enabled=True,
            ingress_rules=[
                huaweicloud.vpc.NetworkAclIngressRuleArgs(
                    action="allow",
                    ip_version=4,
                    protocol="tcp",
                    source_ip_address="192.168.0.0/24",
                    source_port="22-30,33",
                    destination_ip_address="0.0.0.0/0",
                    destination_port="8001-8010",
                ),
                huaweicloud.vpc.NetworkAclIngressRuleArgs(
                    action="deny",
                    ip_version=4,
                    protocol="icmp",
                    source_ip_address="192.168.0.0/24",
                    destination_ip_address="0.0.0.0/0",
                ),
            ],
            egress_rules=[
                huaweicloud.vpc.NetworkAclEgressRuleArgs(
                    action="allow",
                    ip_version=4,
                    protocol="tcp",
                    source_ip_address="172.16.0.0/24",
                    source_port="22-30,33",
                    destination_ip_address="0.0.0.0/0",
                    destination_port="8001-8010",
                ),
                huaweicloud.vpc.NetworkAclEgressRuleArgs(
                    action="deny",
                    ip_version=4,
                    protocol="icmp",
                    source_ip_address="172.16.0.0/24",
                    destination_ip_address="0.0.0.0/0",
                ),
            ],
            associated_subnets=[
                huaweicloud.vpc.NetworkAclAssociatedSubnetArgs(
                    subnet_id=subnet_id1,
                ),
                huaweicloud.vpc.NetworkAclAssociatedSubnetArgs(
                    subnet_id=subnet_id2,
                ),
            ])
        ```

        ## Import

        The network ACL can be imported using `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Vpc/networkAcl:NetworkAcl test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclAssociatedSubnetArgs']]]] associated_subnets: Specifies the associated subnets of the network ACL.
               The associated_subnets structure is documented below.
        :param pulumi.Input[str] description: Specifies the network ACL rule description. The value can contain no more
               than 255 characters. The value cannot contain angle brackets (< or >).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclEgressRuleArgs']]]] egress_rules: Specifies the egress rules of the network ACL.
               The rules structure is documented below.
        :param pulumi.Input[bool] enabled: Specifies whether the network ACL is enabled. The default value is **true**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the network ACL.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclIngressRuleArgs']]]] ingress_rules: Specifies the ingress rules of the network ACL.
               The rules structure is documented below.
        :param pulumi.Input[str] name: Specifies the network ACL rule name. The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the network ACL.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NetworkAclArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a VPC network ACL resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        subnet_id1 = config.require_object("subnetId1")
        subnet_id2 = config.require_object("subnetId2")
        test = huaweicloud.vpc.NetworkAcl("test",
            description="created by terraform",
            enterprise_project_id="0",
            enabled=True,
            ingress_rules=[
                huaweicloud.vpc.NetworkAclIngressRuleArgs(
                    action="allow",
                    ip_version=4,
                    protocol="tcp",
                    source_ip_address="192.168.0.0/24",
                    source_port="22-30,33",
                    destination_ip_address="0.0.0.0/0",
                    destination_port="8001-8010",
                ),
                huaweicloud.vpc.NetworkAclIngressRuleArgs(
                    action="deny",
                    ip_version=4,
                    protocol="icmp",
                    source_ip_address="192.168.0.0/24",
                    destination_ip_address="0.0.0.0/0",
                ),
            ],
            egress_rules=[
                huaweicloud.vpc.NetworkAclEgressRuleArgs(
                    action="allow",
                    ip_version=4,
                    protocol="tcp",
                    source_ip_address="172.16.0.0/24",
                    source_port="22-30,33",
                    destination_ip_address="0.0.0.0/0",
                    destination_port="8001-8010",
                ),
                huaweicloud.vpc.NetworkAclEgressRuleArgs(
                    action="deny",
                    ip_version=4,
                    protocol="icmp",
                    source_ip_address="172.16.0.0/24",
                    destination_ip_address="0.0.0.0/0",
                ),
            ],
            associated_subnets=[
                huaweicloud.vpc.NetworkAclAssociatedSubnetArgs(
                    subnet_id=subnet_id1,
                ),
                huaweicloud.vpc.NetworkAclAssociatedSubnetArgs(
                    subnet_id=subnet_id2,
                ),
            ])
        ```

        ## Import

        The network ACL can be imported using `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Vpc/networkAcl:NetworkAcl test <id>
        ```

        :param str resource_name: The name of the resource.
        :param NetworkAclArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkAclArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclAssociatedSubnetArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclEgressRuleArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclIngressRuleArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkAclArgs.__new__(NetworkAclArgs)

            __props__.__dict__["associated_subnets"] = associated_subnets
            __props__.__dict__["description"] = description
            __props__.__dict__["egress_rules"] = egress_rules
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["ingress_rules"] = ingress_rules
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(NetworkAcl, __self__).__init__(
            'huaweicloud:Vpc/networkAcl:NetworkAcl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            associated_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclAssociatedSubnetArgs']]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclEgressRuleArgs']]]]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclIngressRuleArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'NetworkAcl':
        """
        Get an existing NetworkAcl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclAssociatedSubnetArgs']]]] associated_subnets: Specifies the associated subnets of the network ACL.
               The associated_subnets structure is documented below.
        :param pulumi.Input[str] created_at: The created time of the ACL.
        :param pulumi.Input[str] description: Specifies the network ACL rule description. The value can contain no more
               than 255 characters. The value cannot contain angle brackets (< or >).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclEgressRuleArgs']]]] egress_rules: Specifies the egress rules of the network ACL.
               The rules structure is documented below.
        :param pulumi.Input[bool] enabled: Specifies whether the network ACL is enabled. The default value is **true**.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the network ACL.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAclIngressRuleArgs']]]] ingress_rules: Specifies the ingress rules of the network ACL.
               The rules structure is documented below.
        :param pulumi.Input[str] name: Specifies the network ACL rule name. The value can contain no more than 64 characters,
               including letters, digits, underscores (_), hyphens (-), and periods (.).
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[str] status: The status of the ACL.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the network ACL.
        :param pulumi.Input[str] updated_at: The updated time of the ACL.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkAclState.__new__(_NetworkAclState)

        __props__.__dict__["associated_subnets"] = associated_subnets
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["egress_rules"] = egress_rules
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["ingress_rules"] = ingress_rules
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        return NetworkAcl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="associatedSubnets")
    def associated_subnets(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkAclAssociatedSubnet']]]:
        """
        Specifies the associated subnets of the network ACL.
        The associated_subnets structure is documented below.
        """
        return pulumi.get(self, "associated_subnets")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The created time of the ACL.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the network ACL rule description. The value can contain no more
        than 255 characters. The value cannot contain angle brackets (< or >).
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="egressRules")
    def egress_rules(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkAclEgressRule']]]:
        """
        Specifies the egress rules of the network ACL.
        The rules structure is documented below.
        """
        return pulumi.get(self, "egress_rules")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the network ACL is enabled. The default value is **true**.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[str]:
        """
        Specifies the enterprise project ID of the network ACL.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="ingressRules")
    def ingress_rules(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkAclIngressRule']]]:
        """
        Specifies the ingress rules of the network ACL.
        The rules structure is documented below.
        """
        return pulumi.get(self, "ingress_rules")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the network ACL rule name. The value can contain no more than 64 characters,
        including letters, digits, underscores (_), hyphens (-), and periods (.).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the ACL.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies the key/value pairs to associate with the network ACL.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The updated time of the ACL.
        """
        return pulumi.get(self, "updated_at")

