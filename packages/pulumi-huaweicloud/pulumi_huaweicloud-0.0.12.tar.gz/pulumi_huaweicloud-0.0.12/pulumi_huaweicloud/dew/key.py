# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['KeyArgs', 'Key']

@pulumi.input_type
class KeyArgs:
    def __init__(__self__, *,
                 key_alias: pulumi.Input[str],
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 key_algorithm: Optional[pulumi.Input[str]] = None,
                 key_description: Optional[pulumi.Input[str]] = None,
                 key_usage: Optional[pulumi.Input[str]] = None,
                 keystore_id: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 pending_days: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 rotation_enabled: Optional[pulumi.Input[bool]] = None,
                 rotation_interval: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Key resource.
        :param pulumi.Input[str] key_alias: Specifies the alias name of the KMS key.
               Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
               The valid length is limited from `1` to `255` characters.
               The name must be different from the alias of the default master key.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the KMS key belongs.
               If omitted, the default enterprise project will be used.
               If the enterprise project function is not enabled, ignore this parameter.
        :param pulumi.Input[bool] is_enabled: Specifies whether the KMS key is enabled.
               The default value is **true**.
               This parameter is not supported when creating an external import key for the first time.
        :param pulumi.Input[str] key_algorithm: Specifies the generation algorithm of the KMS key.
               Changing this parameter will create a new resource.
               The default value is **AES_256**. The valid values are as follows:
               + **AES_256**
               + **SM4**
               + **RSA_2048**
               + **RSA_3072**
               + **RSA_4096**
               + **EC_P256**
               + **EC_P384**
               + **SM2**
        :param pulumi.Input[str] key_description: Specifies the description of the KMS key.
        :param pulumi.Input[str] key_usage: Specifies the KMS key usage.
               Changing this parameter will create a new resource.
               The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
        :param pulumi.Input[str] keystore_id: Specifies the keystore ID to which the KMS key belongs.
               Changing this parameter will create a new resource.
               The KMS default keystore is used by default.
        :param pulumi.Input[str] origin: Specifies the source of the KMS key.
               Changing this parameter will create a new resource.
               The default value is **kms**. The valid values are as follows:
               + **kms**: The key is generated by KMS.
               + **external**: The key is external imported.
        :param pulumi.Input[str] pending_days: Specifies the number of days after which the KMS key is scheduled to be deleted.
               The valid value range from `7` to `1,096`.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[bool] rotation_enabled: Specifies whether the KMS key rotation is enabled.
               The default value is **false**.
        :param pulumi.Input[int] rotation_interval: Specifies the KMS key rotation period.
               The valid value range from `30` to `365`. The default value is `365`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the KMS key.
        """
        pulumi.set(__self__, "key_alias", key_alias)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_description is not None:
            pulumi.set(__self__, "key_description", key_description)
        if key_usage is not None:
            pulumi.set(__self__, "key_usage", key_usage)
        if keystore_id is not None:
            pulumi.set(__self__, "keystore_id", keystore_id)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if pending_days is not None:
            pulumi.set(__self__, "pending_days", pending_days)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rotation_enabled is not None:
            pulumi.set(__self__, "rotation_enabled", rotation_enabled)
        if rotation_interval is not None:
            pulumi.set(__self__, "rotation_interval", rotation_interval)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="keyAlias")
    def key_alias(self) -> pulumi.Input[str]:
        """
        Specifies the alias name of the KMS key.
        Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
        The valid length is limited from `1` to `255` characters.
        The name must be different from the alias of the default master key.
        """
        return pulumi.get(self, "key_alias")

    @key_alias.setter
    def key_alias(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_alias", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID to which the KMS key belongs.
        If omitted, the default enterprise project will be used.
        If the enterprise project function is not enabled, ignore this parameter.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the KMS key is enabled.
        The default value is **true**.
        This parameter is not supported when creating an external import key for the first time.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the generation algorithm of the KMS key.
        Changing this parameter will create a new resource.
        The default value is **AES_256**. The valid values are as follows:
        + **AES_256**
        + **SM4**
        + **RSA_2048**
        + **RSA_3072**
        + **RSA_4096**
        + **EC_P256**
        + **EC_P384**
        + **SM2**
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_algorithm", value)

    @property
    @pulumi.getter(name="keyDescription")
    def key_description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the KMS key.
        """
        return pulumi.get(self, "key_description")

    @key_description.setter
    def key_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_description", value)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the KMS key usage.
        Changing this parameter will create a new resource.
        The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
        """
        return pulumi.get(self, "key_usage")

    @key_usage.setter
    def key_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_usage", value)

    @property
    @pulumi.getter(name="keystoreId")
    def keystore_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the keystore ID to which the KMS key belongs.
        Changing this parameter will create a new resource.
        The KMS default keystore is used by default.
        """
        return pulumi.get(self, "keystore_id")

    @keystore_id.setter
    def keystore_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keystore_id", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the source of the KMS key.
        Changing this parameter will create a new resource.
        The default value is **kms**. The valid values are as follows:
        + **kms**: The key is generated by KMS.
        + **external**: The key is external imported.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="pendingDays")
    def pending_days(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the number of days after which the KMS key is scheduled to be deleted.
        The valid value range from `7` to `1,096`.
        """
        return pulumi.get(self, "pending_days")

    @pending_days.setter
    def pending_days(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pending_days", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rotationEnabled")
    def rotation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the KMS key rotation is enabled.
        The default value is **false**.
        """
        return pulumi.get(self, "rotation_enabled")

    @rotation_enabled.setter
    def rotation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rotation_enabled", value)

    @property
    @pulumi.getter(name="rotationInterval")
    def rotation_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the KMS key rotation period.
        The valid value range from `30` to `365`. The default value is `365`.
        """
        return pulumi.get(self, "rotation_interval")

    @rotation_interval.setter
    def rotation_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotation_interval", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the KMS key.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _KeyState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[str]] = None,
                 default_key_flag: Optional[pulumi.Input[str]] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 expiration_time: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 key_algorithm: Optional[pulumi.Input[str]] = None,
                 key_alias: Optional[pulumi.Input[str]] = None,
                 key_description: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_state: Optional[pulumi.Input[str]] = None,
                 key_usage: Optional[pulumi.Input[str]] = None,
                 keystore_id: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 pending_days: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 rotation_enabled: Optional[pulumi.Input[bool]] = None,
                 rotation_interval: Optional[pulumi.Input[int]] = None,
                 rotation_number: Optional[pulumi.Input[int]] = None,
                 scheduled_deletion_date: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Key resources.
        :param pulumi.Input[str] creation_date: The creation time of the KMS key.
               The value is a time stamp, e.g. **1723272402000**.
        :param pulumi.Input[str] default_key_flag: The default master Key identifier.
               The value can be **1** (indicated the KMS key is default master key) or
               **0** (indicated the KMS key is not default master key).
        :param pulumi.Input[str] domain_id: The ID of the user account.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the KMS key belongs.
               If omitted, the default enterprise project will be used.
               If the enterprise project function is not enabled, ignore this parameter.
        :param pulumi.Input[str] expiration_time: The expiration time of the KMS key material.
               The value is a time stamp, e.g. **1723272402000**.
        :param pulumi.Input[bool] is_enabled: Specifies whether the KMS key is enabled.
               The default value is **true**.
               This parameter is not supported when creating an external import key for the first time.
        :param pulumi.Input[str] key_algorithm: Specifies the generation algorithm of the KMS key.
               Changing this parameter will create a new resource.
               The default value is **AES_256**. The valid values are as follows:
               + **AES_256**
               + **SM4**
               + **RSA_2048**
               + **RSA_3072**
               + **RSA_4096**
               + **EC_P256**
               + **EC_P384**
               + **SM2**
        :param pulumi.Input[str] key_alias: Specifies the alias name of the KMS key.
               Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
               The valid length is limited from `1` to `255` characters.
               The name must be different from the alias of the default master key.
        :param pulumi.Input[str] key_description: Specifies the description of the KMS key.
        :param pulumi.Input[str] key_id: The ID of the KMS key.
        :param pulumi.Input[str] key_state: The current status of the KMS key.
               The valid values are as follows:
               + **1**: To be activated.
               + **2**: Enabled.
               + **3**: Disabled.
               + **4**: Pending deletion.
               + **5**: Pending import.
        :param pulumi.Input[str] key_usage: Specifies the KMS key usage.
               Changing this parameter will create a new resource.
               The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
        :param pulumi.Input[str] keystore_id: Specifies the keystore ID to which the KMS key belongs.
               Changing this parameter will create a new resource.
               The KMS default keystore is used by default.
        :param pulumi.Input[str] origin: Specifies the source of the KMS key.
               Changing this parameter will create a new resource.
               The default value is **kms**. The valid values are as follows:
               + **kms**: The key is generated by KMS.
               + **external**: The key is external imported.
        :param pulumi.Input[str] pending_days: Specifies the number of days after which the KMS key is scheduled to be deleted.
               The valid value range from `7` to `1,096`.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[bool] rotation_enabled: Specifies whether the KMS key rotation is enabled.
               The default value is **false**.
        :param pulumi.Input[int] rotation_interval: Specifies the KMS key rotation period.
               The valid value range from `30` to `365`. The default value is `365`.
        :param pulumi.Input[int] rotation_number: The total number of key rotations.
        :param pulumi.Input[str] scheduled_deletion_date: The scheduled deletion time of the KMS key.
               The value is a time stamp, e.g. **1723272402000**.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the KMS key.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if default_key_flag is not None:
            pulumi.set(__self__, "default_key_flag", default_key_flag)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_alias is not None:
            pulumi.set(__self__, "key_alias", key_alias)
        if key_description is not None:
            pulumi.set(__self__, "key_description", key_description)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_state is not None:
            pulumi.set(__self__, "key_state", key_state)
        if key_usage is not None:
            pulumi.set(__self__, "key_usage", key_usage)
        if keystore_id is not None:
            pulumi.set(__self__, "keystore_id", keystore_id)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if pending_days is not None:
            pulumi.set(__self__, "pending_days", pending_days)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rotation_enabled is not None:
            pulumi.set(__self__, "rotation_enabled", rotation_enabled)
        if rotation_interval is not None:
            pulumi.set(__self__, "rotation_interval", rotation_interval)
        if rotation_number is not None:
            pulumi.set(__self__, "rotation_number", rotation_number)
        if scheduled_deletion_date is not None:
            pulumi.set(__self__, "scheduled_deletion_date", scheduled_deletion_date)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the KMS key.
        The value is a time stamp, e.g. **1723272402000**.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter(name="defaultKeyFlag")
    def default_key_flag(self) -> Optional[pulumi.Input[str]]:
        """
        The default master Key identifier.
        The value can be **1** (indicated the KMS key is default master key) or
        **0** (indicated the KMS key is not default master key).
        """
        return pulumi.get(self, "default_key_flag")

    @default_key_flag.setter
    def default_key_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_key_flag", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the user account.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID to which the KMS key belongs.
        If omitted, the default enterprise project will be used.
        If the enterprise project function is not enabled, ignore this parameter.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[str]]:
        """
        The expiration time of the KMS key material.
        The value is a time stamp, e.g. **1723272402000**.
        """
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_time", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the KMS key is enabled.
        The default value is **true**.
        This parameter is not supported when creating an external import key for the first time.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the generation algorithm of the KMS key.
        Changing this parameter will create a new resource.
        The default value is **AES_256**. The valid values are as follows:
        + **AES_256**
        + **SM4**
        + **RSA_2048**
        + **RSA_3072**
        + **RSA_4096**
        + **EC_P256**
        + **EC_P384**
        + **SM2**
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_algorithm", value)

    @property
    @pulumi.getter(name="keyAlias")
    def key_alias(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the alias name of the KMS key.
        Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
        The valid length is limited from `1` to `255` characters.
        The name must be different from the alias of the default master key.
        """
        return pulumi.get(self, "key_alias")

    @key_alias.setter
    def key_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_alias", value)

    @property
    @pulumi.getter(name="keyDescription")
    def key_description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the KMS key.
        """
        return pulumi.get(self, "key_description")

    @key_description.setter
    def key_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_description", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the KMS key.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyState")
    def key_state(self) -> Optional[pulumi.Input[str]]:
        """
        The current status of the KMS key.
        The valid values are as follows:
        + **1**: To be activated.
        + **2**: Enabled.
        + **3**: Disabled.
        + **4**: Pending deletion.
        + **5**: Pending import.
        """
        return pulumi.get(self, "key_state")

    @key_state.setter
    def key_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_state", value)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the KMS key usage.
        Changing this parameter will create a new resource.
        The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
        """
        return pulumi.get(self, "key_usage")

    @key_usage.setter
    def key_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_usage", value)

    @property
    @pulumi.getter(name="keystoreId")
    def keystore_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the keystore ID to which the KMS key belongs.
        Changing this parameter will create a new resource.
        The KMS default keystore is used by default.
        """
        return pulumi.get(self, "keystore_id")

    @keystore_id.setter
    def keystore_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keystore_id", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the source of the KMS key.
        Changing this parameter will create a new resource.
        The default value is **kms**. The valid values are as follows:
        + **kms**: The key is generated by KMS.
        + **external**: The key is external imported.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="pendingDays")
    def pending_days(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the number of days after which the KMS key is scheduled to be deleted.
        The valid value range from `7` to `1,096`.
        """
        return pulumi.get(self, "pending_days")

    @pending_days.setter
    def pending_days(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pending_days", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rotationEnabled")
    def rotation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the KMS key rotation is enabled.
        The default value is **false**.
        """
        return pulumi.get(self, "rotation_enabled")

    @rotation_enabled.setter
    def rotation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rotation_enabled", value)

    @property
    @pulumi.getter(name="rotationInterval")
    def rotation_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the KMS key rotation period.
        The valid value range from `30` to `365`. The default value is `365`.
        """
        return pulumi.get(self, "rotation_interval")

    @rotation_interval.setter
    def rotation_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotation_interval", value)

    @property
    @pulumi.getter(name="rotationNumber")
    def rotation_number(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of key rotations.
        """
        return pulumi.get(self, "rotation_number")

    @rotation_number.setter
    def rotation_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotation_number", value)

    @property
    @pulumi.getter(name="scheduledDeletionDate")
    def scheduled_deletion_date(self) -> Optional[pulumi.Input[str]]:
        """
        The scheduled deletion time of the KMS key.
        The value is a time stamp, e.g. **1723272402000**.
        """
        return pulumi.get(self, "scheduled_deletion_date")

    @scheduled_deletion_date.setter
    def scheduled_deletion_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduled_deletion_date", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the KMS key.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class Key(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 key_algorithm: Optional[pulumi.Input[str]] = None,
                 key_alias: Optional[pulumi.Input[str]] = None,
                 key_description: Optional[pulumi.Input[str]] = None,
                 key_usage: Optional[pulumi.Input[str]] = None,
                 keystore_id: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 pending_days: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 rotation_enabled: Optional[pulumi.Input[bool]] = None,
                 rotation_interval: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages a KMS key resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        key_alias = config.require_object("keyAlias")
        test = huaweicloud.dew.Key("test",
            key_alias=key_alias,
            pending_days="7")
        ```

        ## Import

        The KMS Key resource can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Dew/key:Key test <id>
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`pending_days` and `is_enabled`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the resource. Also you can ignore changes as below. hcl resource "huaweicloud_kms_key" "test" {

         ...

         lifecycle {

         ignore_changes = [

         pending_days, is_enabled

         ]

         } }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the KMS key belongs.
               If omitted, the default enterprise project will be used.
               If the enterprise project function is not enabled, ignore this parameter.
        :param pulumi.Input[bool] is_enabled: Specifies whether the KMS key is enabled.
               The default value is **true**.
               This parameter is not supported when creating an external import key for the first time.
        :param pulumi.Input[str] key_algorithm: Specifies the generation algorithm of the KMS key.
               Changing this parameter will create a new resource.
               The default value is **AES_256**. The valid values are as follows:
               + **AES_256**
               + **SM4**
               + **RSA_2048**
               + **RSA_3072**
               + **RSA_4096**
               + **EC_P256**
               + **EC_P384**
               + **SM2**
        :param pulumi.Input[str] key_alias: Specifies the alias name of the KMS key.
               Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
               The valid length is limited from `1` to `255` characters.
               The name must be different from the alias of the default master key.
        :param pulumi.Input[str] key_description: Specifies the description of the KMS key.
        :param pulumi.Input[str] key_usage: Specifies the KMS key usage.
               Changing this parameter will create a new resource.
               The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
        :param pulumi.Input[str] keystore_id: Specifies the keystore ID to which the KMS key belongs.
               Changing this parameter will create a new resource.
               The KMS default keystore is used by default.
        :param pulumi.Input[str] origin: Specifies the source of the KMS key.
               Changing this parameter will create a new resource.
               The default value is **kms**. The valid values are as follows:
               + **kms**: The key is generated by KMS.
               + **external**: The key is external imported.
        :param pulumi.Input[str] pending_days: Specifies the number of days after which the KMS key is scheduled to be deleted.
               The valid value range from `7` to `1,096`.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[bool] rotation_enabled: Specifies whether the KMS key rotation is enabled.
               The default value is **false**.
        :param pulumi.Input[int] rotation_interval: Specifies the KMS key rotation period.
               The valid value range from `30` to `365`. The default value is `365`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the KMS key.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a KMS key resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        key_alias = config.require_object("keyAlias")
        test = huaweicloud.dew.Key("test",
            key_alias=key_alias,
            pending_days="7")
        ```

        ## Import

        The KMS Key resource can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Dew/key:Key test <id>
        ```

         Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`pending_days` and `is_enabled`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the resource. Also you can ignore changes as below. hcl resource "huaweicloud_kms_key" "test" {

         ...

         lifecycle {

         ignore_changes = [

         pending_days, is_enabled

         ]

         } }

        :param str resource_name: The name of the resource.
        :param KeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 key_algorithm: Optional[pulumi.Input[str]] = None,
                 key_alias: Optional[pulumi.Input[str]] = None,
                 key_description: Optional[pulumi.Input[str]] = None,
                 key_usage: Optional[pulumi.Input[str]] = None,
                 keystore_id: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 pending_days: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 rotation_enabled: Optional[pulumi.Input[bool]] = None,
                 rotation_interval: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeyArgs.__new__(KeyArgs)

            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["is_enabled"] = is_enabled
            __props__.__dict__["key_algorithm"] = key_algorithm
            if key_alias is None and not opts.urn:
                raise TypeError("Missing required property 'key_alias'")
            __props__.__dict__["key_alias"] = key_alias
            __props__.__dict__["key_description"] = key_description
            __props__.__dict__["key_usage"] = key_usage
            __props__.__dict__["keystore_id"] = keystore_id
            __props__.__dict__["origin"] = origin
            __props__.__dict__["pending_days"] = pending_days
            __props__.__dict__["region"] = region
            __props__.__dict__["rotation_enabled"] = rotation_enabled
            __props__.__dict__["rotation_interval"] = rotation_interval
            __props__.__dict__["tags"] = tags
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["default_key_flag"] = None
            __props__.__dict__["domain_id"] = None
            __props__.__dict__["expiration_time"] = None
            __props__.__dict__["key_id"] = None
            __props__.__dict__["key_state"] = None
            __props__.__dict__["rotation_number"] = None
            __props__.__dict__["scheduled_deletion_date"] = None
        super(Key, __self__).__init__(
            'huaweicloud:Dew/key:Key',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[str]] = None,
            default_key_flag: Optional[pulumi.Input[str]] = None,
            domain_id: Optional[pulumi.Input[str]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            expiration_time: Optional[pulumi.Input[str]] = None,
            is_enabled: Optional[pulumi.Input[bool]] = None,
            key_algorithm: Optional[pulumi.Input[str]] = None,
            key_alias: Optional[pulumi.Input[str]] = None,
            key_description: Optional[pulumi.Input[str]] = None,
            key_id: Optional[pulumi.Input[str]] = None,
            key_state: Optional[pulumi.Input[str]] = None,
            key_usage: Optional[pulumi.Input[str]] = None,
            keystore_id: Optional[pulumi.Input[str]] = None,
            origin: Optional[pulumi.Input[str]] = None,
            pending_days: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            rotation_enabled: Optional[pulumi.Input[bool]] = None,
            rotation_interval: Optional[pulumi.Input[int]] = None,
            rotation_number: Optional[pulumi.Input[int]] = None,
            scheduled_deletion_date: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'Key':
        """
        Get an existing Key resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] creation_date: The creation time of the KMS key.
               The value is a time stamp, e.g. **1723272402000**.
        :param pulumi.Input[str] default_key_flag: The default master Key identifier.
               The value can be **1** (indicated the KMS key is default master key) or
               **0** (indicated the KMS key is not default master key).
        :param pulumi.Input[str] domain_id: The ID of the user account.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID to which the KMS key belongs.
               If omitted, the default enterprise project will be used.
               If the enterprise project function is not enabled, ignore this parameter.
        :param pulumi.Input[str] expiration_time: The expiration time of the KMS key material.
               The value is a time stamp, e.g. **1723272402000**.
        :param pulumi.Input[bool] is_enabled: Specifies whether the KMS key is enabled.
               The default value is **true**.
               This parameter is not supported when creating an external import key for the first time.
        :param pulumi.Input[str] key_algorithm: Specifies the generation algorithm of the KMS key.
               Changing this parameter will create a new resource.
               The default value is **AES_256**. The valid values are as follows:
               + **AES_256**
               + **SM4**
               + **RSA_2048**
               + **RSA_3072**
               + **RSA_4096**
               + **EC_P256**
               + **EC_P384**
               + **SM2**
        :param pulumi.Input[str] key_alias: Specifies the alias name of the KMS key.
               Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
               The valid length is limited from `1` to `255` characters.
               The name must be different from the alias of the default master key.
        :param pulumi.Input[str] key_description: Specifies the description of the KMS key.
        :param pulumi.Input[str] key_id: The ID of the KMS key.
        :param pulumi.Input[str] key_state: The current status of the KMS key.
               The valid values are as follows:
               + **1**: To be activated.
               + **2**: Enabled.
               + **3**: Disabled.
               + **4**: Pending deletion.
               + **5**: Pending import.
        :param pulumi.Input[str] key_usage: Specifies the KMS key usage.
               Changing this parameter will create a new resource.
               The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
        :param pulumi.Input[str] keystore_id: Specifies the keystore ID to which the KMS key belongs.
               Changing this parameter will create a new resource.
               The KMS default keystore is used by default.
        :param pulumi.Input[str] origin: Specifies the source of the KMS key.
               Changing this parameter will create a new resource.
               The default value is **kms**. The valid values are as follows:
               + **kms**: The key is generated by KMS.
               + **external**: The key is external imported.
        :param pulumi.Input[str] pending_days: Specifies the number of days after which the KMS key is scheduled to be deleted.
               The valid value range from `7` to `1,096`.
        :param pulumi.Input[str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[bool] rotation_enabled: Specifies whether the KMS key rotation is enabled.
               The default value is **false**.
        :param pulumi.Input[int] rotation_interval: Specifies the KMS key rotation period.
               The valid value range from `30` to `365`. The default value is `365`.
        :param pulumi.Input[int] rotation_number: The total number of key rotations.
        :param pulumi.Input[str] scheduled_deletion_date: The scheduled deletion time of the KMS key.
               The value is a time stamp, e.g. **1723272402000**.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the KMS key.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeyState.__new__(_KeyState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["default_key_flag"] = default_key_flag
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["expiration_time"] = expiration_time
        __props__.__dict__["is_enabled"] = is_enabled
        __props__.__dict__["key_algorithm"] = key_algorithm
        __props__.__dict__["key_alias"] = key_alias
        __props__.__dict__["key_description"] = key_description
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["key_state"] = key_state
        __props__.__dict__["key_usage"] = key_usage
        __props__.__dict__["keystore_id"] = keystore_id
        __props__.__dict__["origin"] = origin
        __props__.__dict__["pending_days"] = pending_days
        __props__.__dict__["region"] = region
        __props__.__dict__["rotation_enabled"] = rotation_enabled
        __props__.__dict__["rotation_interval"] = rotation_interval
        __props__.__dict__["rotation_number"] = rotation_number
        __props__.__dict__["scheduled_deletion_date"] = scheduled_deletion_date
        __props__.__dict__["tags"] = tags
        return Key(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[str]:
        """
        The creation time of the KMS key.
        The value is a time stamp, e.g. **1723272402000**.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="defaultKeyFlag")
    def default_key_flag(self) -> pulumi.Output[str]:
        """
        The default master Key identifier.
        The value can be **1** (indicated the KMS key is default master key) or
        **0** (indicated the KMS key is not default master key).
        """
        return pulumi.get(self, "default_key_flag")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[str]:
        """
        The ID of the user account.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[str]:
        """
        Specifies the enterprise project ID to which the KMS key belongs.
        If omitted, the default enterprise project will be used.
        If the enterprise project function is not enabled, ignore this parameter.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> pulumi.Output[str]:
        """
        The expiration time of the KMS key material.
        The value is a time stamp, e.g. **1723272402000**.
        """
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the KMS key is enabled.
        The default value is **true**.
        This parameter is not supported when creating an external import key for the first time.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> pulumi.Output[str]:
        """
        Specifies the generation algorithm of the KMS key.
        Changing this parameter will create a new resource.
        The default value is **AES_256**. The valid values are as follows:
        + **AES_256**
        + **SM4**
        + **RSA_2048**
        + **RSA_3072**
        + **RSA_4096**
        + **EC_P256**
        + **EC_P384**
        + **SM2**
        """
        return pulumi.get(self, "key_algorithm")

    @property
    @pulumi.getter(name="keyAlias")
    def key_alias(self) -> pulumi.Output[str]:
        """
        Specifies the alias name of the KMS key.
        Only letters, digits, underscores(_), hyphens(-), colons(:) and slash(/) are allowed.
        The valid length is limited from `1` to `255` characters.
        The name must be different from the alias of the default master key.
        """
        return pulumi.get(self, "key_alias")

    @property
    @pulumi.getter(name="keyDescription")
    def key_description(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the description of the KMS key.
        """
        return pulumi.get(self, "key_description")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[str]:
        """
        The ID of the KMS key.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyState")
    def key_state(self) -> pulumi.Output[str]:
        """
        The current status of the KMS key.
        The valid values are as follows:
        + **1**: To be activated.
        + **2**: Enabled.
        + **3**: Disabled.
        + **4**: Pending deletion.
        + **5**: Pending import.
        """
        return pulumi.get(self, "key_state")

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> pulumi.Output[str]:
        """
        Specifies the KMS key usage.
        Changing this parameter will create a new resource.
        The value can be **ENCRYPT_DECRYPT** (symmetric key default value) or **SIGN_VERIFY** (asymmetric key default value).
        """
        return pulumi.get(self, "key_usage")

    @property
    @pulumi.getter(name="keystoreId")
    def keystore_id(self) -> pulumi.Output[str]:
        """
        Specifies the keystore ID to which the KMS key belongs.
        Changing this parameter will create a new resource.
        The KMS default keystore is used by default.
        """
        return pulumi.get(self, "keystore_id")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output[str]:
        """
        Specifies the source of the KMS key.
        Changing this parameter will create a new resource.
        The default value is **kms**. The valid values are as follows:
        + **kms**: The key is generated by KMS.
        + **external**: The key is external imported.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="pendingDays")
    def pending_days(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the number of days after which the KMS key is scheduled to be deleted.
        The valid value range from `7` to `1,096`.
        """
        return pulumi.get(self, "pending_days")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="rotationEnabled")
    def rotation_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the KMS key rotation is enabled.
        The default value is **false**.
        """
        return pulumi.get(self, "rotation_enabled")

    @property
    @pulumi.getter(name="rotationInterval")
    def rotation_interval(self) -> pulumi.Output[int]:
        """
        Specifies the KMS key rotation period.
        The valid value range from `30` to `365`. The default value is `365`.
        """
        return pulumi.get(self, "rotation_interval")

    @property
    @pulumi.getter(name="rotationNumber")
    def rotation_number(self) -> pulumi.Output[int]:
        """
        The total number of key rotations.
        """
        return pulumi.get(self, "rotation_number")

    @property
    @pulumi.getter(name="scheduledDeletionDate")
    def scheduled_deletion_date(self) -> pulumi.Output[str]:
        """
        The scheduled deletion time of the KMS key.
        The value is a time stamp, e.g. **1723272402000**.
        """
        return pulumi.get(self, "scheduled_deletion_date")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies the key/value pairs to associate with the KMS key.
        """
        return pulumi.get(self, "tags")

