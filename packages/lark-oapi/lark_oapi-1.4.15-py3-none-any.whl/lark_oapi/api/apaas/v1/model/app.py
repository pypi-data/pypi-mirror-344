# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .app_roles_info import AppRolesInfo


class App(object):
    _types = {
        "name": List[I18n],
        "namespace": str,
        "created_at": int,
        "owner": int,
        "status": str,
        "app_roles_info": AppRolesInfo,
    }

    def __init__(self, d=None):
        self.name: Optional[List[I18n]] = None
        self.namespace: Optional[str] = None
        self.created_at: Optional[int] = None
        self.owner: Optional[int] = None
        self.status: Optional[str] = None
        self.app_roles_info: Optional[AppRolesInfo] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AppBuilder":
        return AppBuilder()


class AppBuilder(object):
    def __init__(self) -> None:
        self._app = App()

    def name(self, name: List[I18n]) -> "AppBuilder":
        self._app.name = name
        return self

    def namespace(self, namespace: str) -> "AppBuilder":
        self._app.namespace = namespace
        return self

    def created_at(self, created_at: int) -> "AppBuilder":
        self._app.created_at = created_at
        return self

    def owner(self, owner: int) -> "AppBuilder":
        self._app.owner = owner
        return self

    def status(self, status: str) -> "AppBuilder":
        self._app.status = status
        return self

    def app_roles_info(self, app_roles_info: AppRolesInfo) -> "AppBuilder":
        self._app.app_roles_info = app_roles_info
        return self

    def build(self) -> "App":
        return self._app
