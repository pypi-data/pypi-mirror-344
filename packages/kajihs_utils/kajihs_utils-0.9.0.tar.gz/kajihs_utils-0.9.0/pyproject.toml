[build-system]
requires = ["hatchling >= 1.27"]
build-backend = "hatchling.build"

[project]
name = "kajihs_utils"
dynamic = ["version", "authors", "urls"]
description = "Fully typed, plausibly practical, and remarkably random utilities for meâ€”and maybe for you too."
readme = "README.md"
license-files = ["LICENSE"]
requires-python = ">=3.12"
keywords = [
    "python",
    "tools",
    "utils",
    "jax",
    "loguru",
    "matplotlib",
    "pyplot",
    "numpy",
    "whenever",
]

classifiers = [ # https://pypi.org/classifiers/
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
]

dependencies = ["typing-extensions>=4.12.2"]

    [project.optional-dependencies]
    jax = ["jax>=0.4.36"]
    loguru = ["loguru>=0.7.3", "rich>=13.9.4"]
    pyplot = ["matplotlib>=3.10.0"]
    numpy = ["numpy>=2.2.0"]
    whenever = ["whenever>=0.7.3"]


[tool.uv]
default-groups = ["dev", "lint", "type-check"]

[dependency-groups]
dev = [
    "hatchling",
    "icecream",
    "ipdb",
    "ipykernel",
    "jupyter",
    "pytest",
    "pytest-cov",
    "pytest-md-report",
]
lint = ["ruff"]
type-check = ["basedpyright"]

[tool.hatch.version]
path = "src/kajihs_utils/__about__.py"
[tool.hatch.metadata.hooks.custom] # Enables custom hooks for dynamic metadata
[tool.hatch.build.targets.wheel]
packages = ["src/kajihs_utils"]


# === Type Checking === #
[tool.basedpyright] # https://github.com/microsoft/pyright/blob/main/docs/configuration.md or https://docs.basedpyright.com/v1.19.1/configuration/config-files/
typeCheckingMode = "recommended" # standard recommended

pythonVersion = "3.12"
pythonPlatform = "All"

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true

deprecateTypingAliases = true

# enableTypeIgnoreComments = false
# enableReachabilityAnalysis = true

# === Type Check Rule Overrides === #
reportImplicitStringConcatenation = false # Ruff handles this

# TODO: Comment out for production
reportUnusedCallResult = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportAny = "none"
reportExplicitAny = "none"

# === Lint + Formatting === #
[tool.ruff] # https://docs.astral.sh/ruff/settings
target-version = "py312"
line-length = 100
src = ["src"]
# In addition to the standard set, include `.ipynb` files.
extend-include = ["*.ipynb"]
exclude = []

    [tool.ruff.lint]
    preview = true
    fixable = ["ALL"]
    select = [
        "RUF",  # Ruff specific rules
        "PL",   # Pylint
        "B",    # Bugbear
        "D",    # Docstring
        "D213", # Multi-line docstring summary should start at the second line
        "D401", # First line should be in imperative mood
        "D404", # First line should not start with this
        "I",    # Isort
        "C90",  # Mccabe complexity
        "UP",   # PyUpgrade
        "ANN",  # Type annotations
        "S",    # Bandit
        "A",    # flake8-builtins
        "C4",   # flake8-comprehensions
        "FA",   # flake8-future-annotations
        "ISC",  # flake8-implicit-str-concat
        "ICN",  # flake8-import-conventions
        "G",    # flake8-logging-format
        "LOG",  # flake8-logging
        "PIE",  # flake8-pie
        "PT",   # flake8-pytest-style
        "RET",  # flake8-return
        "SLF",  # flake8-self
        "SIM",  # flake8-simplify
        "TID",  # flake8-tidy-imports
        "TCH",  # flake8-type-checking
        "ARG",  # flake8-unused-arguments
        "PTH",  # flake8-use-pathlib
        "TD",   # flake8-todos
        "ERA",  # flake8-eradicate
        "TRY",  # tryceratops
        "NPY",  # numpy specific rules
        "PERF", # Perflint
        "FURB", # refurb
        # "WPS",  # wemake-python-styleguide -> Not yet supported
        "INP",

    ]
    ignore = [
        "ISC001", # Checks for implicitly concatenated strings on a single line. -- Should not be used with formatter
        "D105",   # Missing docstring in magic method
        "D107",   # Missing docstring in `__init__`
        "D212",   # Multi-line docstring summary should start at the first line
        "TD002",  # Missing author in TODO; try: `TODO(<author_name>): ...` or `TODO @<author_name>: ...`
        "TD003",  # Missing issue link on the line following this TODO
        "TD004",  # Missing colon after TODO
        "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in
        "RET504", # Unnecessary assignment to `...` before `return` statement

        # TODO: Comment out for production release
        "ERA001", # Found commented-out code
        "S101",   # Use of `assert` detected
        "G004",   # Logging statement uses f-string
    ]

        [tool.ruff.lint.per-file-ignores]
        "tests/*" = [
            "SLF001",  # Private member accessed: `self._foo`
            "D100",    # Missing docstring in public module
            "D101",    # Missing docstring in public class
            "D102",    # Missing docstring in public method
            "D103",    # Missing docstring in public function
            "PLR6301", # Method `` could be a function, class method, or static method
            "PLR2004", # Magic value used in comparison, consider replacing `` with a constant variable
            "ANN",
        ]
        "*.ipynb" = [
            "D101", # Missing docstring in public class
            "D103", # Missing docstring in public function
        ]
        "dev/_*" = [
            "D103", # Missing docstring in public function
        ]

        [tool.ruff.lint.pydocstyle]
        convention = "google"
        [tool.ruff.lint.pylint]
        max-args = 6
    [tool.ruff.format]
    preview = true
    docstring-code-format = true


# == Pytest == #
[tool.pytest] # https://docs.pytest.org/en/stable/customize.html
    [tool.pytest.ini_options]
    markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]

    # testpaths = ["tests"]
    pythonpath = ["src"]

# == Coverage == #
[tool.coverage]
    [tool.coverage.run]
    source_pkgs = ["kajihs_utils", "tests"]
    branch = true
    parallel = true
    omit = ["src/kajihs_utils/__about__.py", "hatch_build.py"]

    [tool.coverage.paths]
    PackageName = ["src/kajihs_utils", "*/kajihs_utils/src/kajihs_utils"]
    tests = ["tests", "*/kajihs_utils/tests"]

    [tool.coverage.report]
    exclude_also = [
        "def __repr__",
        "def __str__",
        "if TYPE_CHECKING:",

        # Don't complain about missing debug-only code:
        # "if self\\.debug",
        # "if settings.DEBUG",

        # Don't complain if tests don't hit defensive assertion code:
        "raise AssertionError",
        "raise NotImplementedError",

        # Don't complain if non-runnable code isn't run:
        "if 0:",
        "if __name__ == .__main__.:",

        # Don't complain about abstract methods, they aren't run:
        "@(abc\\.)?abstractmethod",
    ]
