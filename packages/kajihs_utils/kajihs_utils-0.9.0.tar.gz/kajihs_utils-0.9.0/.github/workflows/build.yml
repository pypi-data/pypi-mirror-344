# Build Workflow
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: üì¶ Kajihs Utils CI build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.12"
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip
          # - os: macos-latest
          #   path: ~/Library/Caches/pip
          # - os: windows-latest
          #   path: ~\AppData\Local\pip\Cache
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      UV_SYSTEM_PYTHON: 1

    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üêç Install uv with caching
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: üíæ Setup pip cache
        uses: actions/cache@v4
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('uv.lock') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: üì• Install the project
        run: uv sync --all-extras --dev

      - name: üèûÔ∏è Activate virtual environment
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
              source .venv\\Scripts\\activate
              echo PATH=$PATH >> $GITHUB_ENV
              uv pip install pipx  # Problems with ruff action without this
          else
              source .venv/bin/activate
              echo PATH=$PATH >> $GITHUB_ENV
          fi

      - name: üßπ Lint with ruff @astral-sh
        uses: astral-sh/ruff-action@v1
        continue-on-error: true

      - name: ü™Ñ Format with ruff @astral-sh
        uses: astral-sh/ruff-action@v1
        with:
          args: "format --diff"
        continue-on-error: true

      - name: üß™ Run Pytest with doctest
        env:
          REPORT_OUTPUT: md_report.md
        run: |
          echo "REPORT_FILE=${REPORT_OUTPUT}" >> "$GITHUB_ENV"
          pytest --doctest-modules --md-report --md-report-flavor gfm --md-report-output "$REPORT_OUTPUT" --cov=. # -rA
        continue-on-error: true

      - name: üß™ Add test output reports to the job summary
        run: |
          if [ -f "$REPORT_FILE" ]; then
            echo "<details><summary>Test Report</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üìä Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: ‚úÖ Type checking with BasedPyright
        run: |
          uv pip install pytest hatchling  # For some reason basedpyright doesn't find those packages
          basedpyright # --stats
        continue-on-error: true

      - name: ‚úÖ Verify public API types with BasedPyright
        run: |
          uv pip install .
          basedpyright --verifytypes kajihs_utils
        continue-on-error: true

      - name: üèóÔ∏è Build
        run: |
          pipx install hatch
          hatch build
