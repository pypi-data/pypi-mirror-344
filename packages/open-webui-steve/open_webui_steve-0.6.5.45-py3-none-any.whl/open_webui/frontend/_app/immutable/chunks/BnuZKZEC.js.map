{"version":3,"file":"BnuZKZEC.js","sources":["../../../../../../src/lib/apis/openai/index.ts"],"sourcesContent":["import { OPENAI_API_BASE_URL, WEBUI_API_BASE_URL, WEBUI_BASE_URL } from '$lib/constants';\r\n\r\nexport const getOpenAIConfig = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\ntype OpenAIConfig = {\r\n\tENABLE_OPENAI_API: boolean;\r\n\tOPENAI_API_BASE_URLS: string[];\r\n\tOPENAI_API_KEYS: string[];\r\n\tOPENAI_API_CONFIGS: object;\r\n};\r\n\r\nexport const updateOpenAIConfig = async (token: string = '', config: OpenAIConfig) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\t...config\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getOpenAIUrls = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_BASE_URLS;\r\n};\r\n\r\nexport const updateOpenAIUrls = async (token: string = '', urls: string[]) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\turls: urls\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_BASE_URLS;\r\n};\r\n\r\nexport const getOpenAIKeys = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_KEYS;\r\n};\r\n\r\nexport const updateOpenAIKeys = async (token: string = '', keys: string[]) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tkeys: keys\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_KEYS;\r\n};\r\n\r\nexport const getOpenAIModelsDirect = async (url: string, key: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${url}/models`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(key && { authorization: `Bearer ${key}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\r\n\t\t\treturn [];\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getOpenAIModels = async (token: string, urlIdx?: number) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OPENAI_API_BASE_URL}/models${typeof urlIdx === 'number' ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t\t}\r\n\t\t}\r\n\t)\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\r\n\t\t\treturn [];\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const verifyOpenAIConnection = async (\r\n\ttoken: string = '',\r\n\turl: string = 'https://api.openai.com/v1',\r\n\tkey: string = '',\r\n\tdirect: boolean = false\r\n) => {\r\n\tif (!url) {\r\n\t\tthrow 'OpenAI: URL is required';\r\n\t}\r\n\r\n\tlet error = null;\r\n\tlet res = null;\r\n\r\n\tif (direct) {\r\n\t\tres = await fetch(`${url}/models`, {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${key}`,\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then(async (res) => {\r\n\t\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\t\treturn res.json();\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\r\n\t\t\t\treturn [];\r\n\t\t\t});\r\n\r\n\t\tif (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t} else {\r\n\t\tres = await fetch(`${OPENAI_API_BASE_URL}/verify`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\turl,\r\n\t\t\t\tkey\r\n\t\t\t})\r\n\t\t})\r\n\t\t\t.then(async (res) => {\r\n\t\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\t\treturn res.json();\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\r\n\t\t\t\treturn [];\r\n\t\t\t});\r\n\r\n\t\tif (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const chatCompletion = async (\r\n\ttoken: string = '',\r\n\tbody: object,\r\n\turl: string = `${WEBUI_BASE_URL}/api`\r\n): Promise<[Response | null, AbortController]> => {\r\n\tconst controller = new AbortController();\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${url}/chat/completions`, {\r\n\t\tsignal: controller.signal,\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(body)\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn [res, controller];\r\n};\r\n\r\nexport const generateOpenAIChatCompletion = async (\r\n\ttoken: string = '',\r\n\tbody: object,\r\n\turl: string = `${WEBUI_BASE_URL}/api`\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${url}/chat/completions`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(body)\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\terror = `${err?.detail ?? err}`;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const synthesizeOpenAISpeech = async (\r\n\ttoken: string = '',\r\n\tspeaker: string = 'alloy',\r\n\ttext: string = '',\r\n\tmodel: string = 'tts-1'\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/audio/speech`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tinput: text,\r\n\t\t\tvoice: speaker\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n"],"names":["getOpenAIConfig","token","error","res","OPENAI_API_BASE_URL","err","updateOpenAIConfig","config","getOpenAIModelsDirect","url","key","_a","getOpenAIModels","urlIdx","verifyOpenAIConnection","direct","chatCompletion","body","WEBUI_BASE_URL","controller","generateOpenAIChatCompletion"],"mappings":"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"}