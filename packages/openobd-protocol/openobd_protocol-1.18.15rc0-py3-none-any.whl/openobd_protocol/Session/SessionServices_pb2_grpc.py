# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2
from openobd_protocol.Session.Messages import ServiceResult_pb2 as openobd__protocol_dot_Session_dot_Messages_dot_ServiceResult__pb2
from openobd_protocol.Session.Messages import Session_pb2 as openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2


class sessionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.authenticate = channel.unary_unary(
                '/openOBD.v1.session/authenticate',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.FromString,
                )
        self.assertAuthenticationPossible = channel.unary_unary(
                '/openOBD.v1.session/assertAuthenticationPossible',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.openSessionTokenStream = channel.unary_stream(
                '/openOBD.v1.session/openSessionTokenStream',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.FromString,
                )
        self.getConfigurationList = channel.unary_unary(
                '/openOBD.v1.session/getConfigurationList',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.ConfigurationList.FromString,
                )
        self.finish = channel.unary_unary(
                '/openOBD.v1.session/finish',
                request_serializer=openobd__protocol_dot_Session_dot_Messages_dot_ServiceResult__pb2.ServiceResult.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )


class sessionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def authenticate(self, request, context):
        """
        The `authenticate()` rpc call is used to "claim" an openOBD session. Once an openOBD session is created and attached to
        a running connection on the Jifeline network it is in an 'available' state. The only allowed and also required call to continue with
        this session is this `authenticate()` call. It needs an initial bearer token (authentication token) that is present in the `SessionInfo` message.
        <br/>
        Once this call has been made, any subsequent calls need to be made using a new bearer token that is contained in the `SessionToken` response.
        It is advised to first set up a SessionToken stream using the `openSessionTokenStream()` rpc call.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def assertAuthenticationPossible(self, request, context):
        """
        The `assertAuthenticationPossible()` method can be called just like the `authenticate()` method. Only, it does not authenticate. It can be used to check whether the
        session is in the 'available' state. If it is not, this call will result in an exception. It needs, like the `authenticate()` call an initial bearer token (authentication token)
        that is present in the `SessionInfo` message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openSessionTokenStream(self, request, context):
        """
        The `openSessionTokenStream()` rpc call is used to open a continuous stream of `SessionToken` messages. When a new `SessionToken` is received on this stream
        the subsequent calls that are being made on an openOBD session need to incorporate the freshly received token as their bearer token in the header of their gRPC calls.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getConfigurationList(self, request, context):
        """
        The `getConfigurationList()` call will send all configured busses and channels and then close the stream.
        The client can use these messages to match the local configuration with the remote openOBD session configuration.
        This is, for example, useful when one specialized function sets up the communication with a specific module, unlocks it, and then hands over the communication control to another function.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finish(self, request, context):
        """
        The `finish(ServiceResult)` rpc call is used to gracefully finish an openOBD session. The `ServiceResult` argument message indicates whether the service was executed successfully.
        A new `authenticate()` rpc call can be made on the session using a fresh 'SessionInfo' message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_sessionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.authenticate,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.SerializeToString,
            ),
            'assertAuthenticationPossible': grpc.unary_unary_rpc_method_handler(
                    servicer.assertAuthenticationPossible,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'openSessionTokenStream': grpc.unary_stream_rpc_method_handler(
                    servicer.openSessionTokenStream,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.SerializeToString,
            ),
            'getConfigurationList': grpc.unary_unary_rpc_method_handler(
                    servicer.getConfigurationList,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.ConfigurationList.SerializeToString,
            ),
            'finish': grpc.unary_unary_rpc_method_handler(
                    servicer.finish,
                    request_deserializer=openobd__protocol_dot_Session_dot_Messages_dot_ServiceResult__pb2.ServiceResult.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.session', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class session(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/authenticate',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def assertAuthenticationPossible(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/assertAuthenticationPossible',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openSessionTokenStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/openOBD.v1.session/openSessionTokenStream',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.SessionToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getConfigurationList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/getConfigurationList',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Session_dot_Messages_dot_Session__pb2.ConfigurationList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def finish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.session/finish',
            openobd__protocol_dot_Session_dot_Messages_dot_ServiceResult__pb2.ServiceResult.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
