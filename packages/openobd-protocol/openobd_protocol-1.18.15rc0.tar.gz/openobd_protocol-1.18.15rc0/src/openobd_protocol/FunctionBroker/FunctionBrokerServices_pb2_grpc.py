# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.Function.Messages import Function_pb2 as openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2
from openobd_protocol.FunctionBroker.Messages import FunctionBroker_pb2 as openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2
from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2
from openobd_protocol.SessionController.Messages import SessionController_pb2 as openobd__protocol_dot_SessionController_dot_Messages_dot_SessionController__pb2


class functionBrokerStub(object):
    """
    The function broker is an intermediary between parties that offer their openOBD functions and parties that
    want to run a openOBD function of somebody else on their openOBD session.

    The function broker can be used by both function executors (we refer to them as function launchers) and function callers.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getFunctionBrokerToken = channel.unary_unary(
                '/openOBD.v1.functionBroker/getFunctionBrokerToken',
                request_serializer=openobd__protocol_dot_SessionController_dot_Messages_dot_SessionController__pb2.Authenticate.SerializeToString,
                response_deserializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionBrokerToken.FromString,
                )
        self.openFunctionStream = channel.stream_stream(
                '/openOBD.v1.functionBroker/openFunctionStream',
                request_serializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionUpdate.SerializeToString,
                response_deserializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionUpdate.FromString,
                )
        self.runFunction = channel.unary_unary(
                '/openOBD.v1.functionBroker/runFunction',
                request_serializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionCall.SerializeToString,
                response_deserializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionUpdate.FromString,
                )
        self.getFunctionRegistration = channel.unary_unary(
                '/openOBD.v1.functionBroker/getFunctionRegistration',
                request_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionId.SerializeToString,
                response_deserializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionRegistration.FromString,
                )
        self.generateFunctionSignature = channel.unary_unary(
                '/openOBD.v1.functionBroker/generateFunctionSignature',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionSignature.FromString,
                )


class functionBrokerServicer(object):
    """
    The function broker is an intermediary between parties that offer their openOBD functions and parties that
    want to run a openOBD function of somebody else on their openOBD session.

    The function broker can be used by both function executors (we refer to them as function launchers) and function callers.
    """

    def getFunctionBrokerToken(self, request, context):
        """
        This service is used to authenticate with the FunctionBroker service as a client.
        The credentials that are required to sent can be seen in Authenticate. It returns a FunctionBrokerToken to be received by the client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openFunctionStream(self, request_iterator, context):
        """
        The `openFunctionStream()` call opens a bi-directional stream.
        The outgoing stream is used by a function launcher to register its functions to the broker. One function launcher may
        send multiple function definitions over the same stream and register that they are on-line and ready to be called by another party.

        The incoming stream is use used for the function broker to forward function calls from a function caller to the function launcher.
        Only when all function registrations are registered as off-line, the bi-directional stream will be closed.

        The function broker regularly sends FunctionUpdate "ping" messages, that are meant to keep the stream open (and check if the function launcher is still there).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def runFunction(self, request, context):
        """
        The `runFunction()` call is used by function callers to execute a function, offered by a function launcher, on their openOBD session.
        The openOBD function that is being called should be registered as 'on-line' through the `openFunctionCallStream()` call.

        The function broker will check whether the call is being made for a registered and known function. If this function is
        registered as 'on-line' te function broker will then
        - check any preconditions like is the caller allowed to call this function
        - make a call `registerFunction()` and check whether the right function id is registered in the context
        - make a call `isAvailable()` to check whether the openOBD session is in the 'available' state
        - if all previous steps succeed it forwards the FunctionCall towards the correct function launcher through the open function call stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFunctionRegistration(self, request, context):
        """
        The `getFunctionRegistration()` may be used to function callers to check te availability and some more information of a certain function without executing it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def generateFunctionSignature(self, request, context):
        """
        The `generateFunctionSignature()` call can be used to generate a new function ID and signature.
        That function can then only be registered by your provider and with the correct signature.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_functionBrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getFunctionBrokerToken': grpc.unary_unary_rpc_method_handler(
                    servicer.getFunctionBrokerToken,
                    request_deserializer=openobd__protocol_dot_SessionController_dot_Messages_dot_SessionController__pb2.Authenticate.FromString,
                    response_serializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionBrokerToken.SerializeToString,
            ),
            'openFunctionStream': grpc.stream_stream_rpc_method_handler(
                    servicer.openFunctionStream,
                    request_deserializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionUpdate.FromString,
                    response_serializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionUpdate.SerializeToString,
            ),
            'runFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.runFunction,
                    request_deserializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionCall.FromString,
                    response_serializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionUpdate.SerializeToString,
            ),
            'getFunctionRegistration': grpc.unary_unary_rpc_method_handler(
                    servicer.getFunctionRegistration,
                    request_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionId.FromString,
                    response_serializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionRegistration.SerializeToString,
            ),
            'generateFunctionSignature': grpc.unary_unary_rpc_method_handler(
                    servicer.generateFunctionSignature,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionSignature.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.functionBroker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class functionBroker(object):
    """
    The function broker is an intermediary between parties that offer their openOBD functions and parties that
    want to run a openOBD function of somebody else on their openOBD session.

    The function broker can be used by both function executors (we refer to them as function launchers) and function callers.
    """

    @staticmethod
    def getFunctionBrokerToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.functionBroker/getFunctionBrokerToken',
            openobd__protocol_dot_SessionController_dot_Messages_dot_SessionController__pb2.Authenticate.SerializeToString,
            openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionBrokerToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openFunctionStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/openOBD.v1.functionBroker/openFunctionStream',
            openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionUpdate.SerializeToString,
            openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def runFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.functionBroker/runFunction',
            openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionCall.SerializeToString,
            openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFunctionRegistration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.functionBroker/getFunctionRegistration',
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionId.SerializeToString,
            openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionRegistration.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def generateFunctionSignature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.functionBroker/generateFunctionSignature',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_FunctionBroker_dot_Messages_dot_FunctionBroker__pb2.FunctionSignature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
