# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union
from datetime import datetime
from typing_extensions import Literal

import httpx

from ..types import aircraftstatusremark_update_params
from .._types import NOT_GIVEN, Body, Query, Headers, NoneType, NotGiven
from .._utils import maybe_transform, async_maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from .._base_client import make_request_options

__all__ = ["AircraftstatusremarkResource", "AsyncAircraftstatusremarkResource"]


class AircraftstatusremarkResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AircraftstatusremarkResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AircraftstatusremarkResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AircraftstatusremarkResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#with_streaming_response
        """
        return AircraftstatusremarkResourceWithStreamingResponse(self)

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_aircraft_status: str,
        source: str,
        text: str,
        body_id: str | NotGiven = NOT_GIVEN,
        alt_rmk_id: str | NotGiven = NOT_GIVEN,
        last_updated_at: Union[str, datetime] | NotGiven = NOT_GIVEN,
        last_updated_by: str | NotGiven = NOT_GIVEN,
        name: str | NotGiven = NOT_GIVEN,
        origin: str | NotGiven = NOT_GIVEN,
        timestamp: Union[str, datetime] | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """Service operation to update a single Aircraft Status Remark record.

        A specific
        role is required to perform this service operation. Please contact the UDL team
        for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_aircraft_status: The ID of the Aircraft Status to which this remark applies.

          source: Source of the data.

          text: The text of the remark.

          body_id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          alt_rmk_id: Unique identifier of the Aircraft Status Remark record from the originating
              system.

          last_updated_at: Time the remark was last updated in the originating system in ISO 8601 UTC
              format with millisecond precision.

          last_updated_by: The name or ID of the external user that updated this remark in the originating
              system.

          name: The name of the remark.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          timestamp: Time the remark was created in the originating system in ISO 8601 UTC format
              with millisecond precision.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/aircraftstatusremark/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_aircraft_status": id_aircraft_status,
                    "source": source,
                    "text": text,
                    "body_id": body_id,
                    "alt_rmk_id": alt_rmk_id,
                    "last_updated_at": last_updated_at,
                    "last_updated_by": last_updated_by,
                    "name": name,
                    "origin": origin,
                    "timestamp": timestamp,
                },
                aircraftstatusremark_update_params.AircraftstatusremarkUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to delete a single Aircraft Status Remark record specified by
        the passed ID path parameter. A specific role is required to perform this
        service operation. Please contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/aircraftstatusremark/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class AsyncAircraftstatusremarkResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncAircraftstatusremarkResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncAircraftstatusremarkResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncAircraftstatusremarkResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncAircraftstatusremarkResourceWithStreamingResponse(self)

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_aircraft_status: str,
        source: str,
        text: str,
        body_id: str | NotGiven = NOT_GIVEN,
        alt_rmk_id: str | NotGiven = NOT_GIVEN,
        last_updated_at: Union[str, datetime] | NotGiven = NOT_GIVEN,
        last_updated_by: str | NotGiven = NOT_GIVEN,
        name: str | NotGiven = NOT_GIVEN,
        origin: str | NotGiven = NOT_GIVEN,
        timestamp: Union[str, datetime] | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """Service operation to update a single Aircraft Status Remark record.

        A specific
        role is required to perform this service operation. Please contact the UDL team
        for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_aircraft_status: The ID of the Aircraft Status to which this remark applies.

          source: Source of the data.

          text: The text of the remark.

          body_id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          alt_rmk_id: Unique identifier of the Aircraft Status Remark record from the originating
              system.

          last_updated_at: Time the remark was last updated in the originating system in ISO 8601 UTC
              format with millisecond precision.

          last_updated_by: The name or ID of the external user that updated this remark in the originating
              system.

          name: The name of the remark.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          timestamp: Time the remark was created in the originating system in ISO 8601 UTC format
              with millisecond precision.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/aircraftstatusremark/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_aircraft_status": id_aircraft_status,
                    "source": source,
                    "text": text,
                    "body_id": body_id,
                    "alt_rmk_id": alt_rmk_id,
                    "last_updated_at": last_updated_at,
                    "last_updated_by": last_updated_by,
                    "name": name,
                    "origin": origin,
                    "timestamp": timestamp,
                },
                aircraftstatusremark_update_params.AircraftstatusremarkUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to delete a single Aircraft Status Remark record specified by
        the passed ID path parameter. A specific role is required to perform this
        service operation. Please contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/aircraftstatusremark/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class AircraftstatusremarkResourceWithRawResponse:
    def __init__(self, aircraftstatusremark: AircraftstatusremarkResource) -> None:
        self._aircraftstatusremark = aircraftstatusremark

        self.update = to_raw_response_wrapper(
            aircraftstatusremark.update,
        )
        self.delete = to_raw_response_wrapper(
            aircraftstatusremark.delete,
        )


class AsyncAircraftstatusremarkResourceWithRawResponse:
    def __init__(self, aircraftstatusremark: AsyncAircraftstatusremarkResource) -> None:
        self._aircraftstatusremark = aircraftstatusremark

        self.update = async_to_raw_response_wrapper(
            aircraftstatusremark.update,
        )
        self.delete = async_to_raw_response_wrapper(
            aircraftstatusremark.delete,
        )


class AircraftstatusremarkResourceWithStreamingResponse:
    def __init__(self, aircraftstatusremark: AircraftstatusremarkResource) -> None:
        self._aircraftstatusremark = aircraftstatusremark

        self.update = to_streamed_response_wrapper(
            aircraftstatusremark.update,
        )
        self.delete = to_streamed_response_wrapper(
            aircraftstatusremark.delete,
        )


class AsyncAircraftstatusremarkResourceWithStreamingResponse:
    def __init__(self, aircraftstatusremark: AsyncAircraftstatusremarkResource) -> None:
        self._aircraftstatusremark = aircraftstatusremark

        self.update = async_to_streamed_response_wrapper(
            aircraftstatusremark.update,
        )
        self.delete = async_to_streamed_response_wrapper(
            aircraftstatusremark.delete,
        )
