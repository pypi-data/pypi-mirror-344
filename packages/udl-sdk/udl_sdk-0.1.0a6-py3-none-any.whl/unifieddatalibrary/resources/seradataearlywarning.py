# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal

import httpx

from ..types import (
    seradataearlywarning_tuple_params,
    seradataearlywarning_create_params,
    seradataearlywarning_update_params,
)
from .._types import NOT_GIVEN, Body, Query, Headers, NoneType, NotGiven
from .._utils import maybe_transform, async_maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from .._base_client import make_request_options
from ..types.seradataearlywarning_get_response import SeradataearlywarningGetResponse
from ..types.seradataearlywarning_list_response import SeradataearlywarningListResponse
from ..types.seradataearlywarning_tuple_response import SeradataearlywarningTupleResponse

__all__ = ["SeradataearlywarningResource", "AsyncSeradataearlywarningResource"]


class SeradataearlywarningResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> SeradataearlywarningResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return SeradataearlywarningResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> SeradataearlywarningResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#with_streaming_response
        """
        return SeradataearlywarningResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        spacecraft_id: str,
        id: str | NotGiven = NOT_GIVEN,
        best_resolution: float | NotGiven = NOT_GIVEN,
        earth_pointing: bool | NotGiven = NOT_GIVEN,
        frequency_limits: str | NotGiven = NOT_GIVEN,
        ground_station_locations: str | NotGiven = NOT_GIVEN,
        ground_stations: str | NotGiven = NOT_GIVEN,
        hosted_for_company_org_id: str | NotGiven = NOT_GIVEN,
        id_ir: str | NotGiven = NOT_GIVEN,
        manufacturer_org_id: str | NotGiven = NOT_GIVEN,
        missile_launch_phase_detection_ability: str | NotGiven = NOT_GIVEN,
        name: str | NotGiven = NOT_GIVEN,
        origin: str | NotGiven = NOT_GIVEN,
        partner_spacecraft_id: str | NotGiven = NOT_GIVEN,
        payload_notes: str | NotGiven = NOT_GIVEN,
        spectral_bands: str | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to take a single SeradataEarlyWarning as a POST body and
        ingest into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          spacecraft_id: Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).

          id: Unique identifier of the record, auto-generated by the system.

          best_resolution: Best resolution for this IR in meters.

          earth_pointing: Is the sensor Earth Pointing.

          frequency_limits: Frequency Limits for this IR.

          ground_station_locations: Ground Station Locations for this IR.

          ground_stations: Ground Station info for this IR.

          hosted_for_company_org_id: Hosted for company/Organization Id.

          id_ir: UUID of the parent IR record.

          manufacturer_org_id: Manufacturer Organization Id.

          missile_launch_phase_detection_ability: Missile Launch Phase Detection Ability.

          name: Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          partner_spacecraft_id: Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).

          payload_notes: Payload notes.

          spectral_bands: Spectral Bands, e.g. Infra-Red.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/seradataearlywarning",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "spacecraft_id": spacecraft_id,
                    "id": id,
                    "best_resolution": best_resolution,
                    "earth_pointing": earth_pointing,
                    "frequency_limits": frequency_limits,
                    "ground_station_locations": ground_station_locations,
                    "ground_stations": ground_stations,
                    "hosted_for_company_org_id": hosted_for_company_org_id,
                    "id_ir": id_ir,
                    "manufacturer_org_id": manufacturer_org_id,
                    "missile_launch_phase_detection_ability": missile_launch_phase_detection_ability,
                    "name": name,
                    "origin": origin,
                    "partner_spacecraft_id": partner_spacecraft_id,
                    "payload_notes": payload_notes,
                    "spectral_bands": spectral_bands,
                },
                seradataearlywarning_create_params.SeradataearlywarningCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        spacecraft_id: str,
        body_id: str | NotGiven = NOT_GIVEN,
        best_resolution: float | NotGiven = NOT_GIVEN,
        earth_pointing: bool | NotGiven = NOT_GIVEN,
        frequency_limits: str | NotGiven = NOT_GIVEN,
        ground_station_locations: str | NotGiven = NOT_GIVEN,
        ground_stations: str | NotGiven = NOT_GIVEN,
        hosted_for_company_org_id: str | NotGiven = NOT_GIVEN,
        id_ir: str | NotGiven = NOT_GIVEN,
        manufacturer_org_id: str | NotGiven = NOT_GIVEN,
        missile_launch_phase_detection_ability: str | NotGiven = NOT_GIVEN,
        name: str | NotGiven = NOT_GIVEN,
        origin: str | NotGiven = NOT_GIVEN,
        partner_spacecraft_id: str | NotGiven = NOT_GIVEN,
        payload_notes: str | NotGiven = NOT_GIVEN,
        spectral_bands: str | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """Service operation to update an SeradataEarlyWarning.

        A specific role is required
        to perform this service operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          spacecraft_id: Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).

          body_id: Unique identifier of the record, auto-generated by the system.

          best_resolution: Best resolution for this IR in meters.

          earth_pointing: Is the sensor Earth Pointing.

          frequency_limits: Frequency Limits for this IR.

          ground_station_locations: Ground Station Locations for this IR.

          ground_stations: Ground Station info for this IR.

          hosted_for_company_org_id: Hosted for company/Organization Id.

          id_ir: UUID of the parent IR record.

          manufacturer_org_id: Manufacturer Organization Id.

          missile_launch_phase_detection_ability: Missile Launch Phase Detection Ability.

          name: Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          partner_spacecraft_id: Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).

          payload_notes: Payload notes.

          spectral_bands: Spectral Bands, e.g. Infra-Red.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/seradataearlywarning/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "spacecraft_id": spacecraft_id,
                    "body_id": body_id,
                    "best_resolution": best_resolution,
                    "earth_pointing": earth_pointing,
                    "frequency_limits": frequency_limits,
                    "ground_station_locations": ground_station_locations,
                    "ground_stations": ground_stations,
                    "hosted_for_company_org_id": hosted_for_company_org_id,
                    "id_ir": id_ir,
                    "manufacturer_org_id": manufacturer_org_id,
                    "missile_launch_phase_detection_ability": missile_launch_phase_detection_ability,
                    "name": name,
                    "origin": origin,
                    "partner_spacecraft_id": partner_spacecraft_id,
                    "payload_notes": payload_notes,
                    "spectral_bands": spectral_bands,
                },
                seradataearlywarning_update_params.SeradataearlywarningUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SeradataearlywarningListResponse:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.
        """
        return self._get(
            "/udl/seradataearlywarning",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SeradataearlywarningListResponse,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to delete an SeradataEarlyWarning specified by the passed ID
        path parameter. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/seradataearlywarning/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def count(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return self._get(
            "/udl/seradataearlywarning/count",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=str,
        )

    def get(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SeradataearlywarningGetResponse:
        """
        Service operation to get a single SeradataEarlyWarning by its unique ID passed
        as a path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/seradataearlywarning/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SeradataearlywarningGetResponse,
        )

    def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._get(
            "/udl/seradataearlywarning/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def tuple(
        self,
        *,
        columns: str,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SeradataearlywarningTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get(
            "/udl/seradataearlywarning/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {"columns": columns}, seradataearlywarning_tuple_params.SeradataearlywarningTupleParams
                ),
            ),
            cast_to=SeradataearlywarningTupleResponse,
        )


class AsyncSeradataearlywarningResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncSeradataearlywarningResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncSeradataearlywarningResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncSeradataearlywarningResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncSeradataearlywarningResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        spacecraft_id: str,
        id: str | NotGiven = NOT_GIVEN,
        best_resolution: float | NotGiven = NOT_GIVEN,
        earth_pointing: bool | NotGiven = NOT_GIVEN,
        frequency_limits: str | NotGiven = NOT_GIVEN,
        ground_station_locations: str | NotGiven = NOT_GIVEN,
        ground_stations: str | NotGiven = NOT_GIVEN,
        hosted_for_company_org_id: str | NotGiven = NOT_GIVEN,
        id_ir: str | NotGiven = NOT_GIVEN,
        manufacturer_org_id: str | NotGiven = NOT_GIVEN,
        missile_launch_phase_detection_ability: str | NotGiven = NOT_GIVEN,
        name: str | NotGiven = NOT_GIVEN,
        origin: str | NotGiven = NOT_GIVEN,
        partner_spacecraft_id: str | NotGiven = NOT_GIVEN,
        payload_notes: str | NotGiven = NOT_GIVEN,
        spectral_bands: str | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to take a single SeradataEarlyWarning as a POST body and
        ingest into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          spacecraft_id: Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).

          id: Unique identifier of the record, auto-generated by the system.

          best_resolution: Best resolution for this IR in meters.

          earth_pointing: Is the sensor Earth Pointing.

          frequency_limits: Frequency Limits for this IR.

          ground_station_locations: Ground Station Locations for this IR.

          ground_stations: Ground Station info for this IR.

          hosted_for_company_org_id: Hosted for company/Organization Id.

          id_ir: UUID of the parent IR record.

          manufacturer_org_id: Manufacturer Organization Id.

          missile_launch_phase_detection_ability: Missile Launch Phase Detection Ability.

          name: Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          partner_spacecraft_id: Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).

          payload_notes: Payload notes.

          spectral_bands: Spectral Bands, e.g. Infra-Red.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/seradataearlywarning",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "spacecraft_id": spacecraft_id,
                    "id": id,
                    "best_resolution": best_resolution,
                    "earth_pointing": earth_pointing,
                    "frequency_limits": frequency_limits,
                    "ground_station_locations": ground_station_locations,
                    "ground_stations": ground_stations,
                    "hosted_for_company_org_id": hosted_for_company_org_id,
                    "id_ir": id_ir,
                    "manufacturer_org_id": manufacturer_org_id,
                    "missile_launch_phase_detection_ability": missile_launch_phase_detection_ability,
                    "name": name,
                    "origin": origin,
                    "partner_spacecraft_id": partner_spacecraft_id,
                    "payload_notes": payload_notes,
                    "spectral_bands": spectral_bands,
                },
                seradataearlywarning_create_params.SeradataearlywarningCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        spacecraft_id: str,
        body_id: str | NotGiven = NOT_GIVEN,
        best_resolution: float | NotGiven = NOT_GIVEN,
        earth_pointing: bool | NotGiven = NOT_GIVEN,
        frequency_limits: str | NotGiven = NOT_GIVEN,
        ground_station_locations: str | NotGiven = NOT_GIVEN,
        ground_stations: str | NotGiven = NOT_GIVEN,
        hosted_for_company_org_id: str | NotGiven = NOT_GIVEN,
        id_ir: str | NotGiven = NOT_GIVEN,
        manufacturer_org_id: str | NotGiven = NOT_GIVEN,
        missile_launch_phase_detection_ability: str | NotGiven = NOT_GIVEN,
        name: str | NotGiven = NOT_GIVEN,
        origin: str | NotGiven = NOT_GIVEN,
        partner_spacecraft_id: str | NotGiven = NOT_GIVEN,
        payload_notes: str | NotGiven = NOT_GIVEN,
        spectral_bands: str | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """Service operation to update an SeradataEarlyWarning.

        A specific role is required
        to perform this service operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          spacecraft_id: Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).

          body_id: Unique identifier of the record, auto-generated by the system.

          best_resolution: Best resolution for this IR in meters.

          earth_pointing: Is the sensor Earth Pointing.

          frequency_limits: Frequency Limits for this IR.

          ground_station_locations: Ground Station Locations for this IR.

          ground_stations: Ground Station info for this IR.

          hosted_for_company_org_id: Hosted for company/Organization Id.

          id_ir: UUID of the parent IR record.

          manufacturer_org_id: Manufacturer Organization Id.

          missile_launch_phase_detection_ability: Missile Launch Phase Detection Ability.

          name: Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          partner_spacecraft_id: Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).

          payload_notes: Payload notes.

          spectral_bands: Spectral Bands, e.g. Infra-Red.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/seradataearlywarning/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "spacecraft_id": spacecraft_id,
                    "body_id": body_id,
                    "best_resolution": best_resolution,
                    "earth_pointing": earth_pointing,
                    "frequency_limits": frequency_limits,
                    "ground_station_locations": ground_station_locations,
                    "ground_stations": ground_stations,
                    "hosted_for_company_org_id": hosted_for_company_org_id,
                    "id_ir": id_ir,
                    "manufacturer_org_id": manufacturer_org_id,
                    "missile_launch_phase_detection_ability": missile_launch_phase_detection_ability,
                    "name": name,
                    "origin": origin,
                    "partner_spacecraft_id": partner_spacecraft_id,
                    "payload_notes": payload_notes,
                    "spectral_bands": spectral_bands,
                },
                seradataearlywarning_update_params.SeradataearlywarningUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def list(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SeradataearlywarningListResponse:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.
        """
        return await self._get(
            "/udl/seradataearlywarning",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SeradataearlywarningListResponse,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to delete an SeradataEarlyWarning specified by the passed ID
        path parameter. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/seradataearlywarning/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def count(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return await self._get(
            "/udl/seradataearlywarning/count",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=str,
        )

    async def get(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SeradataearlywarningGetResponse:
        """
        Service operation to get a single SeradataEarlyWarning by its unique ID passed
        as a path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/seradataearlywarning/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SeradataearlywarningGetResponse,
        )

    async def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._get(
            "/udl/seradataearlywarning/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def tuple(
        self,
        *,
        columns: str,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SeradataearlywarningTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._get(
            "/udl/seradataearlywarning/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {"columns": columns}, seradataearlywarning_tuple_params.SeradataearlywarningTupleParams
                ),
            ),
            cast_to=SeradataearlywarningTupleResponse,
        )


class SeradataearlywarningResourceWithRawResponse:
    def __init__(self, seradataearlywarning: SeradataearlywarningResource) -> None:
        self._seradataearlywarning = seradataearlywarning

        self.create = to_raw_response_wrapper(
            seradataearlywarning.create,
        )
        self.update = to_raw_response_wrapper(
            seradataearlywarning.update,
        )
        self.list = to_raw_response_wrapper(
            seradataearlywarning.list,
        )
        self.delete = to_raw_response_wrapper(
            seradataearlywarning.delete,
        )
        self.count = to_raw_response_wrapper(
            seradataearlywarning.count,
        )
        self.get = to_raw_response_wrapper(
            seradataearlywarning.get,
        )
        self.queryhelp = to_raw_response_wrapper(
            seradataearlywarning.queryhelp,
        )
        self.tuple = to_raw_response_wrapper(
            seradataearlywarning.tuple,
        )


class AsyncSeradataearlywarningResourceWithRawResponse:
    def __init__(self, seradataearlywarning: AsyncSeradataearlywarningResource) -> None:
        self._seradataearlywarning = seradataearlywarning

        self.create = async_to_raw_response_wrapper(
            seradataearlywarning.create,
        )
        self.update = async_to_raw_response_wrapper(
            seradataearlywarning.update,
        )
        self.list = async_to_raw_response_wrapper(
            seradataearlywarning.list,
        )
        self.delete = async_to_raw_response_wrapper(
            seradataearlywarning.delete,
        )
        self.count = async_to_raw_response_wrapper(
            seradataearlywarning.count,
        )
        self.get = async_to_raw_response_wrapper(
            seradataearlywarning.get,
        )
        self.queryhelp = async_to_raw_response_wrapper(
            seradataearlywarning.queryhelp,
        )
        self.tuple = async_to_raw_response_wrapper(
            seradataearlywarning.tuple,
        )


class SeradataearlywarningResourceWithStreamingResponse:
    def __init__(self, seradataearlywarning: SeradataearlywarningResource) -> None:
        self._seradataearlywarning = seradataearlywarning

        self.create = to_streamed_response_wrapper(
            seradataearlywarning.create,
        )
        self.update = to_streamed_response_wrapper(
            seradataearlywarning.update,
        )
        self.list = to_streamed_response_wrapper(
            seradataearlywarning.list,
        )
        self.delete = to_streamed_response_wrapper(
            seradataearlywarning.delete,
        )
        self.count = to_streamed_response_wrapper(
            seradataearlywarning.count,
        )
        self.get = to_streamed_response_wrapper(
            seradataearlywarning.get,
        )
        self.queryhelp = to_streamed_response_wrapper(
            seradataearlywarning.queryhelp,
        )
        self.tuple = to_streamed_response_wrapper(
            seradataearlywarning.tuple,
        )


class AsyncSeradataearlywarningResourceWithStreamingResponse:
    def __init__(self, seradataearlywarning: AsyncSeradataearlywarningResource) -> None:
        self._seradataearlywarning = seradataearlywarning

        self.create = async_to_streamed_response_wrapper(
            seradataearlywarning.create,
        )
        self.update = async_to_streamed_response_wrapper(
            seradataearlywarning.update,
        )
        self.list = async_to_streamed_response_wrapper(
            seradataearlywarning.list,
        )
        self.delete = async_to_streamed_response_wrapper(
            seradataearlywarning.delete,
        )
        self.count = async_to_streamed_response_wrapper(
            seradataearlywarning.count,
        )
        self.get = async_to_streamed_response_wrapper(
            seradataearlywarning.get,
        )
        self.queryhelp = async_to_streamed_response_wrapper(
            seradataearlywarning.queryhelp,
        )
        self.tuple = async_to_streamed_response_wrapper(
            seradataearlywarning.tuple,
        )
