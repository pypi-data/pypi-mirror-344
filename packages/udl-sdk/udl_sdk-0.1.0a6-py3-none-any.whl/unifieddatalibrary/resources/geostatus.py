# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import date
from typing_extensions import Literal

import httpx

from ..types import (
    geostatus_list_params,
    geostatus_count_params,
    geostatus_tuple_params,
    geostatus_create_params,
    geostatus_create_bulk_params,
)
from .._types import NOT_GIVEN, Body, Query, Headers, NoneType, NotGiven
from .._utils import maybe_transform, async_maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from .._base_client import make_request_options
from ..types.geostatus_list_response import GeostatusListResponse
from ..types.geostatus_tuple_response import GeostatusTupleResponse
from ..types.udl.geostatus.geo_status_full import GeoStatusFull

__all__ = ["GeostatusResource", "AsyncGeostatusResource"]


class GeostatusResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> GeostatusResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return GeostatusResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> GeostatusResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#with_streaming_response
        """
        return GeostatusResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        id: str | NotGiven = NOT_GIVEN,
        confidence_level: str | NotGiven = NOT_GIVEN,
        longitude_max: float | NotGiven = NOT_GIVEN,
        longitude_min: float | NotGiven = NOT_GIVEN,
        longitude_rate: float | NotGiven = NOT_GIVEN,
        lost_flag: bool | NotGiven = NOT_GIVEN,
        object_status: str | NotGiven = NOT_GIVEN,
        origin: str | NotGiven = NOT_GIVEN,
        orig_object_id: str | NotGiven = NOT_GIVEN,
        plane_change_status: str | NotGiven = NOT_GIVEN,
        raw_file_uri: str | NotGiven = NOT_GIVEN,
        relative_energy: float | NotGiven = NOT_GIVEN,
        sat_no: int | NotGiven = NOT_GIVEN,
        sc: float | NotGiven = NOT_GIVEN,
        semi_annual_corr_flag: bool | NotGiven = NOT_GIVEN,
        ss: float | NotGiven = NOT_GIVEN,
        trough_type: str | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to take a single GEOStatus record as a POST body and ingest
        into the database. This operation is not intended to be used for automated feeds
        into UDL. Data providers should contact the UDL team for specific role
        assignments and for instructions on setting up a permanent feed through an
        alternate mechanism.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          confidence_level: Indicates the confidence level in the entry. (Low, Medium, High).

          longitude_max: Maximum longitude for this object. WGS-84 longitude of the spacecraft position,
              in degrees. 0 to 360 degrees.

          longitude_min: Minimum longitude for this object. WGS-84 longitude of the spacecraft position,
              in degrees. 0 to 360 degrees.

          longitude_rate: Corrective or overriding long term trend for longitudinal change in degrees/day.

          lost_flag: Lost space object indicator. (True or False).

          object_status: Space object status. (Active, Dead, Unknown).

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          orig_object_id: Optional identifier provided to indicate the target onorbit. This may be an
              internal identifier and not necessarily map to a valid satellite number.

          plane_change_status: Geosynchronous plane changing status. (Current, Never, Former, Future).

          raw_file_uri: Optional URI location in the document repository of the raw file parsed by the
              system to produce this record. To download the raw file, prepend
              https://udl-hostname/scs/download?id= to this value.

          relative_energy: Objects displacement from geostationary orbit in deg^2/day^2.

          sat_no: Satellite/catalog number of the target on-orbit object.

          sc: Sine of inclination times the cosine of right ascension.

          semi_annual_corr_flag: Semi-annual correction. (True or False).

          ss: Sine of inclination times the sine of right ascension.

          trough_type:
              Indicates the trough (gravity well) or drift direction of a space object:

              255 - Influenced by 255° longitude trough.

              75 - Influenced by 75° longitude trough.

              Both - Oscillating between both 255 and 75 troughs.

              East - Drifting eastward; large relative energy and a period less than 1436.1
              minutes.

              West - Drifting westward; large relative energy and a period greater than 1436.2
              minutes.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/geostatus",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "id": id,
                    "confidence_level": confidence_level,
                    "longitude_max": longitude_max,
                    "longitude_min": longitude_min,
                    "longitude_rate": longitude_rate,
                    "lost_flag": lost_flag,
                    "object_status": object_status,
                    "origin": origin,
                    "orig_object_id": orig_object_id,
                    "plane_change_status": plane_change_status,
                    "raw_file_uri": raw_file_uri,
                    "relative_energy": relative_energy,
                    "sat_no": sat_no,
                    "sc": sc,
                    "semi_annual_corr_flag": semi_annual_corr_flag,
                    "ss": ss,
                    "trough_type": trough_type,
                },
                geostatus_create_params.GeostatusCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        created_at: Union[str, date],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> GeostatusListResponse:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get(
            "/udl/geostatus",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform({"created_at": created_at}, geostatus_list_params.GeostatusListParams),
            ),
            cast_to=GeostatusListResponse,
        )

    def count(
        self,
        *,
        created_at: Union[str, date],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return self._get(
            "/udl/geostatus/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform({"created_at": created_at}, geostatus_count_params.GeostatusCountParams),
            ),
            cast_to=str,
        )

    def create_bulk(
        self,
        *,
        body: Iterable[geostatus_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of
        GEOStatus records as a POST body and ingest into the database. This operation is
        not intended to be used for automated feeds into UDL. Data providers should
        contact the UDL team for specific role assignments and for instructions on
        setting up a permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/geostatus/createBulk",
            body=maybe_transform(body, Iterable[geostatus_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def get(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> GeoStatusFull:
        """
        Service operation to get a single GEOStatus record by its unique ID passed as a
        path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/geostatus/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=GeoStatusFull,
        )

    def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._get(
            "/udl/geostatus/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def tuple(
        self,
        *,
        columns: str,
        created_at: Union[str, date],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> GeostatusTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get(
            "/udl/geostatus/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "columns": columns,
                        "created_at": created_at,
                    },
                    geostatus_tuple_params.GeostatusTupleParams,
                ),
            ),
            cast_to=GeostatusTupleResponse,
        )


class AsyncGeostatusResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncGeostatusResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncGeostatusResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncGeostatusResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/rsivilli-bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncGeostatusResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        id: str | NotGiven = NOT_GIVEN,
        confidence_level: str | NotGiven = NOT_GIVEN,
        longitude_max: float | NotGiven = NOT_GIVEN,
        longitude_min: float | NotGiven = NOT_GIVEN,
        longitude_rate: float | NotGiven = NOT_GIVEN,
        lost_flag: bool | NotGiven = NOT_GIVEN,
        object_status: str | NotGiven = NOT_GIVEN,
        origin: str | NotGiven = NOT_GIVEN,
        orig_object_id: str | NotGiven = NOT_GIVEN,
        plane_change_status: str | NotGiven = NOT_GIVEN,
        raw_file_uri: str | NotGiven = NOT_GIVEN,
        relative_energy: float | NotGiven = NOT_GIVEN,
        sat_no: int | NotGiven = NOT_GIVEN,
        sc: float | NotGiven = NOT_GIVEN,
        semi_annual_corr_flag: bool | NotGiven = NOT_GIVEN,
        ss: float | NotGiven = NOT_GIVEN,
        trough_type: str | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to take a single GEOStatus record as a POST body and ingest
        into the database. This operation is not intended to be used for automated feeds
        into UDL. Data providers should contact the UDL team for specific role
        assignments and for instructions on setting up a permanent feed through an
        alternate mechanism.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          confidence_level: Indicates the confidence level in the entry. (Low, Medium, High).

          longitude_max: Maximum longitude for this object. WGS-84 longitude of the spacecraft position,
              in degrees. 0 to 360 degrees.

          longitude_min: Minimum longitude for this object. WGS-84 longitude of the spacecraft position,
              in degrees. 0 to 360 degrees.

          longitude_rate: Corrective or overriding long term trend for longitudinal change in degrees/day.

          lost_flag: Lost space object indicator. (True or False).

          object_status: Space object status. (Active, Dead, Unknown).

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          orig_object_id: Optional identifier provided to indicate the target onorbit. This may be an
              internal identifier and not necessarily map to a valid satellite number.

          plane_change_status: Geosynchronous plane changing status. (Current, Never, Former, Future).

          raw_file_uri: Optional URI location in the document repository of the raw file parsed by the
              system to produce this record. To download the raw file, prepend
              https://udl-hostname/scs/download?id= to this value.

          relative_energy: Objects displacement from geostationary orbit in deg^2/day^2.

          sat_no: Satellite/catalog number of the target on-orbit object.

          sc: Sine of inclination times the cosine of right ascension.

          semi_annual_corr_flag: Semi-annual correction. (True or False).

          ss: Sine of inclination times the sine of right ascension.

          trough_type:
              Indicates the trough (gravity well) or drift direction of a space object:

              255 - Influenced by 255° longitude trough.

              75 - Influenced by 75° longitude trough.

              Both - Oscillating between both 255 and 75 troughs.

              East - Drifting eastward; large relative energy and a period less than 1436.1
              minutes.

              West - Drifting westward; large relative energy and a period greater than 1436.2
              minutes.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/geostatus",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "id": id,
                    "confidence_level": confidence_level,
                    "longitude_max": longitude_max,
                    "longitude_min": longitude_min,
                    "longitude_rate": longitude_rate,
                    "lost_flag": lost_flag,
                    "object_status": object_status,
                    "origin": origin,
                    "orig_object_id": orig_object_id,
                    "plane_change_status": plane_change_status,
                    "raw_file_uri": raw_file_uri,
                    "relative_energy": relative_energy,
                    "sat_no": sat_no,
                    "sc": sc,
                    "semi_annual_corr_flag": semi_annual_corr_flag,
                    "ss": ss,
                    "trough_type": trough_type,
                },
                geostatus_create_params.GeostatusCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def list(
        self,
        *,
        created_at: Union[str, date],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> GeostatusListResponse:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._get(
            "/udl/geostatus",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {"created_at": created_at}, geostatus_list_params.GeostatusListParams
                ),
            ),
            cast_to=GeostatusListResponse,
        )

    async def count(
        self,
        *,
        created_at: Union[str, date],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return await self._get(
            "/udl/geostatus/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {"created_at": created_at}, geostatus_count_params.GeostatusCountParams
                ),
            ),
            cast_to=str,
        )

    async def create_bulk(
        self,
        *,
        body: Iterable[geostatus_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of
        GEOStatus records as a POST body and ingest into the database. This operation is
        not intended to be used for automated feeds into UDL. Data providers should
        contact the UDL team for specific role assignments and for instructions on
        setting up a permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/geostatus/createBulk",
            body=await async_maybe_transform(body, Iterable[geostatus_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def get(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> GeoStatusFull:
        """
        Service operation to get a single GEOStatus record by its unique ID passed as a
        path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/geostatus/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=GeoStatusFull,
        )

    async def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> None:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._get(
            "/udl/geostatus/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def tuple(
        self,
        *,
        columns: str,
        created_at: Union[str, date],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> GeostatusTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._get(
            "/udl/geostatus/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "columns": columns,
                        "created_at": created_at,
                    },
                    geostatus_tuple_params.GeostatusTupleParams,
                ),
            ),
            cast_to=GeostatusTupleResponse,
        )


class GeostatusResourceWithRawResponse:
    def __init__(self, geostatus: GeostatusResource) -> None:
        self._geostatus = geostatus

        self.create = to_raw_response_wrapper(
            geostatus.create,
        )
        self.list = to_raw_response_wrapper(
            geostatus.list,
        )
        self.count = to_raw_response_wrapper(
            geostatus.count,
        )
        self.create_bulk = to_raw_response_wrapper(
            geostatus.create_bulk,
        )
        self.get = to_raw_response_wrapper(
            geostatus.get,
        )
        self.queryhelp = to_raw_response_wrapper(
            geostatus.queryhelp,
        )
        self.tuple = to_raw_response_wrapper(
            geostatus.tuple,
        )


class AsyncGeostatusResourceWithRawResponse:
    def __init__(self, geostatus: AsyncGeostatusResource) -> None:
        self._geostatus = geostatus

        self.create = async_to_raw_response_wrapper(
            geostatus.create,
        )
        self.list = async_to_raw_response_wrapper(
            geostatus.list,
        )
        self.count = async_to_raw_response_wrapper(
            geostatus.count,
        )
        self.create_bulk = async_to_raw_response_wrapper(
            geostatus.create_bulk,
        )
        self.get = async_to_raw_response_wrapper(
            geostatus.get,
        )
        self.queryhelp = async_to_raw_response_wrapper(
            geostatus.queryhelp,
        )
        self.tuple = async_to_raw_response_wrapper(
            geostatus.tuple,
        )


class GeostatusResourceWithStreamingResponse:
    def __init__(self, geostatus: GeostatusResource) -> None:
        self._geostatus = geostatus

        self.create = to_streamed_response_wrapper(
            geostatus.create,
        )
        self.list = to_streamed_response_wrapper(
            geostatus.list,
        )
        self.count = to_streamed_response_wrapper(
            geostatus.count,
        )
        self.create_bulk = to_streamed_response_wrapper(
            geostatus.create_bulk,
        )
        self.get = to_streamed_response_wrapper(
            geostatus.get,
        )
        self.queryhelp = to_streamed_response_wrapper(
            geostatus.queryhelp,
        )
        self.tuple = to_streamed_response_wrapper(
            geostatus.tuple,
        )


class AsyncGeostatusResourceWithStreamingResponse:
    def __init__(self, geostatus: AsyncGeostatusResource) -> None:
        self._geostatus = geostatus

        self.create = async_to_streamed_response_wrapper(
            geostatus.create,
        )
        self.list = async_to_streamed_response_wrapper(
            geostatus.list,
        )
        self.count = async_to_streamed_response_wrapper(
            geostatus.count,
        )
        self.create_bulk = async_to_streamed_response_wrapper(
            geostatus.create_bulk,
        )
        self.get = async_to_streamed_response_wrapper(
            geostatus.get,
        )
        self.queryhelp = async_to_streamed_response_wrapper(
            geostatus.queryhelp,
        )
        self.tuple = async_to_streamed_response_wrapper(
            geostatus.tuple,
        )
