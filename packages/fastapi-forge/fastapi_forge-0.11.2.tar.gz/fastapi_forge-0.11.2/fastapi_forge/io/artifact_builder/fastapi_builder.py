import asyncio
from pathlib import Path

from fastapi_forge.enums import FieldDataTypeEnum, HTTPMethodEnum
from fastapi_forge.logger import logger
from fastapi_forge.render import create_jinja_render_manager
from fastapi_forge.render.manager import RenderManager
from fastapi_forge.schemas import (
    Model,
    ModelField,
    ModelFieldMetadata,
    ProjectSpec,
)
from fastapi_forge.utils.string_utils import camel_to_snake

from ..file import FileWriter
from .protocols import ArtifactBuilder

TEST_RENDERERS: dict[HTTPMethodEnum, str] = {
    HTTPMethodEnum.GET: "test_get",
    HTTPMethodEnum.GET_ID: "test_get_id",
    HTTPMethodEnum.POST: "test_post",
    HTTPMethodEnum.PATCH: "test_patch",
    HTTPMethodEnum.DELETE: "test_delete",
}


class FastAPIArtifactBuilder(ArtifactBuilder):
    def __init__(
        self,
        project_spec: ProjectSpec,
        file_writer: FileWriter,
        base_path: Path | None = None,
        render_manager: RenderManager | None = None,
    ) -> None:
        self.project_spec = project_spec
        self.file_writer = file_writer
        self.project_name = project_spec.project_name
        self.base_path = base_path or Path.cwd()
        self.project_dir = self.base_path / self.project_name
        self.package_dir = self.project_dir / self.project_name
        self.render_manager = render_manager or create_jinja_render_manager(
            project_name=self.project_name
        )
        self._insert_relation_fields()

    async def build_artifacts(self) -> None:
        """Builds the project artifacts based on the project specification."""
        logger.info(f"Building project artifacts for '{self.project_name}'...")
        await self._init_project_directories()

        tasks = []

        if self.project_spec.custom_enums:
            tasks.append(self._write_enums())

        for model in self.project_spec.models:
            tasks.append(self._write_artifact("models", model, "model"))

            metadata = model.metadata
            if metadata.create_dtos:
                tasks.append(self._write_artifact("dtos", model, "dto"))
            if metadata.create_daos:
                tasks.append(self._write_artifact("daos", model, "dao"))
            if metadata.create_endpoints:
                tasks.append(self._write_artifact("routes", model, "router"))
            if metadata.create_tests:
                tasks.append(self._write_tests(model))

        await asyncio.gather(*tasks)
        logger.info(f"Project artifacts for '{self.project_name}' built successfully.")

    def _insert_relation_fields(self) -> None:
        """Adds ModelFields to a model, based on its relationships."""
        for model in self.project_spec.models:
            field_names_set = {field.name for field in model.fields}
            for relation in model.relationships:
                if relation.field_name in field_names_set:
                    continue
                model.fields.append(
                    ModelField(
                        name=relation.field_name,
                        type=FieldDataTypeEnum.UUID,
                        primary_key=False,
                        nullable=relation.nullable,
                        unique=relation.unique,
                        index=relation.index,
                        metadata=ModelFieldMetadata(is_foreign_key=True),
                    ),
                )

    async def _create_directory(self, path: Path) -> None:
        if not path.exists():
            path.mkdir(parents=True)
            logger.info(f"Created directory: {path}")

    async def _init_project_directories(self) -> None:
        await self._create_directory(self.project_dir)
        await self._create_directory(self.package_dir)

    async def _create_module_path(self, module: str) -> Path:
        path = self.package_dir / module
        await self._create_directory(path)
        return path

    async def _write_artifact(
        self, module: str, model: Model, renderer_type: str
    ) -> None:
        path = await self._create_module_path(module)
        file_name = f"{camel_to_snake(model.name)}_{module}.py"
        renderer = self.render_manager.get_renderer(renderer_type)
        content = renderer.render(model)
        await self.file_writer.write(path / file_name, content)

    async def _write_tests(self, model: Model) -> None:
        test_dir = (
            self.project_dir / "tests" / "endpoint_tests" / camel_to_snake(model.name)
        )
        await self._create_directory(test_dir)
        await self.file_writer.write(
            test_dir / "__init__.py", "# Automatically generated by FastAPI Forge\n"
        )

        tasks = []
        for method, renderer_type in TEST_RENDERERS.items():
            method_suffix = "id" if method == HTTPMethodEnum.GET_ID else ""
            file_name = (
                f"test_{method.value.replace('_id', '')}"
                f"_{camel_to_snake(model.name)}"
                f"{f'_{method_suffix}' if method_suffix else ''}"
                ".py"
            )
            renderer = self.render_manager.get_renderer(renderer_type)
            tasks.append(
                self.file_writer.write(test_dir / file_name, renderer.render(model))
            )

        await asyncio.gather(*tasks)

    async def _write_enums(self) -> None:
        path = self.package_dir / "enums.py"
        renderer = self.render_manager.get_renderer("enum")
        content = renderer.render(self.project_spec.custom_enums)
        await self.file_writer.write(path, content)
