Metadata-Version: 2.4
Name: openimis-be-calcrule_contribution_income_percentage
Version: 1.8.0
Summary: The openIMIS Backend calculation rule fs income percentage reference module.
Home-page: https://openimis.org/
Author: Seweryn Niedzielski
Author-email: sniedzielski@soldevelo.com
License: GNU AGPL v3
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 2.1
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU Affero General Public License v3
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: django
Requires-Dist: django-db-signals
Requires-Dist: djangorestframework
Requires-Dist: openimis-be-core
Requires-Dist: openimis-be-calculation
Requires-Dist: openimis-be-policyholder
Requires-Dist: openimis-be-contribution_plan
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: license-file
Dynamic: requires-dist
Dynamic: summary

# openimis-be-calculation-rule-fs_salary_procentage_py
This repository holds the files of the openIMIS Backend calculation rule fs income percentage reference module.
It is dedicated to be deployed as a module of [openimis-be_py](https://github.com/openimis/openimis-be_py). It is an 
extended part of calculation module [openimis-be-calculation_py](https://github.com/openimis/openimis-be-calculation_py) 
and therefore that module is dependent on this core calculation module. This module contains additional calculation rules. 

## Models
  - None (using no database approach for CalculationRule) - Calculation Rule is saved by defining class 
    extending the ABSCalculationClass from core module.


## GraphQl Queries
  None

## Services
  None

## Configuration options (can be changed via core.ModuleConfiguration)
  loading implemented rules from "calculation_rule.py" into global variable "CALCULATION_RULE"
