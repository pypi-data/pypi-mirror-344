# coding: utf-8

"""
    3Di API

    3Di simulation API (latest stable version: v3)   Framework release: 3.4.44   3Di core release: 3.6.7  deployed on:  02:09PM (UTC) on April 16, 2025  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import logging
import pprint
import re  # noqa: F401

import six

from threedi_api_client.openapi.configuration import Configuration

logger = logging.getLogger(__name__)

class WaterQualitySettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'simulation_id': 'int',
        'time_step': 'float',
        'min_time_step': 'float',
        'max_time_step': 'float',
        'general_numerical_threshold': 'float',
        'max_number_of_multi_step': 'int',
        'max_gs_sweep_iterations': 'int',
        'convergence_eps': 'float'
    }

    required_fields = [
    ]

    attribute_map = {
        'id': 'id',
        'simulation_id': 'simulation_id',
        'time_step': 'time_step',
        'min_time_step': 'min_time_step',
        'max_time_step': 'max_time_step',
        'general_numerical_threshold': 'general_numerical_threshold',
        'max_number_of_multi_step': 'max_number_of_multi_step',
        'max_gs_sweep_iterations': 'max_gs_sweep_iterations',
        'convergence_eps': 'convergence_eps'
    }

    def __init__(self, id=None, simulation_id=None, time_step=None, min_time_step=None, max_time_step=None, general_numerical_threshold=None, max_number_of_multi_step=None, max_gs_sweep_iterations=None, convergence_eps=None, local_vars_configuration=None, fetched_from_api=False):  # noqa: E501
        """WaterQualitySettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        # True if data is coming from API
        self._fetched_from_api = fetched_from_api

        self._id = None
        self._simulation_id = None
        self._time_step = None
        self._min_time_step = None
        self._max_time_step = None
        self._general_numerical_threshold = None
        self._max_number_of_multi_step = None
        self._max_gs_sweep_iterations = None
        self._convergence_eps = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if simulation_id is not None:
            self.simulation_id = simulation_id
        if time_step is not None:
            self.time_step = time_step
        self.min_time_step = min_time_step
        self.max_time_step = max_time_step
        if general_numerical_threshold is not None:
            self.general_numerical_threshold = general_numerical_threshold
        if max_number_of_multi_step is not None:
            self.max_number_of_multi_step = max_number_of_multi_step
        if max_gs_sweep_iterations is not None:
            self.max_gs_sweep_iterations = max_gs_sweep_iterations
        if convergence_eps is not None:
            self.convergence_eps = convergence_eps

    @property
    def id(self):
        """Gets the id of this WaterQualitySettings.  # noqa: E501


        :return: The id of this WaterQualitySettings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WaterQualitySettings.


        :param id: The id of this WaterQualitySettings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def simulation_id(self):
        """Gets the simulation_id of this WaterQualitySettings.  # noqa: E501


        :return: The simulation_id of this WaterQualitySettings.  # noqa: E501
        :rtype: int
        """
        return self._simulation_id

    @simulation_id.setter
    def simulation_id(self, simulation_id):
        """Sets the simulation_id of this WaterQualitySettings.


        :param simulation_id: The simulation_id of this WaterQualitySettings.  # noqa: E501
        :type: int
        """

        self._simulation_id = simulation_id

    @property
    def time_step(self):
        """Gets the time_step of this WaterQualitySettings.  # noqa: E501

        Size of the water quality timestep in seconds.  # noqa: E501

        :return: The time_step of this WaterQualitySettings.  # noqa: E501
        :rtype: float
        """
        return self._time_step

    @time_step.setter
    def time_step(self, time_step):
        """Sets the time_step of this WaterQualitySettings.

        Size of the water quality timestep in seconds.  # noqa: E501

        :param time_step: The time_step of this WaterQualitySettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                time_step is not None and time_step < 1E-14):  # noqa: E501
            self.__handle_validation_error("Invalid value for `time_step`, must be a value greater than or equal to `1E-14`")  # noqa: E501

        self._time_step = time_step

    @property
    def min_time_step(self):
        """Gets the min_time_step of this WaterQualitySettings.  # noqa: E501

        Minimum size of the water quality timestep in seconds. Suitable default is 0.001. Cannot be greater than hydrodynamic minimum timestep.  # noqa: E501

        :return: The min_time_step of this WaterQualitySettings.  # noqa: E501
        :rtype: float
        """
        return self._min_time_step

    @min_time_step.setter
    def min_time_step(self, min_time_step):
        """Sets the min_time_step of this WaterQualitySettings.

        Minimum size of the water quality timestep in seconds. Suitable default is 0.001. Cannot be greater than hydrodynamic minimum timestep.  # noqa: E501

        :param min_time_step: The min_time_step of this WaterQualitySettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                min_time_step is not None and min_time_step < 1E-14):  # noqa: E501
            self.__handle_validation_error("Invalid value for `min_time_step`, must be a value greater than or equal to `1E-14`")  # noqa: E501

        self._min_time_step = min_time_step

    @property
    def max_time_step(self):
        """Gets the max_time_step of this WaterQualitySettings.  # noqa: E501

        Maximum size of the water quality timestep in seconds. Cannot be greater than hydrodynamic maximum timestep.  # noqa: E501

        :return: The max_time_step of this WaterQualitySettings.  # noqa: E501
        :rtype: float
        """
        return self._max_time_step

    @max_time_step.setter
    def max_time_step(self, max_time_step):
        """Sets the max_time_step of this WaterQualitySettings.

        Maximum size of the water quality timestep in seconds. Cannot be greater than hydrodynamic maximum timestep.  # noqa: E501

        :param max_time_step: The max_time_step of this WaterQualitySettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                max_time_step is not None and max_time_step < 1E-14):  # noqa: E501
            self.__handle_validation_error("Invalid value for `max_time_step`, must be a value greater than or equal to `1E-14`")  # noqa: E501

        self._max_time_step = max_time_step

    @property
    def general_numerical_threshold(self):
        """Gets the general_numerical_threshold of this WaterQualitySettings.  # noqa: E501

        The numerical threshold for the water quality simulation.  # noqa: E501

        :return: The general_numerical_threshold of this WaterQualitySettings.  # noqa: E501
        :rtype: float
        """
        return self._general_numerical_threshold

    @general_numerical_threshold.setter
    def general_numerical_threshold(self, general_numerical_threshold):
        """Sets the general_numerical_threshold of this WaterQualitySettings.

        The numerical threshold for the water quality simulation.  # noqa: E501

        :param general_numerical_threshold: The general_numerical_threshold of this WaterQualitySettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                general_numerical_threshold is not None and general_numerical_threshold < 1E-14):  # noqa: E501
            self.__handle_validation_error("Invalid value for `general_numerical_threshold`, must be a value greater than or equal to `1E-14`")  # noqa: E501

        self._general_numerical_threshold = general_numerical_threshold

    @property
    def max_number_of_multi_step(self):
        """Gets the max_number_of_multi_step of this WaterQualitySettings.  # noqa: E501

        The maximum number of steps used by the multi-step method.  # noqa: E501

        :return: The max_number_of_multi_step of this WaterQualitySettings.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_multi_step

    @max_number_of_multi_step.setter
    def max_number_of_multi_step(self, max_number_of_multi_step):
        """Sets the max_number_of_multi_step of this WaterQualitySettings.

        The maximum number of steps used by the multi-step method.  # noqa: E501

        :param max_number_of_multi_step: The max_number_of_multi_step of this WaterQualitySettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_number_of_multi_step is not None and max_number_of_multi_step > 2147483647):  # noqa: E501
            self.__handle_validation_error("Invalid value for `max_number_of_multi_step`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_number_of_multi_step is not None and max_number_of_multi_step < 0):  # noqa: E501
            self.__handle_validation_error("Invalid value for `max_number_of_multi_step`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_number_of_multi_step = max_number_of_multi_step

    @property
    def max_gs_sweep_iterations(self):
        """Gets the max_gs_sweep_iterations of this WaterQualitySettings.  # noqa: E501

        The maximum number of iterations used by the Gauss-Seidel sweep method.  # noqa: E501

        :return: The max_gs_sweep_iterations of this WaterQualitySettings.  # noqa: E501
        :rtype: int
        """
        return self._max_gs_sweep_iterations

    @max_gs_sweep_iterations.setter
    def max_gs_sweep_iterations(self, max_gs_sweep_iterations):
        """Sets the max_gs_sweep_iterations of this WaterQualitySettings.

        The maximum number of iterations used by the Gauss-Seidel sweep method.  # noqa: E501

        :param max_gs_sweep_iterations: The max_gs_sweep_iterations of this WaterQualitySettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_gs_sweep_iterations is not None and max_gs_sweep_iterations > 2147483647):  # noqa: E501
            self.__handle_validation_error("Invalid value for `max_gs_sweep_iterations`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_gs_sweep_iterations is not None and max_gs_sweep_iterations < 0):  # noqa: E501
            self.__handle_validation_error("Invalid value for `max_gs_sweep_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_gs_sweep_iterations = max_gs_sweep_iterations

    @property
    def convergence_eps(self):
        """Gets the convergence_eps of this WaterQualitySettings.  # noqa: E501

        The convergence epsilon for the water quality simulation.  # noqa: E501

        :return: The convergence_eps of this WaterQualitySettings.  # noqa: E501
        :rtype: float
        """
        return self._convergence_eps

    @convergence_eps.setter
    def convergence_eps(self, convergence_eps):
        """Sets the convergence_eps of this WaterQualitySettings.

        The convergence epsilon for the water quality simulation.  # noqa: E501

        :param convergence_eps: The convergence_eps of this WaterQualitySettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                convergence_eps is not None and convergence_eps < 1E-14):  # noqa: E501
            self.__handle_validation_error("Invalid value for `convergence_eps`, must be a value greater than or equal to `1E-14`")  # noqa: E501

        self._convergence_eps = convergence_eps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def __handle_validation_error(self, message):
        # Only raise ValueError when not fetched from API
        from threedi_api_client import __version__ as VERSION

        if not self._fetched_from_api:
            raise ValueError(message + f" It is possible that the current threedi-api-client version ({VERSION}) is out of date: consult https://pypi.org/project/threedi-api-client/ and consider upgrading.")  # noqa: E501
        logger.warning(message + " Please update to the latest threedi-api-client version.")  # noqa: E501

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaterQualitySettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaterQualitySettings):
            return True

        return self.to_dict() != other.to_dict()
