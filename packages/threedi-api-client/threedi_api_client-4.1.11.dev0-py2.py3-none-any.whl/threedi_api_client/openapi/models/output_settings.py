# coding: utf-8

"""
    3Di API

    3Di simulation API (latest stable version: v3)   Framework release: 3.4.44   3Di core release: 3.6.7  deployed on:  02:09PM (UTC) on April 16, 2025  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import logging
import pprint
import re  # noqa: F401

import six

from threedi_api_client.openapi.configuration import Configuration

logger = logging.getLogger(__name__)

class OutputSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'simulation_id': 'int',
        'create_hydro_results': 'bool',
        'create_structure_control_results': 'bool',
        'hydro_output_time_step': 'float',
        'hydro_output_start_time': 'float',
        'hydro_output_end_time': 'float',
        'hydro_output_precision': 'int',
        'aggregation_output_precision': 'int',
        'customized_hydro_output_time_step': 'float',
        'customized_hydro_output_start_time': 'float',
        'customized_hydro_output_end_time': 'float',
        'customized_hydro_output_precision': 'int',
        'customized_hydro_output_variables': 'list[str]'
    }

    required_fields = [
    ]

    attribute_map = {
        'id': 'id',
        'simulation_id': 'simulation_id',
        'create_hydro_results': 'create_hydro_results',
        'create_structure_control_results': 'create_structure_control_results',
        'hydro_output_time_step': 'hydro_output_time_step',
        'hydro_output_start_time': 'hydro_output_start_time',
        'hydro_output_end_time': 'hydro_output_end_time',
        'hydro_output_precision': 'hydro_output_precision',
        'aggregation_output_precision': 'aggregation_output_precision',
        'customized_hydro_output_time_step': 'customized_hydro_output_time_step',
        'customized_hydro_output_start_time': 'customized_hydro_output_start_time',
        'customized_hydro_output_end_time': 'customized_hydro_output_end_time',
        'customized_hydro_output_precision': 'customized_hydro_output_precision',
        'customized_hydro_output_variables': 'customized_hydro_output_variables'
    }

    def __init__(self, id=None, simulation_id=None, create_hydro_results=None, create_structure_control_results=None, hydro_output_time_step=None, hydro_output_start_time=None, hydro_output_end_time=None, hydro_output_precision=None, aggregation_output_precision=None, customized_hydro_output_time_step=None, customized_hydro_output_start_time=None, customized_hydro_output_end_time=None, customized_hydro_output_precision=None, customized_hydro_output_variables=None, local_vars_configuration=None, fetched_from_api=False):  # noqa: E501
        """OutputSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        # True if data is coming from API
        self._fetched_from_api = fetched_from_api

        self._id = None
        self._simulation_id = None
        self._create_hydro_results = None
        self._create_structure_control_results = None
        self._hydro_output_time_step = None
        self._hydro_output_start_time = None
        self._hydro_output_end_time = None
        self._hydro_output_precision = None
        self._aggregation_output_precision = None
        self._customized_hydro_output_time_step = None
        self._customized_hydro_output_start_time = None
        self._customized_hydro_output_end_time = None
        self._customized_hydro_output_precision = None
        self._customized_hydro_output_variables = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if simulation_id is not None:
            self.simulation_id = simulation_id
        if create_hydro_results is not None:
            self.create_hydro_results = create_hydro_results
        if create_structure_control_results is not None:
            self.create_structure_control_results = create_structure_control_results
        self.hydro_output_time_step = hydro_output_time_step
        if hydro_output_start_time is not None:
            self.hydro_output_start_time = hydro_output_start_time
        if hydro_output_end_time is not None:
            self.hydro_output_end_time = hydro_output_end_time
        if hydro_output_precision is not None:
            self.hydro_output_precision = hydro_output_precision
        if aggregation_output_precision is not None:
            self.aggregation_output_precision = aggregation_output_precision
        self.customized_hydro_output_time_step = customized_hydro_output_time_step
        if customized_hydro_output_start_time is not None:
            self.customized_hydro_output_start_time = customized_hydro_output_start_time
        if customized_hydro_output_end_time is not None:
            self.customized_hydro_output_end_time = customized_hydro_output_end_time
        if customized_hydro_output_precision is not None:
            self.customized_hydro_output_precision = customized_hydro_output_precision
        if customized_hydro_output_variables is not None:
            self.customized_hydro_output_variables = customized_hydro_output_variables

    @property
    def id(self):
        """Gets the id of this OutputSettings.  # noqa: E501


        :return: The id of this OutputSettings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OutputSettings.


        :param id: The id of this OutputSettings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def simulation_id(self):
        """Gets the simulation_id of this OutputSettings.  # noqa: E501


        :return: The simulation_id of this OutputSettings.  # noqa: E501
        :rtype: int
        """
        return self._simulation_id

    @simulation_id.setter
    def simulation_id(self, simulation_id):
        """Sets the simulation_id of this OutputSettings.


        :param simulation_id: The simulation_id of this OutputSettings.  # noqa: E501
        :type: int
        """

        self._simulation_id = simulation_id

    @property
    def create_hydro_results(self):
        """Gets the create_hydro_results of this OutputSettings.  # noqa: E501

        Create domain wide results file.  # noqa: E501

        :return: The create_hydro_results of this OutputSettings.  # noqa: E501
        :rtype: bool
        """
        return self._create_hydro_results

    @create_hydro_results.setter
    def create_hydro_results(self, create_hydro_results):
        """Sets the create_hydro_results of this OutputSettings.

        Create domain wide results file.  # noqa: E501

        :param create_hydro_results: The create_hydro_results of this OutputSettings.  # noqa: E501
        :type: bool
        """

        self._create_hydro_results = create_hydro_results

    @property
    def create_structure_control_results(self):
        """Gets the create_structure_control_results of this OutputSettings.  # noqa: E501

        Create structure control results file.  # noqa: E501

        :return: The create_structure_control_results of this OutputSettings.  # noqa: E501
        :rtype: bool
        """
        return self._create_structure_control_results

    @create_structure_control_results.setter
    def create_structure_control_results(self, create_structure_control_results):
        """Sets the create_structure_control_results of this OutputSettings.

        Create structure control results file.  # noqa: E501

        :param create_structure_control_results: The create_structure_control_results of this OutputSettings.  # noqa: E501
        :type: bool
        """

        self._create_structure_control_results = create_structure_control_results

    @property
    def hydro_output_time_step(self):
        """Gets the hydro_output_time_step of this OutputSettings.  # noqa: E501

        Output time step in seconds.  # noqa: E501

        :return: The hydro_output_time_step of this OutputSettings.  # noqa: E501
        :rtype: float
        """
        return self._hydro_output_time_step

    @hydro_output_time_step.setter
    def hydro_output_time_step(self, hydro_output_time_step):
        """Sets the hydro_output_time_step of this OutputSettings.

        Output time step in seconds.  # noqa: E501

        :param hydro_output_time_step: The hydro_output_time_step of this OutputSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                hydro_output_time_step is not None and hydro_output_time_step < 1E-14):  # noqa: E501
            self.__handle_validation_error("Invalid value for `hydro_output_time_step`, must be a value greater than or equal to `1E-14`")  # noqa: E501

        self._hydro_output_time_step = hydro_output_time_step

    @property
    def hydro_output_start_time(self):
        """Gets the hydro_output_start_time of this OutputSettings.  # noqa: E501

        Output start time in seconds.  # noqa: E501

        :return: The hydro_output_start_time of this OutputSettings.  # noqa: E501
        :rtype: float
        """
        return self._hydro_output_start_time

    @hydro_output_start_time.setter
    def hydro_output_start_time(self, hydro_output_start_time):
        """Sets the hydro_output_start_time of this OutputSettings.

        Output start time in seconds.  # noqa: E501

        :param hydro_output_start_time: The hydro_output_start_time of this OutputSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                hydro_output_start_time is not None and hydro_output_start_time < 0):  # noqa: E501
            self.__handle_validation_error("Invalid value for `hydro_output_start_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._hydro_output_start_time = hydro_output_start_time

    @property
    def hydro_output_end_time(self):
        """Gets the hydro_output_end_time of this OutputSettings.  # noqa: E501

        Output end time in seconds.  # noqa: E501

        :return: The hydro_output_end_time of this OutputSettings.  # noqa: E501
        :rtype: float
        """
        return self._hydro_output_end_time

    @hydro_output_end_time.setter
    def hydro_output_end_time(self, hydro_output_end_time):
        """Sets the hydro_output_end_time of this OutputSettings.

        Output end time in seconds.  # noqa: E501

        :param hydro_output_end_time: The hydro_output_end_time of this OutputSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                hydro_output_end_time is not None and hydro_output_end_time < 1E-14):  # noqa: E501
            self.__handle_validation_error("Invalid value for `hydro_output_end_time`, must be a value greater than or equal to `1E-14`")  # noqa: E501

        self._hydro_output_end_time = hydro_output_end_time

    @property
    def hydro_output_precision(self):
        """Gets the hydro_output_precision of this OutputSettings.  # noqa: E501

        Single or double precision output.  # noqa: E501

        :return: The hydro_output_precision of this OutputSettings.  # noqa: E501
        :rtype: int
        """
        return self._hydro_output_precision

    @hydro_output_precision.setter
    def hydro_output_precision(self, hydro_output_precision):
        """Sets the hydro_output_precision of this OutputSettings.

        Single or double precision output.  # noqa: E501

        :param hydro_output_precision: The hydro_output_precision of this OutputSettings.  # noqa: E501
        :type: int
        """

        self._hydro_output_precision = hydro_output_precision

    @property
    def aggregation_output_precision(self):
        """Gets the aggregation_output_precision of this OutputSettings.  # noqa: E501

        Single or double precision output for aggregation results.  # noqa: E501

        :return: The aggregation_output_precision of this OutputSettings.  # noqa: E501
        :rtype: int
        """
        return self._aggregation_output_precision

    @aggregation_output_precision.setter
    def aggregation_output_precision(self, aggregation_output_precision):
        """Sets the aggregation_output_precision of this OutputSettings.

        Single or double precision output for aggregation results.  # noqa: E501

        :param aggregation_output_precision: The aggregation_output_precision of this OutputSettings.  # noqa: E501
        :type: int
        """

        self._aggregation_output_precision = aggregation_output_precision

    @property
    def customized_hydro_output_time_step(self):
        """Gets the customized_hydro_output_time_step of this OutputSettings.  # noqa: E501

        Customized hydro output time step in seconds.  # noqa: E501

        :return: The customized_hydro_output_time_step of this OutputSettings.  # noqa: E501
        :rtype: float
        """
        return self._customized_hydro_output_time_step

    @customized_hydro_output_time_step.setter
    def customized_hydro_output_time_step(self, customized_hydro_output_time_step):
        """Sets the customized_hydro_output_time_step of this OutputSettings.

        Customized hydro output time step in seconds.  # noqa: E501

        :param customized_hydro_output_time_step: The customized_hydro_output_time_step of this OutputSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                customized_hydro_output_time_step is not None and customized_hydro_output_time_step < 1E-14):  # noqa: E501
            self.__handle_validation_error("Invalid value for `customized_hydro_output_time_step`, must be a value greater than or equal to `1E-14`")  # noqa: E501

        self._customized_hydro_output_time_step = customized_hydro_output_time_step

    @property
    def customized_hydro_output_start_time(self):
        """Gets the customized_hydro_output_start_time of this OutputSettings.  # noqa: E501

        Customized hydro output start time in seconds.  # noqa: E501

        :return: The customized_hydro_output_start_time of this OutputSettings.  # noqa: E501
        :rtype: float
        """
        return self._customized_hydro_output_start_time

    @customized_hydro_output_start_time.setter
    def customized_hydro_output_start_time(self, customized_hydro_output_start_time):
        """Sets the customized_hydro_output_start_time of this OutputSettings.

        Customized hydro output start time in seconds.  # noqa: E501

        :param customized_hydro_output_start_time: The customized_hydro_output_start_time of this OutputSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                customized_hydro_output_start_time is not None and customized_hydro_output_start_time < 0):  # noqa: E501
            self.__handle_validation_error("Invalid value for `customized_hydro_output_start_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._customized_hydro_output_start_time = customized_hydro_output_start_time

    @property
    def customized_hydro_output_end_time(self):
        """Gets the customized_hydro_output_end_time of this OutputSettings.  # noqa: E501

        Customized hydro output end time in seconds.  # noqa: E501

        :return: The customized_hydro_output_end_time of this OutputSettings.  # noqa: E501
        :rtype: float
        """
        return self._customized_hydro_output_end_time

    @customized_hydro_output_end_time.setter
    def customized_hydro_output_end_time(self, customized_hydro_output_end_time):
        """Sets the customized_hydro_output_end_time of this OutputSettings.

        Customized hydro output end time in seconds.  # noqa: E501

        :param customized_hydro_output_end_time: The customized_hydro_output_end_time of this OutputSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                customized_hydro_output_end_time is not None and customized_hydro_output_end_time < 1E-14):  # noqa: E501
            self.__handle_validation_error("Invalid value for `customized_hydro_output_end_time`, must be a value greater than or equal to `1E-14`")  # noqa: E501

        self._customized_hydro_output_end_time = customized_hydro_output_end_time

    @property
    def customized_hydro_output_precision(self):
        """Gets the customized_hydro_output_precision of this OutputSettings.  # noqa: E501

        Single or double precision output for customized hydro results.  # noqa: E501

        :return: The customized_hydro_output_precision of this OutputSettings.  # noqa: E501
        :rtype: int
        """
        return self._customized_hydro_output_precision

    @customized_hydro_output_precision.setter
    def customized_hydro_output_precision(self, customized_hydro_output_precision):
        """Sets the customized_hydro_output_precision of this OutputSettings.

        Single or double precision output for customized hydro results.  # noqa: E501

        :param customized_hydro_output_precision: The customized_hydro_output_precision of this OutputSettings.  # noqa: E501
        :type: int
        """

        self._customized_hydro_output_precision = customized_hydro_output_precision

    @property
    def customized_hydro_output_variables(self):
        """Gets the customized_hydro_output_variables of this OutputSettings.  # noqa: E501

        The output variables for the customized results area.  # noqa: E501

        :return: The customized_hydro_output_variables of this OutputSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._customized_hydro_output_variables

    @customized_hydro_output_variables.setter
    def customized_hydro_output_variables(self, customized_hydro_output_variables):
        """Sets the customized_hydro_output_variables of this OutputSettings.

        The output variables for the customized results area.  # noqa: E501

        :param customized_hydro_output_variables: The customized_hydro_output_variables of this OutputSettings.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["s1", "vol", "su", "infiltration_rate_simple", "rain", "q_lat", "q_sss", "ucx", "ucy", "leak", "intecepted_volume", "u1", "q", "au", "up1", "qp", "breach_depth", "breach_width", "q_pump"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(customized_hydro_output_variables).issubset(set(allowed_values))):  # noqa: E501
            self.__handle_validation_error(
                "Invalid values for `customized_hydro_output_variables` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(customized_hydro_output_variables) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._customized_hydro_output_variables = customized_hydro_output_variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def __handle_validation_error(self, message):
        # Only raise ValueError when not fetched from API
        from threedi_api_client import __version__ as VERSION

        if not self._fetched_from_api:
            raise ValueError(message + f" It is possible that the current threedi-api-client version ({VERSION}) is out of date: consult https://pypi.org/project/threedi-api-client/ and consider upgrading.")  # noqa: E501
        logger.warning(message + " Please update to the latest threedi-api-client version.")  # noqa: E501

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutputSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutputSettings):
            return True

        return self.to_dict() != other.to_dict()
