# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class OnlineEndpointsOperations(object):
    """OnlineEndpointsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.machinelearningservices.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def create(
        self,
        subscription_id,  # type: str
        resource_group,  # type: str
        workspace,  # type: str
        name,  # type: str
        body,  # type: "models.PutOnlineEndpointRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.OnlineEndpointResponseBase"
        """Create an OnlineEndpoint.

        Create an OnlineEndpoint from the provided payload.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param name:
        :type name: str
        :param body: The OnlineEndpoint to be created or updated.
        :type body: ~azure.mgmt.machinelearningservices.models.PutOnlineEndpointRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: OnlineEndpointResponseBase, or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.OnlineEndpointResponseBase
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.OnlineEndpointResponseBase"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'name': self._serialize.url("name", name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'PutOnlineEndpointRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ModelErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('OnlineEndpointResponseBase', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/onlineEndpoints/{name}'}  # type: ignore

    def patch(
        self,
        subscription_id,  # type: str
        resource_group,  # type: str
        workspace,  # type: str
        name,  # type: str
        body,  # type: List["models.JsonPatchOperation"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.OnlineEndpointResponseBase"
        """Update an OnlineEndpoint.

        Patch a specific OnlineEndpoint.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param name: The name of the OnlineEndpoint to patch.
        :type name: str
        :param body: The payload that is used to patch an OnlineEndpoint.
        :type body: list[~azure.mgmt.machinelearningservices.models.JsonPatchOperation]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: OnlineEndpointResponseBase, or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.OnlineEndpointResponseBase
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.OnlineEndpointResponseBase"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json-patch+json")
        accept = "application/json"

        # Construct URL
        url = self.patch.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'name': self._serialize.url("name", name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '[JsonPatchOperation]')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ModelErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('OnlineEndpointResponseBase', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    patch.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/onlineEndpoints/{name}'}  # type: ignore

    def delete(
        self,
        subscription_id,  # type: str
        resource_group,  # type: str
        workspace,  # type: str
        name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete an OnlineEndpoint.

        Delete the specified OnlineEndpoint.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param name: The name of the OnlineEndpoint to delete.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'name': self._serialize.url("name", name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ModelErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/onlineEndpoints/{name}'}  # type: ignore

    def query_by_name(
        self,
        subscription_id,  # type: str
        resource_group,  # type: str
        workspace,  # type: str
        name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.OnlineEndpointResponseBase"
        """Get an OnlineEndpoint.

        Get an OnlineEndpoint by Name.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param name: The OnlineEndpoint Name.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: OnlineEndpointResponseBase, or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.OnlineEndpointResponseBase
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.OnlineEndpointResponseBase"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.query_by_name.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'name': self._serialize.url("name", name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ModelErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('OnlineEndpointResponseBase', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    query_by_name.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/onlineEndpoints/{name}'}  # type: ignore

    def query(
        self,
        subscription_id,  # type: str
        resource_group,  # type: str
        workspace,  # type: str
        body=None,  # type: Optional["models.ListOnlineEndpointsRequest"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.OnlineEndpointResponseBase"
        """Get a list of OnlineEndpoints.

        List OnlineEndpoint by filters.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param body: The object containing filters for listing.
        :type body: ~azure.mgmt.machinelearningservices.models.ListOnlineEndpointsRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: OnlineEndpointResponseBase, or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.OnlineEndpointResponseBase
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.OnlineEndpointResponseBase"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.query.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        if body is not None:
            body_content = self._serialize.body(body, 'ListOnlineEndpointsRequest')
        else:
            body_content = None
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ModelErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('OnlineEndpointResponseBase', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    query.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/onlineEndpoints/list'}  # type: ignore

    def list_keys(
        self,
        subscription_id,  # type: str
        resource_group,  # type: str
        workspace,  # type: str
        name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.AuthKeyResult"
        """Get a list of OnlineEndpoints.

        List OnlineEndpoint by filters.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param name: The endpoint name.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AuthKeyResult, or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.AuthKeyResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.AuthKeyResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list_keys.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'name': self._serialize.url("name", name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ModelErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('AuthKeyResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list_keys.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/onlineEndpoints/{name}/listkeys'}  # type: ignore

    def regenerate_keys(
        self,
        subscription_id,  # type: str
        resource_group,  # type: str
        workspace,  # type: str
        name,  # type: str
        body=None,  # type: Optional["models.RegenerateServiceKeysRequest"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["models.AuthKeyResult"]
        """Get a list of OnlineEndpoints.

        List OnlineEndpoint by filters.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param name: The endpoint name.
        :type name: str
        :param body: The Regnerate Key request.
        :type body: ~azure.mgmt.machinelearningservices.models.RegenerateServiceKeysRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AuthKeyResult, or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.AuthKeyResult or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["models.AuthKeyResult"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.regenerate_keys.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'name': self._serialize.url("name", name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        if body is not None:
            body_content = self._serialize.body(body, 'RegenerateServiceKeysRequest')
        else:
            body_content = None
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ModelErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('AuthKeyResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    regenerate_keys.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/onlineEndpoints/{name}/regenerateKeys'}  # type: ignore

    def get_endpoint_token(
        self,
        subscription_id,  # type: str
        resource_group,  # type: str
        workspace,  # type: str
        name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.AuthToken"
        """Generate Service Access Token.

        Gets access token that can be used for calling service.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param name: The Endpoint Name.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AuthToken, or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.AuthToken
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.AuthToken"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_endpoint_token.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'name': self._serialize.url("name", name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ModelErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('AuthToken', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_endpoint_token.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/onlineEndpoints/{name}/token'}  # type: ignore
