# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._azure_machine_learning_workspaces_enums import *


class CreateServiceRequest(msrest.serialization.Model):
    """The base class for creating a service.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ACIServiceCreateRequest, CreateEndpointRequest, CreateEndpointVariantRequest, CreateIotServiceRequest, ManagedInferenceCreateServiceRequest.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param description: The description of the service.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param keys:
    :type keys: ~azure.mgmt.machinelearningservices.models.AuthKeys
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param image_id: The Image Id.
    :type image_id: str
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param location: The location of the service.
    :type location: str
    :param overwrite: Whether to overwrite existing service if exists.
    :type overwrite: bool
    :param deployed_api_options:
    :type deployed_api_options: ~azure.mgmt.machinelearningservices.models.DeployedApiOptionsBase
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'keys': {'key': 'keys', 'type': 'AuthKeys'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'location': {'key': 'location', 'type': 'str'},
        'overwrite': {'key': 'overwrite', 'type': 'bool'},
        'deployed_api_options': {'key': 'deployedApiOptions', 'type': 'DeployedApiOptionsBase'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
    }

    _subtype_map = {
        'compute_type': {'ACI': 'ACIServiceCreateRequest', 'AKSENDPOINT': 'CreateEndpointRequest', 'Custom': 'CreateEndpointVariantRequest', 'IOT': 'CreateIotServiceRequest', 'MIRAMLCOMPUTE': 'ManagedInferenceCreateServiceRequest'}
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        keys: Optional["AuthKeys"] = None,
        image_id: Optional[str] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        location: Optional[str] = None,
        overwrite: Optional[bool] = None,
        deployed_api_options: Optional["DeployedApiOptionsBase"] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        **kwargs
    ):
        super(CreateServiceRequest, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.kv_tags = kv_tags
        self.properties = properties
        self.keys = keys
        self.compute_type = None  # type: Optional[str]
        self.image_id = image_id
        self.environment_image_request = environment_image_request
        self.location = location
        self.overwrite = overwrite
        self.deployed_api_options = deployed_api_options
        self.container_resource_requirements = container_resource_requirements


class ACIServiceCreateRequest(CreateServiceRequest):
    """ACIServiceCreateRequest.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param description: The description of the service.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param keys:
    :type keys: ~azure.mgmt.machinelearningservices.models.AuthKeys
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param image_id: The Image Id.
    :type image_id: str
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param location: The location of the service.
    :type location: str
    :param overwrite: Whether to overwrite existing service if exists.
    :type overwrite: bool
    :param deployed_api_options:
    :type deployed_api_options: ~azure.mgmt.machinelearningservices.models.DeployedApiOptionsBase
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param auth_enabled: Whether or not authentication is enabled on the service.
    :type auth_enabled: bool
    :param ssl_enabled: Whether or not SSL is enabled.
    :type ssl_enabled: bool
    :param app_insights_enabled: Whether or not Application Insights is enabled.
    :type app_insights_enabled: bool
    :param data_collection: The Model data collection properties.
    :type data_collection: ~azure.mgmt.machinelearningservices.models.ModelDataCollection
    :param ssl_certificate: The SSL certificate to use if SSL is enabled.
    :type ssl_certificate: str
    :param ssl_key: The SSL key for the certificate.
    :type ssl_key: str
    :param cname: The CName for the service.
    :type cname: str
    :param dns_name_label: The Dns label for the service.
    :type dns_name_label: str
    :param vnet_configuration:
    :type vnet_configuration: ~azure.mgmt.machinelearningservices.models.VnetConfiguration
    :param encryption_properties:
    :type encryption_properties: ~azure.mgmt.machinelearningservices.models.EncryptionProperties
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'keys': {'key': 'keys', 'type': 'AuthKeys'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'location': {'key': 'location', 'type': 'str'},
        'overwrite': {'key': 'overwrite', 'type': 'bool'},
        'deployed_api_options': {'key': 'deployedApiOptions', 'type': 'DeployedApiOptionsBase'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
        'ssl_enabled': {'key': 'sslEnabled', 'type': 'bool'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'data_collection': {'key': 'dataCollection', 'type': 'ModelDataCollection'},
        'ssl_certificate': {'key': 'sslCertificate', 'type': 'str'},
        'ssl_key': {'key': 'sslKey', 'type': 'str'},
        'cname': {'key': 'cname', 'type': 'str'},
        'dns_name_label': {'key': 'dnsNameLabel', 'type': 'str'},
        'vnet_configuration': {'key': 'vnetConfiguration', 'type': 'VnetConfiguration'},
        'encryption_properties': {'key': 'encryptionProperties', 'type': 'EncryptionProperties'},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        keys: Optional["AuthKeys"] = None,
        image_id: Optional[str] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        location: Optional[str] = None,
        overwrite: Optional[bool] = None,
        deployed_api_options: Optional["DeployedApiOptionsBase"] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        auth_enabled: Optional[bool] = False,
        ssl_enabled: Optional[bool] = False,
        app_insights_enabled: Optional[bool] = False,
        data_collection: Optional["ModelDataCollection"] = None,
        ssl_certificate: Optional[str] = None,
        ssl_key: Optional[str] = None,
        cname: Optional[str] = None,
        dns_name_label: Optional[str] = None,
        vnet_configuration: Optional["VnetConfiguration"] = None,
        encryption_properties: Optional["EncryptionProperties"] = None,
        **kwargs
    ):
        super(ACIServiceCreateRequest, self).__init__(name=name, description=description, kv_tags=kv_tags, properties=properties, keys=keys, image_id=image_id, environment_image_request=environment_image_request, location=location, overwrite=overwrite, deployed_api_options=deployed_api_options, container_resource_requirements=container_resource_requirements, **kwargs)
        self.compute_type = 'ACI'  # type: str
        self.auth_enabled = auth_enabled
        self.ssl_enabled = ssl_enabled
        self.app_insights_enabled = app_insights_enabled
        self.data_collection = data_collection
        self.ssl_certificate = ssl_certificate
        self.ssl_key = ssl_key
        self.cname = cname
        self.dns_name_label = dns_name_label
        self.vnet_configuration = vnet_configuration
        self.encryption_properties = encryption_properties


class ServiceResponseBase(msrest.serialization.Model):
    """The base service response. The correct inherited response based on computeType will be returned (ex. ACIServiceResponse).

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ACIServiceResponse, AKSEndpointResponse, BatchServiceResponse, AKSVariantResponse, IotServiceResponse, MirServiceResponse, ManagedInferenceServiceResponse, UnknownServiceResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
    }

    _subtype_map = {
        'compute_type': {'ACI': 'ACIServiceResponse', 'AKSENDPOINT': 'AKSEndpointResponse', 'AMLCOMPUTE': 'BatchServiceResponse', 'Custom': 'AKSVariantResponse', 'IOT': 'IotServiceResponse', 'MIR': 'MirServiceResponse', 'MIRAMLCOMPUTE': 'ManagedInferenceServiceResponse', 'UNKNOWN': 'UnknownServiceResponse'}
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        **kwargs
    ):
        super(ServiceResponseBase, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description
        self.kv_tags = kv_tags
        self.properties = properties
        self.operation_id = operation_id
        self.state = state
        self.created_time = created_time
        self.updated_time = updated_time
        self.error = error
        self.compute_type = None  # type: Optional[str]
        self.deployment_type = deployment_type
        self.created_by = created_by
        self.endpoint_name = endpoint_name


class ACIServiceResponse(ServiceResponseBase):
    """The response for an ACI service.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param image_id: The Id of the Image.
    :type image_id: str
    :param image_digest: The Digest of the Image.
    :type image_digest: str
    :param image_details:
    :type image_details: ~azure.mgmt.machinelearningservices.models.DockerImageResponse
    :param scoring_uri: The Uri for sending scoring requests.
    :type scoring_uri: str
    :param location: The location of the service.
    :type location: str
    :param auth_enabled: Whether or not authentication is enabled on the service.
    :type auth_enabled: bool
    :param ssl_enabled: Whether or not SSL is enabled.
    :type ssl_enabled: bool
    :param app_insights_enabled: Whether or not Application Insights is enabled.
    :type app_insights_enabled: bool
    :param data_collection: The Model data collection properties.
    :type data_collection: ~azure.mgmt.machinelearningservices.models.ModelDataCollection
    :param ssl_certificate: The SSL certificate to use if SSL is enabled.
    :type ssl_certificate: str
    :param ssl_key: The SSL key for the certificate.
    :type ssl_key: str
    :param cname: The CName for the service.
    :type cname: str
    :param public_ip: The public IP address for the service.
    :type public_ip: str
    :param public_fqdn: The public Fqdn for the service.
    :type public_fqdn: str
    :param swagger_uri: The Uri for sending swagger requests.
    :type swagger_uri: str
    :param model_config_map: Details on the models and configurations.
    :type model_config_map: dict[str, object]
    :param models: The list of models.
    :type models: list[~azure.mgmt.machinelearningservices.models.Model]
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param vnet_configuration:
    :type vnet_configuration: ~azure.mgmt.machinelearningservices.models.VnetConfiguration
    :param encryption_properties:
    :type encryption_properties: ~azure.mgmt.machinelearningservices.models.EncryptionProperties
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'image_digest': {'key': 'imageDigest', 'type': 'str'},
        'image_details': {'key': 'imageDetails', 'type': 'DockerImageResponse'},
        'scoring_uri': {'key': 'scoringUri', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
        'ssl_enabled': {'key': 'sslEnabled', 'type': 'bool'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'data_collection': {'key': 'dataCollection', 'type': 'ModelDataCollection'},
        'ssl_certificate': {'key': 'sslCertificate', 'type': 'str'},
        'ssl_key': {'key': 'sslKey', 'type': 'str'},
        'cname': {'key': 'cname', 'type': 'str'},
        'public_ip': {'key': 'publicIp', 'type': 'str'},
        'public_fqdn': {'key': 'publicFqdn', 'type': 'str'},
        'swagger_uri': {'key': 'swaggerUri', 'type': 'str'},
        'model_config_map': {'key': 'modelConfigMap', 'type': '{object}'},
        'models': {'key': 'models', 'type': '[Model]'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'vnet_configuration': {'key': 'vnetConfiguration', 'type': 'VnetConfiguration'},
        'encryption_properties': {'key': 'encryptionProperties', 'type': 'EncryptionProperties'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        image_id: Optional[str] = None,
        image_digest: Optional[str] = None,
        image_details: Optional["DockerImageResponse"] = None,
        scoring_uri: Optional[str] = None,
        location: Optional[str] = None,
        auth_enabled: Optional[bool] = None,
        ssl_enabled: Optional[bool] = None,
        app_insights_enabled: Optional[bool] = None,
        data_collection: Optional["ModelDataCollection"] = None,
        ssl_certificate: Optional[str] = None,
        ssl_key: Optional[str] = None,
        cname: Optional[str] = None,
        public_ip: Optional[str] = None,
        public_fqdn: Optional[str] = None,
        swagger_uri: Optional[str] = None,
        model_config_map: Optional[Dict[str, object]] = None,
        models: Optional[List["Model"]] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        vnet_configuration: Optional["VnetConfiguration"] = None,
        encryption_properties: Optional["EncryptionProperties"] = None,
        **kwargs
    ):
        super(ACIServiceResponse, self).__init__(id=id, name=name, description=description, kv_tags=kv_tags, properties=properties, operation_id=operation_id, state=state, created_time=created_time, updated_time=updated_time, error=error, deployment_type=deployment_type, created_by=created_by, endpoint_name=endpoint_name, **kwargs)
        self.compute_type = 'ACI'  # type: str
        self.container_resource_requirements = container_resource_requirements
        self.image_id = image_id
        self.image_digest = image_digest
        self.image_details = image_details
        self.scoring_uri = scoring_uri
        self.location = location
        self.auth_enabled = auth_enabled
        self.ssl_enabled = ssl_enabled
        self.app_insights_enabled = app_insights_enabled
        self.data_collection = data_collection
        self.ssl_certificate = ssl_certificate
        self.ssl_key = ssl_key
        self.cname = cname
        self.public_ip = public_ip
        self.public_fqdn = public_fqdn
        self.swagger_uri = swagger_uri
        self.model_config_map = model_config_map
        self.models = models
        self.environment_image_request = environment_image_request
        self.vnet_configuration = vnet_configuration
        self.encryption_properties = encryption_properties


class ServiceValidateResourceRequest(msrest.serialization.Model):
    """ServiceValidateResourceRequest.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AciServiceValidateResourceRequest, AksServiceValidateResourceRequest, AksEndpointServiceValidateResourceRequest.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param compute_type: Required. The compute environment type.Constant filled by server.
     Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT", "MIRSINGLEMODEL",
     "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
    }

    _subtype_map = {
        'compute_type': {'ACI': 'AciServiceValidateResourceRequest', 'AKS': 'AksServiceValidateResourceRequest', 'AKSENDPOINT': 'AksEndpointServiceValidateResourceRequest'}
    }

    def __init__(
        self,
        *,
        name: str,
        **kwargs
    ):
        super(ServiceValidateResourceRequest, self).__init__(**kwargs)
        self.name = name
        self.compute_type = None  # type: Optional[str]


class AciServiceValidateResourceRequest(ServiceValidateResourceRequest):
    """AciServiceValidateResourceRequest.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param compute_type: Required. The compute environment type.Constant filled by server.
     Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT", "MIRSINGLEMODEL",
     "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param location: The location.
    :type location: str
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(AciServiceValidateResourceRequest, self).__init__(name=name, **kwargs)
        self.compute_type = 'ACI'  # type: str
        self.container_resource_requirements = container_resource_requirements
        self.location = location


class AKSEndpointResponse(ServiceResponseBase):
    """The response for an AKS Endpoint.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    :param compute_name: The name of the compute resource.
    :type compute_name: str
    :param namespace: The Kubernetes namespace of the deployment.
    :type namespace: str
    :param app_insights_enabled: Whether or not Application Insights is enabled.
    :type app_insights_enabled: bool
    :param auth_enabled: Whether or not authentication is enabled.
    :type auth_enabled: bool
    :param aad_auth_enabled: Whether or not AAD authentication is enabled.
    :type aad_auth_enabled: bool
    :param swagger_uri: The Uri for sending swagger requests.
    :type swagger_uri: str
    :param scoring_uri: The Uri for sending scoring requests.
    :type scoring_uri: str
    :param versions: All the variants that belongs to this endpoint.
    :type versions: dict[str, ~azure.mgmt.machinelearningservices.models.AKSServiceResponse]
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
        'aad_auth_enabled': {'key': 'aadAuthEnabled', 'type': 'bool'},
        'swagger_uri': {'key': 'swaggerUri', 'type': 'str'},
        'scoring_uri': {'key': 'scoringUri', 'type': 'str'},
        'versions': {'key': 'versions', 'type': '{AKSServiceResponse}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        compute_name: Optional[str] = None,
        namespace: Optional[str] = None,
        app_insights_enabled: Optional[bool] = None,
        auth_enabled: Optional[bool] = None,
        aad_auth_enabled: Optional[bool] = None,
        swagger_uri: Optional[str] = None,
        scoring_uri: Optional[str] = None,
        versions: Optional[Dict[str, "AKSServiceResponse"]] = None,
        **kwargs
    ):
        super(AKSEndpointResponse, self).__init__(id=id, name=name, description=description, kv_tags=kv_tags, properties=properties, operation_id=operation_id, state=state, created_time=created_time, updated_time=updated_time, error=error, deployment_type=deployment_type, created_by=created_by, endpoint_name=endpoint_name, **kwargs)
        self.compute_type = 'AKSENDPOINT'  # type: str
        self.compute_name = compute_name
        self.namespace = namespace
        self.app_insights_enabled = app_insights_enabled
        self.auth_enabled = auth_enabled
        self.aad_auth_enabled = aad_auth_enabled
        self.swagger_uri = swagger_uri
        self.scoring_uri = scoring_uri
        self.versions = versions


class AksEndpointServiceValidateResourceRequest(ServiceValidateResourceRequest):
    """AksEndpointServiceValidateResourceRequest.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param compute_type: Required. The compute environment type.Constant filled by server.
     Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT", "MIRSINGLEMODEL",
     "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param versions: The service list.
    :type versions: dict[str,
     ~azure.mgmt.machinelearningservices.models.AksServiceValidateResourceRequest]
    :param compute_name: The name of the compute resource.
    :type compute_name: str
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'versions': {'key': 'versions', 'type': '{AksServiceValidateResourceRequest}'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        versions: Optional[Dict[str, "AksServiceValidateResourceRequest"]] = None,
        compute_name: Optional[str] = None,
        **kwargs
    ):
        super(AksEndpointServiceValidateResourceRequest, self).__init__(name=name, **kwargs)
        self.compute_type = 'AKSENDPOINT'  # type: str
        self.versions = versions
        self.compute_name = compute_name


class AKSReplicaStatus(msrest.serialization.Model):
    """AKSReplicaStatus.

    :param desired_replicas: The desired number of replicas.
    :type desired_replicas: int
    :param updated_replicas: The number of updated replicas.
    :type updated_replicas: int
    :param available_replicas: The number of available replicas.
    :type available_replicas: int
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    """

    _attribute_map = {
        'desired_replicas': {'key': 'desiredReplicas', 'type': 'int'},
        'updated_replicas': {'key': 'updatedReplicas', 'type': 'int'},
        'available_replicas': {'key': 'availableReplicas', 'type': 'int'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
    }

    def __init__(
        self,
        *,
        desired_replicas: Optional[int] = None,
        updated_replicas: Optional[int] = None,
        available_replicas: Optional[int] = None,
        error: Optional["ModelErrorResponse"] = None,
        **kwargs
    ):
        super(AKSReplicaStatus, self).__init__(**kwargs)
        self.desired_replicas = desired_replicas
        self.updated_replicas = updated_replicas
        self.available_replicas = available_replicas
        self.error = error


class CreateEndpointVariantRequest(CreateServiceRequest):
    """The Variant properties.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AKSServiceCreateRequest.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param description: The description of the service.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param keys:
    :type keys: ~azure.mgmt.machinelearningservices.models.AuthKeys
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param image_id: The Image Id.
    :type image_id: str
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param location: The location of the service.
    :type location: str
    :param overwrite: Whether to overwrite existing service if exists.
    :type overwrite: bool
    :param deployed_api_options:
    :type deployed_api_options: ~azure.mgmt.machinelearningservices.models.DeployedApiOptionsBase
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param is_default: Is this the default variant.
    :type is_default: bool
    :param traffic_percentile: The amount of traffic variant receives.
    :type traffic_percentile: float
    :param type: The type of the variant. Possible values include: "Control", "Treatment".
    :type type: str or ~azure.mgmt.machinelearningservices.models.VariantType
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'keys': {'key': 'keys', 'type': 'AuthKeys'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'location': {'key': 'location', 'type': 'str'},
        'overwrite': {'key': 'overwrite', 'type': 'bool'},
        'deployed_api_options': {'key': 'deployedApiOptions', 'type': 'DeployedApiOptionsBase'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'traffic_percentile': {'key': 'trafficPercentile', 'type': 'float'},
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'compute_type': {'AKS': 'AKSServiceCreateRequest'}
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        keys: Optional["AuthKeys"] = None,
        image_id: Optional[str] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        location: Optional[str] = None,
        overwrite: Optional[bool] = None,
        deployed_api_options: Optional["DeployedApiOptionsBase"] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        is_default: Optional[bool] = None,
        traffic_percentile: Optional[float] = None,
        type: Optional[Union[str, "VariantType"]] = None,
        **kwargs
    ):
        super(CreateEndpointVariantRequest, self).__init__(name=name, description=description, kv_tags=kv_tags, properties=properties, keys=keys, image_id=image_id, environment_image_request=environment_image_request, location=location, overwrite=overwrite, deployed_api_options=deployed_api_options, container_resource_requirements=container_resource_requirements, **kwargs)
        self.compute_type = 'Custom'  # type: str
        self.is_default = is_default
        self.traffic_percentile = traffic_percentile
        self.type = type


class AKSServiceCreateRequest(CreateEndpointVariantRequest):
    """The request to create an AKS service.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param description: The description of the service.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param keys:
    :type keys: ~azure.mgmt.machinelearningservices.models.AuthKeys
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param image_id: The Image Id.
    :type image_id: str
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param location: The location of the service.
    :type location: str
    :param overwrite: Whether to overwrite existing service if exists.
    :type overwrite: bool
    :param deployed_api_options:
    :type deployed_api_options: ~azure.mgmt.machinelearningservices.models.DeployedApiOptionsBase
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param is_default: Is this the default variant.
    :type is_default: bool
    :param traffic_percentile: The amount of traffic variant receives.
    :type traffic_percentile: float
    :param type: The type of the variant. Possible values include: "Control", "Treatment".
    :type type: str or ~azure.mgmt.machinelearningservices.models.VariantType
    :param num_replicas: The number of replicas on the cluster.
    :type num_replicas: int
    :param data_collection: The Model data collection properties.
    :type data_collection: ~azure.mgmt.machinelearningservices.models.ModelDataCollection
    :param compute_name: The name of the compute resource.
    :type compute_name: str
    :param app_insights_enabled: Whether or not Application Insights is enabled.
    :type app_insights_enabled: bool
    :param auto_scaler: The Auto Scaler properties.
    :type auto_scaler: ~azure.mgmt.machinelearningservices.models.AutoScaler
    :param max_concurrent_requests_per_container: The maximum number of concurrent requests per
     container.
    :type max_concurrent_requests_per_container: int
    :param max_queue_wait_ms: Maximum time a request will wait in the queue (in milliseconds).
     After this time, the service will return 503 (Service Unavailable).
    :type max_queue_wait_ms: int
    :param namespace: Kubernetes namespace for the service.
    :type namespace: str
    :param scoring_timeout_ms: The scoring timeout in milliseconds.
    :type scoring_timeout_ms: int
    :param auth_enabled: Whether or not authentication is enabled.
    :type auth_enabled: bool
    :param liveness_probe_requirements: The probe requirements.
    :type liveness_probe_requirements:
     ~azure.mgmt.machinelearningservices.models.LivenessProbeRequirements
    :param readiness_probe_requirements: The probe requirements.
    :type readiness_probe_requirements:
     ~azure.mgmt.machinelearningservices.models.LivenessProbeRequirements
    :param aad_auth_enabled: Whether or not AAD authentication is enabled.
    :type aad_auth_enabled: bool
    :param storage_init_enabled: Whether or not StorageInit is enabled.
    :type storage_init_enabled: bool
    :param endpoint_name: The parent OnlineEndpoint name that contains this service.
     This value will only be provided when coming through ARM.
    :type endpoint_name: str
    :param environment_variables: Additional runtime environment variables for the service.
     Values provided here will take priority over any variables present on the Environment.
    :type environment_variables: dict[str, str]
    :param instance_type: The instance type name registered in MLC.
     Values provided here will take priority over default instance type registered in MLC.
     It's only supported for AMLArc deployment, not supported for AKS deployment.
    :type instance_type: str
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'keys': {'key': 'keys', 'type': 'AuthKeys'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'location': {'key': 'location', 'type': 'str'},
        'overwrite': {'key': 'overwrite', 'type': 'bool'},
        'deployed_api_options': {'key': 'deployedApiOptions', 'type': 'DeployedApiOptionsBase'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'traffic_percentile': {'key': 'trafficPercentile', 'type': 'float'},
        'type': {'key': 'type', 'type': 'str'},
        'num_replicas': {'key': 'numReplicas', 'type': 'int'},
        'data_collection': {'key': 'dataCollection', 'type': 'ModelDataCollection'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'auto_scaler': {'key': 'autoScaler', 'type': 'AutoScaler'},
        'max_concurrent_requests_per_container': {'key': 'maxConcurrentRequestsPerContainer', 'type': 'int'},
        'max_queue_wait_ms': {'key': 'maxQueueWaitMs', 'type': 'int'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'scoring_timeout_ms': {'key': 'scoringTimeoutMs', 'type': 'int'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
        'liveness_probe_requirements': {'key': 'livenessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'readiness_probe_requirements': {'key': 'readinessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'aad_auth_enabled': {'key': 'aadAuthEnabled', 'type': 'bool'},
        'storage_init_enabled': {'key': 'storageInitEnabled', 'type': 'bool'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
        'instance_type': {'key': 'instanceType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        keys: Optional["AuthKeys"] = None,
        image_id: Optional[str] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        location: Optional[str] = None,
        overwrite: Optional[bool] = None,
        deployed_api_options: Optional["DeployedApiOptionsBase"] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        is_default: Optional[bool] = None,
        traffic_percentile: Optional[float] = None,
        type: Optional[Union[str, "VariantType"]] = None,
        num_replicas: Optional[int] = None,
        data_collection: Optional["ModelDataCollection"] = None,
        compute_name: Optional[str] = None,
        app_insights_enabled: Optional[bool] = None,
        auto_scaler: Optional["AutoScaler"] = None,
        max_concurrent_requests_per_container: Optional[int] = None,
        max_queue_wait_ms: Optional[int] = None,
        namespace: Optional[str] = None,
        scoring_timeout_ms: Optional[int] = None,
        auth_enabled: Optional[bool] = None,
        liveness_probe_requirements: Optional["LivenessProbeRequirements"] = None,
        readiness_probe_requirements: Optional["LivenessProbeRequirements"] = None,
        aad_auth_enabled: Optional[bool] = None,
        storage_init_enabled: Optional[bool] = None,
        endpoint_name: Optional[str] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        instance_type: Optional[str] = None,
        **kwargs
    ):
        super(AKSServiceCreateRequest, self).__init__(name=name, description=description, kv_tags=kv_tags, properties=properties, keys=keys, image_id=image_id, environment_image_request=environment_image_request, location=location, overwrite=overwrite, deployed_api_options=deployed_api_options, container_resource_requirements=container_resource_requirements, is_default=is_default, traffic_percentile=traffic_percentile, type=type, **kwargs)
        self.compute_type = 'AKS'  # type: str
        self.num_replicas = num_replicas
        self.data_collection = data_collection
        self.compute_name = compute_name
        self.app_insights_enabled = app_insights_enabled
        self.auto_scaler = auto_scaler
        self.max_concurrent_requests_per_container = max_concurrent_requests_per_container
        self.max_queue_wait_ms = max_queue_wait_ms
        self.namespace = namespace
        self.scoring_timeout_ms = scoring_timeout_ms
        self.auth_enabled = auth_enabled
        self.liveness_probe_requirements = liveness_probe_requirements
        self.readiness_probe_requirements = readiness_probe_requirements
        self.aad_auth_enabled = aad_auth_enabled
        self.storage_init_enabled = storage_init_enabled
        self.endpoint_name = endpoint_name
        self.environment_variables = environment_variables
        self.instance_type = instance_type


class AKSVariantResponse(ServiceResponseBase):
    """The response for an AKS variant.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AKSServiceResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    :param is_default: Is this the default variant.
    :type is_default: bool
    :param traffic_percentile: The amount of traffic variant receives.
    :type traffic_percentile: float
    :param type: The type of the variant. Possible values include: "Control", "Treatment".
    :type type: str or ~azure.mgmt.machinelearningservices.models.VariantType
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'traffic_percentile': {'key': 'trafficPercentile', 'type': 'float'},
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'compute_type': {'AKS': 'AKSServiceResponse'}
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        is_default: Optional[bool] = None,
        traffic_percentile: Optional[float] = None,
        type: Optional[Union[str, "VariantType"]] = None,
        **kwargs
    ):
        super(AKSVariantResponse, self).__init__(id=id, name=name, description=description, kv_tags=kv_tags, properties=properties, operation_id=operation_id, state=state, created_time=created_time, updated_time=updated_time, error=error, deployment_type=deployment_type, created_by=created_by, endpoint_name=endpoint_name, **kwargs)
        self.compute_type = 'Custom'  # type: str
        self.is_default = is_default
        self.traffic_percentile = traffic_percentile
        self.type = type


class AKSServiceResponse(AKSVariantResponse):
    """The response for an AKS service.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    :param is_default: Is this the default variant.
    :type is_default: bool
    :param traffic_percentile: The amount of traffic variant receives.
    :type traffic_percentile: float
    :param type: The type of the variant. Possible values include: "Control", "Treatment".
    :type type: str or ~azure.mgmt.machinelearningservices.models.VariantType
    :param image_details:
    :type image_details: ~azure.mgmt.machinelearningservices.models.ImageResponseBase
    :param image_id: The Id of the Image.
    :type image_id: str
    :param image_digest: The Digest of the Image.
    :type image_digest: str
    :param models: The list of models.
    :type models: list[~azure.mgmt.machinelearningservices.models.Model]
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param max_concurrent_requests_per_container: The maximum number of concurrent requests per
     container.
    :type max_concurrent_requests_per_container: int
    :param max_queue_wait_ms: Maximum time a request will wait in the queue (in milliseconds).
     After this time, the service will return 503 (Service Unavailable).
    :type max_queue_wait_ms: int
    :param compute_name: The name of the compute resource.
    :type compute_name: str
    :param namespace: The Kubernetes namespace of the deployment.
    :type namespace: str
    :param num_replicas: The number of replicas on the cluster.
    :type num_replicas: int
    :param data_collection: The Model data collection properties.
    :type data_collection: ~azure.mgmt.machinelearningservices.models.ModelDataCollection
    :param app_insights_enabled: Whether or not Application Insights is enabled.
    :type app_insights_enabled: bool
    :param auto_scaler: The Auto Scaler properties.
    :type auto_scaler: ~azure.mgmt.machinelearningservices.models.AutoScaler
    :param scoring_uri: The Uri for sending scoring requests.
    :type scoring_uri: str
    :param deployment_status:
    :type deployment_status: ~azure.mgmt.machinelearningservices.models.AKSReplicaStatus
    :param scoring_timeout_ms: The scoring timeout in milliseconds.
    :type scoring_timeout_ms: int
    :param liveness_probe_requirements: The probe requirements.
    :type liveness_probe_requirements:
     ~azure.mgmt.machinelearningservices.models.LivenessProbeRequirements
    :param readiness_probe_requirements: The probe requirements.
    :type readiness_probe_requirements:
     ~azure.mgmt.machinelearningservices.models.LivenessProbeRequirements
    :param auth_enabled: Whether or not authentication is enabled.
    :type auth_enabled: bool
    :param aad_auth_enabled: Whether or not AAD authentication is enabled.
    :type aad_auth_enabled: bool
    :param storage_init_enabled: Whether or not StorageInit is enabled.
    :type storage_init_enabled: bool
    :param swagger_uri: The Uri for sending swagger requests.
    :type swagger_uri: str
    :param model_config_map: Details on the models and configurations.
    :type model_config_map: dict[str, object]
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param environment_variables: Additional runtime environment variables for the service.
     Values provided here will take priority over any variables present on the Environment.
     Values provided here will take priority over any variables present on the Environment.
    :type environment_variables: dict[str, str]
    :param instance_type: The instance type used for this deployment.
     It's only supported for AMLArc deployment, not supported for AKS deployment.
    :type instance_type: str
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'traffic_percentile': {'key': 'trafficPercentile', 'type': 'float'},
        'type': {'key': 'type', 'type': 'str'},
        'image_details': {'key': 'imageDetails', 'type': 'ImageResponseBase'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'image_digest': {'key': 'imageDigest', 'type': 'str'},
        'models': {'key': 'models', 'type': '[Model]'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'max_concurrent_requests_per_container': {'key': 'maxConcurrentRequestsPerContainer', 'type': 'int'},
        'max_queue_wait_ms': {'key': 'maxQueueWaitMs', 'type': 'int'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'num_replicas': {'key': 'numReplicas', 'type': 'int'},
        'data_collection': {'key': 'dataCollection', 'type': 'ModelDataCollection'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'auto_scaler': {'key': 'autoScaler', 'type': 'AutoScaler'},
        'scoring_uri': {'key': 'scoringUri', 'type': 'str'},
        'deployment_status': {'key': 'deploymentStatus', 'type': 'AKSReplicaStatus'},
        'scoring_timeout_ms': {'key': 'scoringTimeoutMs', 'type': 'int'},
        'liveness_probe_requirements': {'key': 'livenessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'readiness_probe_requirements': {'key': 'readinessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
        'aad_auth_enabled': {'key': 'aadAuthEnabled', 'type': 'bool'},
        'storage_init_enabled': {'key': 'storageInitEnabled', 'type': 'bool'},
        'swagger_uri': {'key': 'swaggerUri', 'type': 'str'},
        'model_config_map': {'key': 'modelConfigMap', 'type': '{object}'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
        'instance_type': {'key': 'instanceType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        is_default: Optional[bool] = None,
        traffic_percentile: Optional[float] = None,
        type: Optional[Union[str, "VariantType"]] = None,
        image_details: Optional["ImageResponseBase"] = None,
        image_id: Optional[str] = None,
        image_digest: Optional[str] = None,
        models: Optional[List["Model"]] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        max_concurrent_requests_per_container: Optional[int] = None,
        max_queue_wait_ms: Optional[int] = None,
        compute_name: Optional[str] = None,
        namespace: Optional[str] = None,
        num_replicas: Optional[int] = None,
        data_collection: Optional["ModelDataCollection"] = None,
        app_insights_enabled: Optional[bool] = None,
        auto_scaler: Optional["AutoScaler"] = None,
        scoring_uri: Optional[str] = None,
        deployment_status: Optional["AKSReplicaStatus"] = None,
        scoring_timeout_ms: Optional[int] = None,
        liveness_probe_requirements: Optional["LivenessProbeRequirements"] = None,
        readiness_probe_requirements: Optional["LivenessProbeRequirements"] = None,
        auth_enabled: Optional[bool] = None,
        aad_auth_enabled: Optional[bool] = None,
        storage_init_enabled: Optional[bool] = None,
        swagger_uri: Optional[str] = None,
        model_config_map: Optional[Dict[str, object]] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        instance_type: Optional[str] = None,
        **kwargs
    ):
        super(AKSServiceResponse, self).__init__(id=id, name=name, description=description, kv_tags=kv_tags, properties=properties, operation_id=operation_id, state=state, created_time=created_time, updated_time=updated_time, error=error, deployment_type=deployment_type, created_by=created_by, endpoint_name=endpoint_name, is_default=is_default, traffic_percentile=traffic_percentile, type=type, **kwargs)
        self.compute_type = 'AKS'  # type: str
        self.image_details = image_details
        self.image_id = image_id
        self.image_digest = image_digest
        self.models = models
        self.container_resource_requirements = container_resource_requirements
        self.max_concurrent_requests_per_container = max_concurrent_requests_per_container
        self.max_queue_wait_ms = max_queue_wait_ms
        self.compute_name = compute_name
        self.namespace = namespace
        self.num_replicas = num_replicas
        self.data_collection = data_collection
        self.app_insights_enabled = app_insights_enabled
        self.auto_scaler = auto_scaler
        self.scoring_uri = scoring_uri
        self.deployment_status = deployment_status
        self.scoring_timeout_ms = scoring_timeout_ms
        self.liveness_probe_requirements = liveness_probe_requirements
        self.readiness_probe_requirements = readiness_probe_requirements
        self.auth_enabled = auth_enabled
        self.aad_auth_enabled = aad_auth_enabled
        self.storage_init_enabled = storage_init_enabled
        self.swagger_uri = swagger_uri
        self.model_config_map = model_config_map
        self.environment_image_request = environment_image_request
        self.environment_variables = environment_variables
        self.instance_type = instance_type


class AksServiceValidateResourceRequest(ServiceValidateResourceRequest):
    """AksServiceValidateResourceRequest.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param compute_type: Required. The compute environment type.Constant filled by server.
     Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT", "MIRSINGLEMODEL",
     "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param compute_name: The name of the compute resource. Ignore this for AKS Endpoint resource
     validation.
    :type compute_name: str
    :param num_replicas: The number of replicas on the cluster.
    :type num_replicas: int
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param auto_scaler: The Auto Scaler properties.
    :type auto_scaler: ~azure.mgmt.machinelearningservices.models.AutoScaler
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'num_replicas': {'key': 'numReplicas', 'type': 'int'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'auto_scaler': {'key': 'autoScaler', 'type': 'AutoScaler'},
    }

    def __init__(
        self,
        *,
        name: str,
        compute_name: Optional[str] = None,
        num_replicas: Optional[int] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        auto_scaler: Optional["AutoScaler"] = None,
        **kwargs
    ):
        super(AksServiceValidateResourceRequest, self).__init__(name=name, **kwargs)
        self.compute_type = 'AKS'  # type: str
        self.compute_name = compute_name
        self.num_replicas = num_replicas
        self.container_resource_requirements = container_resource_requirements
        self.auto_scaler = auto_scaler


class AsyncOperationDetails(msrest.serialization.Model):
    """The async operation details.

    :param sub_operation_type: The suboperation type.
    :type sub_operation_type: str
    :param sub_operation_state: The suboperation state.
    :type sub_operation_state: str
    """

    _attribute_map = {
        'sub_operation_type': {'key': 'subOperationType', 'type': 'str'},
        'sub_operation_state': {'key': 'subOperationState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sub_operation_type: Optional[str] = None,
        sub_operation_state: Optional[str] = None,
        **kwargs
    ):
        super(AsyncOperationDetails, self).__init__(**kwargs)
        self.sub_operation_type = sub_operation_type
        self.sub_operation_state = sub_operation_state


class AsyncOperationRunInfo(msrest.serialization.Model):
    """AsyncOperationRunInfo.

    :param experiment:
    :type experiment: str
    :param run_id:
    :type run_id: str
    """

    _attribute_map = {
        'experiment': {'key': 'experiment', 'type': 'str'},
        'run_id': {'key': 'runId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        experiment: Optional[str] = None,
        run_id: Optional[str] = None,
        **kwargs
    ):
        super(AsyncOperationRunInfo, self).__init__(**kwargs)
        self.experiment = experiment
        self.run_id = run_id


class AsyncOperationStatus(msrest.serialization.Model):
    """The async operation status.

    :param id: The async operation id.
    :type id: str
    :param operation_type: The async operation type.
    :type operation_type: str
    :param state: The async operation state. Possible values include: "NotStarted", "Running",
     "Cancelled", "Succeeded", "Failed", "TimedOut".
    :type state: str or ~azure.mgmt.machinelearningservices.models.AsyncOperationState
    :param created_time: The async operation creation time (UTC).
    :type created_time: ~datetime.datetime
    :param end_time: The async operation end time (UTC)l.
    :type end_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param resource_location: The resource created/updated by the async operation.
    :type resource_location: str
    :param operation_log: The async operation log.
    :type operation_log: str
    :param operation_details: The async operation details.
    :type operation_details: ~azure.mgmt.machinelearningservices.models.AsyncOperationDetails
    :param parent_request_id: The request id that created this operation.
    :type parent_request_id: str
    :param operation_run_info:
    :type operation_run_info: ~azure.mgmt.machinelearningservices.models.AsyncOperationRunInfo
    :param streaming_operation_log: The streaming operation log.
    :type streaming_operation_log: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
        'operation_log': {'key': 'operationLog', 'type': 'str'},
        'operation_details': {'key': 'operationDetails', 'type': 'AsyncOperationDetails'},
        'parent_request_id': {'key': 'parentRequestId', 'type': 'str'},
        'operation_run_info': {'key': 'operationRunInfo', 'type': 'AsyncOperationRunInfo'},
        'streaming_operation_log': {'key': 'streamingOperationLog', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        operation_type: Optional[str] = None,
        state: Optional[Union[str, "AsyncOperationState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        resource_location: Optional[str] = None,
        operation_log: Optional[str] = None,
        operation_details: Optional["AsyncOperationDetails"] = None,
        parent_request_id: Optional[str] = None,
        operation_run_info: Optional["AsyncOperationRunInfo"] = None,
        streaming_operation_log: Optional[str] = None,
        **kwargs
    ):
        super(AsyncOperationStatus, self).__init__(**kwargs)
        self.id = id
        self.operation_type = operation_type
        self.state = state
        self.created_time = created_time
        self.end_time = end_time
        self.error = error
        self.resource_location = resource_location
        self.operation_log = operation_log
        self.operation_details = operation_details
        self.parent_request_id = parent_request_id
        self.operation_run_info = operation_run_info
        self.streaming_operation_log = streaming_operation_log


class AuthKeyResult(msrest.serialization.Model):
    """AuthKeyResult.

    :param status_code:  Possible values include: "Continue", "SwitchingProtocols", "Processing",
     "EarlyHints", "OK", "Created", "Accepted", "NonAuthoritativeInformation", "NoContent",
     "ResetContent", "PartialContent", "MultiStatus", "AlreadyReported", "IMUsed",
     "MultipleChoices", "Ambiguous", "MovedPermanently", "Moved", "Found", "Redirect", "SeeOther",
     "RedirectMethod", "NotModified", "UseProxy", "Unused", "TemporaryRedirect", "RedirectKeepVerb",
     "PermanentRedirect", "BadRequest", "Unauthorized", "PaymentRequired", "Forbidden", "NotFound",
     "MethodNotAllowed", "NotAcceptable", "ProxyAuthenticationRequired", "RequestTimeout",
     "Conflict", "Gone", "LengthRequired", "PreconditionFailed", "RequestEntityTooLarge",
     "RequestUriTooLong", "UnsupportedMediaType", "RequestedRangeNotSatisfiable",
     "ExpectationFailed", "MisdirectedRequest", "UnprocessableEntity", "Locked", "FailedDependency",
     "UpgradeRequired", "PreconditionRequired", "TooManyRequests", "RequestHeaderFieldsTooLarge",
     "UnavailableForLegalReasons", "InternalServerError", "NotImplemented", "BadGateway",
     "ServiceUnavailable", "GatewayTimeout", "HttpVersionNotSupported", "VariantAlsoNegotiates",
     "InsufficientStorage", "LoopDetected", "NotExtended", "NetworkAuthenticationRequired".
    :type status_code: str or ~azure.mgmt.machinelearningservices.models.HttpStatusCode
    :param response: Any object.
    :type response: object
    """

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'str'},
        'response': {'key': 'response', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        status_code: Optional[Union[str, "HttpStatusCode"]] = None,
        response: Optional[object] = None,
        **kwargs
    ):
        super(AuthKeyResult, self).__init__(**kwargs)
        self.status_code = status_code
        self.response = response


class AuthKeys(msrest.serialization.Model):
    """AuthKeys.

    :param primary_key: The primary key.
    :type primary_key: str
    :param secondary_key: The secondary key.
    :type secondary_key: str
    """

    _attribute_map = {
        'primary_key': {'key': 'primaryKey', 'type': 'str'},
        'secondary_key': {'key': 'secondaryKey', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        primary_key: Optional[str] = None,
        secondary_key: Optional[str] = None,
        **kwargs
    ):
        super(AuthKeys, self).__init__(**kwargs)
        self.primary_key = primary_key
        self.secondary_key = secondary_key


class AuthToken(msrest.serialization.Model):
    """Service Token.

    :param access_token: Access token.
    :type access_token: str
    :param token_type: Access token type.
    :type token_type: str
    :param expiry_on: Access token expiry time (UTC).
    :type expiry_on: long
    :param refresh_after: Refresh access token after time (UTC).
    :type refresh_after: long
    """

    _attribute_map = {
        'access_token': {'key': 'accessToken', 'type': 'str'},
        'token_type': {'key': 'tokenType', 'type': 'str'},
        'expiry_on': {'key': 'expiryOn', 'type': 'long'},
        'refresh_after': {'key': 'refreshAfter', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        access_token: Optional[str] = None,
        token_type: Optional[str] = None,
        expiry_on: Optional[int] = None,
        refresh_after: Optional[int] = None,
        **kwargs
    ):
        super(AuthToken, self).__init__(**kwargs)
        self.access_token = access_token
        self.token_type = token_type
        self.expiry_on = expiry_on
        self.refresh_after = refresh_after


class AutoScaler(msrest.serialization.Model):
    """The Auto Scaler properties.

    :param autoscale_enabled: Option to enable/disable auto scaling.
    :type autoscale_enabled: bool
    :param min_replicas: The minimum number of replicas to scale down to.
    :type min_replicas: int
    :param max_replicas: The maximum number of replicas in the cluster.
    :type max_replicas: int
    :param target_utilization: The target utilization percentage to use for determining whether to
     scale the cluster.
    :type target_utilization: int
    :param refresh_period_in_seconds: The amount of seconds to wait between auto scale updates.
    :type refresh_period_in_seconds: int
    """

    _attribute_map = {
        'autoscale_enabled': {'key': 'autoscaleEnabled', 'type': 'bool'},
        'min_replicas': {'key': 'minReplicas', 'type': 'int'},
        'max_replicas': {'key': 'maxReplicas', 'type': 'int'},
        'target_utilization': {'key': 'targetUtilization', 'type': 'int'},
        'refresh_period_in_seconds': {'key': 'refreshPeriodInSeconds', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        autoscale_enabled: Optional[bool] = None,
        min_replicas: Optional[int] = None,
        max_replicas: Optional[int] = None,
        target_utilization: Optional[int] = None,
        refresh_period_in_seconds: Optional[int] = None,
        **kwargs
    ):
        super(AutoScaler, self).__init__(**kwargs)
        self.autoscale_enabled = autoscale_enabled
        self.min_replicas = min_replicas
        self.max_replicas = max_replicas
        self.target_utilization = target_utilization
        self.refresh_period_in_seconds = refresh_period_in_seconds


class BatchServiceResponse(ServiceResponseBase):
    """BatchServiceResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    :param model_ids:
    :type model_ids: list[str]
    :param compute_name:
    :type compute_name: str
    :param environment_name:
    :type environment_name: str
    :param environment_version:
    :type environment_version: str
    :param scoring_uri:
    :type scoring_uri: str
    :param app_insights_enabled:
    :type app_insights_enabled: bool
    :param model_data_collection: The Model data collection properties.
    :type model_data_collection: ~azure.mgmt.machinelearningservices.models.ModelDataCollection
    :param entry_script:
    :type entry_script: str
    :param input_format:
    :type input_format: str
    :param output_action:
    :type output_action: str
    :param mini_batch_size:
    :type mini_batch_size: int
    :param error_threshold:
    :type error_threshold: float
    :param node_count:
    :type node_count: int
    :param process_count_per_node:
    :type process_count_per_node: int
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'model_ids': {'key': 'modelIds', 'type': '[str]'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'environment_name': {'key': 'environmentName', 'type': 'str'},
        'environment_version': {'key': 'environmentVersion', 'type': 'str'},
        'scoring_uri': {'key': 'scoringUri', 'type': 'str'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'model_data_collection': {'key': 'modelDataCollection', 'type': 'ModelDataCollection'},
        'entry_script': {'key': 'entryScript', 'type': 'str'},
        'input_format': {'key': 'inputFormat', 'type': 'str'},
        'output_action': {'key': 'outputAction', 'type': 'str'},
        'mini_batch_size': {'key': 'miniBatchSize', 'type': 'int'},
        'error_threshold': {'key': 'errorThreshold', 'type': 'float'},
        'node_count': {'key': 'nodeCount', 'type': 'int'},
        'process_count_per_node': {'key': 'processCountPerNode', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        model_ids: Optional[List[str]] = None,
        compute_name: Optional[str] = None,
        environment_name: Optional[str] = None,
        environment_version: Optional[str] = None,
        scoring_uri: Optional[str] = None,
        app_insights_enabled: Optional[bool] = None,
        model_data_collection: Optional["ModelDataCollection"] = None,
        entry_script: Optional[str] = None,
        input_format: Optional[str] = None,
        output_action: Optional[str] = None,
        mini_batch_size: Optional[int] = None,
        error_threshold: Optional[float] = None,
        node_count: Optional[int] = None,
        process_count_per_node: Optional[int] = None,
        **kwargs
    ):
        super(BatchServiceResponse, self).__init__(id=id, name=name, description=description, kv_tags=kv_tags, properties=properties, operation_id=operation_id, state=state, created_time=created_time, updated_time=updated_time, error=error, deployment_type=deployment_type, created_by=created_by, endpoint_name=endpoint_name, **kwargs)
        self.compute_type = 'AMLCOMPUTE'  # type: str
        self.model_ids = model_ids
        self.compute_name = compute_name
        self.environment_name = environment_name
        self.environment_version = environment_version
        self.scoring_uri = scoring_uri
        self.app_insights_enabled = app_insights_enabled
        self.model_data_collection = model_data_collection
        self.entry_script = entry_script
        self.input_format = input_format
        self.output_action = output_action
        self.mini_batch_size = mini_batch_size
        self.error_threshold = error_threshold
        self.node_count = node_count
        self.process_count_per_node = process_count_per_node


class ComputeConfiguration(msrest.serialization.Model):
    """ComputeConfiguration.

    All required parameters must be populated in order to send to Azure.

    :param compute_type: Required.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT",
     "AKSENDPOINT", "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE",
     "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param application_insights_enabled:
    :type application_insights_enabled: bool
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'application_insights_enabled': {'key': 'applicationInsightsEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        compute_type: Union[str, "ComputeEnvironmentType"],
        application_insights_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(ComputeConfiguration, self).__init__(**kwargs)
        self.compute_type = compute_type
        self.application_insights_enabled = application_insights_enabled


class ContainerRegistry(msrest.serialization.Model):
    """ContainerRegistry.

    :param address:
    :type address: str
    :param username:
    :type username: str
    :param password:
    :type password: str
    :param registry_identity:
    :type registry_identity: ~azure.mgmt.machinelearningservices.models.RegistryIdentity
    """

    _attribute_map = {
        'address': {'key': 'address', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'registry_identity': {'key': 'registryIdentity', 'type': 'RegistryIdentity'},
    }

    def __init__(
        self,
        *,
        address: Optional[str] = None,
        username: Optional[str] = None,
        password: Optional[str] = None,
        registry_identity: Optional["RegistryIdentity"] = None,
        **kwargs
    ):
        super(ContainerRegistry, self).__init__(**kwargs)
        self.address = address
        self.username = username
        self.password = password
        self.registry_identity = registry_identity


class ContainerResourceRequirements(msrest.serialization.Model):
    """The resource requirements for the container (cpu and memory).

    :param cpu: The minimum amount of CPU cores to be used by the container. More info:
     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/.
    :type cpu: float
    :param cpu_limit: The maximum amount of CPU cores allowed to be used by the container. More
     info:
     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/.
    :type cpu_limit: float
    :param memory_in_gb: The minimum amount of memory (in GB) to be used by the container. More
     info:
     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/.
    :type memory_in_gb: float
    :param memory_in_gb_limit: The maximum amount of memory (in GB) allowed to be used by the
     container. More info:
     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/.
    :type memory_in_gb_limit: float
    :param gpu_enabled: If gpu should be enabled.
    :type gpu_enabled: bool
    :param gpu: The number of GPU cores in the container.
    :type gpu: int
    :param fpga: The number of FPGA PCIE devices exposed to the container. Must be multiple of 2.
    :type fpga: int
    """

    _attribute_map = {
        'cpu': {'key': 'cpu', 'type': 'float'},
        'cpu_limit': {'key': 'cpuLimit', 'type': 'float'},
        'memory_in_gb': {'key': 'memoryInGB', 'type': 'float'},
        'memory_in_gb_limit': {'key': 'memoryInGBLimit', 'type': 'float'},
        'gpu_enabled': {'key': 'gpuEnabled', 'type': 'bool'},
        'gpu': {'key': 'gpu', 'type': 'int'},
        'fpga': {'key': 'fpga', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        cpu: Optional[float] = None,
        cpu_limit: Optional[float] = None,
        memory_in_gb: Optional[float] = None,
        memory_in_gb_limit: Optional[float] = None,
        gpu_enabled: Optional[bool] = None,
        gpu: Optional[int] = None,
        fpga: Optional[int] = None,
        **kwargs
    ):
        super(ContainerResourceRequirements, self).__init__(**kwargs)
        self.cpu = cpu
        self.cpu_limit = cpu_limit
        self.memory_in_gb = memory_in_gb
        self.memory_in_gb_limit = memory_in_gb_limit
        self.gpu_enabled = gpu_enabled
        self.gpu = gpu
        self.fpga = fpga


class CreateEndpointRequest(CreateServiceRequest):
    """The request to create an Endpoint in the AKS.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param description: The description of the service.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param keys:
    :type keys: ~azure.mgmt.machinelearningservices.models.AuthKeys
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param image_id: The Image Id.
    :type image_id: str
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param location: The location of the service.
    :type location: str
    :param overwrite: Whether to overwrite existing service if exists.
    :type overwrite: bool
    :param deployed_api_options:
    :type deployed_api_options: ~azure.mgmt.machinelearningservices.models.DeployedApiOptionsBase
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param compute_name: The name of the compute resource.
    :type compute_name: str
    :param app_insights_enabled: Whether or not Application Insights is enabled.
    :type app_insights_enabled: bool
    :param auth_enabled: Whether or not authentication is enabled.
    :type auth_enabled: bool
    :param aad_auth_enabled: Whether or not AAD authentication is enabled.
    :type aad_auth_enabled: bool
    :param namespace: Kubernetes namespace for the service.
    :type namespace: str
    :param versions: The service tag list.
    :type versions: dict[str, ~azure.mgmt.machinelearningservices.models.AKSServiceCreateRequest]
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'keys': {'key': 'keys', 'type': 'AuthKeys'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'location': {'key': 'location', 'type': 'str'},
        'overwrite': {'key': 'overwrite', 'type': 'bool'},
        'deployed_api_options': {'key': 'deployedApiOptions', 'type': 'DeployedApiOptionsBase'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
        'aad_auth_enabled': {'key': 'aadAuthEnabled', 'type': 'bool'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'versions': {'key': 'versions', 'type': '{AKSServiceCreateRequest}'},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        keys: Optional["AuthKeys"] = None,
        image_id: Optional[str] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        location: Optional[str] = None,
        overwrite: Optional[bool] = None,
        deployed_api_options: Optional["DeployedApiOptionsBase"] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        compute_name: Optional[str] = None,
        app_insights_enabled: Optional[bool] = None,
        auth_enabled: Optional[bool] = None,
        aad_auth_enabled: Optional[bool] = None,
        namespace: Optional[str] = None,
        versions: Optional[Dict[str, "AKSServiceCreateRequest"]] = None,
        **kwargs
    ):
        super(CreateEndpointRequest, self).__init__(name=name, description=description, kv_tags=kv_tags, properties=properties, keys=keys, image_id=image_id, environment_image_request=environment_image_request, location=location, overwrite=overwrite, deployed_api_options=deployed_api_options, container_resource_requirements=container_resource_requirements, **kwargs)
        self.compute_type = 'AKSENDPOINT'  # type: str
        self.compute_name = compute_name
        self.app_insights_enabled = app_insights_enabled
        self.auth_enabled = auth_enabled
        self.aad_auth_enabled = aad_auth_enabled
        self.namespace = namespace
        self.versions = versions


class CreateIotServiceRequest(CreateServiceRequest):
    """CreateIotServiceRequest.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param description: The description of the service.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param keys:
    :type keys: ~azure.mgmt.machinelearningservices.models.AuthKeys
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param image_id: The Image Id.
    :type image_id: str
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param location: The location of the service.
    :type location: str
    :param overwrite: Whether to overwrite existing service if exists.
    :type overwrite: bool
    :param deployed_api_options:
    :type deployed_api_options: ~azure.mgmt.machinelearningservices.models.DeployedApiOptionsBase
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param iot_device_id:
    :type iot_device_id: str
    :param routes: Dictionary of :code:`<string>`.
    :type routes: dict[str, str]
    :param iot_edge_user_module:
    :type iot_edge_user_module: list[~azure.mgmt.machinelearningservices.models.IotModuleSettings]
    :param iot_edge_module:
    :type iot_edge_module: ~azure.mgmt.machinelearningservices.models.IotBaseModuleSettings
    :param compute_name:
    :type compute_name: str
    :param acr_credentials:
    :type acr_credentials: list[~azure.mgmt.machinelearningservices.models.RegistryInfo]
    :param auth_enabled:
    :type auth_enabled: bool
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'keys': {'key': 'keys', 'type': 'AuthKeys'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'location': {'key': 'location', 'type': 'str'},
        'overwrite': {'key': 'overwrite', 'type': 'bool'},
        'deployed_api_options': {'key': 'deployedApiOptions', 'type': 'DeployedApiOptionsBase'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'iot_device_id': {'key': 'iotDeviceId', 'type': 'str'},
        'routes': {'key': 'routes', 'type': '{str}'},
        'iot_edge_user_module': {'key': 'iotEdgeUserModule', 'type': '[IotModuleSettings]'},
        'iot_edge_module': {'key': 'iotEdgeModule', 'type': 'IotBaseModuleSettings'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'acr_credentials': {'key': 'acrCredentials', 'type': '[RegistryInfo]'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        keys: Optional["AuthKeys"] = None,
        image_id: Optional[str] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        location: Optional[str] = None,
        overwrite: Optional[bool] = None,
        deployed_api_options: Optional["DeployedApiOptionsBase"] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        iot_device_id: Optional[str] = None,
        routes: Optional[Dict[str, str]] = None,
        iot_edge_user_module: Optional[List["IotModuleSettings"]] = None,
        iot_edge_module: Optional["IotBaseModuleSettings"] = None,
        compute_name: Optional[str] = None,
        acr_credentials: Optional[List["RegistryInfo"]] = None,
        auth_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(CreateIotServiceRequest, self).__init__(name=name, description=description, kv_tags=kv_tags, properties=properties, keys=keys, image_id=image_id, environment_image_request=environment_image_request, location=location, overwrite=overwrite, deployed_api_options=deployed_api_options, container_resource_requirements=container_resource_requirements, **kwargs)
        self.compute_type = 'IOT'  # type: str
        self.iot_device_id = iot_device_id
        self.routes = routes
        self.iot_edge_user_module = iot_edge_user_module
        self.iot_edge_module = iot_edge_module
        self.compute_name = compute_name
        self.acr_credentials = acr_credentials
        self.auth_enabled = auth_enabled


class DatasetReference(msrest.serialization.Model):
    """The dataset reference object.

    :param name: The name of the dataset reference.
    :type name: str
    :param id: The id of the dataset reference.
    :type id: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(DatasetReference, self).__init__(**kwargs)
        self.name = name
        self.id = id


class DeployedApiOptionsBase(msrest.serialization.Model):
    """DeployedApiOptionsBase.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar flavor: Gets the flavor of the package to create, which is where the image will be used.
     Possible values include: "AzureMlApp", "FunctionsApp".
    :vartype flavor: str or ~azure.mgmt.machinelearningservices.models.DeployedApiFlavor
    """

    _validation = {
        'flavor': {'readonly': True},
    }

    _attribute_map = {
        'flavor': {'key': 'flavor', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeployedApiOptionsBase, self).__init__(**kwargs)
        self.flavor = None


class DockerBuildContext(msrest.serialization.Model):
    """DockerBuildContext.

    :param location_type: Type of the location. Possible values include: "Git", "StorageAccount".
    :type location_type: str or ~azure.mgmt.machinelearningservices.models.BuildContextLocationType
    :param location: Location of Docker build context.
    :type location: str
    :param dockerfile_path: Relative path of the Dockerfile to use during image build.
    :type dockerfile_path: str
    """

    _attribute_map = {
        'location_type': {'key': 'locationType', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'dockerfile_path': {'key': 'dockerfilePath', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location_type: Optional[Union[str, "BuildContextLocationType"]] = None,
        location: Optional[str] = None,
        dockerfile_path: Optional[str] = "Dockerfile",
        **kwargs
    ):
        super(DockerBuildContext, self).__init__(**kwargs)
        self.location_type = location_type
        self.location = location
        self.dockerfile_path = dockerfile_path


class DockerImagePlatform(msrest.serialization.Model):
    """DockerImagePlatform.

    :param os:
    :type os: str
    :param architecture:
    :type architecture: str
    """

    _attribute_map = {
        'os': {'key': 'os', 'type': 'str'},
        'architecture': {'key': 'architecture', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        os: Optional[str] = None,
        architecture: Optional[str] = None,
        **kwargs
    ):
        super(DockerImagePlatform, self).__init__(**kwargs)
        self.os = os
        self.architecture = architecture


class ImageResponseBase(msrest.serialization.Model):
    """ImageResponseBase.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: FPGADockerImageResponse, DockerImageResponse.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: The image Id.
    :type id: str
    :param name: The image name.
    :type name: str
    :param version: The image version.
    :type version: long
    :param digest: The sha256-based digest of the image.
    :type digest: str
    :param description: The image description.
    :type description: str
    :param kv_tags: The image tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The image properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param created_time: The time the image was created.
    :type created_time: ~datetime.datetime
    :param modified_time: The time the image was last modified.
    :type modified_time: ~datetime.datetime
    :param auto_delete: Whether the image will be automatically deleted with the last service using
     it.
    :type auto_delete: bool
    :ivar image_type: The type of the image. Default value: "Docker".
    :vartype image_type: str
    :param image_flavor: Required. The flavor of the image.Constant filled by server.  Possible
     values include: "WebApiContainer", "BatchContainer", "IoTContainer", "AccelContainer".
    :type image_flavor: str or ~azure.mgmt.machinelearningservices.models.ImageFlavor
    :param creation_state: The state of the operation. Possible values include: "NotStarted",
     "Running", "Cancelled", "Succeeded", "Failed", "TimedOut".
    :type creation_state: str or ~azure.mgmt.machinelearningservices.models.AsyncOperationState
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param model_ids: The list of model Ids.
    :type model_ids: list[str]
    :param model_details: The list of models.
    :type model_details: list[~azure.mgmt.machinelearningservices.models.Model]
    :param image_location: The Image location string.
    :type image_location: str
    :param image_build_log_uri: The Uri to the image build logs.
    :type image_build_log_uri: str
    :param operation_id: The ID of the asynchronous operation for this image.
    :type operation_id: str
    """

    _validation = {
        'image_type': {'constant': True},
        'image_flavor': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'long'},
        'digest': {'key': 'digest', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'modified_time': {'key': 'modifiedTime', 'type': 'iso-8601'},
        'auto_delete': {'key': 'autoDelete', 'type': 'bool'},
        'image_type': {'key': 'imageType', 'type': 'str'},
        'image_flavor': {'key': 'imageFlavor', 'type': 'str'},
        'creation_state': {'key': 'creationState', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'model_ids': {'key': 'modelIds', 'type': '[str]'},
        'model_details': {'key': 'modelDetails', 'type': '[Model]'},
        'image_location': {'key': 'imageLocation', 'type': 'str'},
        'image_build_log_uri': {'key': 'imageBuildLogUri', 'type': 'str'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
    }

    _subtype_map = {
        'image_flavor': {'ACCELCONTAINER': 'FPGADockerImageResponse', 'WEBAPICONTAINER': 'DockerImageResponse'}
    }

    image_type = "Docker"

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        version: Optional[int] = None,
        digest: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        created_time: Optional[datetime.datetime] = None,
        modified_time: Optional[datetime.datetime] = None,
        auto_delete: Optional[bool] = None,
        creation_state: Optional[Union[str, "AsyncOperationState"]] = None,
        error: Optional["ModelErrorResponse"] = None,
        model_ids: Optional[List[str]] = None,
        model_details: Optional[List["Model"]] = None,
        image_location: Optional[str] = None,
        image_build_log_uri: Optional[str] = None,
        operation_id: Optional[str] = None,
        **kwargs
    ):
        super(ImageResponseBase, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.version = version
        self.digest = digest
        self.description = description
        self.kv_tags = kv_tags
        self.properties = properties
        self.created_time = created_time
        self.modified_time = modified_time
        self.auto_delete = auto_delete
        self.image_flavor = None  # type: Optional[str]
        self.creation_state = creation_state
        self.error = error
        self.model_ids = model_ids
        self.model_details = model_details
        self.image_location = image_location
        self.image_build_log_uri = image_build_log_uri
        self.operation_id = operation_id


class DockerImageResponse(ImageResponseBase):
    """DockerImageResponse.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: The image Id.
    :type id: str
    :param name: The image name.
    :type name: str
    :param version: The image version.
    :type version: long
    :param digest: The sha256-based digest of the image.
    :type digest: str
    :param description: The image description.
    :type description: str
    :param kv_tags: The image tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The image properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param created_time: The time the image was created.
    :type created_time: ~datetime.datetime
    :param modified_time: The time the image was last modified.
    :type modified_time: ~datetime.datetime
    :param auto_delete: Whether the image will be automatically deleted with the last service using
     it.
    :type auto_delete: bool
    :ivar image_type: The type of the image. Default value: "Docker".
    :vartype image_type: str
    :param image_flavor: Required. The flavor of the image.Constant filled by server.  Possible
     values include: "WebApiContainer", "BatchContainer", "IoTContainer", "AccelContainer".
    :type image_flavor: str or ~azure.mgmt.machinelearningservices.models.ImageFlavor
    :param creation_state: The state of the operation. Possible values include: "NotStarted",
     "Running", "Cancelled", "Succeeded", "Failed", "TimedOut".
    :type creation_state: str or ~azure.mgmt.machinelearningservices.models.AsyncOperationState
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param model_ids: The list of model Ids.
    :type model_ids: list[str]
    :param model_details: The list of models.
    :type model_details: list[~azure.mgmt.machinelearningservices.models.Model]
    :param image_location: The Image location string.
    :type image_location: str
    :param image_build_log_uri: The Uri to the image build logs.
    :type image_build_log_uri: str
    :param operation_id: The ID of the asynchronous operation for this image.
    :type operation_id: str
    :param driver_program: The name of the driver file.
    :type driver_program: str
    :param assets: The list of assets.
    :type assets: list[~azure.mgmt.machinelearningservices.models.ImageAsset]
    :param target_runtime: The target runtime.
    :type target_runtime: ~azure.mgmt.machinelearningservices.models.TargetRuntime
    :param docker_file_uri: The Uri to the docker file.
    :type docker_file_uri: str
    :param generated_docker_file_uri: The Uri to the generated docker file.
    :type generated_docker_file_uri: str
    """

    _validation = {
        'image_type': {'constant': True},
        'image_flavor': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'long'},
        'digest': {'key': 'digest', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'modified_time': {'key': 'modifiedTime', 'type': 'iso-8601'},
        'auto_delete': {'key': 'autoDelete', 'type': 'bool'},
        'image_type': {'key': 'imageType', 'type': 'str'},
        'image_flavor': {'key': 'imageFlavor', 'type': 'str'},
        'creation_state': {'key': 'creationState', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'model_ids': {'key': 'modelIds', 'type': '[str]'},
        'model_details': {'key': 'modelDetails', 'type': '[Model]'},
        'image_location': {'key': 'imageLocation', 'type': 'str'},
        'image_build_log_uri': {'key': 'imageBuildLogUri', 'type': 'str'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'driver_program': {'key': 'driverProgram', 'type': 'str'},
        'assets': {'key': 'assets', 'type': '[ImageAsset]'},
        'target_runtime': {'key': 'targetRuntime', 'type': 'TargetRuntime'},
        'docker_file_uri': {'key': 'dockerFileUri', 'type': 'str'},
        'generated_docker_file_uri': {'key': 'generatedDockerFileUri', 'type': 'str'},
    }

    image_type = "Docker"

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        version: Optional[int] = None,
        digest: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        created_time: Optional[datetime.datetime] = None,
        modified_time: Optional[datetime.datetime] = None,
        auto_delete: Optional[bool] = None,
        creation_state: Optional[Union[str, "AsyncOperationState"]] = None,
        error: Optional["ModelErrorResponse"] = None,
        model_ids: Optional[List[str]] = None,
        model_details: Optional[List["Model"]] = None,
        image_location: Optional[str] = None,
        image_build_log_uri: Optional[str] = None,
        operation_id: Optional[str] = None,
        driver_program: Optional[str] = None,
        assets: Optional[List["ImageAsset"]] = None,
        target_runtime: Optional["TargetRuntime"] = None,
        docker_file_uri: Optional[str] = None,
        generated_docker_file_uri: Optional[str] = None,
        **kwargs
    ):
        super(DockerImageResponse, self).__init__(id=id, name=name, version=version, digest=digest, description=description, kv_tags=kv_tags, properties=properties, created_time=created_time, modified_time=modified_time, auto_delete=auto_delete, creation_state=creation_state, error=error, model_ids=model_ids, model_details=model_details, image_location=image_location, image_build_log_uri=image_build_log_uri, operation_id=operation_id, **kwargs)
        self.image_flavor = 'WEBAPICONTAINER'  # type: str
        self.driver_program = driver_program
        self.assets = assets
        self.target_runtime = target_runtime
        self.docker_file_uri = docker_file_uri
        self.generated_docker_file_uri = generated_docker_file_uri


class EncryptionProperties(msrest.serialization.Model):
    """EncryptionProperties.

    :param vault_base_url: vault base Url.
    :type vault_base_url: str
    :param key_name: Encryption Key name.
    :type key_name: str
    :param key_version: Encryption Key Version.
    :type key_version: str
    """

    _attribute_map = {
        'vault_base_url': {'key': 'vaultBaseUrl', 'type': 'str'},
        'key_name': {'key': 'keyName', 'type': 'str'},
        'key_version': {'key': 'keyVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        vault_base_url: Optional[str] = None,
        key_name: Optional[str] = None,
        key_version: Optional[str] = None,
        **kwargs
    ):
        super(EncryptionProperties, self).__init__(**kwargs)
        self.vault_base_url = vault_base_url
        self.key_name = key_name
        self.key_version = key_version


class EnvironmentImageRequest(msrest.serialization.Model):
    """Request to create a Docker image based on Environment.

    :param driver_program: The name of the driver file.
    :type driver_program: str
    :param assets: The list of assets.
    :type assets: list[~azure.mgmt.machinelearningservices.models.ImageAsset]
    :param model_ids: The list of model Ids.
    :type model_ids: list[str]
    :param models: The list of models.
    :type models: list[~azure.mgmt.machinelearningservices.models.Model]
    :param environment:
    :type environment: ~azure.mgmt.machinelearningservices.models.ModelEnvironmentDefinition
    :param environment_reference:
    :type environment_reference: ~azure.mgmt.machinelearningservices.models.EnvironmentReference
    """

    _attribute_map = {
        'driver_program': {'key': 'driverProgram', 'type': 'str'},
        'assets': {'key': 'assets', 'type': '[ImageAsset]'},
        'model_ids': {'key': 'modelIds', 'type': '[str]'},
        'models': {'key': 'models', 'type': '[Model]'},
        'environment': {'key': 'environment', 'type': 'ModelEnvironmentDefinition'},
        'environment_reference': {'key': 'environmentReference', 'type': 'EnvironmentReference'},
    }

    def __init__(
        self,
        *,
        driver_program: Optional[str] = None,
        assets: Optional[List["ImageAsset"]] = None,
        model_ids: Optional[List[str]] = None,
        models: Optional[List["Model"]] = None,
        environment: Optional["ModelEnvironmentDefinition"] = None,
        environment_reference: Optional["EnvironmentReference"] = None,
        **kwargs
    ):
        super(EnvironmentImageRequest, self).__init__(**kwargs)
        self.driver_program = driver_program
        self.assets = assets
        self.model_ids = model_ids
        self.models = models
        self.environment = environment
        self.environment_reference = environment_reference


class EnvironmentReference(msrest.serialization.Model):
    """EnvironmentReference.

    :param name: Name of the environment.
    :type name: str
    :param version: Version of the environment.
    :type version: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(EnvironmentReference, self).__init__(**kwargs)
        self.name = name
        self.version = version


class ErrorDetails(msrest.serialization.Model):
    """The error details.

    :param code: The error code.
    :type code: str
    :param message: The error message.
    :type message: str
    :param target: The target of the error (e.g., the name of the property in error).
    :type target: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class ExportServicesRequest(msrest.serialization.Model):
    """The request for exporting service deployments to templates.

    :param export_to_cli_yaml: The Model Id.
    :type export_to_cli_yaml: bool
    :param compute_type: The compute environment type.
    :type compute_type: str
    """

    _attribute_map = {
        'export_to_cli_yaml': {'key': 'exportToCliYaml', 'type': 'bool'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        export_to_cli_yaml: Optional[bool] = None,
        compute_type: Optional[str] = None,
        **kwargs
    ):
        super(ExportServicesRequest, self).__init__(**kwargs)
        self.export_to_cli_yaml = export_to_cli_yaml
        self.compute_type = compute_type


class FPGADockerImageResponse(ImageResponseBase):
    """The FPGA Docker Image response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: The image Id.
    :type id: str
    :param name: The image name.
    :type name: str
    :param version: The image version.
    :type version: long
    :param digest: The sha256-based digest of the image.
    :type digest: str
    :param description: The image description.
    :type description: str
    :param kv_tags: The image tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The image properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param created_time: The time the image was created.
    :type created_time: ~datetime.datetime
    :param modified_time: The time the image was last modified.
    :type modified_time: ~datetime.datetime
    :param auto_delete: Whether the image will be automatically deleted with the last service using
     it.
    :type auto_delete: bool
    :ivar image_type: The type of the image. Default value: "Docker".
    :vartype image_type: str
    :param image_flavor: Required. The flavor of the image.Constant filled by server.  Possible
     values include: "WebApiContainer", "BatchContainer", "IoTContainer", "AccelContainer".
    :type image_flavor: str or ~azure.mgmt.machinelearningservices.models.ImageFlavor
    :param creation_state: The state of the operation. Possible values include: "NotStarted",
     "Running", "Cancelled", "Succeeded", "Failed", "TimedOut".
    :type creation_state: str or ~azure.mgmt.machinelearningservices.models.AsyncOperationState
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param model_ids: The list of model Ids.
    :type model_ids: list[str]
    :param model_details: The list of models.
    :type model_details: list[~azure.mgmt.machinelearningservices.models.Model]
    :param image_location: The Image location string.
    :type image_location: str
    :param image_build_log_uri: The Uri to the image build logs.
    :type image_build_log_uri: str
    :param operation_id: The ID of the asynchronous operation for this image.
    :type operation_id: str
    """

    _validation = {
        'image_type': {'constant': True},
        'image_flavor': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'long'},
        'digest': {'key': 'digest', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'modified_time': {'key': 'modifiedTime', 'type': 'iso-8601'},
        'auto_delete': {'key': 'autoDelete', 'type': 'bool'},
        'image_type': {'key': 'imageType', 'type': 'str'},
        'image_flavor': {'key': 'imageFlavor', 'type': 'str'},
        'creation_state': {'key': 'creationState', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'model_ids': {'key': 'modelIds', 'type': '[str]'},
        'model_details': {'key': 'modelDetails', 'type': '[Model]'},
        'image_location': {'key': 'imageLocation', 'type': 'str'},
        'image_build_log_uri': {'key': 'imageBuildLogUri', 'type': 'str'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
    }

    image_type = "Docker"

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        version: Optional[int] = None,
        digest: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        created_time: Optional[datetime.datetime] = None,
        modified_time: Optional[datetime.datetime] = None,
        auto_delete: Optional[bool] = None,
        creation_state: Optional[Union[str, "AsyncOperationState"]] = None,
        error: Optional["ModelErrorResponse"] = None,
        model_ids: Optional[List[str]] = None,
        model_details: Optional[List["Model"]] = None,
        image_location: Optional[str] = None,
        image_build_log_uri: Optional[str] = None,
        operation_id: Optional[str] = None,
        **kwargs
    ):
        super(FPGADockerImageResponse, self).__init__(id=id, name=name, version=version, digest=digest, description=description, kv_tags=kv_tags, properties=properties, created_time=created_time, modified_time=modified_time, auto_delete=auto_delete, creation_state=creation_state, error=error, model_ids=model_ids, model_details=model_details, image_location=image_location, image_build_log_uri=image_build_log_uri, operation_id=operation_id, **kwargs)
        self.image_flavor = 'ACCELCONTAINER'  # type: str


class ImageAsset(msrest.serialization.Model):
    """An Image asset.

    :param id: The Asset Id.
    :type id: str
    :param mime_type: The mime type.
    :type mime_type: str
    :param url: The Url of the Asset.
    :type url: str
    :param unpack: Whether the Asset is unpacked.
    :type unpack: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'mime_type': {'key': 'mimeType', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'unpack': {'key': 'unpack', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        mime_type: Optional[str] = None,
        url: Optional[str] = None,
        unpack: Optional[bool] = None,
        **kwargs
    ):
        super(ImageAsset, self).__init__(**kwargs)
        self.id = id
        self.mime_type = mime_type
        self.url = url
        self.unpack = unpack


class IotBaseModuleSettings(msrest.serialization.Model):
    """IotBaseModuleSettings.

    :param module_name:
    :type module_name: str
    :param properties_desired: Dictionary of :code:`<string>`.
    :type properties_desired: dict[str, str]
    :param create_options:
    :type create_options: str
    :param environment_variables: Dictionary of :code:`<string>`.
    :type environment_variables: dict[str, str]
    """

    _attribute_map = {
        'module_name': {'key': 'moduleName', 'type': 'str'},
        'properties_desired': {'key': 'propertiesDesired', 'type': '{str}'},
        'create_options': {'key': 'createOptions', 'type': 'str'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        module_name: Optional[str] = None,
        properties_desired: Optional[Dict[str, str]] = None,
        create_options: Optional[str] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(IotBaseModuleSettings, self).__init__(**kwargs)
        self.module_name = module_name
        self.properties_desired = properties_desired
        self.create_options = create_options
        self.environment_variables = environment_variables


class IotModuleSettings(msrest.serialization.Model):
    """IotModuleSettings.

    :param image_location:
    :type image_location: str
    :param module_name:
    :type module_name: str
    :param properties_desired: Dictionary of :code:`<string>`.
    :type properties_desired: dict[str, str]
    :param create_options:
    :type create_options: str
    :param environment_variables: Dictionary of :code:`<string>`.
    :type environment_variables: dict[str, str]
    """

    _attribute_map = {
        'image_location': {'key': 'imageLocation', 'type': 'str'},
        'module_name': {'key': 'moduleName', 'type': 'str'},
        'properties_desired': {'key': 'propertiesDesired', 'type': '{str}'},
        'create_options': {'key': 'createOptions', 'type': 'str'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        image_location: Optional[str] = None,
        module_name: Optional[str] = None,
        properties_desired: Optional[Dict[str, str]] = None,
        create_options: Optional[str] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(IotModuleSettings, self).__init__(**kwargs)
        self.image_location = image_location
        self.module_name = module_name
        self.properties_desired = properties_desired
        self.create_options = create_options
        self.environment_variables = environment_variables


class IotServiceResponse(ServiceResponseBase):
    """IotServiceResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    :param iot_device_id:
    :type iot_device_id: str
    :param routes: Dictionary of :code:`<string>`.
    :type routes: dict[str, str]
    :param compute_name:
    :type compute_name: str
    :param iot_edge_modules:
    :type iot_edge_modules: list[~azure.mgmt.machinelearningservices.models.IotModuleSettings]
    :param auth_enabled:
    :type auth_enabled: bool
    :param image_details:
    :type image_details: ~azure.mgmt.machinelearningservices.models.ImageResponseBase
    :param image_id:
    :type image_id: str
    :param image_digest:
    :type image_digest: str
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'iot_device_id': {'key': 'iotDeviceId', 'type': 'str'},
        'routes': {'key': 'routes', 'type': '{str}'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'iot_edge_modules': {'key': 'iotEdgeModules', 'type': '[IotModuleSettings]'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
        'image_details': {'key': 'imageDetails', 'type': 'ImageResponseBase'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'image_digest': {'key': 'imageDigest', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        iot_device_id: Optional[str] = None,
        routes: Optional[Dict[str, str]] = None,
        compute_name: Optional[str] = None,
        iot_edge_modules: Optional[List["IotModuleSettings"]] = None,
        auth_enabled: Optional[bool] = None,
        image_details: Optional["ImageResponseBase"] = None,
        image_id: Optional[str] = None,
        image_digest: Optional[str] = None,
        **kwargs
    ):
        super(IotServiceResponse, self).__init__(id=id, name=name, description=description, kv_tags=kv_tags, properties=properties, operation_id=operation_id, state=state, created_time=created_time, updated_time=updated_time, error=error, deployment_type=deployment_type, created_by=created_by, endpoint_name=endpoint_name, **kwargs)
        self.compute_type = 'IOT'  # type: str
        self.iot_device_id = iot_device_id
        self.routes = routes
        self.compute_name = compute_name
        self.iot_edge_modules = iot_edge_modules
        self.auth_enabled = auth_enabled
        self.image_details = image_details
        self.image_id = image_id
        self.image_digest = image_digest


class JsonPatchDocument1(msrest.serialization.Model):
    """JsonPatchDocument1.

    :param operations:
    :type operations: list[~azure.mgmt.machinelearningservices.models.Operation1]
    """

    _attribute_map = {
        'operations': {'key': 'operations', 'type': '[Operation1]'},
    }

    def __init__(
        self,
        *,
        operations: Optional[List["Operation1"]] = None,
        **kwargs
    ):
        super(JsonPatchDocument1, self).__init__(**kwargs)
        self.operations = operations


class JsonPatchOperation(msrest.serialization.Model):
    """The Json Patch definition.

    :param value: The value.
    :type value: object
    :param path: The target location.
    :type path: str
    :param op: The operation.
    :type op: str
    :param from_property: The source location.
    :type from_property: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'object'},
        'path': {'key': 'path', 'type': 'str'},
        'op': {'key': 'op', 'type': 'str'},
        'from_property': {'key': 'from', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[object] = None,
        path: Optional[str] = None,
        op: Optional[str] = None,
        from_property: Optional[str] = None,
        **kwargs
    ):
        super(JsonPatchOperation, self).__init__(**kwargs)
        self.value = value
        self.path = path
        self.op = op
        self.from_property = from_property


class ListOnlineEndpointsRequest(msrest.serialization.Model):
    """The  class for getting services.

    :param name: The object name.
    :type name: str
    :param count: The number of items to retrieve in a page.
    :type count: int
    :param compute_type: The compute environment type. Possible values include: "ACI", "AKS",
     "AMLCOMPUTE", "IOT", "AKSENDPOINT", "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC",
     "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param type: The Endpoint type. Online or Batch. Possible values include: "Online", "Batch".
    :type type: str or ~azure.mgmt.machinelearningservices.models.EndpointType
    :param skip_token: The continuation token to retrieve the next page.
    :type skip_token: str
    :param tags: A set of tags. A set of tags with which to filter the returned models.
     It is a comma separated string of tags key or tags key=value
     Example: tagKey1,tagKey2,tagKey3=value3 .
    :type tags: str
    :param properties: A set of properties with which to filter the returned models.
     It is a comma separated string of properties key and/or properties key=value
     Example: propKey1,propKey2,propKey3=value3 .
    :type properties: str
    :param expand: Set to True to include Model details.
    :type expand: bool
    :param orderby: The option to order the response. Possible values include: "CreatedAtDesc",
     "CreatedAtAsc", "UpdatedAtDesc", "UpdatedAtAsc".
    :type orderby: str or ~azure.mgmt.machinelearningservices.models.OrderString
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'count': {'key': 'count', 'type': 'int'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'skip_token': {'key': 'skipToken', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'str'},
        'expand': {'key': 'expand', 'type': 'bool'},
        'orderby': {'key': 'orderby', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        count: Optional[int] = None,
        compute_type: Optional[Union[str, "ComputeEnvironmentType"]] = None,
        type: Optional[Union[str, "EndpointType"]] = None,
        skip_token: Optional[str] = None,
        tags: Optional[str] = None,
        properties: Optional[str] = None,
        expand: Optional[bool] = None,
        orderby: Optional[Union[str, "OrderString"]] = None,
        **kwargs
    ):
        super(ListOnlineEndpointsRequest, self).__init__(**kwargs)
        self.name = name
        self.count = count
        self.compute_type = compute_type
        self.type = type
        self.skip_token = skip_token
        self.tags = tags
        self.properties = properties
        self.expand = expand
        self.orderby = orderby


class ListServicesRequest(msrest.serialization.Model):
    """The  class for getting services.

    :param image_id: The Image Id.
    :type image_id: str
    :param image_digest: The Image Digest.
    :type image_digest: str
    :param image_name: The Image name.
    :type image_name: str
    :param model_id: The Model Id.
    :type model_id: str
    :param model_name: The Model Name.
    :type model_name: str
    :param name: The object name.
    :type name: str
    :param tag: The object tag.
    :type tag: str
    :param count: The number of items to retrieve in a page.
    :type count: int
    :param compute_type: The compute environment type.
    :type compute_type: str
    :param skip_token: The continuation token to retrieve the next page.
    :type skip_token: str
    :param tags: A set of tags. A set of tags with which to filter the returned models.
     It is a comma separated string of tags key or tags key=value
     Example: tagKey1,tagKey2,tagKey3=value3 .
    :type tags: str
    :param properties: A set of properties with which to filter the returned models.
     It is a comma separated string of properties key and/or properties key=value
     Example: propKey1,propKey2,propKey3=value3 .
    :type properties: str
    :param run_id: runId for model associated with service.
    :type run_id: str
    :param expand: Set to True to include Model details.
    :type expand: bool
    :param orderby: The option to order the response. Possible values include: "CreatedAtDesc",
     "CreatedAtAsc", "UpdatedAtDesc", "UpdatedAtAsc".
    :type orderby: str or ~azure.mgmt.machinelearningservices.models.OrderString
    :param endpoint_name: Endpoint Name that contains this service.
    :type endpoint_name: str
    """

    _attribute_map = {
        'image_id': {'key': 'imageId', 'type': 'str'},
        'image_digest': {'key': 'imageDigest', 'type': 'str'},
        'image_name': {'key': 'imageName', 'type': 'str'},
        'model_id': {'key': 'modelId', 'type': 'str'},
        'model_name': {'key': 'modelName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
        'count': {'key': 'count', 'type': 'int'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'skip_token': {'key': 'skipToken', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'str'},
        'run_id': {'key': 'runId', 'type': 'str'},
        'expand': {'key': 'expand', 'type': 'bool'},
        'orderby': {'key': 'orderby', 'type': 'str'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        image_id: Optional[str] = None,
        image_digest: Optional[str] = None,
        image_name: Optional[str] = None,
        model_id: Optional[str] = None,
        model_name: Optional[str] = None,
        name: Optional[str] = None,
        tag: Optional[str] = None,
        count: Optional[int] = None,
        compute_type: Optional[str] = None,
        skip_token: Optional[str] = None,
        tags: Optional[str] = None,
        properties: Optional[str] = None,
        run_id: Optional[str] = None,
        expand: Optional[bool] = None,
        orderby: Optional[Union[str, "OrderString"]] = None,
        endpoint_name: Optional[str] = None,
        **kwargs
    ):
        super(ListServicesRequest, self).__init__(**kwargs)
        self.image_id = image_id
        self.image_digest = image_digest
        self.image_name = image_name
        self.model_id = model_id
        self.model_name = model_name
        self.name = name
        self.tag = tag
        self.count = count
        self.compute_type = compute_type
        self.skip_token = skip_token
        self.tags = tags
        self.properties = properties
        self.run_id = run_id
        self.expand = expand
        self.orderby = orderby
        self.endpoint_name = endpoint_name


class LivenessProbeRequirements(msrest.serialization.Model):
    """The probe requirements.

    :param failure_threshold: The number of failures to allow before returning an unhealthy status.
    :type failure_threshold: int
    :param success_threshold: The number of successful probes before returning a healthy status.
    :type success_threshold: int
    :param timeout_seconds: The probe timeout in seconds.
    :type timeout_seconds: int
    :param period_seconds: The length of time between probes in seconds.
    :type period_seconds: int
    :param initial_delay_seconds: The delay before the first probe in seconds.
    :type initial_delay_seconds: int
    """

    _attribute_map = {
        'failure_threshold': {'key': 'failureThreshold', 'type': 'int'},
        'success_threshold': {'key': 'successThreshold', 'type': 'int'},
        'timeout_seconds': {'key': 'timeoutSeconds', 'type': 'int'},
        'period_seconds': {'key': 'periodSeconds', 'type': 'int'},
        'initial_delay_seconds': {'key': 'initialDelaySeconds', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        failure_threshold: Optional[int] = None,
        success_threshold: Optional[int] = None,
        timeout_seconds: Optional[int] = None,
        period_seconds: Optional[int] = None,
        initial_delay_seconds: Optional[int] = None,
        **kwargs
    ):
        super(LivenessProbeRequirements, self).__init__(**kwargs)
        self.failure_threshold = failure_threshold
        self.success_threshold = success_threshold
        self.timeout_seconds = timeout_seconds
        self.period_seconds = period_seconds
        self.initial_delay_seconds = initial_delay_seconds


class ManagedIdentity(msrest.serialization.Model):
    """ManagedIdentity.

    :param type:
    :type type: str
    :param system_identity_url:
    :type system_identity_url: str
    :param principal_id:
    :type principal_id: str
    :param tenant_id:
    :type tenant_id: str
    :param client_id:
    :type client_id: str
    :param client_secret_url:
    :type client_secret_url: str
    :param user_assigned_identities: Dictionary of :code:`<UserAssignedIdentity>`.
    :type user_assigned_identities: dict[str,
     ~azure.mgmt.machinelearningservices.models.UserAssignedIdentity]
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'system_identity_url': {'key': 'systemIdentityUrl', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret_url': {'key': 'clientSecretUrl', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{UserAssignedIdentity}'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        system_identity_url: Optional[str] = None,
        principal_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        client_id: Optional[str] = None,
        client_secret_url: Optional[str] = None,
        user_assigned_identities: Optional[Dict[str, "UserAssignedIdentity"]] = None,
        **kwargs
    ):
        super(ManagedIdentity, self).__init__(**kwargs)
        self.type = type
        self.system_identity_url = system_identity_url
        self.principal_id = principal_id
        self.tenant_id = tenant_id
        self.client_id = client_id
        self.client_secret_url = client_secret_url
        self.user_assigned_identities = user_assigned_identities


class ManagedInferenceCreateServiceRequest(CreateServiceRequest):
    """The request to create a service on MIR resource.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The service name.
    :type name: str
    :param description: The description of the service.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param keys:
    :type keys: ~azure.mgmt.machinelearningservices.models.AuthKeys
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param image_id: The Image Id.
    :type image_id: str
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param location: The location of the service.
    :type location: str
    :param overwrite: Whether to overwrite existing service if exists.
    :type overwrite: bool
    :param deployed_api_options:
    :type deployed_api_options: ~azure.mgmt.machinelearningservices.models.DeployedApiOptionsBase
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param num_replicas: The number of replicas on the cluster.
    :type num_replicas: int
    :param compute_name: The name of the compute resource.
    :type compute_name: str
    :param auto_scaler: The Auto Scaler properties.
    :type auto_scaler: ~azure.mgmt.machinelearningservices.models.AutoScaler
    :param scale_type: Scale type for auto scaler.
    :type scale_type: str
    :param max_concurrent_requests_per_container: The maximum number of concurrent requests per
     container.
    :type max_concurrent_requests_per_container: int
    :param scoring_timeout_ms: The scoring timeout in milliseconds.
    :type scoring_timeout_ms: int
    :param sku: SKU type to meet customer requirements.
    :type sku: str
    :param os_type: Type of OS for the nodepool [Linux(default), Windows]. Possible values include:
     "Linux", "Windows".
    :type os_type: str or ~azure.mgmt.machinelearningservices.models.OSType
    :param application_insights_enabled: True if Application Insights is enabled for this service.
    :type application_insights_enabled: bool
    :param liveness_probe_requirements: The probe requirements.
    :type liveness_probe_requirements:
     ~azure.mgmt.machinelearningservices.models.LivenessProbeRequirements
    :param readiness_probe_requirements: The probe requirements.
    :type readiness_probe_requirements:
     ~azure.mgmt.machinelearningservices.models.LivenessProbeRequirements
    :param endpoint_name: The parent OnlineEndpoint name that contains this service.
     This value will only be provided when coming through ARM.
    :type endpoint_name: str
    :param environment_variables: Additional runtime environment variables for the service.
     Values provided here will take priority over any variables present on the Environment.
    :type environment_variables: dict[str, str]
    :param docker_command: The command to run the container image for custom containers.
    :type docker_command: list[str]
    :param model_mount_path: The absolute path to mount the model for custom containers.
    :type model_mount_path: str
    """

    _validation = {
        'name': {'required': True},
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'keys': {'key': 'keys', 'type': 'AuthKeys'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'location': {'key': 'location', 'type': 'str'},
        'overwrite': {'key': 'overwrite', 'type': 'bool'},
        'deployed_api_options': {'key': 'deployedApiOptions', 'type': 'DeployedApiOptionsBase'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'num_replicas': {'key': 'numReplicas', 'type': 'int'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'auto_scaler': {'key': 'autoScaler', 'type': 'AutoScaler'},
        'scale_type': {'key': 'scaleType', 'type': 'str'},
        'max_concurrent_requests_per_container': {'key': 'maxConcurrentRequestsPerContainer', 'type': 'int'},
        'scoring_timeout_ms': {'key': 'scoringTimeoutMs', 'type': 'int'},
        'sku': {'key': 'sku', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'application_insights_enabled': {'key': 'applicationInsightsEnabled', 'type': 'bool'},
        'liveness_probe_requirements': {'key': 'livenessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'readiness_probe_requirements': {'key': 'readinessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
        'docker_command': {'key': 'dockerCommand', 'type': '[str]'},
        'model_mount_path': {'key': 'modelMountPath', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        keys: Optional["AuthKeys"] = None,
        image_id: Optional[str] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        location: Optional[str] = None,
        overwrite: Optional[bool] = None,
        deployed_api_options: Optional["DeployedApiOptionsBase"] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        num_replicas: Optional[int] = None,
        compute_name: Optional[str] = None,
        auto_scaler: Optional["AutoScaler"] = None,
        scale_type: Optional[str] = None,
        max_concurrent_requests_per_container: Optional[int] = None,
        scoring_timeout_ms: Optional[int] = None,
        sku: Optional[str] = None,
        os_type: Optional[Union[str, "OSType"]] = None,
        application_insights_enabled: Optional[bool] = None,
        liveness_probe_requirements: Optional["LivenessProbeRequirements"] = None,
        readiness_probe_requirements: Optional["LivenessProbeRequirements"] = None,
        endpoint_name: Optional[str] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        docker_command: Optional[List[str]] = None,
        model_mount_path: Optional[str] = None,
        **kwargs
    ):
        super(ManagedInferenceCreateServiceRequest, self).__init__(name=name, description=description, kv_tags=kv_tags, properties=properties, keys=keys, image_id=image_id, environment_image_request=environment_image_request, location=location, overwrite=overwrite, deployed_api_options=deployed_api_options, container_resource_requirements=container_resource_requirements, **kwargs)
        self.compute_type = 'MIRAMLCOMPUTE'  # type: str
        self.num_replicas = num_replicas
        self.compute_name = compute_name
        self.auto_scaler = auto_scaler
        self.scale_type = scale_type
        self.max_concurrent_requests_per_container = max_concurrent_requests_per_container
        self.scoring_timeout_ms = scoring_timeout_ms
        self.sku = sku
        self.os_type = os_type
        self.application_insights_enabled = application_insights_enabled
        self.liveness_probe_requirements = liveness_probe_requirements
        self.readiness_probe_requirements = readiness_probe_requirements
        self.endpoint_name = endpoint_name
        self.environment_variables = environment_variables
        self.docker_command = docker_command
        self.model_mount_path = model_mount_path


class ManagedInferenceServiceResponse(ServiceResponseBase):
    """The response for an MIR service.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    :param num_replicas: The number of replicas on the cluster.
    :type num_replicas: int
    :param compute_name: The name of the compute resource.
    :type compute_name: str
    :param auto_scaler: The Auto Scaler properties.
    :type auto_scaler: ~azure.mgmt.machinelearningservices.models.AutoScaler
    :param scale_type: Scale type for auto scaler.
    :type scale_type: str
    :param max_concurrent_requests_per_container: The maximum number of concurrent requests per
     container.
    :type max_concurrent_requests_per_container: int
    :param scoring_timeout_ms: The scoring timeout in milliseconds.
    :type scoring_timeout_ms: int
    :param sku: SKU type to meet customer requirements.
    :type sku: str
    :param os_type: Type of OS for the nodepool [Linux(default), Windows]. Possible values include:
     "Linux", "Windows".
    :type os_type: str or ~azure.mgmt.machinelearningservices.models.OSType
    :param application_insights_enabled: True if Application Insights is enabled for this service.
    :type application_insights_enabled: bool
    :param liveness_probe_requirements: The probe requirements.
    :type liveness_probe_requirements:
     ~azure.mgmt.machinelearningservices.models.LivenessProbeRequirements
    :param readiness_probe_requirements: The probe requirements.
    :type readiness_probe_requirements:
     ~azure.mgmt.machinelearningservices.models.LivenessProbeRequirements
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param environment_variables: Additional runtime environment variables for the service.
     Values provided here will take priority over any variables present on the Environment.
    :type environment_variables: dict[str, str]
    :param models: The list of models.
    :type models: list[~azure.mgmt.machinelearningservices.models.Model]
    :param docker_command: The command that is used in Custom Containers used at container runtime.
    :type docker_command: list[str]
    :param model_mount_path: The path to mount model in for custom containers.
    :type model_mount_path: str
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'num_replicas': {'key': 'numReplicas', 'type': 'int'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'auto_scaler': {'key': 'autoScaler', 'type': 'AutoScaler'},
        'scale_type': {'key': 'scaleType', 'type': 'str'},
        'max_concurrent_requests_per_container': {'key': 'maxConcurrentRequestsPerContainer', 'type': 'int'},
        'scoring_timeout_ms': {'key': 'scoringTimeoutMs', 'type': 'int'},
        'sku': {'key': 'sku', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'application_insights_enabled': {'key': 'applicationInsightsEnabled', 'type': 'bool'},
        'liveness_probe_requirements': {'key': 'livenessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'readiness_probe_requirements': {'key': 'readinessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
        'models': {'key': 'models', 'type': '[Model]'},
        'docker_command': {'key': 'dockerCommand', 'type': '[str]'},
        'model_mount_path': {'key': 'modelMountPath', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        num_replicas: Optional[int] = None,
        compute_name: Optional[str] = None,
        auto_scaler: Optional["AutoScaler"] = None,
        scale_type: Optional[str] = None,
        max_concurrent_requests_per_container: Optional[int] = None,
        scoring_timeout_ms: Optional[int] = None,
        sku: Optional[str] = None,
        os_type: Optional[Union[str, "OSType"]] = None,
        application_insights_enabled: Optional[bool] = None,
        liveness_probe_requirements: Optional["LivenessProbeRequirements"] = None,
        readiness_probe_requirements: Optional["LivenessProbeRequirements"] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        models: Optional[List["Model"]] = None,
        docker_command: Optional[List[str]] = None,
        model_mount_path: Optional[str] = None,
        **kwargs
    ):
        super(ManagedInferenceServiceResponse, self).__init__(id=id, name=name, description=description, kv_tags=kv_tags, properties=properties, operation_id=operation_id, state=state, created_time=created_time, updated_time=updated_time, error=error, deployment_type=deployment_type, created_by=created_by, endpoint_name=endpoint_name, **kwargs)
        self.compute_type = 'MIRAMLCOMPUTE'  # type: str
        self.num_replicas = num_replicas
        self.compute_name = compute_name
        self.auto_scaler = auto_scaler
        self.scale_type = scale_type
        self.max_concurrent_requests_per_container = max_concurrent_requests_per_container
        self.scoring_timeout_ms = scoring_timeout_ms
        self.sku = sku
        self.os_type = os_type
        self.application_insights_enabled = application_insights_enabled
        self.liveness_probe_requirements = liveness_probe_requirements
        self.readiness_probe_requirements = readiness_probe_requirements
        self.environment_image_request = environment_image_request
        self.container_resource_requirements = container_resource_requirements
        self.environment_variables = environment_variables
        self.models = models
        self.docker_command = docker_command
        self.model_mount_path = model_mount_path


class MirRevisionStatus(msrest.serialization.Model):
    """MirRevisionStatus.

    :param last_created_revision: The revision associated with the last MIR Spec specified by the
     user.
    :type last_created_revision: str
    :param last_ready_revision: The revision associated with the last MIR Spec that was last ready.
    :type last_ready_revision: str
    """

    _attribute_map = {
        'last_created_revision': {'key': 'lastCreatedRevision', 'type': 'str'},
        'last_ready_revision': {'key': 'lastReadyRevision', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        last_created_revision: Optional[str] = None,
        last_ready_revision: Optional[str] = None,
        **kwargs
    ):
        super(MirRevisionStatus, self).__init__(**kwargs)
        self.last_created_revision = last_created_revision
        self.last_ready_revision = last_ready_revision


class MirServiceResponse(ServiceResponseBase):
    """The response for an MIR service.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    :param sku: Long form of Azure SKU to use. Optional. Will default in MIR Service.
    :type sku: str
    :param image_details:
    :type image_details: ~azure.mgmt.machinelearningservices.models.ImageResponseBase
    :param image_id: The Id of the Image.
    :type image_id: str
    :param image_digest: The Digest of the Image.
    :type image_digest: str
    :param models: The list of models.
    :type models: list[~azure.mgmt.machinelearningservices.models.Model]
    :param container_resource_requirements: The resource requirements for the container (cpu and
     memory).
    :type container_resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param max_concurrent_requests_per_container: The maximum number of concurrent requests per
     container.
    :type max_concurrent_requests_per_container: int
    :param compute_name: The name of the compute resource.
    :type compute_name: str
    :param num_replicas: The number of replicas on the cluster.
    :type num_replicas: int
    :param data_collection: The Model data collection properties.
    :type data_collection: ~azure.mgmt.machinelearningservices.models.ModelDataCollection
    :param auto_scaler: The Auto Scaler properties.
    :type auto_scaler: ~azure.mgmt.machinelearningservices.models.AutoScaler
    :param scoring_uri: The Uri for sending scoring requests.
    :type scoring_uri: str
    :param deployment_status:
    :type deployment_status: ~azure.mgmt.machinelearningservices.models.MirRevisionStatus
    :param scoring_timeout_ms: The scoring timeout in milliseconds.
    :type scoring_timeout_ms: int
    :param app_insights_enabled: Whether or not Application Insights is enabled.
    :type app_insights_enabled: bool
    :param liveness_probe_requirements: The probe requirements.
    :type liveness_probe_requirements:
     ~azure.mgmt.machinelearningservices.models.LivenessProbeRequirements
    :param auth_enabled: Whether or not authentication is enabled.
    :type auth_enabled: bool
    :param aad_auth_enabled: Whether or not AAD authentication is enabled.
    :type aad_auth_enabled: bool
    :param environment_image_request: Request to create a Docker image based on Environment.
    :type environment_image_request:
     ~azure.mgmt.machinelearningservices.models.EnvironmentImageRequest
    :param tls_mode: TLS mode for scoring authentication, options are "DISABLED", "SIMPLE",
     "MUTUAL". Possible values include: "DISABLED", "SIMPLE", "MUTUAL".
    :type tls_mode: str or ~azure.mgmt.machinelearningservices.models.TlsMode
    :param certificate_fingerprints: List of fingerprints for scoring authentication.
    :type certificate_fingerprints: list[str]
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
        'image_details': {'key': 'imageDetails', 'type': 'ImageResponseBase'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'image_digest': {'key': 'imageDigest', 'type': 'str'},
        'models': {'key': 'models', 'type': '[Model]'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'max_concurrent_requests_per_container': {'key': 'maxConcurrentRequestsPerContainer', 'type': 'int'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'num_replicas': {'key': 'numReplicas', 'type': 'int'},
        'data_collection': {'key': 'dataCollection', 'type': 'ModelDataCollection'},
        'auto_scaler': {'key': 'autoScaler', 'type': 'AutoScaler'},
        'scoring_uri': {'key': 'scoringUri', 'type': 'str'},
        'deployment_status': {'key': 'deploymentStatus', 'type': 'MirRevisionStatus'},
        'scoring_timeout_ms': {'key': 'scoringTimeoutMs', 'type': 'int'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'liveness_probe_requirements': {'key': 'livenessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
        'aad_auth_enabled': {'key': 'aadAuthEnabled', 'type': 'bool'},
        'environment_image_request': {'key': 'environmentImageRequest', 'type': 'EnvironmentImageRequest'},
        'tls_mode': {'key': 'tlsMode', 'type': 'str'},
        'certificate_fingerprints': {'key': 'certificateFingerprints', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        sku: Optional[str] = None,
        image_details: Optional["ImageResponseBase"] = None,
        image_id: Optional[str] = None,
        image_digest: Optional[str] = None,
        models: Optional[List["Model"]] = None,
        container_resource_requirements: Optional["ContainerResourceRequirements"] = None,
        max_concurrent_requests_per_container: Optional[int] = None,
        compute_name: Optional[str] = None,
        num_replicas: Optional[int] = None,
        data_collection: Optional["ModelDataCollection"] = None,
        auto_scaler: Optional["AutoScaler"] = None,
        scoring_uri: Optional[str] = None,
        deployment_status: Optional["MirRevisionStatus"] = None,
        scoring_timeout_ms: Optional[int] = None,
        app_insights_enabled: Optional[bool] = None,
        liveness_probe_requirements: Optional["LivenessProbeRequirements"] = None,
        auth_enabled: Optional[bool] = None,
        aad_auth_enabled: Optional[bool] = None,
        environment_image_request: Optional["EnvironmentImageRequest"] = None,
        tls_mode: Optional[Union[str, "TlsMode"]] = None,
        certificate_fingerprints: Optional[List[str]] = None,
        **kwargs
    ):
        super(MirServiceResponse, self).__init__(id=id, name=name, description=description, kv_tags=kv_tags, properties=properties, operation_id=operation_id, state=state, created_time=created_time, updated_time=updated_time, error=error, deployment_type=deployment_type, created_by=created_by, endpoint_name=endpoint_name, **kwargs)
        self.compute_type = 'MIR'  # type: str
        self.sku = sku
        self.image_details = image_details
        self.image_id = image_id
        self.image_digest = image_digest
        self.models = models
        self.container_resource_requirements = container_resource_requirements
        self.max_concurrent_requests_per_container = max_concurrent_requests_per_container
        self.compute_name = compute_name
        self.num_replicas = num_replicas
        self.data_collection = data_collection
        self.auto_scaler = auto_scaler
        self.scoring_uri = scoring_uri
        self.deployment_status = deployment_status
        self.scoring_timeout_ms = scoring_timeout_ms
        self.app_insights_enabled = app_insights_enabled
        self.liveness_probe_requirements = liveness_probe_requirements
        self.auth_enabled = auth_enabled
        self.aad_auth_enabled = aad_auth_enabled
        self.environment_image_request = environment_image_request
        self.tls_mode = tls_mode
        self.certificate_fingerprints = certificate_fingerprints


class Model(msrest.serialization.Model):
    """An Azure Machine Learning Model.

    All required parameters must be populated in order to send to Azure.

    :param id: The Model Id.
    :type id: str
    :param name: Required. The Model name.
    :type name: str
    :param framework: The Model framework.
    :type framework: str
    :param framework_version: The Model framework version.
    :type framework_version: str
    :param version: The Model version assigned by Model Management Service.
    :type version: long
    :param datasets: The list of datasets associated with the model.
    :type datasets: list[~azure.mgmt.machinelearningservices.models.DatasetReference]
    :param url: Required. The URL of the Model. Usually a SAS URL.
    :type url: str
    :param mime_type: Required. The MIME type of Model content. For more details about MIME type,
     please open https://www.iana.org/assignments/media-types/media-types.xhtml.
    :type mime_type: str
    :param description: The Model description text.
    :type description: str
    :param created_time: The Model creation time (UTC).
    :type created_time: ~datetime.datetime
    :param modified_time: The Model last modified time (UTC).
    :type modified_time: ~datetime.datetime
    :param unpack: Indicates whether we need to unpack the Model during docker Image creation.
    :type unpack: bool
    :param parent_model_id: The Parent Model Id.
    :type parent_model_id: str
    :param run_id: The RunId that created this model.
    :type run_id: str
    :param experiment_name: The name of the experiment where this model was created.
    :type experiment_name: str
    :param kv_tags: The Model tag dictionary. Items are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The Model property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param derived_model_ids: Models dervied from this model.
    :type derived_model_ids: list[str]
    :param sample_input_data: Sample Input Data for the Model. A reference to a dataset in the
     workspace in the format aml://dataset/{datasetId}.
    :type sample_input_data: str
    :param sample_output_data: Sample Output Data for the Model. A reference to a dataset in the
     workspace in the format aml://dataset/{datasetId}.
    :type sample_output_data: str
    :param resource_requirements: The resource requirements for the container (cpu and memory).
    :type resource_requirements:
     ~azure.mgmt.machinelearningservices.models.ContainerResourceRequirements
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    """

    _validation = {
        'name': {'required': True},
        'url': {'required': True},
        'mime_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'framework': {'key': 'framework', 'type': 'str'},
        'framework_version': {'key': 'frameworkVersion', 'type': 'str'},
        'version': {'key': 'version', 'type': 'long'},
        'datasets': {'key': 'datasets', 'type': '[DatasetReference]'},
        'url': {'key': 'url', 'type': 'str'},
        'mime_type': {'key': 'mimeType', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'modified_time': {'key': 'modifiedTime', 'type': 'iso-8601'},
        'unpack': {'key': 'unpack', 'type': 'bool'},
        'parent_model_id': {'key': 'parentModelId', 'type': 'str'},
        'run_id': {'key': 'runId', 'type': 'str'},
        'experiment_name': {'key': 'experimentName', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'derived_model_ids': {'key': 'derivedModelIds', 'type': '[str]'},
        'sample_input_data': {'key': 'sampleInputData', 'type': 'str'},
        'sample_output_data': {'key': 'sampleOutputData', 'type': 'str'},
        'resource_requirements': {'key': 'resourceRequirements', 'type': 'ContainerResourceRequirements'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
    }

    def __init__(
        self,
        *,
        name: str,
        url: str,
        mime_type: str,
        id: Optional[str] = None,
        framework: Optional[str] = None,
        framework_version: Optional[str] = None,
        version: Optional[int] = None,
        datasets: Optional[List["DatasetReference"]] = None,
        description: Optional[str] = None,
        created_time: Optional[datetime.datetime] = None,
        modified_time: Optional[datetime.datetime] = None,
        unpack: Optional[bool] = None,
        parent_model_id: Optional[str] = None,
        run_id: Optional[str] = None,
        experiment_name: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        derived_model_ids: Optional[List[str]] = None,
        sample_input_data: Optional[str] = None,
        sample_output_data: Optional[str] = None,
        resource_requirements: Optional["ContainerResourceRequirements"] = None,
        created_by: Optional["User"] = None,
        **kwargs
    ):
        super(Model, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.framework = framework
        self.framework_version = framework_version
        self.version = version
        self.datasets = datasets
        self.url = url
        self.mime_type = mime_type
        self.description = description
        self.created_time = created_time
        self.modified_time = modified_time
        self.unpack = unpack
        self.parent_model_id = parent_model_id
        self.run_id = run_id
        self.experiment_name = experiment_name
        self.kv_tags = kv_tags
        self.properties = properties
        self.derived_model_ids = derived_model_ids
        self.sample_input_data = sample_input_data
        self.sample_output_data = sample_output_data
        self.resource_requirements = resource_requirements
        self.created_by = created_by


class ModelDataCollection(msrest.serialization.Model):
    """The Model data collection properties.

    :param event_hub_enabled: Option for enabling/disabling Event Hub.
    :type event_hub_enabled: bool
    :param storage_enabled: Option for enabling/disabling storage.
    :type storage_enabled: bool
    """

    _attribute_map = {
        'event_hub_enabled': {'key': 'eventHubEnabled', 'type': 'bool'},
        'storage_enabled': {'key': 'storageEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        event_hub_enabled: Optional[bool] = None,
        storage_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(ModelDataCollection, self).__init__(**kwargs)
        self.event_hub_enabled = event_hub_enabled
        self.storage_enabled = storage_enabled


class ModelDockerSection(msrest.serialization.Model):
    """ModelDockerSection.

    :param base_image: Base image used for Docker-based runs. Mutually exclusive with
     BaseDockerfile and BuildContext.
    :type base_image: str
    :param platform:
    :type platform: ~azure.mgmt.machinelearningservices.models.DockerImagePlatform
    :param base_dockerfile: Base Dockerfile used for Docker-based runs. Mutually exclusive with
     BaseImage and BuildContext.
    :type base_dockerfile: str
    :param build_context:
    :type build_context: ~azure.mgmt.machinelearningservices.models.DockerBuildContext
    :param base_image_registry:
    :type base_image_registry: ~azure.mgmt.machinelearningservices.models.ContainerRegistry
    """

    _attribute_map = {
        'base_image': {'key': 'baseImage', 'type': 'str'},
        'platform': {'key': 'platform', 'type': 'DockerImagePlatform'},
        'base_dockerfile': {'key': 'baseDockerfile', 'type': 'str'},
        'build_context': {'key': 'buildContext', 'type': 'DockerBuildContext'},
        'base_image_registry': {'key': 'baseImageRegistry', 'type': 'ContainerRegistry'},
    }

    def __init__(
        self,
        *,
        base_image: Optional[str] = None,
        platform: Optional["DockerImagePlatform"] = None,
        base_dockerfile: Optional[str] = None,
        build_context: Optional["DockerBuildContext"] = None,
        base_image_registry: Optional["ContainerRegistry"] = None,
        **kwargs
    ):
        super(ModelDockerSection, self).__init__(**kwargs)
        self.base_image = base_image
        self.platform = platform
        self.base_dockerfile = base_dockerfile
        self.build_context = build_context
        self.base_image_registry = base_image_registry


class ModelEnvironmentDefinition(msrest.serialization.Model):
    """ModelEnvironmentDefinition.

    :param name: The name of the environment.
    :type name: str
    :param version: The environment version.
    :type version: str
    :param python:
    :type python: ~azure.mgmt.machinelearningservices.models.ModelPythonSection
    :param environment_variables: Definition of environment variables to be defined in the
     environment.
    :type environment_variables: dict[str, str]
    :param docker:
    :type docker: ~azure.mgmt.machinelearningservices.models.ModelDockerSection
    :param spark:
    :type spark: ~azure.mgmt.machinelearningservices.models.ModelSparkSection
    :param r:
    :type r: ~azure.mgmt.machinelearningservices.models.RSection
    :param inferencing_stack_version: The inferencing stack version added to the image. To avoid
     adding an inferencing stack, do not set this value. Valid values: "latest".
    :type inferencing_stack_version: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'python': {'key': 'python', 'type': 'ModelPythonSection'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
        'docker': {'key': 'docker', 'type': 'ModelDockerSection'},
        'spark': {'key': 'spark', 'type': 'ModelSparkSection'},
        'r': {'key': 'r', 'type': 'RSection'},
        'inferencing_stack_version': {'key': 'inferencingStackVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        version: Optional[str] = None,
        python: Optional["ModelPythonSection"] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        docker: Optional["ModelDockerSection"] = None,
        spark: Optional["ModelSparkSection"] = None,
        r: Optional["RSection"] = None,
        inferencing_stack_version: Optional[str] = None,
        **kwargs
    ):
        super(ModelEnvironmentDefinition, self).__init__(**kwargs)
        self.name = name
        self.version = version
        self.python = python
        self.environment_variables = environment_variables
        self.docker = docker
        self.spark = spark
        self.r = r
        self.inferencing_stack_version = inferencing_stack_version


class ModelErrorResponse(msrest.serialization.Model):
    """The Model Management Service Error object.

    :param code: The error code.
    :type code: str
    :param status_code: The HTTP status code.
    :type status_code: int
    :param message: The error message.
    :type message: str
    :param target:
    :type target: str
    :param details: An array of error detail objects.
    :type details: list[~azure.mgmt.machinelearningservices.models.ErrorDetails]
    :param correlation: A dictionary of information used to correlate the failing request.
    :type correlation: dict[str, str]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'status_code': {'key': 'statusCode', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetails]'},
        'correlation': {'key': 'correlation', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        status_code: Optional[int] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["ErrorDetails"]] = None,
        correlation: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(ModelErrorResponse, self).__init__(**kwargs)
        self.code = code
        self.status_code = status_code
        self.message = message
        self.target = target
        self.details = details
        self.correlation = correlation


class ModelPythonSection(msrest.serialization.Model):
    """ModelPythonSection.

    :param interpreter_path: The python interpreter path to use if an environment build is not
     required. The path specified gets used to call the user script.
    :type interpreter_path: str
    :param user_managed_dependencies: True means that AzureML reuses an existing python
     environment; False means that AzureML will create a python environment based on the Conda
     dependencies specification.
    :type user_managed_dependencies: bool
    :param conda_dependencies: Any object.
    :type conda_dependencies: object
    :param base_conda_environment:
    :type base_conda_environment: str
    """

    _attribute_map = {
        'interpreter_path': {'key': 'interpreterPath', 'type': 'str'},
        'user_managed_dependencies': {'key': 'userManagedDependencies', 'type': 'bool'},
        'conda_dependencies': {'key': 'condaDependencies', 'type': 'object'},
        'base_conda_environment': {'key': 'baseCondaEnvironment', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        interpreter_path: Optional[str] = None,
        user_managed_dependencies: Optional[bool] = None,
        conda_dependencies: Optional[object] = None,
        base_conda_environment: Optional[str] = None,
        **kwargs
    ):
        super(ModelPythonSection, self).__init__(**kwargs)
        self.interpreter_path = interpreter_path
        self.user_managed_dependencies = user_managed_dependencies
        self.conda_dependencies = conda_dependencies
        self.base_conda_environment = base_conda_environment


class ModelSparkSection(msrest.serialization.Model):
    """ModelSparkSection.

    :param repositories: The list of spark repositories.
    :type repositories: list[str]
    :param packages: The Spark packages to use.
    :type packages: list[~azure.mgmt.machinelearningservices.models.SparkMavenPackage]
    :param precache_packages: Whether to precache the packages.
    :type precache_packages: bool
    """

    _attribute_map = {
        'repositories': {'key': 'repositories', 'type': '[str]'},
        'packages': {'key': 'packages', 'type': '[SparkMavenPackage]'},
        'precache_packages': {'key': 'precachePackages', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        repositories: Optional[List[str]] = None,
        packages: Optional[List["SparkMavenPackage"]] = None,
        precache_packages: Optional[bool] = None,
        **kwargs
    ):
        super(ModelSparkSection, self).__init__(**kwargs)
        self.repositories = repositories
        self.packages = packages
        self.precache_packages = precache_packages


class OnlineEndpointResponseBase(msrest.serialization.Model):
    """The base endpoint response.

    :param id: The service Id.
    :type id: str
    :param identity:
    :type identity: ~azure.mgmt.machinelearningservices.models.ManagedIdentity
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param tags: A set of tags. The service tag dictionary.
    :type tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param location: The Azure region for this endpoint. Defaults to the region of the Workspace.
    :type location: str
    :param state: The current state of the service. Possible values include: "Creating",
     "Deleting", "Updating", "Succeeded", "Failed".
    :type state: str or ~azure.mgmt.machinelearningservices.models.OnlineEndpointProvisioningState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param endpoint: The URI for scoring against the Endpoint.
    :type endpoint: str
    :param swagger_endpoint: The URI for retrieving the swagger.json file for the endpoint.
    :type swagger_endpoint: str
    :param compute_configuration:
    :type compute_configuration: ~azure.mgmt.machinelearningservices.models.ComputeConfiguration
    :param allow_public_access: Set to false for endpoints that should not allow public access when
     Private Link is enabled. Default true.
    :type allow_public_access: bool
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param traffic_rules: Traffic rules on how the traffic will be routed across deployments.
    :type traffic_rules: dict[str, int]
    :param mirror_traffic_rules: Percentage of traffic to be mirrored to each deployment without
     using returned scoring. Traffic values need to sum to utmost 50.
    :type mirror_traffic_rules: dict[str, int]
    :param auth_mode: Inference endpoint authentication mode type. Possible values include:
     "AMLToken", "Key", "AADToken".
    :type auth_mode: str or ~azure.mgmt.machinelearningservices.models.AuthMode
    :param type: Type of endpoint. Online or Batch. Possible values include: "Online", "Batch".
    :type type: str or ~azure.mgmt.machinelearningservices.models.EndpointType
    :param operation_id: MMS Operation ID of the last async operation running on this entity.
    :type operation_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedIdentity'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'endpoint': {'key': 'endpoint', 'type': 'str'},
        'swagger_endpoint': {'key': 'swaggerEndpoint', 'type': 'str'},
        'compute_configuration': {'key': 'computeConfiguration', 'type': 'ComputeConfiguration'},
        'allow_public_access': {'key': 'allowPublicAccess', 'type': 'bool'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'traffic_rules': {'key': 'trafficRules', 'type': '{int}'},
        'mirror_traffic_rules': {'key': 'mirrorTrafficRules', 'type': '{int}'},
        'auth_mode': {'key': 'authMode', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        identity: Optional["ManagedIdentity"] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        state: Optional[Union[str, "OnlineEndpointProvisioningState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        endpoint: Optional[str] = None,
        swagger_endpoint: Optional[str] = None,
        compute_configuration: Optional["ComputeConfiguration"] = None,
        allow_public_access: Optional[bool] = None,
        created_by: Optional["User"] = None,
        traffic_rules: Optional[Dict[str, int]] = None,
        mirror_traffic_rules: Optional[Dict[str, int]] = None,
        auth_mode: Optional[Union[str, "AuthMode"]] = None,
        type: Optional[Union[str, "EndpointType"]] = None,
        operation_id: Optional[str] = None,
        **kwargs
    ):
        super(OnlineEndpointResponseBase, self).__init__(**kwargs)
        self.id = id
        self.identity = identity
        self.name = name
        self.description = description
        self.tags = tags
        self.properties = properties
        self.location = location
        self.state = state
        self.created_time = created_time
        self.updated_time = updated_time
        self.endpoint = endpoint
        self.swagger_endpoint = swagger_endpoint
        self.compute_configuration = compute_configuration
        self.allow_public_access = allow_public_access
        self.created_by = created_by
        self.traffic_rules = traffic_rules
        self.mirror_traffic_rules = mirror_traffic_rules
        self.auth_mode = auth_mode
        self.type = type
        self.operation_id = operation_id


class Operation1(msrest.serialization.Model):
    """Operation1.

    :param value: Any object.
    :type value: object
    :param path:
    :type path: str
    :param op:
    :type op: str
    :param from_property:
    :type from_property: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'object'},
        'path': {'key': 'path', 'type': 'str'},
        'op': {'key': 'op', 'type': 'str'},
        'from_property': {'key': 'from', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[object] = None,
        path: Optional[str] = None,
        op: Optional[str] = None,
        from_property: Optional[str] = None,
        **kwargs
    ):
        super(Operation1, self).__init__(**kwargs)
        self.value = value
        self.path = path
        self.op = op
        self.from_property = from_property


class PaginatedProfileResponseList(msrest.serialization.Model):
    """A paginated list of ProfileResponses.

    :param value: An array of objects of type ProfileResponse.
    :type value: list[~azure.mgmt.machinelearningservices.models.ProfileResponse]
    :param continuation_token: The token used in retrieving the next page. If null, there are no
     additional pages.
    :type continuation_token: str
    :param next_link: A continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ProfileResponse]'},
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ProfileResponse"]] = None,
        continuation_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PaginatedProfileResponseList, self).__init__(**kwargs)
        self.value = value
        self.continuation_token = continuation_token
        self.next_link = next_link


class PaginatedServiceList(msrest.serialization.Model):
    """A paginated list of Services.

    :param value: An array of objects of type Service.
    :type value: list[~azure.mgmt.machinelearningservices.models.ServiceResponseBase]
    :param continuation_token: The token used in retrieving the next page. If null, there are no
     additional pages.
    :type continuation_token: str
    :param next_link: A continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ServiceResponseBase]'},
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ServiceResponseBase"]] = None,
        continuation_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PaginatedServiceList, self).__init__(**kwargs)
        self.value = value
        self.continuation_token = continuation_token
        self.next_link = next_link


class PaginatedServiceListPost(msrest.serialization.Model):
    """A paginated list of Services.

    :param value: An array of objects of type Service.
    :type value: list[~azure.mgmt.machinelearningservices.models.ServiceResponseBase]
    :param next_link: A continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    :param continuation_token: The token used in retrieving the next page. If null, there are no
     additional pages.
    :type continuation_token: str
    :param next_request: The  class for getting services.
    :type next_request: ~azure.mgmt.machinelearningservices.models.ListServicesRequest
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ServiceResponseBase]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
        'next_request': {'key': 'nextRequest', 'type': 'ListServicesRequest'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ServiceResponseBase"]] = None,
        next_link: Optional[str] = None,
        continuation_token: Optional[str] = None,
        next_request: Optional["ListServicesRequest"] = None,
        **kwargs
    ):
        super(PaginatedServiceListPost, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link
        self.continuation_token = continuation_token
        self.next_request = next_request


class ProblemDetails(msrest.serialization.Model):
    """ProblemDetails.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param type:
    :type type: str
    :param title:
    :type title: str
    :param status:
    :type status: int
    :param detail:
    :type detail: str
    :param instance:
    :type instance: str
    :ivar extensions: Dictionary of :code:`<any>`.
    :vartype extensions: dict[str, object]
    """

    _validation = {
        'extensions': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'status': {'key': 'status', 'type': 'int'},
        'detail': {'key': 'detail', 'type': 'str'},
        'instance': {'key': 'instance', 'type': 'str'},
        'extensions': {'key': 'extensions', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        title: Optional[str] = None,
        status: Optional[int] = None,
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        **kwargs
    ):
        super(ProblemDetails, self).__init__(**kwargs)
        self.type = type
        self.title = title
        self.status = status
        self.detail = detail
        self.instance = instance
        self.extensions = None


class ProfileRequestBase(msrest.serialization.Model):
    """The request for creating a profile.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The profile name.
    :type name: str
    :param description: The profile description.
    :type description: str
    :param input_data: The profile input data.
    :type input_data: str
    :param input_dataset_id: The profile input dataset name/id.
    :type input_dataset_id: str
    :param kv_tags: The tags dictionary.
    :type kv_tags: dict[str, str]
    :param properties: The properties dictionary.
    :type properties: dict[str, str]
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'input_data': {'key': 'inputData', 'type': 'str'},
        'input_dataset_id': {'key': 'inputDatasetId', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        input_data: Optional[str] = None,
        input_dataset_id: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(ProfileRequestBase, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.input_data = input_data
        self.input_dataset_id = input_dataset_id
        self.kv_tags = kv_tags
        self.properties = properties


class ProfileResponse(msrest.serialization.Model):
    """The profile response.

    :param name: The profile name.
    :type name: str
    :param description: The profile description.
    :type description: str
    :param image_id: The Image Id.
    :type image_id: str
    :param input_data: The input data.
    :type input_data: str
    :param state: The state of the profile.
    :type state: str
    :param created_time: The profile creation time (UTC).
    :type created_time: ~datetime.datetime
    :param kv_tags: The profile tags dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The profile properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param recommended_memory_in_gb: The recommended amount of memory to allocate in GB.
    :type recommended_memory_in_gb: float
    :param recommended_cpu: The recommended CPU allocation.
    :type recommended_cpu: float
    :param recommendation_latency_in_ms: Latency associated with the recommended memory/cpu config.
    :type recommendation_latency_in_ms: float
    :param profile_run_result: The profile run result.
    :type profile_run_result: str
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param profiling_error_logs: The profiling error logs.
    :type profiling_error_logs: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'input_data': {'key': 'inputData', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'recommended_memory_in_gb': {'key': 'recommendedMemoryInGB', 'type': 'float'},
        'recommended_cpu': {'key': 'recommendedCpu', 'type': 'float'},
        'recommendation_latency_in_ms': {'key': 'recommendationLatencyInMs', 'type': 'float'},
        'profile_run_result': {'key': 'profileRunResult', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'profiling_error_logs': {'key': 'profilingErrorLogs', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        image_id: Optional[str] = None,
        input_data: Optional[str] = None,
        state: Optional[str] = None,
        created_time: Optional[datetime.datetime] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        recommended_memory_in_gb: Optional[float] = None,
        recommended_cpu: Optional[float] = None,
        recommendation_latency_in_ms: Optional[float] = None,
        profile_run_result: Optional[str] = None,
        error: Optional["ModelErrorResponse"] = None,
        profiling_error_logs: Optional[str] = None,
        **kwargs
    ):
        super(ProfileResponse, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.image_id = image_id
        self.input_data = input_data
        self.state = state
        self.created_time = created_time
        self.kv_tags = kv_tags
        self.properties = properties
        self.recommended_memory_in_gb = recommended_memory_in_gb
        self.recommended_cpu = recommended_cpu
        self.recommendation_latency_in_ms = recommendation_latency_in_ms
        self.profile_run_result = profile_run_result
        self.error = error
        self.profiling_error_logs = profiling_error_logs


class PutOnlineEndpointRequest(msrest.serialization.Model):
    """The request to create an Online Inferencing Endpoint.

    All required parameters must be populated in order to send to Azure.

    :param identity: Required.
    :type identity: ~azure.mgmt.machinelearningservices.models.ManagedIdentity
    :param name: Required. The service name.
    :type name: str
    :param description: The description of the service.
    :type description: str
    :param tags: A set of tags. The service tag dictionary. Tags are mutable.
    :type tags: dict[str, str]
    :param properties: The service properties dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param location: The Azure region for this endpoint. Defaults to the region of the Workspace.
    :type location: str
    :param keys:
    :type keys: ~azure.mgmt.machinelearningservices.models.AuthKeys
    :param auth_mode: Required. The form of Authentication required for scoring against the
     endpoint. Possible values include: "AMLToken", "Key", "AADToken".
    :type auth_mode: str or ~azure.mgmt.machinelearningservices.models.AuthMode
    :param traffic_rules: Mapping of EndpointDeployment to Weight for routing traffic.
    :type traffic_rules: dict[str, int]
    :param mirror_traffic_rules: Percentage of traffic to be mirrored to each deployment without
     using returned scoring. Traffic values need to sum to utmost 50.
    :type mirror_traffic_rules: dict[str, int]
    :param compute_configuration: Required.
    :type compute_configuration: ~azure.mgmt.machinelearningservices.models.ComputeConfiguration
    :param allow_public_access: Set to false for endpoints that should not allow public access when
     Private Link is enabled. Default true.
    :type allow_public_access: bool
    """

    _validation = {
        'identity': {'required': True},
        'name': {'required': True},
        'auth_mode': {'required': True},
        'compute_configuration': {'required': True},
    }

    _attribute_map = {
        'identity': {'key': 'identity', 'type': 'ManagedIdentity'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'keys': {'key': 'keys', 'type': 'AuthKeys'},
        'auth_mode': {'key': 'authMode', 'type': 'str'},
        'traffic_rules': {'key': 'TrafficRules', 'type': '{int}'},
        'mirror_traffic_rules': {'key': 'mirrorTrafficRules', 'type': '{int}'},
        'compute_configuration': {'key': 'computeConfiguration', 'type': 'ComputeConfiguration'},
        'allow_public_access': {'key': 'allowPublicAccess', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        identity: "ManagedIdentity",
        name: str,
        auth_mode: Union[str, "AuthMode"],
        compute_configuration: "ComputeConfiguration",
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        keys: Optional["AuthKeys"] = None,
        traffic_rules: Optional[Dict[str, int]] = None,
        mirror_traffic_rules: Optional[Dict[str, int]] = None,
        allow_public_access: Optional[bool] = None,
        **kwargs
    ):
        super(PutOnlineEndpointRequest, self).__init__(**kwargs)
        self.identity = identity
        self.name = name
        self.description = description
        self.tags = tags
        self.properties = properties
        self.location = location
        self.keys = keys
        self.auth_mode = auth_mode
        self.traffic_rules = traffic_rules
        self.mirror_traffic_rules = mirror_traffic_rules
        self.compute_configuration = compute_configuration
        self.allow_public_access = allow_public_access


class RCranPackage(msrest.serialization.Model):
    """RCranPackage.

    :param name: The package name.
    :type name: str
    :param version: The package version.
    :type version: str
    :param repository: The repository name.
    :type repository: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        version: Optional[str] = None,
        repository: Optional[str] = None,
        **kwargs
    ):
        super(RCranPackage, self).__init__(**kwargs)
        self.name = name
        self.version = version
        self.repository = repository


class RegenerateServiceKeysRequest(msrest.serialization.Model):
    """RegenerateServiceKeysRequest.

    :param key_type: Specification for which type of key to generate. Possible values include:
     "Primary", "Secondary".
    :type key_type: str or ~azure.mgmt.machinelearningservices.models.KeyType
    :param key_value: The value the key is set to.
    :type key_value: str
    """

    _attribute_map = {
        'key_type': {'key': 'keyType', 'type': 'str'},
        'key_value': {'key': 'keyValue', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        key_type: Optional[Union[str, "KeyType"]] = None,
        key_value: Optional[str] = None,
        **kwargs
    ):
        super(RegenerateServiceKeysRequest, self).__init__(**kwargs)
        self.key_type = key_type
        self.key_value = key_value


class RegistryIdentity(msrest.serialization.Model):
    """RegistryIdentity.

    :param resource_id:
    :type resource_id: str
    :param client_id:
    :type client_id: str
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        client_id: Optional[str] = None,
        **kwargs
    ):
        super(RegistryIdentity, self).__init__(**kwargs)
        self.resource_id = resource_id
        self.client_id = client_id


class RegistryInfo(msrest.serialization.Model):
    """Contains registry information.

    All required parameters must be populated in order to send to Azure.

    :param user: Required. The user.
    :type user: str
    :param location: Required. The location.
    :type location: str
    :param password: Required. The password.
    :type password: str
    """

    _validation = {
        'user': {'required': True},
        'location': {'required': True},
        'password': {'required': True},
    }

    _attribute_map = {
        'user': {'key': 'user', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user: str,
        location: str,
        password: str,
        **kwargs
    ):
        super(RegistryInfo, self).__init__(**kwargs)
        self.user = user
        self.location = location
        self.password = password


class RGitHubPackage(msrest.serialization.Model):
    """RGitHubPackage.

    :param repository: Repository address in the format username/repo[/subdir][@ref|#pull].
    :type repository: str
    :param auth_token: Personal access token to install from a private repo.
    :type auth_token: str
    """

    _attribute_map = {
        'repository': {'key': 'repository', 'type': 'str'},
        'auth_token': {'key': 'authToken', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        repository: Optional[str] = None,
        auth_token: Optional[str] = None,
        **kwargs
    ):
        super(RGitHubPackage, self).__init__(**kwargs)
        self.repository = repository
        self.auth_token = auth_token


class RSection(msrest.serialization.Model):
    """RSection.

    :param r_version: The version of R to be installed.
    :type r_version: str
    :param user_managed: Indicates whether the environment is managed by user or by AzureML.
    :type user_managed: bool
    :param rscript_path: The Rscript path to use if an environment build is not required.
     The path specified gets used to call the user script.
    :type rscript_path: str
    :param snapshot_date: Date of MRAN snapshot to use in YYYY-MM-DD format, e.g. "2019-04-17".
    :type snapshot_date: str
    :param cran_packages: The CRAN packages to use.
    :type cran_packages: list[~azure.mgmt.machinelearningservices.models.RCranPackage]
    :param git_hub_packages: The packages directly from GitHub.
    :type git_hub_packages: list[~azure.mgmt.machinelearningservices.models.RGitHubPackage]
    :param custom_url_packages: The packages from custom urls.
    :type custom_url_packages: list[str]
    :param bio_conductor_packages: The packages from Bioconductor.
    :type bio_conductor_packages: list[str]
    """

    _attribute_map = {
        'r_version': {'key': 'rVersion', 'type': 'str'},
        'user_managed': {'key': 'userManaged', 'type': 'bool'},
        'rscript_path': {'key': 'rscriptPath', 'type': 'str'},
        'snapshot_date': {'key': 'snapshotDate', 'type': 'str'},
        'cran_packages': {'key': 'cranPackages', 'type': '[RCranPackage]'},
        'git_hub_packages': {'key': 'gitHubPackages', 'type': '[RGitHubPackage]'},
        'custom_url_packages': {'key': 'customUrlPackages', 'type': '[str]'},
        'bio_conductor_packages': {'key': 'bioConductorPackages', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        r_version: Optional[str] = None,
        user_managed: Optional[bool] = None,
        rscript_path: Optional[str] = None,
        snapshot_date: Optional[str] = None,
        cran_packages: Optional[List["RCranPackage"]] = None,
        git_hub_packages: Optional[List["RGitHubPackage"]] = None,
        custom_url_packages: Optional[List[str]] = None,
        bio_conductor_packages: Optional[List[str]] = None,
        **kwargs
    ):
        super(RSection, self).__init__(**kwargs)
        self.r_version = r_version
        self.user_managed = user_managed
        self.rscript_path = rscript_path
        self.snapshot_date = snapshot_date
        self.cran_packages = cran_packages
        self.git_hub_packages = git_hub_packages
        self.custom_url_packages = custom_url_packages
        self.bio_conductor_packages = bio_conductor_packages


class ServiceLogs(msrest.serialization.Model):
    """ServiceLogs.

    :param content:
    :type content: str
    """

    _attribute_map = {
        'content': {'key': 'content', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        content: Optional[str] = None,
        **kwargs
    ):
        super(ServiceLogs, self).__init__(**kwargs)
        self.content = content


class SparkMavenPackage(msrest.serialization.Model):
    """SparkMavenPackage.

    :param group:
    :type group: str
    :param artifact:
    :type artifact: str
    :param version:
    :type version: str
    """

    _attribute_map = {
        'group': {'key': 'group', 'type': 'str'},
        'artifact': {'key': 'artifact', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        group: Optional[str] = None,
        artifact: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(SparkMavenPackage, self).__init__(**kwargs)
        self.group = group
        self.artifact = artifact
        self.version = version


class TargetRuntime(msrest.serialization.Model):
    """The target runtime.

    :param target_architecture: The target architecture. Possible values include: "Amd64",
     "Arm32v7".
    :type target_architecture: str or ~azure.mgmt.machinelearningservices.models.ArchitectureType
    :param os_type: The target operating system. Possible values include: "Linux", "Windows".
    :type os_type: str or ~azure.mgmt.machinelearningservices.models.OSType
    :param runtime_type: The target runtime type. Possible values include: "SparkPython", "Python",
     "PythonSlim", "PythonCustom".
    :type runtime_type: str or ~azure.mgmt.machinelearningservices.models.RuntimeType
    :param properties: The properties dictionary.
    :type properties: dict[str, str]
    """

    _attribute_map = {
        'target_architecture': {'key': 'targetArchitecture', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'runtime_type': {'key': 'runtimeType', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        target_architecture: Optional[Union[str, "ArchitectureType"]] = None,
        os_type: Optional[Union[str, "OSType"]] = None,
        runtime_type: Optional[Union[str, "RuntimeType"]] = None,
        properties: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(TargetRuntime, self).__init__(**kwargs)
        self.target_architecture = target_architecture
        self.os_type = os_type
        self.runtime_type = runtime_type
        self.properties = properties


class UnknownServiceResponse(ServiceResponseBase):
    """The response for an unsupported Service
Defines the basic service properties.

    All required parameters must be populated in order to send to Azure.

    :param id: The service Id.
    :type id: str
    :param name: The service name.
    :type name: str
    :param description: The service description.
    :type description: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The service property dictionary. Properties are immutable.
    :type properties: dict[str, str]
    :param operation_id: The ID of the latest asynchronous operation for this service.
    :type operation_id: str
    :param state: The current state of the service. Possible values include: "Transitioning",
     "Healthy", "Unhealthy", "Failed", "Unschedulable".
    :type state: str or ~azure.mgmt.machinelearningservices.models.WebServiceState
    :param created_time: The time the service was created.
    :type created_time: ~datetime.datetime
    :param updated_time: The time the service was updated.
    :type updated_time: ~datetime.datetime
    :param error: The Model Management Service Error object.
    :type error: ~azure.mgmt.machinelearningservices.models.ModelErrorResponse
    :param compute_type: Required. The compute environment type for the service.Constant filled by
     server.  Possible values include: "ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT",
     "MIRSINGLEMODEL", "MIRAMLCOMPUTE", "MIRGA", "AMLARC", "BATCHAMLCOMPUTE", "UNKNOWN".
    :type compute_type: str or ~azure.mgmt.machinelearningservices.models.ComputeEnvironmentType
    :param deployment_type: The deployment type for the service. Possible values include:
     "GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch".
    :type deployment_type: str or ~azure.mgmt.machinelearningservices.models.DeploymentType
    :param created_by:
    :type created_by: ~azure.mgmt.machinelearningservices.models.User
    :param endpoint_name: The name of the OnlineEndpoint that contains this service.
    :type endpoint_name: str
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        kv_tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        operation_id: Optional[str] = None,
        state: Optional[Union[str, "WebServiceState"]] = None,
        created_time: Optional[datetime.datetime] = None,
        updated_time: Optional[datetime.datetime] = None,
        error: Optional["ModelErrorResponse"] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        created_by: Optional["User"] = None,
        endpoint_name: Optional[str] = None,
        **kwargs
    ):
        super(UnknownServiceResponse, self).__init__(id=id, name=name, description=description, kv_tags=kv_tags, properties=properties, operation_id=operation_id, state=state, created_time=created_time, updated_time=updated_time, error=error, deployment_type=deployment_type, created_by=created_by, endpoint_name=endpoint_name, **kwargs)
        self.compute_type = 'UNKNOWN'  # type: str


class User(msrest.serialization.Model):
    """User.

    :param user_object_id:
    :type user_object_id: str
    :param user_pu_id:
    :type user_pu_id: str
    :param user_idp:
    :type user_idp: str
    :param user_alt_sec_id:
    :type user_alt_sec_id: str
    :param user_iss:
    :type user_iss: str
    :param user_tenant_id:
    :type user_tenant_id: str
    :param user_name:
    :type user_name: str
    :param upn:
    :type upn: str
    """

    _attribute_map = {
        'user_object_id': {'key': 'userObjectId', 'type': 'str'},
        'user_pu_id': {'key': 'userPuId', 'type': 'str'},
        'user_idp': {'key': 'userIdp', 'type': 'str'},
        'user_alt_sec_id': {'key': 'userAltSecId', 'type': 'str'},
        'user_iss': {'key': 'userIss', 'type': 'str'},
        'user_tenant_id': {'key': 'userTenantId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'upn': {'key': 'upn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_object_id: Optional[str] = None,
        user_pu_id: Optional[str] = None,
        user_idp: Optional[str] = None,
        user_alt_sec_id: Optional[str] = None,
        user_iss: Optional[str] = None,
        user_tenant_id: Optional[str] = None,
        user_name: Optional[str] = None,
        upn: Optional[str] = None,
        **kwargs
    ):
        super(User, self).__init__(**kwargs)
        self.user_object_id = user_object_id
        self.user_pu_id = user_pu_id
        self.user_idp = user_idp
        self.user_alt_sec_id = user_alt_sec_id
        self.user_iss = user_iss
        self.user_tenant_id = user_tenant_id
        self.user_name = user_name
        self.upn = upn


class UserAssignedIdentity(msrest.serialization.Model):
    """UserAssignedIdentity.

    :param principal_id:
    :type principal_id: str
    :param client_id:
    :type client_id: str
    :param client_secret_url:
    :type client_secret_url: str
    :param tenant_id:
    :type tenant_id: str
    :param resource_id:
    :type resource_id: str
    """

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret_url': {'key': 'clientSecretUrl', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        principal_id: Optional[str] = None,
        client_id: Optional[str] = None,
        client_secret_url: Optional[str] = None,
        tenant_id: Optional[str] = None,
        resource_id: Optional[str] = None,
        **kwargs
    ):
        super(UserAssignedIdentity, self).__init__(**kwargs)
        self.principal_id = principal_id
        self.client_id = client_id
        self.client_secret_url = client_secret_url
        self.tenant_id = tenant_id
        self.resource_id = resource_id


class ValidateServiceRequest(msrest.serialization.Model):
    """ValidateServiceRequest.

    :param type: The validation request type. Possible values include: "Create", "Delete",
     "Update".
    :type type: str or ~azure.mgmt.machinelearningservices.models.ValidateRequestType
    :param create_request: The base class for creating a service.
    :type create_request: ~azure.mgmt.machinelearningservices.models.CreateServiceRequest
    :param service_name: The service name to update/delete.
    :type service_name: str
    :param update_request:
    :type update_request: ~azure.mgmt.machinelearningservices.models.JsonPatchDocument1
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'create_request': {'key': 'createRequest', 'type': 'CreateServiceRequest'},
        'service_name': {'key': 'serviceName', 'type': 'str'},
        'update_request': {'key': 'updateRequest', 'type': 'JsonPatchDocument1'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "ValidateRequestType"]] = None,
        create_request: Optional["CreateServiceRequest"] = None,
        service_name: Optional[str] = None,
        update_request: Optional["JsonPatchDocument1"] = None,
        **kwargs
    ):
        super(ValidateServiceRequest, self).__init__(**kwargs)
        self.type = type
        self.create_request = create_request
        self.service_name = service_name
        self.update_request = update_request


class VnetConfiguration(msrest.serialization.Model):
    """VnetConfiguration.

    :param vnet_name: vnetName.
    :type vnet_name: str
    :param subnet_name: subnetName.
    :type subnet_name: str
    """

    _attribute_map = {
        'vnet_name': {'key': 'vnetName', 'type': 'str'},
        'subnet_name': {'key': 'subnetName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        vnet_name: Optional[str] = None,
        subnet_name: Optional[str] = None,
        **kwargs
    ):
        super(VnetConfiguration, self).__init__(**kwargs)
        self.vnet_name = vnet_name
        self.subnet_name = subnet_name
