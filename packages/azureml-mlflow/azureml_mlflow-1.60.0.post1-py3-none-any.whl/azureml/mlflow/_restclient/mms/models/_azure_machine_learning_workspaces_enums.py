# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class ArchitectureType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The target architecture.
    """

    AMD64 = "Amd64"
    ARM32_V7 = "Arm32v7"

class AsyncOperationState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The async operation state.
    """

    NOT_STARTED = "NotStarted"
    RUNNING = "Running"
    CANCELLED = "Cancelled"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    TIMED_OUT = "TimedOut"

class AuthMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The form of Authentication required for scoring against the endpoint.
    """

    AML_TOKEN = "AMLToken"
    KEY = "Key"
    AAD_TOKEN = "AADToken"

class BuildContextLocationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of the location.
    """

    GIT = "Git"
    STORAGE_ACCOUNT = "StorageAccount"

class ComputeEnvironmentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACI = "ACI"
    AKS = "AKS"
    AMLCOMPUTE = "AMLCOMPUTE"
    IOT = "IOT"
    AKSENDPOINT = "AKSENDPOINT"
    MIRSINGLEMODEL = "MIRSINGLEMODEL"
    MIRAMLCOMPUTE = "MIRAMLCOMPUTE"
    MIRGA = "MIRGA"
    AMLARC = "AMLARC"
    BATCHAMLCOMPUTE = "BATCHAMLCOMPUTE"
    UNKNOWN = "UNKNOWN"

class DeployedApiFlavor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Gets the flavor of the package to create, which is where the image will be used.
    """

    AZURE_ML_APP = "AzureMlApp"
    FUNCTIONS_APP = "FunctionsApp"

class DeploymentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The deployment type for the service.
    """

    GRPC_REALTIME_ENDPOINT = "GRPCRealtimeEndpoint"
    HTTP_REALTIME_ENDPOINT = "HttpRealtimeEndpoint"
    BATCH = "Batch"

class EndpointType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of endpoint. Online or Batch.
    """

    ONLINE = "Online"
    BATCH = "Batch"

class HttpStatusCode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CONTINUE_ENUM = "Continue"
    SWITCHING_PROTOCOLS = "SwitchingProtocols"
    PROCESSING = "Processing"
    EARLY_HINTS = "EarlyHints"
    OK = "OK"
    CREATED = "Created"
    ACCEPTED = "Accepted"
    NON_AUTHORITATIVE_INFORMATION = "NonAuthoritativeInformation"
    NO_CONTENT = "NoContent"
    RESET_CONTENT = "ResetContent"
    PARTIAL_CONTENT = "PartialContent"
    MULTI_STATUS = "MultiStatus"
    ALREADY_REPORTED = "AlreadyReported"
    IM_USED = "IMUsed"
    MULTIPLE_CHOICES = "MultipleChoices"
    AMBIGUOUS = "Ambiguous"
    MOVED_PERMANENTLY = "MovedPermanently"
    MOVED = "Moved"
    FOUND = "Found"
    REDIRECT = "Redirect"
    SEE_OTHER = "SeeOther"
    REDIRECT_METHOD = "RedirectMethod"
    NOT_MODIFIED = "NotModified"
    USE_PROXY = "UseProxy"
    UNUSED = "Unused"
    TEMPORARY_REDIRECT = "TemporaryRedirect"
    REDIRECT_KEEP_VERB = "RedirectKeepVerb"
    PERMANENT_REDIRECT = "PermanentRedirect"
    BAD_REQUEST = "BadRequest"
    UNAUTHORIZED = "Unauthorized"
    PAYMENT_REQUIRED = "PaymentRequired"
    FORBIDDEN = "Forbidden"
    NOT_FOUND = "NotFound"
    METHOD_NOT_ALLOWED = "MethodNotAllowed"
    NOT_ACCEPTABLE = "NotAcceptable"
    PROXY_AUTHENTICATION_REQUIRED = "ProxyAuthenticationRequired"
    REQUEST_TIMEOUT = "RequestTimeout"
    CONFLICT = "Conflict"
    GONE = "Gone"
    LENGTH_REQUIRED = "LengthRequired"
    PRECONDITION_FAILED = "PreconditionFailed"
    REQUEST_ENTITY_TOO_LARGE = "RequestEntityTooLarge"
    REQUEST_URI_TOO_LONG = "RequestUriTooLong"
    UNSUPPORTED_MEDIA_TYPE = "UnsupportedMediaType"
    REQUESTED_RANGE_NOT_SATISFIABLE = "RequestedRangeNotSatisfiable"
    EXPECTATION_FAILED = "ExpectationFailed"
    MISDIRECTED_REQUEST = "MisdirectedRequest"
    UNPROCESSABLE_ENTITY = "UnprocessableEntity"
    LOCKED = "Locked"
    FAILED_DEPENDENCY = "FailedDependency"
    UPGRADE_REQUIRED = "UpgradeRequired"
    PRECONDITION_REQUIRED = "PreconditionRequired"
    TOO_MANY_REQUESTS = "TooManyRequests"
    REQUEST_HEADER_FIELDS_TOO_LARGE = "RequestHeaderFieldsTooLarge"
    UNAVAILABLE_FOR_LEGAL_REASONS = "UnavailableForLegalReasons"
    INTERNAL_SERVER_ERROR = "InternalServerError"
    NOT_IMPLEMENTED = "NotImplemented"
    BAD_GATEWAY = "BadGateway"
    SERVICE_UNAVAILABLE = "ServiceUnavailable"
    GATEWAY_TIMEOUT = "GatewayTimeout"
    HTTP_VERSION_NOT_SUPPORTED = "HttpVersionNotSupported"
    VARIANT_ALSO_NEGOTIATES = "VariantAlsoNegotiates"
    INSUFFICIENT_STORAGE = "InsufficientStorage"
    LOOP_DETECTED = "LoopDetected"
    NOT_EXTENDED = "NotExtended"
    NETWORK_AUTHENTICATION_REQUIRED = "NetworkAuthenticationRequired"

class ImageFlavor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The flavor of the image.
    """

    WEB_API_CONTAINER = "WebApiContainer"
    BATCH_CONTAINER = "BatchContainer"
    IO_T_CONTAINER = "IoTContainer"
    ACCEL_CONTAINER = "AccelContainer"

class KeyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specification for which type of key to generate.
    """

    PRIMARY = "Primary"
    SECONDARY = "Secondary"

class OnlineEndpointProvisioningState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The current state of the service.
    """

    CREATING = "Creating"
    DELETING = "Deleting"
    UPDATING = "Updating"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"

class OrderString(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The option to order the response.
    """

    CREATED_AT_DESC = "CreatedAtDesc"
    CREATED_AT_ASC = "CreatedAtAsc"
    UPDATED_AT_DESC = "UpdatedAtDesc"
    UPDATED_AT_ASC = "UpdatedAtAsc"

class OSType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The target operating system.
    """

    LINUX = "Linux"
    WINDOWS = "Windows"

class RuntimeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The target runtime type.
    """

    SPARK_PYTHON = "SparkPython"
    PYTHON = "Python"
    PYTHON_SLIM = "PythonSlim"
    PYTHON_CUSTOM = "PythonCustom"

class TlsMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """TLS mode for scoring authentication, options are "DISABLED", "SIMPLE", "MUTUAL"
    """

    DISABLED = "DISABLED"
    SIMPLE = "SIMPLE"
    MUTUAL = "MUTUAL"

class ValidateRequestType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The validation request type.
    """

    CREATE = "Create"
    DELETE = "Delete"
    UPDATE = "Update"

class VariantType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the variant.
    """

    CONTROL = "Control"
    TREATMENT = "Treatment"

class WebServiceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The current state of the service.
    """

    TRANSITIONING = "Transitioning"
    HEALTHY = "Healthy"
    UNHEALTHY = "Unhealthy"
    FAILED = "Failed"
    UNSCHEDULABLE = "Unschedulable"
