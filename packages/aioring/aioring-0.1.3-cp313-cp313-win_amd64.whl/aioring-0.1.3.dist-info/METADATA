Metadata-Version: 2.4
Name: aioring
Version: 0.1.3
Summary: Asynchronous I/O ring
Author: Paul K.
License: MIT License
        
        Copyright (c) 2022 paul70131
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: source, https://github.com/paul70131/aioring
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: license-file

## aioring (Io Rings for asyncio)

aioring is a library that handles async fileIO.
Currently we only support io_uring on linux, other operating systems fall back to a custom ring using python threads which is only intended for development purposes and should not be used in production.


```python
from aioring import aio

async with await aio.open("file.name", "r") as f:
  content = await f.read()
```

# install
aioring can be installed with pip 
```sh
pip install aioring
```

# aos
in aos we expose async versions of functions defined in the 'os' module.
currently we support:
* `aos.pread(fd: int, count: int, offset: int)`
* `aos.pwrite(fd: int, buffer: bytes, offset: int)`
* `aos.close(fd: int)`
* `aos.open(path: str, flags: int, mode: int=0o777, *, dir_fd=None)`
* `aos.fstat(fd: int)`
* `aos.stat(path: str)`
these functions should work the same way as their counterpart in the os module but need to be called with await.

# aio
in aio we expose a async implementation of the cpython pyio module (https://github.com/python/cpython/blob/3.10/Lib/_pyio.py)
usage is like normal io but with async/await
```python
from aioring import aio
# read file
async with await aio.open("file.txt", "r") as f:
    data = await f.read()
    
# write file
async with await aio.open("file.txt", "w") as f:
    data = await f.write("test")
```

# Plans
* [X] fileIO
* [ ] Windows IoRing
* [ ] socketIO
