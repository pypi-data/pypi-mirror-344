Metadata-Version: 2.1
Name: flasksecforge
Version: 0.1.2
Summary: Scaffold a Flask‚Äësecure boilerplate API.
Home-page: https://github.com/reprompts/flasksecforge
Author: RePromptsQuest
Author-email: repromptsquest@gmail.com
License: MIT
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE.md

# üîê FlaskSecForge ‚Äì Production‚ÄëReady Flask API Boilerplate Generator

[![PyPI version](https://img.shields.io/pypi/v/flasksecforge.svg)](https://pypi.org/project/flasksecforge/) [![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)



- **GitHub:** https://github.com/reprompts/flasksecforge  
- **Community:** https://dev.to/repromptsquest  
- **LinkedIn:** https://www.linkedin.com/groups/14631875/


**Quick Start**

1. **Install** the CLI tool:
   ```bash
   pip install flasksecforge
   ```
2. **Generate** a new Flask API project:
   ```bash
   flasksecforge <your_project>
   ```

---

## ‚ú® Overview & Goals

FlaskSecForge scaffolds a secure, production‚Äëready Flask REST API with:

- **Environment Configuration** for development & production
- **Structured Logging** & error handling
- **JWT Authentication**, CORS, and input validation
- **Database‚Äëagnostic** support (SQLite, PostgreSQL, MySQL, SQL Server)
- **Modular Blueprints** (Auth, Users, Items)
- **Example Endpoints** (Health check, Signup/Login, User Profile, CRUD)

---

## üìÇ Directory Structure

```plaintext
<your_project>/
‚îú‚îÄ‚îÄ .env                  # Environment variables
‚îú‚îÄ‚îÄ requirements.txt      # Python dependencies
‚îú‚îÄ‚îÄ run.py                # Application entry point
‚îú‚îÄ‚îÄ config.py             # Config classes (Dev/Prod)
‚îú‚îÄ‚îÄ gunicorn.conf.py      # Production server settings
‚îú‚îÄ‚îÄ app/                  # Application package
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py       # App factory
‚îÇ   ‚îú‚îÄ‚îÄ extensions.py     # DB, Migrate, JWT, CORS
‚îÇ   ‚îú‚îÄ‚îÄ models.py         # SQLAlchemy models
‚îÇ   ‚îú‚îÄ‚îÄ schemas.py        # Marshmallow schemas
‚îÇ   ‚îú‚îÄ‚îÄ blueprints/       # Blueprint modules
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/         # Auth (register/login)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ users/        # Protected user routes
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ items/        # CRUD sample resource
‚îÇ   ‚îî‚îÄ‚îÄ utils.py          # Helpers & error handlers
‚îî‚îÄ‚îÄ logs/                 # Generated log files
```  

> Each folder and file follows a clear separation of concerns, making customization and extension straightforward.

---

## üîß Installation & Setup

1. **Create and activate** a virtual environment:
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   ```
2. **Install dependencies**:
   ```bash
   pip install -r requirements.txt
   ```
3. **Configure** your environment variables in `.env`:
   ```dotenv
   FLASK_ENV=development
   SECRET_KEY=<your_secret>
   JWT_SECRET_KEY=<your_jwt_secret>
   DATABASE_URL=sqlite:///data.db  # or your preferred DB URL
   ```

---

## üöÄ Usage

- **Run migrations**:
  ```bash
  flask db init
  flask db migrate
  flask db upgrade
  ```

- **Start locally**:
  ```bash
  python run.py
  ```

- **Deploy with Gunicorn**:
  ```bash
  gunicorn -c gunicorn.conf.py run:app
  ```

---

## üìñ Available Endpoints

| Method | Endpoint          | Description             |
| ------ | ----------------- | ----------------------- |
| GET    | `/health`         | Health check            |
| POST   | `/auth/register`  | Register new user       |
| POST   | `/auth/login`     | Obtain JWT token        |
| GET    | `/users/profile`  | Get current user info   |
| GET    | `/items/`         | List all items          |
| POST   | `/items/`         | Create a new item       |
| PUT    | `/items/<id>`     | Update an existing item |
| DELETE | `/items/<id>`     | Delete an item          |

---

## üõ°Ô∏è Security & Best Practices

- Keep `SECRET_KEY` and `JWT_SECRET_KEY` confidential
- Use HTTPS in production
- Validate and sanitize all user inputs
- Rotate tokens and secrets regularly

---

## ü§ù Contributing & Support

Pull requests, issues, and feedback are welcome!

