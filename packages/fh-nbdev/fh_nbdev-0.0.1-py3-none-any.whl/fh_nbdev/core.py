"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['get_files', 'prep_nb', 'render_code_output', 'render_code_input', 'remove_directives', 'add_header_ids',
           'render_md_with_ids', 'render_nb', 'sidebar', 'create_toc', 'layout']

# %% ../nbs/00_core.ipynb 2
from fasthtml.common import *
from monsterui.all import *
from pathlib import Path
from execnb.nbio import read_nb, write_nb
from nbdev.process import extract_directives
from nbdev.frontmatter import FrontmatterProc
from nbdev.process import NBProcessor
from nbdev.processors import add_show_docs
from fastcore.all import Path
from nbdev.processors import *
from execnb.shell import render_outputs
from bs4 import BeautifulSoup
from mistletoe import markdown

# %% ../nbs/00_core.ipynb 3
def get_files(path):
    "Get notebooks and markdown files that will be doc pages"
    #TODO: Need a better way than rglob('*.[im][pd]*')
    #TODO: Need a better exclude logic maybe
    notebooks = [str(nb) for nb in path.rglob('*.[im][pd]*') 
                if not nb.name.startswith('_') 
                and '.ipynb_checkpoints' not in str(nb) 
                and '.git' not in str(nb)
                and nb.name != 'README.md']  # Exclude README.md to avoid duplicate listing
    return notebooks


# %% ../nbs/00_core.ipynb 4
def prep_nb(nb):    
    # TODO: Show docs isn't very good looking, need to fix to make it look better
    procs=[FrontmatterProc, populate_language, add_show_docs, exec_show_docs, strip_ansi, 
           filter_stream_, rm_header_dash, 
          clean_show_doc, exec_show_docs, rm_export,ai_magics, clean_magics, hide_, add_links,
            add_fold, mv_exports, strip_hidden_metadata, hide_line]
    processor = NBProcessor(nb=nb, procs=procs, process=True)
    tmp_fpath = '_tmp1.ipynb'
    write_nb(processor.nb, tmp_fpath)
    return processor.nb, getattr(processor.nb, 'frontmatter_', {})


# %% ../nbs/00_core.ipynb 5
def render_code_output(cell, directives, lang='python', pygments=False, wrapper=Div):
    "Render the output of a code cell using execnb"
    if not cell.outputs: return ''
    if 'include:' in directives and directives['include:'][0] =='false': return ''
    res = render_outputs(cell.outputs, html_tfm=apply_classes)
    if res: return wrapper(Safe(apply_classes(res)))


# %% ../nbs/00_core.ipynb 6
def render_code_input(cell, directives, lang='python'):
    code = f'''```{lang}\n{cell.source}\n```\n'''
    if 'include:'   in directives and directives['include:'][0]   =='false': return ''
    if 'echo:'      in directives and directives['echo:'][0]      =='false': return ''
    if 'code-fold:' in directives and directives['code-fold:'][0] == 'true':
        return Details(Summary("See Code"), render_md(code))
    return render_md(code)


# %% ../nbs/00_core.ipynb 7
def remove_directives(cell):
    "Remove #| directives from start of cell"
    lines = cell.source.split('\n')
    while lines and lines[0].startswith('#|'): lines.pop(0)
    cell.source = '\n'.join(lines)


# %% ../nbs/00_core.ipynb 8
def add_header_ids(md_html, headers):
    """Add ID attributes to header elements in HTML without modifying displayed text."""
    html = str(md_html)
    for level, title in headers:
        tag = f'h{level}'
        text = title
        anchor = title.lower().replace(' ', '-')
        # Replace the header tag with one that has an id attribute
        old_tag = f'<{tag}>{text}</{tag}>'
        new_tag = f'<{tag} id="{anchor}">{text}</{tag}>'
        html = html.replace(old_tag, new_tag)
    return Safe(html)


# %% ../nbs/00_core.ipynb 9
def render_md_with_ids(text):
    """Render markdown to monsterui styled HTML with IDs on headers."""
    html = markdown(text)
    soup = BeautifulSoup(html, 'html.parser')
    for level in range(1, 7):
        for header in soup.find_all(f'h{level}'):
            header['id'] = header.text.lower().replace(' ', '-').replace('.', '')
    return Safe(apply_classes(str(soup)))


# %% ../nbs/00_core.ipynb 10
def render_nb(nb):
    "Render a notebook as a list of html elements"
    res, headers = [], []
    nb, meta = prep_nb(nb)
    res.append(Div(H1(getattr(meta,'title','')), Subtitle(getattr(meta,'description','')), cls='my-9'))
    for cell in nb.cells:
        if cell['cell_type'] == 'raw': continue
        if cell['cell_type']=='code':
            directives = extract_directives(cell)
            remove_directives(cell)
            _output = render_code_output(cell, directives)
            res.append(Card(
                Div(render_code_input(cell, directives), cls="space-y-2"),
                footer=Div(Div(_output, cls="mt-2"),cls="space-y-2") if _output else None))
        elif cell['cell_type']=='markdown':
            cell_headers = []
            for line in cell.source.split('\n'):
                if line.startswith('#'):
                    level = len(line.split()[0])
                    title = line[level:].strip()
                    cell_headers.append((level, title))
            headers.extend(cell_headers)
            content = render_md_with_ids(cell.source)
            res.append(content)
    return res, headers

# %% ../nbs/00_core.ipynb 11
def sidebar(nb_path, current_path=None):
    """Create a sidebar navigation with categorized notebooks."""
    # Get notebooks and group by directory
    grouped = {}
    for fpath in get_files(nb_path):
        try: _, meta = prep_nb(read_nb(fpath))
        except Exception as e: print(f"{fpath} failed: {e}")
        meta['fpath'] = fpath
        path = Path(fpath)
        parts = path.relative_to(nb_path.parent).parts
        category = parts[1] if len(parts) > 1 else "Other"
        meta['is_active'] = str(fpath) == str(current_path)
        
        if category not in grouped: grouped[category] = []
        grouped[category].append(meta)
    nav_items = [Li(A("Home", href="/"), cls='uk-active' if current_path is None else ''), NavDividerLi()]
    
    for category, notebooks in grouped.items():
        child_items = [
            Li(A(nb.get('title', Path(nb['fpath']).stem), 
                href=f"/doc_page?fpath={nb['fpath']}"),
                cls='uk-active' if nb.get('is_active', False) else '')
            for nb in notebooks]        
        match len(child_items):
            case 0:  continue
            case 1: nav_items.append(child_items[0])
            case _: nav_items.append(NavParentLi(A(category.capitalize()), NavContainer(*child_items, parent=False)))
    
    return NavContainer(*nav_items)

# %% ../nbs/00_core.ipynb 12
def create_toc(headers):
    """Create a table of contents from headers."""
    if not headers: return None
    toc_items = []
    for level, title in headers:
        anchor = title.lower().replace(' ', '-')
        indent_cls = f"pl-{(level-1)*2}"
        toc_items.append(Li(A(title, href='#'+anchor, cls=f'text-sm {indent_cls}'), 
                           cls=f'my-1'))
    
    return Div(
        H3("Contents", cls="mb-2"),
        NavContainer(*toc_items,
                    cls=NavT.primary,
                    uk_scrollspy_nav="closest: li; scroll: true"),
                    cls='sticky top-4')

# %% ../nbs/00_core.ipynb 13
def layout(content, nb_path, current_path=None, headers=None):
    """Create a responsive layout with sidebar and content."""
    toc = create_toc(headers) if headers else None
    return Container(
        Button(UkIcon("menu", 50, 50, cls='mt-4'), 
               cls="md:hidden mb-4", 
               data_uk_toggle="target: #mobile-sidebar"),
        Div(sidebar(nb_path, current_path), id='mobile-sidebar', cls="uk-animation-slide-left", hidden=True),
        Div(cls="md:flex w-full")(
            Div(sidebar(nb_path, current_path), cls="hidden md:block w-1/5 max-w-52 pr-4"),
            Div(content, cls=f'md:w-{3 if toc else 4}/5 w-full px-4', id="content"),
            Div(toc, cls="hidden md:block w-1/5 pl-2") if toc else None))
