"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
from latitudesh_python_sdk import models, utils
from latitudesh_python_sdk._hooks import SDKHooks
from latitudesh_python_sdk.apikeys import APIKeys
from latitudesh_python_sdk.billing import Billing
from latitudesh_python_sdk.events_sdk import EventsSDK
from latitudesh_python_sdk.firewalls_sdk import FirewallsSDK
from latitudesh_python_sdk.ipaddresses_sdk import IPAddressesSDK
from latitudesh_python_sdk.operatingsystems_sdk import OperatingSystemsSDK
from latitudesh_python_sdk.plans import Plans
from latitudesh_python_sdk.privatenetworks import PrivateNetworks
from latitudesh_python_sdk.projects_sdk import ProjectsSDK
from latitudesh_python_sdk.regions_sdk import RegionsSDK
from latitudesh_python_sdk.roles import Roles
from latitudesh_python_sdk.servers_sdk import ServersSDK
from latitudesh_python_sdk.sshkeys import SSHKeys
from latitudesh_python_sdk.storage import Storage
from latitudesh_python_sdk.tags import Tags
from latitudesh_python_sdk.teams_sdk import TeamsSDK
from latitudesh_python_sdk.teamsmembers import TeamsMembers
from latitudesh_python_sdk.traffic_sdk import TrafficSDK
from latitudesh_python_sdk.types import OptionalNullable, UNSET
from latitudesh_python_sdk.userdata_sdk import UserDataSDK
from latitudesh_python_sdk.userprofile import UserProfile
from latitudesh_python_sdk.virtualmachines import VirtualMachines
from latitudesh_python_sdk.vpnsessions import VpnSessions
from typing import Any, Callable, Dict, List, Optional, Union, cast
import weakref


class Latitudesh(BaseSDK):
    r"""Latitude.sh API: The Latitude.sh API is a RESTful API to manage your Latitude.sh account. It allows you to perform the same actions as the Latitude.sh dashboard."""

    api_keys: APIKeys
    billing: Billing
    events: EventsSDK
    firewalls: FirewallsSDK
    ip_addresses: IPAddressesSDK
    teams_members: TeamsMembers
    operating_systems: OperatingSystemsSDK
    plans: Plans
    projects: ProjectsSDK
    regions: RegionsSDK
    roles: Roles
    servers: ServersSDK
    ssh_keys: SSHKeys
    storage: Storage
    tags: Tags
    teams: TeamsSDK
    traffic: TrafficSDK
    user_data: UserDataSDK
    user_profile: UserProfile
    virtual_machines: VirtualMachines
    private_networks: PrivateNetworks
    vpn_sessions: VpnSessions

    def __init__(
        self,
        bearer: Optional[Union[Optional[str], Callable[[], Optional[str]]]] = None,
        latitude_api_key: Optional[str] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param bearer: The bearer required for authentication
        :param latitude_api_key: Allows setting the latitude_api_key variable for url substitution
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client()
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient()
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(bearer):
            # pylint: disable=unnecessary-lambda-assignment
            security = lambda: models.Security(bearer=bearer())
        else:
            security = models.Security(bearer=bearer)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
        server_defaults: List[Dict[str, str]] = [
            {
                "latitude_api_key": latitude_api_key or "<insert your api key here>",
            },
            {
                "latitude_api_key": latitude_api_key or "<insert your api key here>",
            },
        ]

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                server_defaults=server_defaults,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

        self._init_sdks()

    def _init_sdks(self):
        self.api_keys = APIKeys(self.sdk_configuration)
        self.billing = Billing(self.sdk_configuration)
        self.events = EventsSDK(self.sdk_configuration)
        self.firewalls = FirewallsSDK(self.sdk_configuration)
        self.ip_addresses = IPAddressesSDK(self.sdk_configuration)
        self.teams_members = TeamsMembers(self.sdk_configuration)
        self.operating_systems = OperatingSystemsSDK(self.sdk_configuration)
        self.plans = Plans(self.sdk_configuration)
        self.projects = ProjectsSDK(self.sdk_configuration)
        self.regions = RegionsSDK(self.sdk_configuration)
        self.roles = Roles(self.sdk_configuration)
        self.servers = ServersSDK(self.sdk_configuration)
        self.ssh_keys = SSHKeys(self.sdk_configuration)
        self.storage = Storage(self.sdk_configuration)
        self.tags = Tags(self.sdk_configuration)
        self.teams = TeamsSDK(self.sdk_configuration)
        self.traffic = TrafficSDK(self.sdk_configuration)
        self.user_data = UserDataSDK(self.sdk_configuration)
        self.user_profile = UserProfile(self.sdk_configuration)
        self.virtual_machines = VirtualMachines(self.sdk_configuration)
        self.private_networks = PrivateNetworks(self.sdk_configuration)
        self.vpn_sessions = VpnSessions(self.sdk_configuration)

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
