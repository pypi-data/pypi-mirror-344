"""This module stores the classes used to configure the multi-day (across-session) sl-suite2p pipeline. This pipeline
extends the original suite2p code to support tracking the same objects (cells) across multiple days. Both single-day
(original) and multi-day (extended) pipelines are available as part of the Sun lab maintained sl-suite2p package."""

from typing import Any
from dataclasses import field, asdict, dataclass

from ataraxis_data_structures import YamlConfig


@dataclass()
class IO:
    """Stores parameters that control data input and output during various stages of the pipeline."""

    sessions: list[str] = field(default_factory=list)
    """Specifies the list of sessions to register across days, as absolute paths to their /suite2p directories 
    e.g: root/project/animal/session/processed_data/suite2p. The suite2p directory is created as part of the 
    'single-day' suite2p runtime, assuming the default value of the 'save_folder' SingleDayS2PConfiguration class 
    attribute was not modified. Note, each suite2p directory has to contain the 'combined' plane folder, which is 
    created if the 'combined' SingleDayS2PConfiguration class attribute is 'True'."""

    mesoscan: bool = True
    """Indicates whether the processed session /suite2p folders contain registered Mesoscope frames."""


@dataclass()
class CellDetection:
    """Stores parameters for selecting single-day-registered cells (ROIs) to be tracked across multiple sessions (days).

    To maximize the tracking pipeline reliability, it is beneficial to pre-filter the cells whose identity (as cells)
    is not certain or that may be hard to track across sessions.
    """

    probability_threshold: float = 0.85
    """The minimum required probability score assigned to the cell (ROI) by the suite2p classifier. Cells with a lower 
    classifier score are excluded from processing."""

    maximum_size: int = 1000
    """The maximum allowed cell (ROI) size, in pixels. Cells with a larger pixel size are excluded from processing."""

    mesoscope_stripe_borders: list[int] = field(default_factory=list)
    """Stores the x-coordinates of mesoscope combined image stripe (ROI) borders. For mesoscope images, 'stripes' are 
    the individual imaging ROIs acquired in the 'multiple-ROI' mode. If this field is not overwritten by the user, the 
    pipeline will read the border data from the combined plane 'ops.npy' file generated by single-day suite2p pipeline.
    """

    stripe_margin: int = 30
    """The minimum required distance, in pixels, between the center-point (the median x-coordinate) of the cell (ROI) 
    and the mesoscope stripe border. Cells that are too close to stripe borders are excluded from processing to avoid 
    ambiguities associated with tracking cells that span multiple stripes."""


@dataclass()
class Registration:
    """Stores parameters for aligning (registering) the sessions from multiple days to the same visual space.

    Registration is used to create a 'shared' visual space, allowing to track the same cells (ROIs) across otherwise
    variable visual space of each session.
    """

    image_type: str = "enhanced"
    """The type of single-day suite2p-generated image to use for across-day registration. Supported options are 
    'enhanced', 'mean' and 'max'. This 'template' image is used to calculate the necessary deformation (transformations)
    to register (align) all sessions to the same visual space."""

    grid_sampling_factor: float = 1
    """Determines to what extent the grid sampling scales with the deformed image scale. Has to be between 0 and 1. By 
    making this value lower than 1, the grid is relatively fine at the the higher scales, allowing for more 
    deformations. This is used when resizing session images as part of the registration process."""

    scale_sampling: int = 30
    """The number of iterations for each level (i.e. between each factor two in scale) to perform when computing the 
    deformations. Values between 20 and 30 are reasonable in most situations, but higher values yield better results in
    general. The speed of the algorithm scales linearly with this value."""

    speed_factor: float = 3
    """The relative force of the deformation transform applied when registering the sessions to the same visual space.
    This is the most important parameter to tune."""


@dataclass()
class Clustering:
    """Stores parameters for clustering cell (ROI) masks across multiple registered sessions.

    Clustering is used to track cells across sessions. If a group of ROIs across sessions is clustered together, it
    is likely that they represent the same cell (ROI) across all sessions. This process involves first creating a
    'template' mask that tracks a cell using the registered (deformed) visual space and then using this template to
    track the cell in the original (non-deformed) visual space of each session.
    """

    criterion: str = "distance"
    """Specifies the criterion for clustering (grouping) cell (ROI) masks from different sessions. Currently, the only 
    valid option is 'distance'."""

    threshold: float = 0.75
    """Specifies the threshold for the clustering algorithm. Cell masks will be clustered (grouped) together if their  
    clustering criterion is below this threshold value."""

    mask_prevalence: int = 50
    """Specifies the minimum percentage of all registered sessions that must include the clustered cell mask. Cell masks
    present in fewer percent of sessions than this value are excluded from processing. This parameter is used to isolate
    the cells that are present (active) across sessions."""

    pixel_prevalence: int = 50
    """Specifies the minimum percentage of all registered sessions in which a pixel from a given cell mask must be 
    present for it to be used to construct the template mask. Pixels present in fewer percent of sessions than this 
    value are not used to define the 'template' mask coordinates. Template masks are used to extract the cell 
    fluorescence from the 'original' visual space of every session. This parameter is used to isolate the part of the
    cell that is stable across sessions."""

    step_sizes: list[int] = field(default_factory=lambda: [200, 200])
    """Specifies the block size for the clustering process, in pixels. Clustering is applied in blocks of this size, 
    sampled across the processed plane image, to reduce the memory (RAM) overhead."""

    bin_size: int = 50
    """Specifies the size of bins used to discover cell masks within blocks during clustering. To avoid edge cases, the 
    algorithm clusters the cell masks within the region defined by the center-point of each cell +- bin_size."""

    maximum_distance: int = 20
    """Specifies the maximum distance, in pixels, that can separate masks across multiple sessions. The clustering 
    algorithm will consider cell masks located at most within this distance from each-other across days as the same 
    cells during tacking."""

    minimum_size: int = 25
    """The minimum size of the non-overlapping (with other cells) cell (ROI) region, in pixels, that has to be covered 
    by the template mask, for the cell to be assigned to that template. This is used to determine which template(s) the 
    cell belongs to (if any), for the purpose of tracking it across sessions."""


@dataclass()
class Demix:
    """Stores settings used to deconvolve fluorescence signals from cells tracked across multiple days.

    This step applies the suite2p spike deconvolution algorithm to the cell masks isolated during clustering to extract
    the fluorescence of the cells tracked across multiple sessions (days). Generally, it should use the same parameters
    as were used by the single-day suite2p pipeline.
    """

    baseline: str = "maximin"
    """Specifies the method to compute the baseline of each trace. This baseline is then subtracted from each cell. 
    ‘maximin’ computes a moving baseline by filtering the data with a Gaussian of width 'sig_baseline' * 'fs', and then 
    minimum filtering with a window of 'win_baseline' * 'fs', and then maximum filtering with the same window. 
    ‘constant’ computes a constant baseline by filtering with a Gaussian of width 'sig_baseline' * 'fs' and then taking 
    the minimum value of this filtered trace. ‘constant_percentile’ computes a constant baseline by taking the 
    'prctile_baseline' percentile of the trace."""

    win_baseline: float = 60.0
    """The time window, in seconds, over which to compute the baseline filter."""

    sig_baseline: float = 10.0
    """The standard deviation, in seconds, of the Gaussian filter applied to smooth the baseline signal."""

    l2_reg: float = 0.1
    """The L2 regularization strength applied during spike deconvolution."""

    neucoeff: float = 0.7
    """The neuropil coefficient applied for signal correction before deconvolution."""


@dataclass()
class MultiDayS2PConfiguration(YamlConfig):
    """Aggregates all parameters for the multi-day suite2p pipeline used to track cells across multiple days
    (sessions) and extract their activity.

    These settings are used to configure the multiday suite2p extraction pipeline, which is based on the reference
    implementation here: https://github.com/sprustonlab/multiday-suite2p-public. This class behaves similar to the
    SingleDayS2PConfiguration class. It can be saved and loaded from a .YAML file and translated to dictionary format,
    expected by the multi-day sl-suite2p pipeline.
    """

    cell_detection: CellDetection = field(default_factory=CellDetection)
    """Stores parameters for selecting single-day-registered cells (ROIs) to be tracked across multiple sessions 
    (days)."""
    registration: Registration = field(default_factory=Registration)
    """Stores parameters for aligning (registering) the sessions from multiple days to the same visual space."""
    clustering: Clustering = field(default_factory=Clustering)
    """Stores parameters for clustering (tracking) cell (ROI) masks across multiple registered sessions."""
    demix: Demix = field(default_factory=Demix)
    """Stores settings used to deconvolve fluorescence signals from cells tracked across multiple days."""
    io: IO = field(default_factory=IO)
    """Stores parameters that control data input and output during various stages of the pipeline."""

    def to_ops(self) -> dict[str, Any]:
        """Converts the class instance to a dictionary and returns it to caller.

        This dictionary can be passed to sl-suite2p multi-day functions as the 'ops' argument.

        Notes:
            Unlike the single-day configuration class, the dictionary generated by this method uses section names as
            top level keys and parameter names as second-level keys. This mimics the original multiday-pipeline
            configuration scheme.
        """
        return asdict(self)
