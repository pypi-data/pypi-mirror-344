from typing import Any
from dataclasses import field, dataclass

from _typeshed import Incomplete
from ataraxis_data_structures import YamlConfig

@dataclass()
class IO:
    """Stores parameters that control data input and output during various stages of the pipeline."""

    sessions: list[str] = field(default_factory=list)
    mesoscan: bool = ...

@dataclass()
class CellDetection:
    """Stores parameters for selecting single-day-registered cells (ROIs) to be tracked across multiple sessions (days).

    To maximize the tracking pipeline reliability, it is beneficial to pre-filter the cells whose identity (as cells)
    is not certain or that may be hard to track across sessions.
    """

    probability_threshold: float = ...
    maximum_size: int = ...
    mesoscope_stripe_borders: list[int] = field(default_factory=list)
    stripe_margin: int = ...

@dataclass()
class Registration:
    """Stores parameters for aligning (registering) the sessions from multiple days to the same visual space.

    Registration is used to create a 'shared' visual space, allowing to track the same cells (ROIs) across otherwise
    variable visual space of each session.
    """

    image_type: str = ...
    grid_sampling_factor: float = ...
    scale_sampling: int = ...
    speed_factor: float = ...

@dataclass()
class Clustering:
    """Stores parameters for clustering cell (ROI) masks across multiple registered sessions.

    Clustering is used to track cells across sessions. If a group of ROIs across sessions is clustered together, it
    is likely that they represent the same cell (ROI) across all sessions. This process involves first creating a
    'template' mask that tracks a cell using the registered (deformed) visual space and then using this template to
    track the cell in the original (non-deformed) visual space of each session.
    """

    criterion: str = ...
    threshold: float = ...
    mask_prevalence: int = ...
    pixel_prevalence: int = ...
    step_sizes: list[int] = field(default_factory=Incomplete)
    bin_size: int = ...
    maximum_distance: int = ...
    minimum_size: int = ...

@dataclass()
class Demix:
    """Stores settings used to deconvolve fluorescence signals from cells tracked across multiple days.

    This step applies the suite2p spike deconvolution algorithm to the cell masks isolated during clustering to extract
    the fluorescence of the cells tracked across multiple sessions (days). Generally, it should use the same parameters
    as were used by the single-day suite2p pipeline.
    """

    baseline: str = ...
    win_baseline: float = ...
    sig_baseline: float = ...
    l2_reg: float = ...
    neucoeff: float = ...

@dataclass()
class MultiDayS2PConfiguration(YamlConfig):
    """Aggregates all parameters for the multi-day suite2p pipeline used to track cells across multiple days
    (sessions) and extract their activity.

    These settings are used to configure the multiday suite2p extraction pipeline, which is based on the reference
    implementation here: https://github.com/sprustonlab/multiday-suite2p-public. This class behaves similar to the
    SingleDayS2PConfiguration class. It can be saved and loaded from a .YAML file and translated to dictionary format,
    expected by the multi-day sl-suite2p pipeline.
    """

    cell_detection: CellDetection = field(default_factory=CellDetection)
    registration: Registration = field(default_factory=Registration)
    clustering: Clustering = field(default_factory=Clustering)
    demix: Demix = field(default_factory=Demix)
    io: IO = field(default_factory=IO)
    def to_ops(self) -> dict[str, Any]:
        """Converts the class instance to a dictionary and returns it to caller.

        This dictionary can be passed to sl-suite2p multi-day functions as the 'ops' argument.

        Notes:
            Unlike the single-day configuration class, the dictionary generated by this method uses section names as
            top level keys and parameter names as second-level keys. This mimics the original multiday-pipeline
            configuration scheme.
        """
