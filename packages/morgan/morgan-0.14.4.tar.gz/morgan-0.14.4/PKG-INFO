Metadata-Version: 2.4
Name: morgan
Version: 0.14.4
Summary: PyPI Mirror for Offline/Restricted Environments
Project-URL: Homepage, https://github.com/ido50/morgan
Project-URL: Repository, https://github.com/ido50/morgan
Project-URL: Bug Tracker, https://github.com/ido50/morgan/issues
Project-URL: Changelog, https://github.com/ido50/morgan/releases
Author-email: Ido Perlmuter <ido@ido50.net>
License: 
                                         Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
License-File: LICENSE
Keywords: mirror,packages,pypi,pypi-mirror
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Requires-Python: >=3.7
Requires-Dist: importlib-metadata~=4.12.0; python_version < '3.8'
Requires-Dist: packaging~=24.2
Requires-Dist: tomli~=2.0.1
Provides-Extra: test
Requires-Dist: pytest~=7.1.3; extra == 'test'
Description-Content-Type: text/markdown

# Morgan

**PyPI Mirror for Restricted/Offline Environments**

## TOC

<!-- vim-markdown-toc GFM -->

* [Overview](#overview)
* [Features and Concepts](#features-and-concepts)
* [Installation](#installation)
* [Usage](#usage)
    * [Sample Configuration File](#sample-configuration-file)
    * [Setting Up Multiple Mirrors](#setting-up-multiple-mirrors)
    * [Mirroring From Other Indexes](#mirroring-from-other-indexes)
* [How Does Morgan Resolve Dependencies?](#how-does-morgan-resolve-dependencies)
* [Limitations](#limitations)
* [Why Not Use X?](#why-not-use-x)
* [Troubleshooting](#troubleshooting)
* [License](#license)

<!-- vim-markdown-toc -->

## Overview

Morgan is a PyPI mirror for restricted/offline networks/environments, where
access to the Internet is not available. It allows creating small mirrors that
can be used by multiple "client" Python environments (i.e. CPython versions,
operating systems, etc.). The Morgan server is a single-file script that only
uses modules the standard Python library, making it easy to deploy in such
environments.

The basic idea is to run the mirror utility where Internet access is available—which
generates a directory tree ("package index") with all of the required packages,
their dependencies, and the server script—then copy this tree to the restricted
network (going through whatever security policies are in place), run the server
inside the restricted network, and set `pip` in the client environments to use
the mirror instead of pypi.org, which they can't access anyway.

## Features and Concepts

- Runs under **Python 3.7 and up** (both server and mirrorer).
- Package index is a **simple directory tree** that can be easily archived, copied,
  rsynced, etc.
- Package index contains a **configuration file** that lists **markers** for
  different client **environments** and a list of **package requirement strings** as per [PEP 508](https://peps.python.org/pep-0508/).
- Mirrorer automatically and **recursively mirrors dependencies** of all direct
  requirements.
- Only mirrors **optional dependencies** if they were part of the requirement
  strings (a.k.a "extras"), or are relevant to the environment markers. This is
  true for direct requirements and for dependencies of dependencies.
- For each requirement, downloads the **latest version** that satisfies the
  requirement (e.g. "requests>=2.24.0,<2.27.0" will download 2.26.0, whereas
  "requests" will download the latest available version).
- Downloads both **source distributions** and **binary distributions**. Only binary
  distributions that are relevant to either of the environment markers defined in
  the configuration file are downloaded.
- **Server** is a one-file script with **no dependencies** outside the standard library
  available in Python 3.7 and above. The script is automatically extracted into
  the package index.
- Server implements [PEP 503](https://peps.python.org/pep-0503/) (Simple Repository API),
  [PEP 658](https://peps.python.org/pep-0658/) (Serve Distribution Metadata in the Simple Repository API),
  and [PEP 691](https://peps.python.org/pep-0691/) (JSON-based Simple API for Python Package Indexes).

## Installation

Morgan is meant to be used as a command line utility (although it can be used
as a library if necessary), therefore it is recommended to install via a utility
such as [pipx](https://github.com/pypa/pipx):

```sh
pipx install morgan
```

You can also install it directly through `pip`:

```sh
python3 -m pip install morgan
```

## Usage

1. Create a directory where the package index will reside.
2. Create a "morgan.ini" file in this directory, with at least one environment
   definition and list of requirements (see [Sample Configuration File](#sample-configuration-file) below).
   You can use `morgan generate_env >> morgan.ini` to generate a configuration
   block for the local interpreter. You can also use `morgan generate_reqs >> morgan.ini`
   to generate list of requirements from all packages installed in the current
   environment, which is especially useful when using virtual environments.
3. Run the mirrorer from inside the package index via `morgan mirror` (alternatively,
   provide the path of the package index via the `--index-path` flag).
4. Copy the package index to the target environment, if necessary.
5. Run the server using `python3 server.py`. Use `--help` for a full list of
   flags and options. You can also use `morgan server` instead.

### Sample Configuration File

Environment configuration blocks can be automatically generated via
`morgan generate_env`. I recommend you read the "Environment Markers" section of
[PEP 508](https://peps.python.org/pep-0508/#environment-markers) to see exactly how they are calculated.

```ini
[env.legacy]
python_version = 3.9
python_full_version = 3.9.9
os_name = posix
platform_tag = linux-x86_64
sys_platform = linux
platform_machine = i686
platform_python_implementation = CPython
platform_system = Linux
implementation_name = cpython

[env.edge]
os_name = posix
platform_tag = linux-x86_64
sys_platform = linux
platform_machine = x86_64
platform_python_implementation = CPython
platform_system = Linux
python_version = 3.12
python_full_version = 3.12.7
implementation_name = cpython

[env.windows]
os_name = nt
platform_tag = win_amd64
sys_platform = win32
platform_machine = AMD64
platform_python_implementation = CPython
platform_system = Windows
python_version = 3.12
python_full_version = 3.12.7
implementation_name = cpython

[requirements]
requests = >=2.24.0
protobuf = ==3.20.1
redis = >4.1.0,<4.2.1
xonsh = [full]~=0.11.0
```

In this example we can see two different client environments: a "legacy" one with
a relatively old installation of CPython 3.7.7 on 32-bit Linux, and an "edge"
environment with a recent installation of CPython 3.10.6 on 64-bit Linux.

All these different markers are needed because they can be used in package
metadata, and Morgan needs them to determine which files and dependencies to
download.

This configuration file sets "requests", "protobuf", "redis" and "xonsh" as the
packages to mirror, with certain version specifications for each. The xonsh
requirements also specifies an extra which results in the downloading of certain
optional dependencies. When the mirrorer is executed on a directory that contains this configuration file, it will find the
latest version that satisfies the specifications of each package, download
relevant files for each of them, and then recursively download _their_
dependencies. It will download source files suitable for any environment, and
binary distributions (wheels) that match the definitions of the "legacy" and
"edge" environments.

Configuration markers for a specific environment can easily be generated by
running the provided `generate_env` command in the target environment.

### Setting Up Multiple Mirrors

You can set up multiple PyPI mirrors by using separate configuration files.
To do so, simply add the `-c` or `--config` flag with the path of the
configuration file to all relevant morgan commands. For example:

```sh
morgan mirror --index-path /opt/pypi-mirror-1 --config /usr/local/etc/pypi-mirror-1.ini
morgan serve --index-path /opt/pypi-mirror-2 --config /usr/local/etc/pypi-mirror-2.ini
```

### Mirroring From Other Indexes

To mirror from a package index different than PyPI, simply provide the
`-I` or `--index-url` flag with the URL of the index.

## How Does Morgan Resolve Dependencies?

Dependency resolution in Python is hard. The standard for specifying dependencies
was only created in 2015 with [PEP 508](https://peps.python.org/pep-0508/). For years (and to this day), many projects
have used setuptools for distribution, which had its own mechanisms for
dependency specifications. Many Python packages define their dependencies in
non-standard files such as Setuptools' requires.txt file, and not in their actual
METADATA files, despite the latter supporting dependency specification. Today,
setuptools has moved to using the newer pyproject.toml format standardized by
[PEP 621](https://peps.python.org/pep-0621/).

Many tools that attempt to extract requirements from package metadata, such as
[pkginfo](https://pythonhosted.org/pkginfo/), do not return dependencies listed outside standard METADATA files.
[pip-tools](https://pip-tools.readthedocs.io/) is the only tool outside of pip
itself that can resolve dependencies from multiple sources, but like pip itself,
it is not meant to be used as a library, and it is also meant to be used on
project development sources, not project distributions.

Morgan, therefore, implements its own dependency resolution (which heavily relies
on the [packaging](https://pypi.org/project/packaging/) library). It utilizes an
incremental strategy for extracting metadata from package distributions (whether
source or binary distributions), parsing any file that may contain necessary
metadata. Currently this includes METADATA, PKG-INFO, requires.txt,
setup_requires.txt and pyproject.toml files. Morgan also takes into account
build dependencies to ensure that packages that are necessary to compile source
distributions are also available in the mirror (so, if a source distribution
requires [hatch](https://hatch.pypa.io/) in order to build, Morgan will ensure hatch is mirrored as
well).

It should be noted that recursively resolving dependencies is difficult, and
requires care in order to prevent circular dependencies. Morgan's current
strategy is very simple and possibly too broad, and although I haven't yet found
any issues, they may happen. Please open a ticket if you encounter any such
issues.

## Limitations

- Morgan currently only targets CPython. Packages/binary files that are specific
  to other Python implementations are not mirrored. This may change in the
  future.

- Morgan only targets Python 3 packages. Python 2 packages are not mirrored and
  there's no currently any plan to support them.

- The only binary distributions supported are wheels. Eggs are not supported and
  probably never will be.

- The Morgan server is currently read-only. Packages cannot be published to the
  index through it. This may change in the future.

- Morgan does not mirror packages with versions that do not comply with
  [PEP 440](https://peps.python.org/pep-0440/#version-scheme).
  These are generally older packages that are no longer accepted by PyPI anyway.
  This is unlikely to change.

- Morgan does not mirror yanked files (see [PEP 592](https://peps.python.org/pep-0592/)). This is how PyPI supports
  removing files without breaking projects that are specifically pinned to
  them. This was a conscious decision that will probably not change, but
  may be made configurable.

## Why Not Use X?

Morgan was written because of insufficiencies of other mirroring solutions:

- [bandersnatch](https://github.com/pypa/bandersnatch/) is geared more towards mirroring of the entire PyPI repository,
  with support for different filters to reduce/limit the size of the mirror.
  Unfortunately, it doesn't automatically download dependencies of direct
  requirements, making the "package" filter virtually unusable, and the "platform"
  filters are not fine-grained enough. It also has many dependencies outside the
  standard library.
- [localshop](https://github.com/jazzband/localshop) is a proxy that basically caches PyPI responses to `pip` requests,
  so it's not useful for restricted networks. It also has many non-standard-library
  dependencies, and can't download binary distributions for multiple environments.
- [devpi](https://www.devpi.net/) also works as a caching proxy, and also attempts to automatically refresh
  from PyPI at regular intervals. It also has many non-standard-library
  dependencies.
- [pypickup](https://github.com/UB-Quantic/pypickup) was started around the same time as Morgan. It is more fitting for
  and offline mirror than the above three but takes a different approach than Morgan. It
  doesn't include a server, instead relying on `pip`'s ability to install from
  a directory tree, so this tree needs to be accessible to your servers. It also
  favors CLI commands over a configuration file (e.g. an `add` command is used to
  mirror a dependency). I'm not sure how it resolves dependencies, if at all.

## Troubleshooting

- **pip fails installing a package file that exists.**

  If `pip` fails with a message similar to "ERROR: Could not find a version
  that satisfies the requirement FastAPI (from versions: 0.88.0)", despite
  package files existing with the correct version and platform, it may be
  that you're providing `pip` with a non-normalized name. You can either
  use the normalized name when installing (lowercase the package name and
  replace underscores with dashes, e.g. `pip install fastapi` instead of
  `pip install FastAPI`), or start the server with the `--no-metadata` flag,
  which will disable serving metadata files and workaround the issue. This seems
  to be a non-standard behavior in `pip`, as it is sending the normalized name
  to the server, but for some reason expecting to get the non-normalized name
  back.

## License

Morgan is distributed under the terms of the [Apache License 2.0](LICENSE).
