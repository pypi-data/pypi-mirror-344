window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pycnnum", "modulename": "pycnnum", "kind": "module", "doc": "<p>Chinese number &lt;=&gt; int/float conversion for Python3.8+</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pycnnum</span> <span class=\"kn\">import</span> <span class=\"n\">cn2num</span><span class=\"p\">,</span> <span class=\"n\">num2cn</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pycnnum</span> <span class=\"kn\">import</span> <span class=\"n\">cn2num</span><span class=\"p\">,</span> <span class=\"n\">num2cn</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cn2num</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e00\u767e\u4e8c\u5341\u4e09&quot;</span><span class=\"p\">)</span>\n<span class=\"mi\">123</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00\u767e\u4e8c\u5341\u4e09&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cn2num</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e00\u5146\u96f6\u56db\u5341\u4e94&quot;</span><span class=\"p\">,</span> <span class=\"n\">numbering_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;mid&quot;</span><span class=\"p\">)</span>\n<span class=\"mi\">1000000000045</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">2400</span><span class=\"p\">,</span> <span class=\"n\">alt_2</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e24\u5343\u56db&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mf\">3.4</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e09\u70b9\u56db&#39;</span>\n</code></pre>\n</div>\n\n<ul>\n<li><code>.pycnnum.cn2num</code></li>\n<li><code>.pycnnum.num2cn</code></li>\n</ul>\n"}, {"fullname": "pycnnum.constants", "modulename": "pycnnum.constants", "kind": "module", "doc": "<p>Chinese character constants</p>\n"}, {"fullname": "pycnnum.constants.DIGITS", "modulename": "pycnnum.constants", "qualname": "DIGITS", "kind": "variable", "doc": "<p>Chinese number digits</p>\n\n<ul>\n<li>Simplified: <code>\"\u96f6\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\"</code></li>\n<li>Traditional: <code>\"\u96f6\u58f9\u8d30\u53c1\u8086\u4f0d\u9646\u67d2\u634c\u7396\"</code></li>\n<li>Upper simplified: <code>\"\u96f6\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\"</code></li>\n<li>Upper traditional: <code>\"\u96f6\u58f9\u8d30\u53c1\u8086\u4f0d\u9646\u67d2\u634c\u7396\"</code></li>\n</ul>\n", "default_value": "CNConstant(SIMPLIFIED_LOWER=&#x27;\u96f6\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d&#x27;, TRADITIONAL_LOWER=&#x27;\u96f6\u58f9\u8d30\u53c1\u8086\u4f0d\u9646\u67d2\u634c\u7396&#x27;, SIMPLIFIED_UPPER=&#x27;\u96f6\u58f9\u8d30\u53c1\u8086\u4f0d\u9646\u67d2\u634c\u7396&#x27;, TRADITIONAL_UPPER=&#x27;\u96f6\u58f9\u8d30\u53c1\u8086\u4f0d\u9646\u67d2\u634c\u7396&#x27;)"}, {"fullname": "pycnnum.constants.UNITS", "modulename": "pycnnum.constants", "qualname": "UNITS", "kind": "variable", "doc": "<p>Chinese number units</p>\n\n<p>For $i \\in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]$:</p>\n\n<table>\n<thead>\n<tr>\n  <th>NumberingType</th>\n  <th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>LOW</code></td>\n  <td>$10^{8 + i}$</td>\n</tr>\n<tr>\n  <td><code>MID</code></td>\n  <td>$10^{8 + i*4}$</td>\n</tr>\n<tr>\n  <td><code>HIGH</code></td>\n  <td>$10^{8 + 2^{i+3}}$</td>\n</tr>\n</tbody>\n</table>\n\n<hr />\n\n<table>\n<thead>\n<tr>\n  <th>type</th>\n  <th>\u4ebf</th>\n  <th>\u5146</th>\n  <th>\u4eac</th>\n  <th>\u5793</th>\n  <th>\u79ed</th>\n  <th>\u7a70</th>\n  <th>\u6c9f</th>\n  <th>\u6da7</th>\n  <th>\u6b63</th>\n  <th>\u8f7d</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>LOW</code></td>\n  <td>$10^{8}$</td>\n  <td>$10^{9}$</td>\n  <td>$10^{10}$</td>\n  <td>$10^{11}$</td>\n  <td>$10^{12}$</td>\n  <td>$10^{13}$</td>\n  <td>$10^{14}$</td>\n  <td>$10^{15}$</td>\n  <td>$10^{16}$</td>\n  <td>$10^{17}$</td>\n</tr>\n<tr>\n  <td><code>MID</code></td>\n  <td>$10^{8}$</td>\n  <td>$10^{12}$</td>\n  <td>$10^{16}$</td>\n  <td>$10^{20}$</td>\n  <td>$10^{24}$</td>\n  <td>$10^{28}$</td>\n  <td>$10^{32}$</td>\n  <td>$10^{36}$</td>\n  <td>$10^{40}$</td>\n  <td>$10^{44}$</td>\n</tr>\n<tr>\n  <td><code>HIGH</code></td>\n  <td>$10^{8}$</td>\n  <td>$10^{16}$</td>\n  <td>$10^{32}$</td>\n  <td>$10^{64}$</td>\n  <td>$10^{128}$</td>\n  <td>$10^{256}$</td>\n  <td>$10^{512}$</td>\n  <td>$10^{1024}$</td>\n  <td>$10^{2048}$</td>\n  <td>$10^{4096}$</td>\n</tr>\n</tbody>\n</table>\n\n<hr />\n\n<p>Example:</p>\n\n<ul>\n<li>\"\u4e00\u5146\" is <code>1 000 000 000</code> in <code>LOW</code> numbering type</li>\n<li>\"\u4e00\u5146\" is <code>1 000 000 000 000</code> in <code>MID</code> numbering type</li>\n<li>\"\u4e00\u5146\" is <code>10 000 000 000 000 000</code> in <code>HIGH</code> numbering type</li>\n</ul>\n", "default_value": "CNConstant(SIMPLIFIED_LOWER=&#x27;\u5341\u767e\u5343\u4e07\u4ebf\u5146\u4eac\u5793\u79ed\u7a70\u6c9f\u6da7\u6b63\u8f7d&#x27;, TRADITIONAL_LOWER=&#x27;\u62fe\u4f70\u4edf\u842c\u5104\u5146\u4eac\u5793\u79ed\u7a70\u6e9d\u6f97\u6b63\u8f09&#x27;, SIMPLIFIED_UPPER=&#x27;\u62fe\u4f70\u4edf\u842c\u5104\u5146\u4eac\u5793\u79ed\u7a70\u6e9d\u6f97\u6b63\u8f09&#x27;, TRADITIONAL_UPPER=&#x27;\u62fe\u4f70\u4edf\u842c\u5104\u5146\u4eac\u5793\u79ed\u7a70\u6e9d\u6f97\u6b63\u8f09&#x27;)"}, {"fullname": "pycnnum.pycnnum", "modulename": "pycnnum.pycnnum", "kind": "module", "doc": "<p>Chinese number &lt;=&gt; int/float conversion</p>\n"}, {"fullname": "pycnnum.pycnnum.NumberingType", "modulename": "pycnnum.pycnnum", "qualname": "NumberingType", "kind": "class", "doc": "<p>Numbering system types: LOW, MID, HIGH</p>\n\n<p>Chinese numbering types:</p>\n\n<p>For $i \\in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]$:</p>\n\n<ul>\n<li><code>LOW</code>  : $10^{8 + i}$</li>\n<li><code>MID</code>  : $10^{8 + i*4}$</li>\n<li><code>HIGH</code> : $10^{2^{i+3}}$</li>\n</ul>\n\n<hr />\n\n<table>\n<thead>\n<tr>\n  <th>type</th>\n  <th>\u4ebf</th>\n  <th>\u5146</th>\n  <th>\u4eac</th>\n  <th>\u5793</th>\n  <th>\u79ed</th>\n  <th>\u7a70</th>\n  <th>\u6c9f</th>\n  <th>\u6da7</th>\n  <th>\u6b63</th>\n  <th>\u8f7d</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>low</code></td>\n  <td>$10^{8}$</td>\n  <td>$10^{9}$</td>\n  <td>$10^{10}$</td>\n  <td>$10^{11}$</td>\n  <td>$10^{12}$</td>\n  <td>$10^{13}$</td>\n  <td>$10^{14}$</td>\n  <td>$10^{15}$</td>\n  <td>$10^{16}$</td>\n  <td>$10^{17}$</td>\n</tr>\n<tr>\n  <td><code>mid</code></td>\n  <td>$10^{8}$</td>\n  <td>$10^{12}$</td>\n  <td>$10^{16}$</td>\n  <td>$10^{20}$</td>\n  <td>$10^{24}$</td>\n  <td>$10^{28}$</td>\n  <td>$10^{32}$</td>\n  <td>$10^{36}$</td>\n  <td>$10^{40}$</td>\n  <td>$10^{44}$</td>\n</tr>\n<tr>\n  <td><code>high</code></td>\n  <td>$10^{8}$</td>\n  <td>$10^{16}$</td>\n  <td>$10^{32}$</td>\n  <td>$10^{64}$</td>\n  <td>$10^{128}$</td>\n  <td>$10^{256}$</td>\n  <td>$10^{512}$</td>\n  <td>$10^{1024}$</td>\n  <td>$10^{2048}$</td>\n  <td>$10^{4096}$</td>\n</tr>\n</tbody>\n</table>\n", "bases": "enum.Enum"}, {"fullname": "pycnnum.pycnnum.NumberingType.LOW", "modulename": "pycnnum.pycnnum", "qualname": "NumberingType.LOW", "kind": "variable", "doc": "<table>\n<thead>\n<tr>\n  <th>type</th>\n  <th>\u4ebf</th>\n  <th>\u5146</th>\n  <th>\u4eac</th>\n  <th>\u5793</th>\n  <th>\u79ed</th>\n  <th>\u7a70</th>\n  <th>\u6c9f</th>\n  <th>\u6da7</th>\n  <th>\u6b63</th>\n  <th>\u8f7d</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>low</code></td>\n  <td>$10^{8}$</td>\n  <td>$10^{9}$</td>\n  <td>$10^{10}$</td>\n  <td>$10^{11}$</td>\n  <td>$10^{12}$</td>\n  <td>$10^{13}$</td>\n  <td>$10^{14}$</td>\n  <td>$10^{15}$</td>\n  <td>$10^{16}$</td>\n  <td>$10^{17}$</td>\n</tr>\n</tbody>\n</table>\n", "default_value": "&lt;NumberingType.LOW: &#x27;low&#x27;&gt;"}, {"fullname": "pycnnum.pycnnum.NumberingType.MID", "modulename": "pycnnum.pycnnum", "qualname": "NumberingType.MID", "kind": "variable", "doc": "<table>\n<thead>\n<tr>\n  <th>type</th>\n  <th>\u4ebf</th>\n  <th>\u5146</th>\n  <th>\u4eac</th>\n  <th>\u5793</th>\n  <th>\u79ed</th>\n  <th>\u7a70</th>\n  <th>\u6c9f</th>\n  <th>\u6da7</th>\n  <th>\u6b63</th>\n  <th>\u8f7d</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>mid</code></td>\n  <td>$10^{8}$</td>\n  <td>$10^{12}$</td>\n  <td>$10^{16}$</td>\n  <td>$10^{20}$</td>\n  <td>$10^{24}$</td>\n  <td>$10^{28}$</td>\n  <td>$10^{32}$</td>\n  <td>$10^{36}$</td>\n  <td>$10^{40}$</td>\n  <td>$10^{44}$</td>\n</tr>\n</tbody>\n</table>\n", "default_value": "&lt;NumberingType.MID: &#x27;mid&#x27;&gt;"}, {"fullname": "pycnnum.pycnnum.NumberingType.HIGH", "modulename": "pycnnum.pycnnum", "qualname": "NumberingType.HIGH", "kind": "variable", "doc": "<table>\n<thead>\n<tr>\n  <th>type</th>\n  <th>\u4ebf</th>\n  <th>\u5146</th>\n  <th>\u4eac</th>\n  <th>\u5793</th>\n  <th>\u79ed</th>\n  <th>\u7a70</th>\n  <th>\u6c9f</th>\n  <th>\u6da7</th>\n  <th>\u6b63</th>\n  <th>\u8f7d</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>high</code></td>\n  <td>$10^{8}$</td>\n  <td>$10^{16}$</td>\n  <td>$10^{32}$</td>\n  <td>$10^{64}$</td>\n  <td>$10^{128}$</td>\n  <td>$10^{256}$</td>\n  <td>$10^{512}$</td>\n  <td>$10^{1024}$</td>\n  <td>$10^{2048}$</td>\n  <td>$10^{4096}$</td>\n</tr>\n</tbody>\n</table>\n", "default_value": "&lt;NumberingType.HIGH: &#x27;high&#x27;&gt;"}, {"fullname": "pycnnum.pycnnum.NumberingType.powers", "modulename": "pycnnum.pycnnum", "qualname": "NumberingType.powers", "kind": "variable", "doc": "<p>Powers of units for each numbering type</p>\n", "annotation": ": List[int]"}, {"fullname": "pycnnum.pycnnum.CNChar", "modulename": "pycnnum.pycnnum", "qualname": "CNChar", "kind": "class", "doc": "<p>Base Chinese char class.</p>\n\n<p>Each object has simplified and traditional strings.\nWhen converted to string, it will shows the simplified string or traditional string or space <code>' '</code>.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">negative</span> <span class=\"o\">=</span> <span class=\"n\">CNChar</span><span class=\"p\">(</span><span class=\"n\">simplified</span><span class=\"o\">=</span><span class=\"s2\">&quot;\u8d1f&quot;</span><span class=\"p\">,</span> <span class=\"n\">traditional</span><span class=\"o\">=</span><span class=\"s2\">&quot;\u8ca0&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">negative</span><span class=\"o\">.</span><span class=\"n\">simplified</span>\n<span class=\"s1\">&#39;\u8d1f&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">negative</span><span class=\"o\">.</span><span class=\"n\">traditional</span>\n<span class=\"s1\">&#39;\u8ca0&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">negative</span><span class=\"o\">.</span><span class=\"n\">upper_simplified</span>\n<span class=\"s1\">&#39;\u8d1f&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">negative</span><span class=\"o\">.</span><span class=\"n\">upper_traditional</span>\n<span class=\"s1\">&#39;\u8ca0&#39;</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycnnum.pycnnum.CNChar.__init__", "modulename": "pycnnum.pycnnum", "qualname": "CNChar.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">simplified</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">traditional</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">upper_simplified</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">upper_traditional</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pycnnum.pycnnum.CNChar.simplified", "modulename": "pycnnum.pycnnum", "qualname": "CNChar.simplified", "kind": "variable", "doc": "<p>Simplified Chinese character</p>\n", "annotation": ": Union[str, NoneType]", "default_value": "None"}, {"fullname": "pycnnum.pycnnum.CNChar.traditional", "modulename": "pycnnum.pycnnum", "qualname": "CNChar.traditional", "kind": "variable", "doc": "<p>Traditional Chinese character</p>\n", "annotation": ": Union[str, NoneType]", "default_value": "None"}, {"fullname": "pycnnum.pycnnum.CNChar.upper_simplified", "modulename": "pycnnum.pycnnum", "qualname": "CNChar.upper_simplified", "kind": "variable", "doc": "<p>Capitalized character in simplified Chinese. Defaults to <code>None</code> means same as <code>self.simplified</code>.</p>\n", "annotation": ": Union[str, NoneType]", "default_value": "None"}, {"fullname": "pycnnum.pycnnum.CNChar.upper_traditional", "modulename": "pycnnum.pycnnum", "qualname": "CNChar.upper_traditional", "kind": "variable", "doc": "<p>Capitalized character in traditional Chinese. Defaults to <code>None</code> means same as <code>self.traditional</code>.</p>\n", "annotation": ": Union[str, NoneType]", "default_value": "None"}, {"fullname": "pycnnum.pycnnum.CNChar.all_forms", "modulename": "pycnnum.pycnnum", "qualname": "CNChar.all_forms", "kind": "variable", "doc": "<p>All forms of the character</p>\n", "annotation": ": str"}, {"fullname": "pycnnum.pycnnum.CNUnit", "modulename": "pycnnum.pycnnum", "qualname": "CNUnit", "kind": "class", "doc": "<p>Chinese number unit class</p>\n\n<p>Each of it is an <code>CNChar</code> with additional upper type strings.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wan</span> <span class=\"o\">=</span> <span class=\"n\">CNUnit</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"s2\">&quot;\u4e07\u842c\u842c\u842c&quot;</span><span class=\"p\">,</span> <span class=\"n\">power</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wan</span>\n<span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">4</span>\n</code></pre>\n</div>\n", "bases": "CNChar"}, {"fullname": "pycnnum.pycnnum.CNUnit.__init__", "modulename": "pycnnum.pycnnum", "qualname": "CNUnit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">simplified</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">traditional</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">upper_simplified</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">upper_traditional</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">power</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "pycnnum.pycnnum.CNUnit.power", "modulename": "pycnnum.pycnnum", "qualname": "CNUnit.power", "kind": "variable", "doc": "<p>The power of this unit, e.g. <code>power</code> = 4 for <code>'\u4e07'</code> ( (10^4) )</p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "pycnnum.pycnnum.CNUnit.create", "modulename": "pycnnum.pycnnum", "qualname": "CNUnit.create", "kind": "function", "doc": "<p>Create one unit character based on power value from constants</p>\n\n<ul>\n<li><code>SMALLER_CHINESE_NUMBERING_UNITS_SIMPLIFIED</code></li>\n<li><code>SMALLER_CHINESE_NUMBERING_UNITS_TRADITIONAL</code></li>\n<li><code>LARGER_CHINESE_NUMBERING_UNITS_SIMPLIFIED</code></li>\n<li><code>LARGER_CHINESE_NUMBERING_UNITS_TRADITIONAL</code></li>\n</ul>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">CNUnit</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">power</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">numbering_type</span><span class=\"o\">=</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">LOW</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">simplified</span>\n<span class=\"s1\">&#39;\u4ebf&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">CNUnit</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">power</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">numbering_type</span><span class=\"o\">=</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">LOW</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">simplified</span>\n<span class=\"s1\">&#39;\u79ed&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">CNUnit</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">power</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">numbering_type</span><span class=\"o\">=</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">HIGH</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">simplified</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">power</span> <span class=\"o\">=</span> <span class=\"mi\">12</span> <span class=\"ow\">is</span> <span class=\"n\">invalid</span> <span class=\"k\">for</span> <span class=\"n\">numbering_type</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">HIGH</span><span class=\"p\">:</span> <span class=\"s1\">&#39;high&#39;</span><span class=\"o\">&gt;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>power (int):</strong>  Unit power, starting from 1.</li>\n<li><strong>numbering_type (NumberingType, optional):</strong>  Numbering type. Defaults to <code>NumberingType.MID</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Raised when invalid <code>numbering_type</code> is provided</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>CNUnit: Created unit object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">power</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">numbering_type</span><span class=\"p\">:</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">NumberingType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">MID</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mid&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNUnit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycnnum.pycnnum.CNDigit", "modulename": "pycnnum.pycnnum", "qualname": "CNDigit", "kind": "class", "doc": "<p>Chinese number digit class</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">CNDigit</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"s2\">&quot;\u4e09\u53c1\u53c1\u53c1&quot;</span><span class=\"p\">,</span> <span class=\"n\">int_value</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "bases": "CNChar"}, {"fullname": "pycnnum.pycnnum.CNDigit.__init__", "modulename": "pycnnum.pycnnum", "qualname": "CNDigit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">simplified</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">traditional</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">upper_simplified</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">upper_traditional</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">int_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">alt_s</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alt_t</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pycnnum.pycnnum.CNDigit.int_value", "modulename": "pycnnum.pycnnum", "qualname": "CNDigit.int_value", "kind": "variable", "doc": "<p>Integer value of the digit, 0 to 9. Defaults to 0.</p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "pycnnum.pycnnum.CNDigit.alt_s", "modulename": "pycnnum.pycnnum", "qualname": "CNDigit.alt_s", "kind": "variable", "doc": "<p>Alternative simplified character, e.g. '\u4e24' for 2. Defaults to <code>None</code>.</p>\n", "annotation": ": Union[str, NoneType]", "default_value": "None"}, {"fullname": "pycnnum.pycnnum.CNDigit.alt_t", "modulename": "pycnnum.pycnnum", "qualname": "CNDigit.alt_t", "kind": "variable", "doc": "<p>Alternative traditional character, e.g. '\u4fe9' for 2. Defaults to <code>None</code>.</p>\n", "annotation": ": Union[str, NoneType]", "default_value": "None"}, {"fullname": "pycnnum.pycnnum.CNMath", "modulename": "pycnnum.pycnnum", "qualname": "CNMath", "kind": "class", "doc": "<p>Chinese math operators</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">CNMath</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"s2\">&quot;\u6b63\u6b63\u6b63\u6b63&quot;</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">&quot;+&quot;</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">+</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">positive</span><span class=\"o\">.</span><span class=\"n\">symbol</span>\n<span class=\"s1\">&#39;+&#39;</span>\n</code></pre>\n</div>\n", "bases": "CNChar"}, {"fullname": "pycnnum.pycnnum.CNMath.__init__", "modulename": "pycnnum.pycnnum", "qualname": "CNMath.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">simplified</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">traditional</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">upper_simplified</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">upper_traditional</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pycnnum.pycnnum.CNMath.symbol", "modulename": "pycnnum.pycnnum", "qualname": "CNMath.symbol", "kind": "variable", "doc": "<p>Mathematical symbol, e.g. '+'. Defaults to ``.</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "pycnnum.pycnnum.CNMath.expression", "modulename": "pycnnum.pycnnum", "qualname": "CNMath.expression", "kind": "variable", "doc": "<p>Mathematical expression, e.g. <code>lambda x: +x</code>. Defaults to <code>None</code>.</p>\n", "annotation": ": Union[Callable, NoneType]", "default_value": "None"}, {"fullname": "pycnnum.pycnnum.SymbolType", "modulename": "pycnnum.pycnnum", "qualname": "SymbolType", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[pycnnum.pycnnum.CNUnit, pycnnum.pycnnum.CNDigit, pycnnum.pycnnum.CNMath]"}, {"fullname": "pycnnum.pycnnum.MathSymbols", "modulename": "pycnnum.pycnnum", "qualname": "MathSymbols", "kind": "class", "doc": "<p>Math symbols used in Chinese for both traditional and simplified Chinese</p>\n\n<ul>\n<li>positive = ['\u6b63', '\u6b63']</li>\n<li>negative = ['\u8d1f', '\u8ca0']</li>\n<li>point = ['\u70b9', '\u9ede']</li>\n</ul>\n\n<p>Used in <code>NumberingSystem</code>.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">CNMath</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"s2\">&quot;\u6b63\u6b63\u6b63\u6b63&quot;</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">&quot;+&quot;</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">+</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">negative</span> <span class=\"o\">=</span> <span class=\"n\">CNMath</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"s2\">&quot;\u8d1f\u8ca0\u8d1f\u8ca0&quot;</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">CNMath</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"s2\">&quot;\u70b9\u9ede\u70b9\u9ede&quot;</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">integer</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">decimal</span><span class=\"p\">)))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">math</span> <span class=\"o\">=</span> <span class=\"n\">MathSymbols</span><span class=\"p\">(</span><span class=\"n\">positive</span><span class=\"p\">,</span> <span class=\"n\">negative</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">positive</span>\n<span class=\"o\">+</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">+</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">math</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"o\">+</span>\n<span class=\"o\">-</span>\n<span class=\"o\">.</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycnnum.pycnnum.MathSymbols.__init__", "modulename": "pycnnum.pycnnum", "qualname": "MathSymbols.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">positive</span><span class=\"p\">:</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNMath</span>,</span><span class=\"param\">\t<span class=\"n\">negative</span><span class=\"p\">:</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNMath</span>,</span><span class=\"param\">\t<span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNMath</span></span>)</span>"}, {"fullname": "pycnnum.pycnnum.MathSymbols.positive", "modulename": "pycnnum.pycnnum", "qualname": "MathSymbols.positive", "kind": "variable", "doc": "<p>Positive</p>\n", "annotation": ": pycnnum.pycnnum.CNMath"}, {"fullname": "pycnnum.pycnnum.MathSymbols.negative", "modulename": "pycnnum.pycnnum", "qualname": "MathSymbols.negative", "kind": "variable", "doc": "<p>Negative</p>\n", "annotation": ": pycnnum.pycnnum.CNMath"}, {"fullname": "pycnnum.pycnnum.MathSymbols.point", "modulename": "pycnnum.pycnnum", "qualname": "MathSymbols.point", "kind": "variable", "doc": "<p>Decimal point</p>\n", "annotation": ": pycnnum.pycnnum.CNMath"}, {"fullname": "pycnnum.pycnnum.NumberingSystem", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem", "kind": "class", "doc": "<p>Numbering system class</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">NumberingSystem</span><span class=\"p\">(</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">MID</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">numbering_type</span>\n<span class=\"o\">&lt;</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">MID</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mid&#39;</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">digits</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">simplified</span>\n<span class=\"s1\">&#39;\u5793&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">positive</span>\n<span class=\"o\">+</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycnnum.pycnnum.NumberingSystem.__init__", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem.__init__", "kind": "function", "doc": "<p>Construction</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">numbering_type</span><span class=\"p\">:</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">NumberingType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">MID</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mid&#39;</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "pycnnum.pycnnum.NumberingSystem.numbering_type", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem.numbering_type", "kind": "variable", "doc": "<p>Numbering type</p>\n", "annotation": ": pycnnum.pycnnum.NumberingType"}, {"fullname": "pycnnum.pycnnum.NumberingSystem.digits", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem.digits", "kind": "variable", "doc": "<p>Digits</p>\n", "annotation": ": List[pycnnum.pycnnum.CNDigit]"}, {"fullname": "pycnnum.pycnnum.NumberingSystem.units", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem.units", "kind": "variable", "doc": "<p>Units</p>\n", "annotation": ": List[pycnnum.pycnnum.CNUnit]"}, {"fullname": "pycnnum.pycnnum.NumberingSystem.math", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem.math", "kind": "variable", "doc": "<p>Math symbols</p>\n", "annotation": ": pycnnum.pycnnum.MathSymbols"}, {"fullname": "pycnnum.pycnnum.NumberingSystem.cn2symbols", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem.cn2symbols", "kind": "function", "doc": "<p>Chinese string to symbols</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">NumberingSystem</span><span class=\"p\">(</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">MID</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e00\u767e\u516b&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"p\">[])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e00\u767e\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e00\u767e\u516b\u70b9\u4e94\u516d\u4e03&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e24\u5343\u4e07\u4e00\u767e\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u6b63\u4e24\u5343\u4e07\u4e00\u767e\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">([</span><span class=\"o\">+</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u8d1f\u4e24\u5343\u4e07\u4e00\u767e\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">([</span><span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u70b9\u8d1f\u4e24\u5343\u4e07\u4e00\u767e\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">First</span> <span class=\"n\">symbol</span> <span class=\"ow\">in</span> <span class=\"n\">decimal</span> <span class=\"n\">part</span> <span class=\"n\">should</span> <span class=\"ow\">not</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">math</span> <span class=\"n\">symbol</span><span class=\"p\">,</span> <span class=\"o\">-</span> <span class=\"ow\">is</span> <span class=\"n\">provided</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e24\u5343\u4e07\u70b9\u4e00\u767e\u70b9\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Multiple</span> <span class=\"n\">points</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">number</span> <span class=\"n\">\u4e24\u5343\u4e07\u70b9\u4e00\u767e\u70b9\u516b\u5341</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e24\u5343\u4e07\u70b9\u4e00\u767e\u9ede\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Multiple</span> <span class=\"n\">points</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">number</span> <span class=\"n\">\u4e24\u5343\u4e07\u70b9\u4e00\u767e\u9ede\u516b\u5341</span><span class=\"o\">.</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cn_str (str):</strong>  Chinese number</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[List[SymbolType], List[SymbolType]]: Integer symbols, decimal symbols</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cn_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNUnit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNDigit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNMath</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNUnit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNDigit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNMath</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycnnum.pycnnum.NumberingSystem.get_int_value", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem.get_int_value", "kind": "function", "doc": "<p>Compute the value from symbol</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">NumberingSystem</span><span class=\"p\">(</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">MID</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get_int_value</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u5341\u516b&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"mi\">18</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get_int_value</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e24\u5343\u4e07\u4e00\u767e\u516b\u5341&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"mi\">20000180</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get_int_value</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">cn2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e24\u4ebf\u516d&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"mi\">260000000</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>integer_symbols (List[SymbolType]):</strong>  Symbols, without point</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">integer_symbols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNUnit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNDigit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNMath</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycnnum.pycnnum.NumberingSystem.int2symbols", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem.int2symbols", "kind": "function", "doc": "<p>Integer to symbols</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">NumberingSystem</span><span class=\"p\">(</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">MID</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">int2symbols</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">int2symbols</span><span class=\"p\">(</span><span class=\"mi\">20000180</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">int2symbols</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">int2symbols</span><span class=\"p\">(</span><span class=\"mi\">320</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">int2symbols</span><span class=\"p\">(</span><span class=\"mi\">220</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">int2symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;220&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>int_value (Union[int, str]):</strong>  Value string, e.g. \"0.1\", \"34\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[SymbolType]: List of values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">int_value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNUnit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNDigit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNMath</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycnnum.pycnnum.NumberingSystem.alt_two_symbols", "modulename": "pycnnum.pycnnum", "qualname": "NumberingSystem.alt_two_symbols", "kind": "function", "doc": "<p>Alternative two symbols\ne.g. \"\u4e8c\u767e\u4e8c\" to \"\u4e24\u767e\u4e8c\", \"\u4e8c\u5343\u4e8c\" to \"\u4e24\u5343\u4e8c\", \"\u4e09\u4ebf\u96f6\u4e8c\u4e07\u4e8c\" to \"\u4e09\u4ebf\u96f6\u4e24\u4e07\u4e8c</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>integer_symbols (List[SymbolType]):</strong>  Symbols</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[SymbolType]: Symbols</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">integer_symbols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNUnit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNDigit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNMath</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNUnit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNDigit</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">CNMath</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycnnum.pycnnum.cn2num", "modulename": "pycnnum.pycnnum", "qualname": "cn2num", "kind": "function", "doc": "<p>Convert Chinese number to <code>int</code> or <code>float</code> value\u3002</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cn2num</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u8d1f\u96f6\u70b9\u4e94&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">-</span><span class=\"mf\">0.5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cn2num</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e00\u767e\u516b&quot;</span><span class=\"p\">)</span>\n<span class=\"mi\">180</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cn2num</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e00\u767e\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"mi\">180</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cn2num</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e00\u767e\u516b\u70b9\u4e94\u516d\u4e03&quot;</span><span class=\"p\">)</span>\n<span class=\"mf\">180.567</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cn2num</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u4e24\u5343\u4e07\u4e00\u767e\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"mi\">20000180</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cn2num</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u6b63\u4e24\u5343\u4e07\u4e00\u767e\u516b\u5341&quot;</span><span class=\"p\">)</span>\n<span class=\"mi\">20000180</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chinese_string (str):</strong>  Chinese number.</li>\n<li><strong>numbering_type (Union[str, NumberingType], optional):</strong>  numbering type. Defaults to <code>NumberingType.MID</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Raised when a character is not in the numbering system, e.g. '\u4f60' is not a number nor a unit</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Union[int, float]: <code>int</code> or <code>float</code> value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chinese_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">numbering_type</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">NumberingType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">MID</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mid&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycnnum.pycnnum.num2cn", "modulename": "pycnnum.pycnnum", "qualname": "num2cn", "kind": "function", "doc": "<p>Integer or float value to Chinese string</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u5341\u516d&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">116</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00\u767e\u4e00\u5341\u516d&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">2401</span><span class=\"p\">,</span> <span class=\"n\">alt_2</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e24\u5343\u56db\u767e\u96f6\u4e00&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00\u767e\u96f6\u4e00&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s2\">&quot;3.4&quot;</span><span class=\"p\">),</span> <span class=\"n\">numbering_type</span><span class=\"o\">=</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">HIGH</span><span class=\"p\">,</span> <span class=\"n\">alt_2</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">traditional</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e09\u70b9\u56db&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"s2\">&quot;3.4&quot;</span><span class=\"p\">,</span> <span class=\"n\">numbering_type</span><span class=\"o\">=</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">HIGH</span><span class=\"p\">,</span> <span class=\"n\">alt_2</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">traditional</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e09\u70b9\u56db&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mf\">23232.005184132423423423300</span><span class=\"p\">,</span> <span class=\"n\">numbering_type</span><span class=\"o\">=</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">HIGH</span><span class=\"p\">,</span> <span class=\"n\">alt_2</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">traditional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u5169\u842c\u53c1\u4edf\u5169\u4f70\u53c1\u62fe\u8d30\u9ede\u96f6\u96f6\u4f0d\u58f9\u634c\u8086\u58f9\u53c1\u8d30\u8086\u8d30\u8086&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"s2\">&quot;23232.005184132423423423300&quot;</span><span class=\"p\">,</span> <span class=\"n\">numbering_type</span><span class=\"o\">=</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">HIGH</span><span class=\"p\">,</span> <span class=\"n\">alt_2</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">traditional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u5169\u842c\u53c1\u4edf\u5169\u4f70\u53c1\u62fe\u8d30\u9ede\u96f6\u96f6\u4f0d\u58f9\u634c\u8086\u58f9\u53c1\u8d30\u8086\u8d30\u53c1\u8086\u8d30\u53c1\u8086\u8d30\u53c1\u53c1\u96f6\u96f6&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"s1\">&#39;023232.005184132423423423300&#39;</span><span class=\"p\">,</span> <span class=\"n\">numbering_type</span><span class=\"o\">=</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">HIGH</span><span class=\"p\">,</span> <span class=\"n\">alt_2</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">traditional</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e8c\u4e07\u4e09\u5343\u4e8c\u767e\u4e09\u5341\u4e8c\u70b9\u96f6\u96f6\u4e94\u4e00\u516b\u56db\u4e00\u4e09\u4e8c\u56db\u4e8c\u4e09\u56db\u4e8c\u4e09\u56db\u4e8c\u4e09\u4e09\u96f6\u96f6&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">111180000</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00\u4ebf\u4e00\u5343\u4e00\u767e\u4e00\u5341\u516b\u4e07&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">1821010</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00\u767e\u516b\u5341\u4e8c\u4e07\u4e00\u5343\u96f6\u4e00\u5341&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mf\">182.1</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00\u767e\u516b\u5341\u4e8c\u70b9\u4e00&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"s1\">&#39;3.4&#39;</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e09\u70b9\u56db&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u5341\u516d&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">10600</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00\u4e07\u96f6\u516d\u767e&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">110</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00\u767e\u4e00&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num2cn</span><span class=\"p\">(</span><span class=\"mi\">1600</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;\u4e00\u5343\u516d&#39;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num (Tuple[int, float, str]):</strong>  <code>int</code>, <code>float</code> or <code>str</code> value</li>\n<li><strong>numbering_type (Union[str, NumberingType], optional):</strong>  Numbering type. Defaults to <code>NumberingType.MID</code>.</li>\n<li><strong>upper (bool, optional):</strong>  Capitalized numbers. Defaults to <code>False</code>.</li>\n<li><strong>traditional (bool, optional):</strong>  Traditional Chinese. Defaults to <code>False</code>.</li>\n<li><strong>alt_0 (bool, optional):</strong>  Use alternative form of zero. Defaults to <code>False</code>.</li>\n<li><strong>alt_2 (bool, optional):</strong>  Use alternative form of two. Defaults to <code>False</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Chinese string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">numbering_type</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">pycnnum</span><span class=\"o\">.</span><span class=\"n\">NumberingType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">NumberingType</span><span class=\"o\">.</span><span class=\"n\">MID</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mid&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">upper</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">traditional</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alt_0</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alt_2</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "test", "modulename": "test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "test.test_pycnnum", "modulename": "test.test_pycnnum", "kind": "module", "doc": "<p>All tests</p>\n"}, {"fullname": "test.test_pycnnum.TestData", "modulename": "test.test_pycnnum", "qualname": "TestData", "kind": "class", "doc": "<p>Test data for cn2num and num2cn</p>\n\n<ul>\n<li>cn: Chinese number, default to <code>\"\u4e00\"</code></li>\n<li>num: Arabic number, default to <code>0</code></li>\n<li>alt_0: Use alternative format zero, default to <code>False</code></li>\n<li>alt_2: Use alternative format two, default to <code>False</code></li>\n</ul>\n", "bases": "builtins.tuple"}, {"fullname": "test.test_pycnnum.TestData.__init__", "modulename": "test.test_pycnnum", "qualname": "TestData.__init__", "kind": "function", "doc": "<p>Create new instance of TestData(cn, num, num_type, alt_0, alt_2, num2cn)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cn</span><span class=\"o\">=</span><span class=\"s1\">&#39;\u4e00&#39;</span>, </span><span class=\"param\"><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">num_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;mid&#39;</span>, </span><span class=\"param\"><span class=\"n\">alt_0</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">alt_2</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">num2cn</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "test.test_pycnnum.TestData.cn", "modulename": "test.test_pycnnum", "qualname": "TestData.cn", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "test.test_pycnnum.TestData.num", "modulename": "test.test_pycnnum", "qualname": "TestData.num", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "test.test_pycnnum.TestData.num_type", "modulename": "test.test_pycnnum", "qualname": "TestData.num_type", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, {"fullname": "test.test_pycnnum.TestData.alt_0", "modulename": "test.test_pycnnum", "qualname": "TestData.alt_0", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n"}, {"fullname": "test.test_pycnnum.TestData.alt_2", "modulename": "test.test_pycnnum", "qualname": "TestData.alt_2", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n"}, {"fullname": "test.test_pycnnum.TestData.num2cn", "modulename": "test.test_pycnnum", "qualname": "TestData.num2cn", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n"}, {"fullname": "test.test_pycnnum.test_data", "modulename": "test.test_pycnnum", "qualname": "test_data", "kind": "variable", "doc": "<p>Test data for <code>pycnnum.pycnnum.cn2num</code> and <code>pycnnum.pycnnum.num2cn</code></p>\n", "default_value": "[TestData(cn=&#x27;\u4e00&#x27;, num=1, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u5341\u516d&#x27;, num=16, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u767e\u4e00\u5341\u516d&#x27;, num=116, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u767e\u96f6\u4e00&#x27;, num=101, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u767e\u4e8c\u5341\u4e09&#x27;, num=123, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u5343\u4e8c\u767e\u4e09\u5341\u56db&#x27;, num=1234, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u5343\u4e24\u767e\u4e09\u5341\u56db&#x27;, num=1234, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=True, num2cn=None), TestData(cn=&#x27;\u4e24\u5343\u56db\u767e\u96f6\u4e00&#x27;, num=2401, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=True, num2cn=None), TestData(cn=&#x27;\u4e8c\u5343\u56db\u767e\u96f6\u4e00&#x27;, num=2401, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u4e07\u4e8c\u5343\u4e09\u767e\u56db\u5341\u4e94&#x27;, num=12345, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u767e\u4e8c\u5341\u4e09\u4e07\u56db\u5343\u4e94\u767e\u516d\u5341\u4e03&#x27;, num=1234567, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u5343\u4e8c\u767e\u4e09\u5341\u56db\u4e07\u4e94\u5343\u516d\u767e\u4e03\u5341\u516b&#x27;, num=12345678, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u4ebf\u4e8c\u5343\u4e09\u767e\u56db\u5341\u4e94\u4e07\u516d\u5343\u4e03\u767e\u516b\u5341\u4e5d&#x27;, num=123456789, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u767e\u4e8c\u5341\u4e09\u4ebf\u56db\u5343\u4e94\u767e\u516d\u5341\u4e03\u4e07\u516b\u5343\u4e5d\u767e\u96f6\u4e00&#x27;, num=12345678901, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e00\u5343\u4e24\u767e\u4e09\u5341\u56db\u4ebf\u4e94\u5343\u516d\u767e\u4e03\u5341\u516b\u4e07\u4e5d\u5343\u96f6\u4e00&#x27;, num=123456789001, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=True, num2cn=None), TestData(cn=&#x27;\u70b9\u56db\u4e94&#x27;, num=0.45, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=&#x27;\u96f6\u70b9\u56db\u4e94&#x27;), TestData(cn=&#x27;\u96f6\u70b9\u56db\u4e94&#x27;, num=0.45, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e09\u70b9\u56db&#x27;, num=3.4, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e8c\u5343\u4e07\u96f6\u4e00\u767e\u516b\u5341\u4e94&#x27;, num=20000185, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=None), TestData(cn=&#x27;\u4e24\u5343\u4e07\u4e00\u767e\u516b\u5341\u4e94&#x27;, num=20000185, num_type=&#x27;mid&#x27;, alt_0=False, alt_2=False, num2cn=&#x27;\u4e8c\u5343\u4e07\u96f6\u4e00\u767e\u516b\u5341\u4e94&#x27;)]"}, {"fullname": "test.test_pycnnum.test_cn2num", "modulename": "test.test_pycnnum", "qualname": "test_cn2num", "kind": "function", "doc": "<p>Test cn2num</p>\n\n<ul>\n<li>Test if <code>td.cn</code> is converted to <code>td.num</code></li>\n<li>If <code>td.num2cn</code> is not <code>None</code>, test if <code>td.num2cn</code> is converted to <code>td.num</code></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>td (TestData):</strong>  Test data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">td</span><span class=\"p\">:</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">test_pycnnum</span><span class=\"o\">.</span><span class=\"n\">TestData</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "test.test_pycnnum.test_num2cn", "modulename": "test.test_pycnnum", "qualname": "test_num2cn", "kind": "function", "doc": "<p>Test num2cn</p>\n\n<ul>\n<li>Test if <code>td.num</code> is converted to <code>td.cn</code></li>\n<li>Test if <code>str(td.num)</code> is converted to <code>td.cn</code></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>td (TestData):</strong>  Test data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">td</span><span class=\"p\">:</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">test_pycnnum</span><span class=\"o\">.</span><span class=\"n\">TestData</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();