from typing import overload

class Parameter:
    def __init__(self, *args, **kwargs) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""

class VQCResult:
    def __init__(self) -> None:
        """__init__(self: vqcircuit.vqcircuit.VQCResult) -> None


        @brief Default constructor for the VQCircuitResult class.
        @details This constructor initializes a new instance of the VQCircuitResult class. The VQCircuitResult class is used to store and manage a collection of QCircuit objects generated by a VQCircuit.
            
        """
    def at(self, *args, **kwargs):
        """at(self: vqcircuit.vqcircuit.VQCResult, idxs: list[int]) -> QPanda3::QCircuit


        @brief Accesses a QCircuit object at a specified index.
        @details This method retrieves a reference to the QCircuit object at the specified index, which is determined by the provided vector of qubit indices. The vector should contain the indices of the qubits that correspond to the desired QCircuit.
        @param idxs the specified index
        @return a reference to the QCircuit object at the specified index
            
        """
    def expval_at(self, idxs: list[int]) -> float:
        """expval_at(self: vqcircuit.vqcircuit.VQCResult, idxs: list[int]) -> float


        @brief Calculates the expectation value of a QCircuit object at a specified index.
        @param idxs the specified index
        @return the expectation value of a QCircuit object at a specified index.
            
        """
    @overload
    def expval_hamiltonian(self, hamiltonian, shots: int, model, used_threads: int = ..., backend: str = ...) -> list[float]:
        '''expval_hamiltonian(*args, **kwargs)
        Overloaded function.

        1. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Hamiltonian.

        @details This function evaluates the expectation value of a Hamiltonian on a quantum state.
        The expectation value is computed based on the specified number of shots and can
        optionally incorporate a noise model to simulate real-world conditions.

        @param Ham The Hamiltonian for which the expectation value is to be computed.
        @param shots The number of measurements to perform. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values
        of the Hamiltonian terms.
            

        2. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Hamiltonian.

        @details This function evaluates the expectation value of a Hamiltonian on a quantum state.
        The expectation value is computed based on the specified number of shots and can
        optionally incorporate a noise model to simulate real-world conditions.

        @param Ham The Hamiltonian for which the expectation value is to be computed.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values
        of the Hamiltonian terms.
            

        3. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, idx_s: list[int], shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Hamiltonian.

        @details This function computes the expectation value for a subset of terms in a given Hamiltonian,
        as specified by the indices provided. The computation can optionally include a noise model
        and is performed based on the number of shots specified.

        @param Ham The Hamiltonian containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Hamiltonian to evaluate.
        @param shots The number of measurements to perform for each term. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A double representing the combined expectation value of the specified Hamiltonian terms.
            

        4. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, idx_s: list[int], used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Hamiltonian.

        @details This function computes the expectation value for a subset of terms in a given Hamiltonian,
        as specified by the indices provided. The computation can optionally include a noise model
        and is performed based on the number of shots specified.

        @param Ham The Hamiltonian containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Hamiltonian to evaluate.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A double representing the combined expectation value of the specified Hamiltonian terms.
            
        '''
    @overload
    def expval_hamiltonian(self, hamiltonian, used_threads: int = ..., backend: str = ...) -> list[float]:
        '''expval_hamiltonian(*args, **kwargs)
        Overloaded function.

        1. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Hamiltonian.

        @details This function evaluates the expectation value of a Hamiltonian on a quantum state.
        The expectation value is computed based on the specified number of shots and can
        optionally incorporate a noise model to simulate real-world conditions.

        @param Ham The Hamiltonian for which the expectation value is to be computed.
        @param shots The number of measurements to perform. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values
        of the Hamiltonian terms.
            

        2. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Hamiltonian.

        @details This function evaluates the expectation value of a Hamiltonian on a quantum state.
        The expectation value is computed based on the specified number of shots and can
        optionally incorporate a noise model to simulate real-world conditions.

        @param Ham The Hamiltonian for which the expectation value is to be computed.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values
        of the Hamiltonian terms.
            

        3. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, idx_s: list[int], shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Hamiltonian.

        @details This function computes the expectation value for a subset of terms in a given Hamiltonian,
        as specified by the indices provided. The computation can optionally include a noise model
        and is performed based on the number of shots specified.

        @param Ham The Hamiltonian containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Hamiltonian to evaluate.
        @param shots The number of measurements to perform for each term. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A double representing the combined expectation value of the specified Hamiltonian terms.
            

        4. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, idx_s: list[int], used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Hamiltonian.

        @details This function computes the expectation value for a subset of terms in a given Hamiltonian,
        as specified by the indices provided. The computation can optionally include a noise model
        and is performed based on the number of shots specified.

        @param Ham The Hamiltonian containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Hamiltonian to evaluate.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A double representing the combined expectation value of the specified Hamiltonian terms.
            
        '''
    @overload
    def expval_hamiltonian(self, hamiltonian, idx_s: list[int], shots: int, model, used_threads: int = ..., backend: str = ...) -> float:
        '''expval_hamiltonian(*args, **kwargs)
        Overloaded function.

        1. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Hamiltonian.

        @details This function evaluates the expectation value of a Hamiltonian on a quantum state.
        The expectation value is computed based on the specified number of shots and can
        optionally incorporate a noise model to simulate real-world conditions.

        @param Ham The Hamiltonian for which the expectation value is to be computed.
        @param shots The number of measurements to perform. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values
        of the Hamiltonian terms.
            

        2. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Hamiltonian.

        @details This function evaluates the expectation value of a Hamiltonian on a quantum state.
        The expectation value is computed based on the specified number of shots and can
        optionally incorporate a noise model to simulate real-world conditions.

        @param Ham The Hamiltonian for which the expectation value is to be computed.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values
        of the Hamiltonian terms.
            

        3. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, idx_s: list[int], shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Hamiltonian.

        @details This function computes the expectation value for a subset of terms in a given Hamiltonian,
        as specified by the indices provided. The computation can optionally include a noise model
        and is performed based on the number of shots specified.

        @param Ham The Hamiltonian containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Hamiltonian to evaluate.
        @param shots The number of measurements to perform for each term. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A double representing the combined expectation value of the specified Hamiltonian terms.
            

        4. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, idx_s: list[int], used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Hamiltonian.

        @details This function computes the expectation value for a subset of terms in a given Hamiltonian,
        as specified by the indices provided. The computation can optionally include a noise model
        and is performed based on the number of shots specified.

        @param Ham The Hamiltonian containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Hamiltonian to evaluate.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A double representing the combined expectation value of the specified Hamiltonian terms.
            
        '''
    @overload
    def expval_hamiltonian(self, hamiltonian, idx_s: list[int], used_threads: int = ..., backend: str = ...) -> float:
        '''expval_hamiltonian(*args, **kwargs)
        Overloaded function.

        1. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Hamiltonian.

        @details This function evaluates the expectation value of a Hamiltonian on a quantum state.
        The expectation value is computed based on the specified number of shots and can
        optionally incorporate a noise model to simulate real-world conditions.

        @param Ham The Hamiltonian for which the expectation value is to be computed.
        @param shots The number of measurements to perform. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values
        of the Hamiltonian terms.
            

        2. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Hamiltonian.

        @details This function evaluates the expectation value of a Hamiltonian on a quantum state.
        The expectation value is computed based on the specified number of shots and can
        optionally incorporate a noise model to simulate real-world conditions.

        @param Ham The Hamiltonian for which the expectation value is to be computed.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values
        of the Hamiltonian terms.
            

        3. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, idx_s: list[int], shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Hamiltonian.

        @details This function computes the expectation value for a subset of terms in a given Hamiltonian,
        as specified by the indices provided. The computation can optionally include a noise model
        and is performed based on the number of shots specified.

        @param Ham The Hamiltonian containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Hamiltonian to evaluate.
        @param shots The number of measurements to perform for each term. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A double representing the combined expectation value of the specified Hamiltonian terms.
            

        4. expval_hamiltonian(self: vqcircuit.vqcircuit.VQCResult, hamiltonian: QPanda3::Hamiltonian, idx_s: list[int], used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Hamiltonian.

        @details This function computes the expectation value for a subset of terms in a given Hamiltonian,
        as specified by the indices provided. The computation can optionally include a noise model
        and is performed based on the number of shots specified.

        @param Ham The Hamiltonian containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Hamiltonian to evaluate.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default,but you can select "GPU").

        @return A double representing the combined expectation value of the specified Hamiltonian terms.
            
        '''
    @overload
    def expval_pauli_operator(self, pauli_operator, shots: int, model, used_threads: int = ..., backend: str = ...) -> list[float]:
        '''expval_pauli_operator(*args, **kwargs)
        Overloaded function.

        1. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Pauli operator.

        @details This function evaluates the expectation value of a Pauli operator on a quantum state.
        The result is returned as a vector of doubles, where each element corresponds to the
        expectation value for a specific measurement basis or configuration.

        @param pauli_operator The Pauli operator for which the expectation value is to be computed.
        @param shots The number of measurements to perform. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values.
            

        2. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Pauli operator.

        @details This function evaluates the expectation value of a Pauli operator on a quantum state.
        The result is returned as a vector of doubles, where each element corresponds to the
        expectation value for a specific measurement basis or configuration.

        @param pauli_operator The Pauli operator for which the expectation value is to be computed.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values.
            

        3. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, idx_s: list[int], shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Pauli operator.

        @details This function evaluates the expectation value for a subset of terms in a given Pauli operator,
        as specified by the indices provided. The computation can optionally include a noise model
        and is based on the number of shots specified.

        @param pauli_operator The Pauli operator containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Pauli operator to evaluate.
        @param shots The number of measurements to perform for each term. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A double representing the combined expectation value of the specified Pauli operator terms.
            

        4. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, idx_s: list[int], used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Pauli operator.

        @details This function evaluates the expectation value for a subset of terms in a given Pauli operator,
        as specified by the indices provided. The computation can optionally include a noise model
        and is based on the number of shots specified.

        @param pauli_operator The Pauli operator containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Pauli operator to evaluate.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A double representing the combined expectation value of the specified Pauli operator terms.
            
        '''
    @overload
    def expval_pauli_operator(self, pauli_operator, used_threads: int = ..., backend: str = ...) -> list[float]:
        '''expval_pauli_operator(*args, **kwargs)
        Overloaded function.

        1. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Pauli operator.

        @details This function evaluates the expectation value of a Pauli operator on a quantum state.
        The result is returned as a vector of doubles, where each element corresponds to the
        expectation value for a specific measurement basis or configuration.

        @param pauli_operator The Pauli operator for which the expectation value is to be computed.
        @param shots The number of measurements to perform. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values.
            

        2. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Pauli operator.

        @details This function evaluates the expectation value of a Pauli operator on a quantum state.
        The result is returned as a vector of doubles, where each element corresponds to the
        expectation value for a specific measurement basis or configuration.

        @param pauli_operator The Pauli operator for which the expectation value is to be computed.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values.
            

        3. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, idx_s: list[int], shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Pauli operator.

        @details This function evaluates the expectation value for a subset of terms in a given Pauli operator,
        as specified by the indices provided. The computation can optionally include a noise model
        and is based on the number of shots specified.

        @param pauli_operator The Pauli operator containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Pauli operator to evaluate.
        @param shots The number of measurements to perform for each term. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A double representing the combined expectation value of the specified Pauli operator terms.
            

        4. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, idx_s: list[int], used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Pauli operator.

        @details This function evaluates the expectation value for a subset of terms in a given Pauli operator,
        as specified by the indices provided. The computation can optionally include a noise model
        and is based on the number of shots specified.

        @param pauli_operator The Pauli operator containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Pauli operator to evaluate.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A double representing the combined expectation value of the specified Pauli operator terms.
            
        '''
    @overload
    def expval_pauli_operator(self, pauli_operator, idx_s: list[int], shots: int, model, used_threads: int = ..., backend: str = ...) -> float:
        '''expval_pauli_operator(*args, **kwargs)
        Overloaded function.

        1. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Pauli operator.

        @details This function evaluates the expectation value of a Pauli operator on a quantum state.
        The result is returned as a vector of doubles, where each element corresponds to the
        expectation value for a specific measurement basis or configuration.

        @param pauli_operator The Pauli operator for which the expectation value is to be computed.
        @param shots The number of measurements to perform. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values.
            

        2. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Pauli operator.

        @details This function evaluates the expectation value of a Pauli operator on a quantum state.
        The result is returned as a vector of doubles, where each element corresponds to the
        expectation value for a specific measurement basis or configuration.

        @param pauli_operator The Pauli operator for which the expectation value is to be computed.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values.
            

        3. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, idx_s: list[int], shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Pauli operator.

        @details This function evaluates the expectation value for a subset of terms in a given Pauli operator,
        as specified by the indices provided. The computation can optionally include a noise model
        and is based on the number of shots specified.

        @param pauli_operator The Pauli operator containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Pauli operator to evaluate.
        @param shots The number of measurements to perform for each term. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A double representing the combined expectation value of the specified Pauli operator terms.
            

        4. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, idx_s: list[int], used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Pauli operator.

        @details This function evaluates the expectation value for a subset of terms in a given Pauli operator,
        as specified by the indices provided. The computation can optionally include a noise model
        and is based on the number of shots specified.

        @param pauli_operator The Pauli operator containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Pauli operator to evaluate.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A double representing the combined expectation value of the specified Pauli operator terms.
            
        '''
    @overload
    def expval_pauli_operator(self, pauli_operator, idx_s: list[int], used_threads: int = ..., backend: str = ...) -> float:
        '''expval_pauli_operator(*args, **kwargs)
        Overloaded function.

        1. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Pauli operator.

        @details This function evaluates the expectation value of a Pauli operator on a quantum state.
        The result is returned as a vector of doubles, where each element corresponds to the
        expectation value for a specific measurement basis or configuration.

        @param pauli_operator The Pauli operator for which the expectation value is to be computed.
        @param shots The number of measurements to perform. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values.
            

        2. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, used_threads: int = 4, backend: str = \'CPU\') -> list[float]


        @brief Calculates the expectation value of a given Pauli operator.

        @details This function evaluates the expectation value of a Pauli operator on a quantum state.
        The result is returned as a vector of doubles, where each element corresponds to the
        expectation value for a specific measurement basis or configuration.

        @param pauli_operator The Pauli operator for which the expectation value is to be computed.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A reference to a vector of doubles containing the expectation values.
            

        3. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, idx_s: list[int], shots: int, model: QPanda3::NoiseModel, used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Pauli operator.

        @details This function evaluates the expectation value for a subset of terms in a given Pauli operator,
        as specified by the indices provided. The computation can optionally include a noise model
        and is based on the number of shots specified.

        @param pauli_operator The Pauli operator containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Pauli operator to evaluate.
        @param shots The number of measurements to perform for each term. Default is 1.
        @param model The noise model to apply during the simulation. Default is an empty (ideal) NoiseModel.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A double representing the combined expectation value of the specified Pauli operator terms.
            

        4. expval_pauli_operator(self: vqcircuit.vqcircuit.VQCResult, pauli_operator: QPanda3::PauliOperator, idx_s: list[int], used_threads: int = 4, backend: str = \'CPU\') -> float


        @brief Calculates the expectation value of specific terms in a Pauli operator.

        @details This function evaluates the expectation value for a subset of terms in a given Pauli operator,
        as specified by the indices provided. The computation can optionally include a noise model
        and is based on the number of shots specified.

        @param pauli_operator The Pauli operator containing the terms of interest.
        @param idx_s A vector of indices specifying which terms of the Pauli operator to evaluate.
        @param used_threads The number of threads to use for parallel computation. Default is 4.
        @param backend Specifies the backend for computation ("CPU" by default, but you can select "GPU").

        @return A double representing the combined expectation value of the specified Pauli operator terms.
            
        '''

class VQCircuit:
    def __init__(self) -> None:
        """__init__(self: vqcircuit.vqcircuit.VQCircuit) -> None


        @brief Constructs a new instance of the VariationalQuantumCircuit class.

        @details This constructor initializes a new empty instance of the VariationalQuantumCircuit class, ready for further configuration and use.
            
        """
    @overload
    def Param(self, idxs: list[int], emement_label: str) -> list[int]:
        """Param(*args, **kwargs)
        Overloaded function.

        1. Param(self: vqcircuit.vqcircuit.VQCircuit, idxs: list[int], emement_label: str) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            

        2. Param(self: vqcircuit.vqcircuit.VQCircuit, idxs: list[int]) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @return th position in the multi-dimensional array
            

        3. Param(self: vqcircuit.vqcircuit.VQCircuit, emement_label: str) -> list[int]


        @brief Retrieves the multidimensional array index for a variable parameter with a specified label.
        @details This method takes a label string for a variable parameter and returns the corresponding multidimensional array index.
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            
        """
    @overload
    def Param(self, idxs: list[int]) -> list[int]:
        """Param(*args, **kwargs)
        Overloaded function.

        1. Param(self: vqcircuit.vqcircuit.VQCircuit, idxs: list[int], emement_label: str) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            

        2. Param(self: vqcircuit.vqcircuit.VQCircuit, idxs: list[int]) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @return th position in the multi-dimensional array
            

        3. Param(self: vqcircuit.vqcircuit.VQCircuit, emement_label: str) -> list[int]


        @brief Retrieves the multidimensional array index for a variable parameter with a specified label.
        @details This method takes a label string for a variable parameter and returns the corresponding multidimensional array index.
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            
        """
    @overload
    def Param(self, emement_label: str) -> list[int]:
        """Param(*args, **kwargs)
        Overloaded function.

        1. Param(self: vqcircuit.vqcircuit.VQCircuit, idxs: list[int], emement_label: str) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            

        2. Param(self: vqcircuit.vqcircuit.VQCircuit, idxs: list[int]) -> list[int]


        @brief Retrieves the multi-dimensional array indices and associates a label with the corresponding parameter.
        @details This method takes a vector of indices (`idxs`) specifying a position in a multi-dimensional array, along with a label string (`element_label`) to identify the parameter at that position.It returns the provided indices and internally associates the label with the corresponding parameter.
        @param idxs a vector of indices specifying a position in a multi-dimensional array
        @return th position in the multi-dimensional array
            

        3. Param(self: vqcircuit.vqcircuit.VQCircuit, emement_label: str) -> list[int]


        @brief Retrieves the multidimensional array index for a variable parameter with a specified label.
        @details This method takes a label string for a variable parameter and returns the corresponding multidimensional array index.
        @param emement_label a label string to identify the parameter 
        @return th position in the multi-dimensional array
            
        """
    def disable_layer(self) -> None:
        """disable_layer(self: vqcircuit.vqcircuit.VQCircuit) -> None


        @brief Disables the layer mechanism for the variational quantum circuit.
        @details This method deactivates the layer mechanism, resulting in a variational quantum circuit (VQCircuit) that has the same structure as the ansatz,with parameters updated based on the input parameters.
            
        """
    def display_ansatz(self) -> None:
        """display_ansatz(self: vqcircuit.vqcircuit.VQCircuit) -> None


        @brief Displays the structure of the ansatz (variational quantum circuit).
        @details This method prints or otherwise displays the structure and components of the variational quantum circuit (ansatz) to the user.
            
        """
    def enable_layer(self) -> None:
        """enable_layer(self: vqcircuit.vqcircuit.VQCircuit) -> None


        @brief Enables the layer mechanism for the variational quantum circuit.
        @details This method activates a mechanism where the variational quantum circuit (VQCircuit) is composed of a series of sub-circuits,each with the same n-layer structure as the ansatz but potentially different parameters.
            
        """
    def get_Param_dims(self) -> list[int]:
        """get_Param_dims(self: vqcircuit.vqcircuit.VQCircuit) -> list[int]


        @brief Retrieves the dimension information of the `Param` object.
        @return returns a vector of size_t values representing the dimension sizes associated with the `Param` object.
            
        """
    def set_Param(self, dim_size_s: list[int], dim_label_s: list[str]) -> None:
        """set_Param(*args, **kwargs)
        Overloaded function.

        1. set_Param(self: vqcircuit.vqcircuit.VQCircuit, dim_size_s: list[int], dim_label_s: list[str]) -> None


        @brief Sets the dimension sizes and labels for the `Param` object.
        @details This method allows the user to specify both the dimension sizes and corresponding labels for the `Param` object.
        @param dim_size_s a vector with dim's sizes
        @param dim_label_s a vector with dim's labels
            

        2. set_Param(self: vqcircuit.vqcircuit.VQCircuit, dim_size_s: list[int]) -> None


        @brief Sets the dimension sizes for the `Param` object.
        @details This method allows the user to specify the dimension sizes for the `Param` object using a vector of size_t values.
        @param dim_size_s a vector with dim's sizes
            
        """
    def __call__(self, *args, **kwargs):
        """__call__(self: vqcircuit.vqcircuit.VQCircuit, params: numpy.ndarray[numpy.float64]) -> QPanda3::VQCircuitResult


        @brief Applies parameter values to the variational quantum circuit and evaluates it.
        @details This method applies the provided parameter values (`data`) to the variational quantum circuit, considering the specified dimension sizes (`dim_size_s`). operator (`<<`). The variational quantum gate to be inserted is specified as the parameter `vqgate`.It then evaluates the circuit and returns the result as a `VQCircuitResult` object.
        @param params a numpy.ndarray object with all params to generate QCircuit objects
            
        """
    @overload
    def __lshift__(self, qgate) -> VQCircuit:
        """__lshift__(*args, **kwargs)
        Overloaded function.

        1. __lshift__(self: vqcircuit.vqcircuit.VQCircuit, qgate: QPanda3::QGate) -> vqcircuit.vqcircuit.VQCircuit


        @brief Inserts a quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of quantum gates into the variational quantum circuit using the stream insertion operator (`<<`). The quantum 
        @param qgate the quantum gate will be inserted to the variational quantum circuit,the qgate is with fixed params or without pparams gate to be inserted is specified as the parameter `qgate`.
            

        2. __lshift__(self: vqcircuit.vqcircuit.VQCircuit, qcircuit: QPanda3::QCircuit) -> vqcircuit.vqcircuit.VQCircuit


        @brief Inserts a quantum circuit into the variational quantum circuit.
        @details This operator overload allows for the insertion of a complete quantum circuit into the variational quantum circuit using the stream insertion operator (`<<`). The quantum circuit to be inserted is specified as the parameter `qcircuit`
        @param qcircuit the quantum qcircuit will be inserted to the variational quantum circuit,its gates are with fixed params or without params gate to be inserted.
            

        3. __lshift__(self: vqcircuit.vqcircuit.VQCircuit, vqgate: tuple[QPanda3::VariationalQuantumGate, list[Union[float, list[int]]]]) -> vqcircuit.vqcircuit.VQCircuit


        @brief Inserts a variational quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of a variational quantum gate into the variational quantum circuit using the stream insertion operator (`<<`). The variational quantum gate to be inserted is specified as the parameter `vqgate`.
        @param vqgate a variational quantum gate object
            
        """
    @overload
    def __lshift__(self, qcircuit) -> VQCircuit:
        """__lshift__(*args, **kwargs)
        Overloaded function.

        1. __lshift__(self: vqcircuit.vqcircuit.VQCircuit, qgate: QPanda3::QGate) -> vqcircuit.vqcircuit.VQCircuit


        @brief Inserts a quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of quantum gates into the variational quantum circuit using the stream insertion operator (`<<`). The quantum 
        @param qgate the quantum gate will be inserted to the variational quantum circuit,the qgate is with fixed params or without pparams gate to be inserted is specified as the parameter `qgate`.
            

        2. __lshift__(self: vqcircuit.vqcircuit.VQCircuit, qcircuit: QPanda3::QCircuit) -> vqcircuit.vqcircuit.VQCircuit


        @brief Inserts a quantum circuit into the variational quantum circuit.
        @details This operator overload allows for the insertion of a complete quantum circuit into the variational quantum circuit using the stream insertion operator (`<<`). The quantum circuit to be inserted is specified as the parameter `qcircuit`
        @param qcircuit the quantum qcircuit will be inserted to the variational quantum circuit,its gates are with fixed params or without params gate to be inserted.
            

        3. __lshift__(self: vqcircuit.vqcircuit.VQCircuit, vqgate: tuple[QPanda3::VariationalQuantumGate, list[Union[float, list[int]]]]) -> vqcircuit.vqcircuit.VQCircuit


        @brief Inserts a variational quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of a variational quantum gate into the variational quantum circuit using the stream insertion operator (`<<`). The variational quantum gate to be inserted is specified as the parameter `vqgate`.
        @param vqgate a variational quantum gate object
            
        """
    @overload
    def __lshift__(self, vqgate) -> VQCircuit:
        """__lshift__(*args, **kwargs)
        Overloaded function.

        1. __lshift__(self: vqcircuit.vqcircuit.VQCircuit, qgate: QPanda3::QGate) -> vqcircuit.vqcircuit.VQCircuit


        @brief Inserts a quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of quantum gates into the variational quantum circuit using the stream insertion operator (`<<`). The quantum 
        @param qgate the quantum gate will be inserted to the variational quantum circuit,the qgate is with fixed params or without pparams gate to be inserted is specified as the parameter `qgate`.
            

        2. __lshift__(self: vqcircuit.vqcircuit.VQCircuit, qcircuit: QPanda3::QCircuit) -> vqcircuit.vqcircuit.VQCircuit


        @brief Inserts a quantum circuit into the variational quantum circuit.
        @details This operator overload allows for the insertion of a complete quantum circuit into the variational quantum circuit using the stream insertion operator (`<<`). The quantum circuit to be inserted is specified as the parameter `qcircuit`
        @param qcircuit the quantum qcircuit will be inserted to the variational quantum circuit,its gates are with fixed params or without params gate to be inserted.
            

        3. __lshift__(self: vqcircuit.vqcircuit.VQCircuit, vqgate: tuple[QPanda3::VariationalQuantumGate, list[Union[float, list[int]]]]) -> vqcircuit.vqcircuit.VQCircuit


        @brief Inserts a variational quantum gate into the variational quantum circuit.
        @details This operator overload allows for the insertion of a variational quantum gate into the variational quantum circuit using the stream insertion operator (`<<`). The variational quantum gate to be inserted is specified as the parameter `vqgate`.
        @param vqgate a variational quantum gate object
            
        """
