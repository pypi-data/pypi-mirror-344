# Copyright 2025 Rahul Kaushal
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
from dataclasses import dataclass, field
from typing import Any, Optional, Union
from ..utils import generate_test_value


@dataclass
class Parameter:
    """Represents an API parameter."""

    name: str
    location: str  # 'path', 'query', 'header', 'cookie'
    required: bool = False
    type: str = "string"
    format: Optional[str] = None
    description: Optional[str] = None
    enum: list[Any] = field(default_factory=list)
    example: Optional[Any] = None
    pattern: Optional[str] = None
    min_length: Optional[int] = None
    max_length: Optional[int] = None
    minimum: Optional[Union[int, float]] = None
    maximum: Optional[Union[int, float]] = None
    schema: Optional[dict[str, Any]] = None

    def __post_init__(self):
        """Apply defaults only when values are None."""
        if self.example is None:
            self.example = generate_example_value(self)


def generate_example_value(parameter: Parameter) -> Any:
    """
    Generate an example value for a parameter based on its type, location, and constraints.

    Args:
        parameter (Parameter): The parameter object.

    Returns:
        Any: A suitable example value for the parameter that meets all constraints.
    """
    location_handlers = {
        "path": generate_path_parameter_value,
        "query": generate_query_parameter_value,
        "header": generate_header_parameter_value,
        "cookie": generate_cookie_parameter_value,
    }

    handler = location_handlers.get(parameter.location)
    return handler(parameter) if handler else "default"


def generate_path_parameter_value(parameter: Parameter) -> Any:
    """
    Generate an example value for a path parameter.

    Args:
        parameter (Parameter): The path parameter object.

    Returns:
        Any: A suitable example value for the path parameter.
    """
    if parameter.type == "string":
        return (
            random.choice(parameter.enum)  # nosec
            if parameter.enum
            else generate_test_value(
                pattern=parameter.pattern or r"[a-z]+",
                min_length=parameter.min_length or 3,
                max_length=parameter.max_length or 50,
            )
        )
    elif parameter.type in ["integer", "number"]:
        return random.randint(1, 100)  # nosec

    return "default"


def generate_query_parameter_value(parameter: Parameter) -> Any:
    """
    Generate an example value for a query parameter.

    Args:
        parameter (Parameter): The query parameter object.

    Returns:
        Any: A suitable example value for the query parameter.
    """
    type_handlers = {
        "string": generate_string_query_value,
        "boolean": lambda p: random.choice(["true", "false"]),  # nosec
        "integer": lambda p: str(generate_numeric_value(p, True)),
        "number": lambda p: str(generate_numeric_value(p, False)),
    }

    handler = type_handlers.get(parameter.type)
    return handler(parameter) if handler else "default"


def generate_header_parameter_value(parameter: Parameter) -> Any:
    """
    Generate an example value for a header parameter.

    Args:
        parameter (Parameter): The header parameter object.

    Returns:
        Any: A suitable example value for the header parameter.
    """
    if parameter.type == "string":
        if parameter.enum:
            return random.choice(parameter.enum)  # nosec

        # Common header formats
        if parameter.name and parameter.name.lower() in ["accept", "content-type"]:
            return "application/json"
        elif parameter.name and parameter.name.lower() == "authorization":
            return "Bearer example-token"

        return generate_test_value(
            pattern=parameter.pattern or r"[A-Za-z0-9\-]+",
            min_length=parameter.min_length or 5,
            max_length=parameter.max_length or 50,
        )
    elif parameter.type in ["integer", "number"]:
        return str(generate_numeric_value(parameter, parameter.type == "integer"))

    return "example-header-value"


def generate_cookie_parameter_value(parameter: Parameter) -> Any:
    """
    Generate an example value for a cookie parameter.

    Args:
        parameter (Parameter): The cookie parameter object.

    Returns:
        Any: A suitable example value for the cookie parameter.
    """
    if parameter.type == "string":
        if parameter.enum:
            return random.choice(parameter.enum)  # nosec

        # Common cookie names
        if parameter.name and parameter.name.lower() in ["session", "sessionid"]:
            return "session123"
        elif parameter.name and parameter.name.lower() == "token":
            return "example-token-value"

        return generate_test_value(
            pattern=parameter.pattern or r"[A-Za-z0-9]+",
            min_length=parameter.min_length or 5,
            max_length=parameter.max_length or 30,
        )
    elif parameter.type in ["integer", "number"]:
        return str(generate_numeric_value(parameter, parameter.type == "integer"))

    return "example-cookie-value"


def generate_string_query_value(parameter: Parameter) -> Optional[str]:
    """
    Generate an example string value for a query parameter.

    Args:
        parameter (Parameter): The string query parameter object.

    Returns:
        str: A suitable example string value.
    """
    if parameter.enum:
        return random.choice(parameter.enum)  # nosec

    # Handle special formats
    format_handlers = {
        "date": lambda: "2025-03-06",
        "date-time": lambda: "2025-03-06T12:30:00Z",
    }

    if parameter.format in format_handlers:
        return format_handlers[parameter.format]()

    return generate_test_value(
        pattern=parameter.pattern or r"[a-z]+",
        min_length=parameter.min_length or 3,
        max_length=parameter.max_length or 50,
    )


def generate_numeric_value(parameter: Parameter, is_integer: bool) -> Union[int, float]:
    """
    Generate a numeric example value within the given constraints.

    Args:
        parameter (Parameter): The numeric parameter object.
        is_integer (bool): Whether the value should be an integer or float.

    Returns:
        Union[int, float]: A suitable numeric value.
    """
    min_val = (
        parameter.minimum
        if parameter.minimum is not None
        else (1 if is_integer else 1.0)
    )
    max_val = (
        parameter.maximum
        if parameter.maximum is not None
        else (100 if is_integer else 100.0)
    )

    if is_integer:
        return int(random.randint(int(min_val), int(max_val)))  # nosec
    else:
        return round(random.uniform(float(min_val), float(max_val)), 2)  # nosec
