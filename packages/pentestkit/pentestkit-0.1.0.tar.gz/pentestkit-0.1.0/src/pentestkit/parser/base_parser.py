# Copyright 2025 Rahul Kaushal
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Base Parser module for API specifications.
"""

import json
import logging
import requests
import urllib.error
import urllib.parse
from enum import Enum
from abc import ABC, abstractmethod
from typing import Any, Optional, Union
from ..dataclasses import Endpoint


class ParserError(Exception):
    """Base exception for parser errors."""

    pass


class SpecFormat(Enum):
    """Supported API specification formats."""

    OPENAPI_V2 = "swagger"
    OPENAPI_V3 = "openapi"
    UNKNOWN = "unknown"


class BaseParser(ABC):
    """Base class for API parsers."""

    def __init__(self, source: Union[str, dict[str, Any]]):
        """
        Initialize the BaseParser with a source.

        Args:
            source: Can be one of the following:
            - A dictionary containing the API specification
            - A URL pointing to a JSON API specification
            - A file path to a JSON API specification file

        Raises:
            ParserError: If the specification cannot be loaded or parsed
        """
        self.logger = logging.getLogger(self.__class__.__name__)
        self.endpoints: list[Endpoint] = []
        self.spec: dict[str, Any] = self._load_spec(source)
        self.servers: list[str] = []
        self.security_schemes: dict[str, dict[str, Any]] = {}

        # Parse the specification immediately upon initialization
        self._parse()

    @abstractmethod
    def _parse(self) -> None:
        """
        Internal method to parse the specification and populate endpoints.
        This method should set self._endpoints.
        """
        pass

    @abstractmethod
    def get_format(self) -> SpecFormat:
        """Get the format of the API specification."""
        pass

    def get_base_url(self) -> Optional[str]:
        """Get the base URL of the API."""
        return self.servers[0] if self.servers else None

    def _load_spec(self, source: Union[str, dict[str, Any]]) -> dict[str, Any]:
        """
        Load the API specification from various sources.

        Args:
            source: Can be one of the following:
                - A dictionary containing the API specification
                - A URL pointing to a JSON API specification
                - A file path to a JSON API specification file

        Returns:
            A dictionary containing the API specification

        Raises:
            ParserError: If the specification cannot be loaded or parsed
        """
        # If source is already a dictionary, return it directly
        if isinstance(source, dict):
            return source

        try:
            # Parse the URL or file path
            parsed_url = urllib.parse.urlparse(source)

            # Supported web protocols
            web_protocols = ["http", "https", "ftp", "sftp"]

            # Check if it's a URL
            if parsed_url.scheme in web_protocols and parsed_url.netloc:
                try:
                    response = requests.get(source, timeout=30)
                    response.raise_for_status()
                    return response.json()
                except requests.RequestException as e:
                    raise ParserError(f"Failed to fetch specification from URL: {e}")

            # Check if it's a local file path
            try:
                with open(source, "r") as file:
                    return json.load(file)
            except FileNotFoundError:
                raise ParserError(f"File not found: {source}")
            except json.JSONDecodeError as e:
                raise ParserError(f"Invalid JSON in file: {e}")

        except Exception as e:
            self.logger.error(f"Failed to load API specification: {e}")
            raise ParserError(f"Failed to load API specification: {e}")
