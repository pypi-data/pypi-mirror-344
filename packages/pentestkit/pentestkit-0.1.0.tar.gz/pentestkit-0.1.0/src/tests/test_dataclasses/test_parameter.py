import re
from ...pentestkit.dataclasses.parameter import (
    Parameter,
    generate_test_value,
    generate_example_value,
)


# Test cases for generate_test_value
def test_generate_test_value_valid_pattern():
    pattern = r"[a-z]{5}"
    min_length = 5
    max_length = 5
    value = generate_test_value(pattern, min_length, max_length)
    assert value is not None
    assert len(value) == 5
    assert bool(re.fullmatch(pattern, value))


def test_generate_test_value_invalid_pattern():
    pattern = r"[a-z]{5}"
    min_length = 6
    max_length = 10
    value = generate_test_value(pattern, min_length, max_length)
    assert value is "example"


# Test cases for generate_example_value - generate_path_parameter_value
def test_generate_path_parameter_value_string_without_pattern():
    param = Parameter(name="id", location="path", type="string")
    value = generate_example_value(param)
    assert len(value) >= 3
    assert len(value) <= 50
    assert bool(re.fullmatch(r"[a-z]+", value))


def test_generate_path_parameter_value_string_with_pattern():
    pattern = r"^\d{3}-\d{3}-\d{4}$"
    param = Parameter(name="id", location="path", type="string", pattern=pattern)
    value = generate_example_value(param)
    assert len(value) >= 3
    assert len(value) <= 50
    assert bool(re.fullmatch(pattern, value))


def test_generate_path_parameter_value_string_with_enum():
    possible_values = ["value-1", "value-2", "value-3"]
    param = Parameter(name="id", location="path", type="string", enum=possible_values)
    value = generate_example_value(param)
    assert value in possible_values


def test_generate_path_parameter_value_integer():
    param = Parameter(name="id", location="path", type="integer")
    value = generate_example_value(param)
    assert isinstance(value, int)
    assert 1 <= value <= 100


def test_generate_path_parameter_value_number():
    param = Parameter(name="id", location="path", type="number")
    value = generate_example_value(param)
    assert isinstance(value, int)
    assert 1 <= value <= 100


def test_generate_path_parameter_value_object():
    param = Parameter(name="id", location="path", type="object")
    value = generate_example_value(param)
    assert value == "default"


# Test cases for generate_example_value - generate_query_parameter_value
def test_generate_query_parameter_value_string_without_pattern():
    param = Parameter(name="query", location="query", type="string")
    value = generate_example_value(param)
    assert len(value) >= 3
    assert len(value) <= 50
    assert bool(re.fullmatch(r"[a-z]+", value))


def test_generate_query_parameter_value_string_with_pattern():
    pattern = r"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
    param = Parameter(name="query", location="query", type="string", pattern=pattern)
    value = generate_example_value(param)
    assert len(value) >= 3
    assert len(value) <= 50
    assert bool(re.fullmatch(pattern, value))


def test_generate_query_parameter_value_string_with_enum():
    possible_values = ["value-1", "value-2", "value-3"]
    param = Parameter(
        name="query", location="query", type="string", enum=possible_values
    )
    value = generate_example_value(param)
    assert value in possible_values


def test_generate_query_parameter_value_string_with_date_format():
    param = Parameter(name="query", location="query", type="string", format="date")
    value = generate_example_value(param)
    assert value == "2025-03-06"


def test_generate_query_parameter_value_string_with_datetime_format():
    param = Parameter(name="query", location="query", type="string", format="date-time")
    value = generate_example_value(param)
    assert value == "2025-03-06T12:30:00Z"


def test_generate_query_parameter_value_boolean():
    param = Parameter(name="flag", location="query", type="boolean")
    value = generate_example_value(param)
    assert value in ["true", "false"]


def test_generate_query_parameter_value_integer_without_constraints():
    param = Parameter(name="count", location="query", type="integer")
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert value.isdigit()
    assert 1 <= int(value) <= 100


def test_generate_query_parameter_value_integer_with_constraints():
    param = Parameter(
        name="count", location="query", type="integer", minimum=20, maximum=50
    )
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert value.isdigit()
    assert 20 <= int(value) <= 50


def test_generate_query_parameter_value_number_without_constraints():
    param = Parameter(name="count", location="query", type="number")
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert 1.0 <= float(value) <= 100.0


def test_generate_query_parameter_value_number_with_constraints():
    param = Parameter(
        name="count", location="query", type="number", minimum=20, maximum=50
    )
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert 20.0 <= float(value) <= 50.0


def test_generate_query_parameter_value_object():
    param = Parameter(name="count", location="query", type="object")
    value = generate_example_value(param)
    assert value == "default"


# Test cases for generate_example_value - generate_header_parameter_value
def test_generate_header_parameter_value_string_with_enum():
    possible_values = ["value-1", "value-2", "value-3"]
    param = Parameter(
        name="Authorization", location="header", type="string", enum=possible_values
    )
    value = generate_example_value(param)
    assert value in possible_values


def test_generate_header_parameter_value_string_accept():
    param = Parameter(name="accept", location="header", type="string")
    value = generate_example_value(param)
    assert value == "application/json"


def test_generate_header_parameter_value_string_content_type():
    param = Parameter(name="content-type", location="header", type="string")
    value = generate_example_value(param)
    assert value == "application/json"


def test_generate_header_parameter_value_string_authorization():
    param = Parameter(name="authorization", location="header", type="string")
    value = generate_example_value(param)
    assert value == "Bearer example-token"


def test_generate_header_parameter_value_string_without_pattern():
    param = Parameter(name="header", location="header", type="string")
    value = generate_example_value(param)
    assert len(value) >= 3
    assert len(value) <= 50
    assert bool(re.fullmatch(r"[A-Za-z0-9\-]+", value))


def test_generate_header_parameter_value_string_with_pattern():
    pattern = r"\b\w+ing\b"
    param = Parameter(name="header", location="header", type="string", pattern=pattern)
    value = generate_example_value(param)
    assert len(value) >= 3
    assert len(value) <= 50
    assert bool(re.fullmatch(pattern, value))


def test_generate_header_parameter_value_integer_without_constraints():
    param = Parameter(name="count", location="header", type="integer")
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert value.isdigit()
    assert 1 <= int(value) <= 100


def test_generate_header_parameter_value_integer_with_constraints():
    param = Parameter(
        name="count", location="header", type="integer", minimum=20, maximum=50
    )
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert value.isdigit()
    assert 20 <= int(value) <= 50


def test_generate_header_parameter_value_number_without_constraints():
    param = Parameter(name="count", location="header", type="number")
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert 1.0 <= float(value) <= 100.0


def test_generate_header_parameter_value_number_with_constraints():
    param = Parameter(
        name="count", location="header", type="number", minimum=20, maximum=50
    )
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert 20.0 <= float(value) <= 50.0


def test_generate_header_parameter_value_object():
    param = Parameter(name="count", location="header", type="object")
    value = generate_example_value(param)
    assert value == "example-header-value"


# Test cases for generate_example_value - generate_cookie_parameter_value
def test_generate_cookie_parameter_value_string_with_enum():
    possible_values = ["value-1", "value-2", "value-3"]
    param = Parameter(
        name="cookie", location="cookie", type="string", enum=possible_values
    )
    value = generate_example_value(param)
    assert value in possible_values


def test_generate_cookie_parameter_value_string_session():
    param = Parameter(name="session", location="cookie", type="string")
    value = generate_example_value(param)
    assert value == "session123"


def test_generate_cookie_parameter_value_string_sessionid():
    param = Parameter(name="sessionid", location="cookie", type="string")
    value = generate_example_value(param)
    assert value == "session123"


def test_generate_cookie_parameter_value_string_token():
    param = Parameter(name="token", location="cookie", type="string")
    value = generate_example_value(param)
    assert value == "example-token-value"


def test_generate_cookie_parameter_value_string_without_pattern():
    param = Parameter(name="cookie", location="cookie", type="string")
    value = generate_example_value(param)
    assert len(value) >= 3
    assert len(value) <= 50
    assert bool(re.fullmatch(r"[A-Za-z0-9\-]+", value))


def test_generate_cookie_parameter_value_string_with_pattern():
    pattern = r"\b\w+ing\b"
    param = Parameter(name="cookie", location="cookie", type="string", pattern=pattern)
    value = generate_example_value(param)
    assert len(value) >= 3
    assert len(value) <= 50
    assert bool(re.fullmatch(pattern, value))


def test_generate_cookie_parameter_value_integer_without_constraints():
    param = Parameter(name="count", location="cookie", type="integer")
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert value.isdigit()
    assert 1 <= int(value) <= 100


def test_generate_cookie_parameter_value_integer_with_constraints():
    param = Parameter(
        name="count", location="cookie", type="integer", minimum=20, maximum=50
    )
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert value.isdigit()
    assert 20 <= int(value) <= 50


def test_generate_cookie_parameter_value_number_without_constraints():
    param = Parameter(name="count", location="cookie", type="number")
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert 1.0 <= float(value) <= 100.0


def test_generate_cookie_parameter_value_number_with_constraints():
    param = Parameter(
        name="count", location="cookie", type="number", minimum=20, maximum=50
    )
    value = generate_example_value(param)
    assert isinstance(value, str)
    assert 20.0 <= float(value) <= 50.0


def test_generate_cookie_parameter_value_object():
    param = Parameter(name="count", location="cookie", type="object")
    value = generate_example_value(param)
    assert value == "example-cookie-value"


# Test cases for generate_example_value - edge case scenario
def test_generate_example_value_object():
    param = Parameter(name="count", location="object", type="object")
    value = generate_example_value(param)
    assert value == "default"
