import os
import sys
from unittest.mock import patch, mock_open

# Add the parent directory to sys.path to allow importing the module
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import pentestkit


def test_version_variable_exists():
    """Test that __version__ variable exists."""
    assert hasattr(pentestkit, "__version__")
    assert isinstance(pentestkit.__version__, str)


@patch("os.path.join")
def test_version_file_not_found(mock_join):
    """Test handling of missing VERSION file."""
    mock_join.return_value = "nonexistent_path"

    # Reset the module to force version recalculation
    import importlib

    importlib.reload(pentestkit)

    assert pentestkit.__version__ == "0.0.0"


@patch("builtins.open", new_callable=mock_open, read_data="1.2.3\n")
@patch("os.path.join")
def test_version_file_read_success(mock_join, mock_file):
    """Test successful reading of VERSION file."""
    mock_join.return_value = "mock_path"

    # Reset the module to force version recalculation
    import importlib

    importlib.reload(pentestkit)

    assert pentestkit.__version__ == "1.2.3"


@patch("builtins.open")
@patch("os.path.join")
def test_version_file_read_exception(mock_join, mock_open):
    """Test handling of exceptions when reading VERSION file."""
    mock_join.return_value = "mock_path"
    mock_open.side_effect = Exception("Test exception")

    # Reset the module to force version recalculation
    import importlib

    with patch("builtins.print") as mock_print:
        importlib.reload(pentestkit)
        mock_print.assert_called_once()

    assert pentestkit.__version__ == "0.0.0"
