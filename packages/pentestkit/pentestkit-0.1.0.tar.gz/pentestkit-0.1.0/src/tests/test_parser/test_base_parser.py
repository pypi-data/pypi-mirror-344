import os
import json
import pytest
import requests
import tempfile
from unittest.mock import patch, MagicMock, mock_open
from ...pentestkit.dataclasses.endpoint import Endpoint
from ...pentestkit.parser.base_parser import BaseParser, SpecFormat, ParserError


class TestSpecFormat:
    def test_enum_values(self):
        """Test that SpecFormat enum has expected values."""
        assert SpecFormat.OPENAPI_V2.value == "swagger"
        assert SpecFormat.OPENAPI_V3.value == "openapi"
        assert SpecFormat.UNKNOWN.value == "unknown"


class MockParser(BaseParser):
    """Mock implementation of BaseParser for testing."""

    def _parse(self):
        """Implement parse method for testing."""
        self.endpoints = [Endpoint(path="/test", method="GET", operation_id="test_op")]

    def get_format(self) -> SpecFormat:
        return SpecFormat.UNKNOWN


class TestBaseParser:
    def test_init_with_dict(self):
        """Test initializing parser with a dictionary."""
        test_dict = {"key": "value"}
        parser = MockParser(test_dict)

        assert parser.spec == test_dict
        assert parser.endpoints == [
            Endpoint(path="/test", method="GET", operation_id="test_op")
        ]
        assert parser.servers == []
        assert parser.security_schemes == {}
        assert parser.logger is not None

    @patch("requests.get")
    @pytest.mark.parametrize("protocol", ["http", "https", "ftp", "sftp"])
    def test_init_from_url(self, mock_get, protocol):
        """Test initializing parser from URL."""
        mock_response = MagicMock()
        mock_response.json.return_value = {"info": {"title": "Test API"}}
        mock_get.return_value = mock_response

        mock_url = f"{protocol}://example.com/api.json"
        parser = MockParser(mock_url)

        mock_get.assert_called_once_with(mock_url, timeout=30)
        assert parser.spec == {"info": {"title": "Test API"}}
        assert parser.endpoints == [
            Endpoint(path="/test", method="GET", operation_id="test_op")
        ]

    @patch(
        "builtins.open",
        new_callable=mock_open,
        read_data='{"info": {"title": "Test API"}}',
    )
    def test_init_from_file(self, mock_file):
        """Test initializing parser from file."""
        parser = MockParser("api.json")

        mock_file.assert_called_once_with("api.json", "r")
        assert parser.spec == {"info": {"title": "Test API"}}
        assert parser.endpoints == [
            Endpoint(path="/test", method="GET", operation_id="test_op")
        ]

    def test_load_spec_unsupported_protocol(self):
        """Test loading spec with unsupported URL scheme."""
        with pytest.raises(ParserError) as excinfo:
            MockParser("gopher://example.com/api.json")

        assert "Failed to load API specification" in str(excinfo.value)

    @patch("requests.get")
    def test_load_spec_http_error(self, mock_get):
        """Test HTTP error when loading spec."""
        mock_get.side_effect = requests.RequestException("Connection error")

        with pytest.raises(ParserError) as excinfo:
            MockParser("https://example.com/api.json")

        assert "Failed to load API specification" in str(excinfo.value)
        assert "Failed to fetch specification from URL" in str(excinfo.value)
        assert "Connection error" in str(excinfo.value)

    def test_load_spec_file_not_found(self):
        """Test file not found error when loading spec."""
        with pytest.raises(ParserError) as excinfo:
            MockParser("nonexistent.json")

        assert "Failed to load API specification" in str(excinfo.value)
        assert "File not found" in str(excinfo.value)

    @patch("builtins.open", new_callable=mock_open, read_data="invalid json")
    def test_load_spec_json_error(self, mock_file):
        """Test JSON decode error when loading spec."""
        with pytest.raises(ParserError) as excinfo:
            MockParser("api.json")

        assert "Failed to load API specification" in str(excinfo.value)
        assert "Invalid JSON in file" in str(excinfo.value)

    def test_get_base_url_with_servers(self):
        """Test get_base_url with servers available."""
        parser = MockParser({"key": "value"})
        parser.servers = ["https://api.example.com", "https://dev-api.example.com"]
        assert parser.get_base_url() == "https://api.example.com"

    def test_get_base_url_no_servers(self):
        """Test get_base_url with no servers available."""
        parser = MockParser({"key": "value"})
        parser.servers = []
        assert parser.get_base_url() is None

    @patch("requests.get")
    def test_integration(self, mock_get):
        """Integration test for parsing an API spec."""
        mock_response = MagicMock()
        mock_response.json.return_value = {"info": {"title": "Test API"}}
        mock_get.return_value = mock_response

        parser = MockParser("https://example.com/api.json")

        assert len(parser.endpoints) == 1
        assert parser.endpoints[0].path == "/test"
        assert parser.endpoints[0].method == "GET"
        assert parser.endpoints[0].operation_id == "test_op"
        assert parser.get_format() == SpecFormat.UNKNOWN

    def test_with_real_temp_file(self):
        """Test loading spec from a real temporary file."""
        test_data = {"info": {"title": "Test API"}}

        with tempfile.NamedTemporaryFile(mode="w+", delete=False) as temp:
            json.dump(test_data, temp)
            temp_path = temp.name

        try:
            parser = MockParser(temp_path)
            assert parser.spec == test_data
        finally:
            os.unlink(temp_path)
