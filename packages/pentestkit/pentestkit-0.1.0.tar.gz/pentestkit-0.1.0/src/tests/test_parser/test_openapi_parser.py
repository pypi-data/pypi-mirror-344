import json
import pytest
from ...pentestkit.parser import OpenAPIParser, ParserError
from ..test_data.test_parser_constants import (
    PETSTORE_V2_EXPECTED_ENDPOINTS,
    PETSTORE_V3_EXPECTED_ENDPOINTS,
)


@pytest.fixture
def petstore_v2_data():
    with open("src/tests/test_data/petstore_swagger_v2.json", "r") as f:
        return json.load(f)


@pytest.fixture
def petstore_v3_data():
    with open("src/tests/test_data/petstore_swagger_v3.json", "r") as f:
        return json.load(f)


@pytest.fixture
def mock_parser():
    parser = OpenAPIParser()
    return parser


def test_parse_petstore_v2(petstore_v2_data):
    parser = OpenAPIParser(source=petstore_v2_data)
    extracted_endpoints = set()

    for endpoint in parser.endpoints:
        extracted_endpoints.add((endpoint.path, endpoint.method))

    assert len(parser.endpoints) == 20
    assert parser.format.value == "swagger"
    assert parser.get_base_url() == "https://petstore.swagger.io/v2"
    assert extracted_endpoints == PETSTORE_V2_EXPECTED_ENDPOINTS


def test_parse_petstore_v3(petstore_v3_data):
    parser = OpenAPIParser(source=petstore_v3_data)
    extracted_endpoints = set()

    for endpoint in parser.endpoints:
        extracted_endpoints.add((endpoint.path, endpoint.method))

    assert len(parser.endpoints) == 19
    assert parser.format.value == "openapi"
    assert parser.get_base_url() == "/api/v3"
    assert extracted_endpoints == PETSTORE_V3_EXPECTED_ENDPOINTS


def test_parse_unknown_format():
    with pytest.raises(ParserError) as excinfo:
        OpenAPIParser(source={"key": "value"})

    assert "Unsupported API specification format" in str(excinfo.value)


def test_extract_servers_fails_with_invalid_v3_server_data(petstore_v3_data):
    petstore_v3_data["servers"] = ([{"invalid_key": "invalid_value"}],)
    parser = OpenAPIParser(source=petstore_v3_data)

    assert parser.get_base_url() is None
    assert parser.servers == []


def test_extract_servers_fails_when_v2_host_missing(petstore_v2_data):
    del petstore_v2_data["host"]
    parser = OpenAPIParser(source=petstore_v2_data)

    assert parser.get_base_url() is None
    assert parser.servers == []


def test_extract_security_schemas_with_invalid_v3_components_data(petstore_v3_data):
    petstore_v3_data["components"] = None
    parser = OpenAPIParser(source=petstore_v3_data)

    assert parser.security_schemes == {}
