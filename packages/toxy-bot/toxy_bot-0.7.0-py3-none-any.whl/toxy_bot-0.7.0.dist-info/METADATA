Metadata-Version: 2.4
Name: toxy-bot
Version: 0.7.0
Summary: A trained Discord Bot to detect and handle toxic messages in text channels.
Author-email: anitamaxvim <107803921+anitamaxvim@users.noreply.github.com>
License-Expression: MIT
License-File: LICENSE
Requires-Python: >=3.11
Requires-Dist: comet-ml>=3.49.7
Requires-Dist: datasets>=3.5.0
Requires-Dist: discord>=2.3.2
Requires-Dist: hf-xet>=1.0.3
Requires-Dist: jsonargparse>=4.38.0
Requires-Dist: lightning-sdk>=0.2.11
Requires-Dist: lightning[pytorch-extra]>=2.5.1
Requires-Dist: litserve>=0.2.7
Requires-Dist: matplotlib>=3.10.1
Requires-Dist: numpy==1.24; sys_platform == 'darwin'
Requires-Dist: pydantic>=2.11.2
Requires-Dist: seaborn>=0.12.1
Requires-Dist: torch==2.2.2; sys_platform == 'darwin'
Requires-Dist: torch>=2.6.0; sys_platform != 'darwin'
Requires-Dist: torchvision==0.17.2; sys_platform == 'darwin'
Requires-Dist: torchvision>=0.21.0; sys_platform != 'darwin'
Requires-Dist: transformers<4.51.0
Description-Content-Type: text/markdown

# 1. Project Structure

```bash

Toxy-Bot/
│── data/                    # Store datasets (raw, processed)
│── models/                  # Trained models, checkpoints
│── src/
│   │── bot/                 # Discord bot logic
│   │── ml/                  # Machine learning pipeline
│   │── api/                 # FastAPI deployment
│   │── utils/               # Helper functions
│── notebooks/               # Jupyter notebooks for EDA, model training
│── requirements.txt         # Dependencies
│── config.yaml              # Configuration file
│── main.py                  # Entry point
│── README.md                # Project documentation
│── .env

```


# 2. Development Plan

**Phase 1**: Data Handling & Preprocessing ✅

    Download Kaggle dataset and store in data/
    Clean, preprocess (tokenization, padding, text augmentation)
    Train-test split

**Phase 2**: Model Building & Training

    Load pretrained BERT model
    Fine-tune it on the Kaggle dataset
    Evaluate performance (accuracy, F1-score)
    Save trained model in models/

**Phase 3**: API Deployment

    Use FastAPI to expose the trained model as an API
    Endpoint: /predict → Takes a message and returns toxicity score

**Phase 4**: Discord Bot Integration

    Use discord.py to set up the bot
    Connect bot to the FastAPI backend for toxicity detection
    Implement auto-moderation (warn, mute, ban users)

**Phase 5**: Testing & Deployment

    Deploy FastAPI using Docker + cloud hosting (AWS, GCP, etc.)
    Host the bot on a cloud VM (DigitalOcean, Heroku, etc.)
    Monitor bot performance, handle errors
