
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\basic\plot_basic_visualize.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_basic_plot_basic_visualize.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basic_plot_basic_visualize.py:


=========================================================
Visualize an ensemble classifier
=========================================================

This example illustrates how to quickly visualize an 
:mod:`imbens.ensemble` classifier with
the :mod:`imbens.visualizer` module.

This example uses:

    - :class:`imbens.ensemble.SelfPacedEnsembleClassifier`
    - :class:`imbens.visualizer.ImbalancedEnsembleVisualizer`

.. GENERATED FROM PYTHON SOURCE LINES 15-20

.. code-block:: default


    # Authors: Zhining Liu <zhining.liu@outlook.com>
    # License: MIT









.. GENERATED FROM PYTHON SOURCE LINES 21-35

.. code-block:: default

    print(__doc__)

    # Import imbalanced-ensemble
    import imbens

    # Import utilities
    import sklearn
    from sklearn.datasets import make_classification
    from sklearn.model_selection import train_test_split

    RANDOM_STATE = 42

    # sphinx_gallery_thumbnail_number = 2








.. GENERATED FROM PYTHON SOURCE LINES 36-39

Prepare data
------------
Make a toy 3-class imbalanced classification task.

.. GENERATED FROM PYTHON SOURCE LINES 39-60

.. code-block:: default


    # make dataset
    X, y = make_classification(
        n_classes=3,
        class_sep=2,
        weights=[0.1, 0.3, 0.6],
        n_informative=3,
        n_redundant=1,
        flip_y=0,
        n_features=20,
        n_clusters_per_class=2,
        n_samples=2000,
        random_state=0,
    )

    # train valid split
    X_train, X_valid, y_train, y_valid = train_test_split(
        X, y, test_size=0.5, stratify=y, random_state=RANDOM_STATE
    )









.. GENERATED FROM PYTHON SOURCE LINES 61-64

Train an ensemble classifier
----------------------------
Take ``SelfPacedEnsembleClassifier`` as example

.. GENERATED FROM PYTHON SOURCE LINES 64-74

.. code-block:: default


    # Initialize and train an SPE classifier
    clf = imbens.ensemble.SelfPacedEnsembleClassifier(random_state=RANDOM_STATE).fit(
        X_train, y_train
    )

    # Store the fitted SelfPacedEnsembleClassifier
    fitted_ensembles = {'SPE': clf}









.. GENERATED FROM PYTHON SOURCE LINES 75-77

Fit an ImbalancedEnsembleVisualizer
-----------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 77-90

.. code-block:: default


    # Initialize visualizer
    visualizer = imbens.visualizer.ImbalancedEnsembleVisualizer(
        eval_datasets={
            'training': (X_train, y_train),
            'validation': (X_valid, y_valid),
        },
    )

    # Fit visualizer
    visualizer.fit(fitted_ensembles)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/50 [00:00<?, ?it/s]    Visualizer evaluating model SPE on dataset  training  ::   0%|          | 0/50 [00:00<?, ?it/s]    Visualizer evaluating model SPE on dataset  training  :: 100%|##########| 50/50 [00:00<00:00, 1879.22it/s]
      0%|          | 0/50 [00:00<?, ?it/s]    Visualizer evaluating model SPE on dataset validation ::   0%|          | 0/50 [00:00<?, ?it/s]    Visualizer evaluating model SPE on dataset validation :: 100%|##########| 50/50 [00:00<00:00, 1710.15it/s]
    Visualizer computing confusion matrices.. Finished!

    <imbens.visualizer.visualizer.ImbalancedEnsembleVisualizer object at 0x000001AB6BBB4670>



.. GENERATED FROM PYTHON SOURCE LINES 91-94

Plot performance curve
----------------------
**performance w.r.t. number of base estimators**

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: default


    fig, axes = visualizer.performance_lineplot()




.. image-sg:: /auto_examples/basic/images/sphx_glr_plot_basic_visualize_001.png
   :alt: Performance Curves
   :srcset: /auto_examples/basic/images/sphx_glr_plot_basic_visualize_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-100

Plot confusion matrix
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: default


    fig, axes = visualizer.confusion_matrix_heatmap(
        on_datasets=['validation'],  # only on validation set
        sup_title=False,
    )



.. image-sg:: /auto_examples/basic/images/sphx_glr_plot_basic_visualize_002.png
   :alt: plot basic visualize
   :srcset: /auto_examples/basic/images/sphx_glr_plot_basic_visualize_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  37.097 seconds)

**Estimated memory usage:**  20 MB


.. _sphx_glr_download_auto_examples_basic_plot_basic_visualize.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_basic_visualize.py <plot_basic_visualize.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_basic_visualize.ipynb <plot_basic_visualize.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
