
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\classification\plot_probability.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_classification_plot_probability.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_classification_plot_probability.py:


=================================================================
Plot probabilities with different base classifiers
=================================================================

Plot the classification probability for ensemble models with different base classifiers. 

We use a 3-class imbalanced dataset, and we classify it with a ``SelfPacedEnsembleClassifier`` (ensemble size = 5).
We use Decision Tree, Support Vector Machine (rbf kernel), and Gaussian process classifier as the base classifier.

This example uses:

    - :class:`imbens.ensemble.SelfPacedEnsembleClassifier`

.. GENERATED FROM PYTHON SOURCE LINES 15-21

.. code-block:: default


    # Adapted from sklearn
    # Author: Zhining Liu <zhining.liu@outlook.com>
    #         Alexandre Gramfort <alexandre.gramfort@inria.fr>
    # License: BSD 3 clause








.. GENERATED FROM PYTHON SOURCE LINES 22-36

.. code-block:: default

    print(__doc__)

    # Import imbalanced-ensemble
    import imbens

    # Import utilities
    import numpy as np
    from collections import Counter
    import sklearn
    from imbens.datasets import make_imbalance
    from imbens.ensemble.base import sort_dict_by_key

    RANDOM_STATE = 42








.. GENERATED FROM PYTHON SOURCE LINES 37-40

Preparation
-----------
**Make 3 imbalanced iris classification tasks.**

.. GENERATED FROM PYTHON SOURCE LINES 40-53

.. code-block:: default


    iris = sklearn.datasets.load_iris()
    X = iris.data[:, 0:2]  # we only take the first two features for visualization
    y = iris.target

    X, y = make_imbalance(
        X, y, sampling_strategy={0: 50, 1: 30, 2: 10}, random_state=RANDOM_STATE
    )
    print(
        'Class distribution of imbalanced iris dataset: \n%s' % sort_dict_by_key(Counter(y))
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Class distribution of imbalanced iris dataset: 
    {0: 50, 1: 30, 2: 10}




.. GENERATED FROM PYTHON SOURCE LINES 54-55

**Create SPE (ensemble size = 5) with different base classifiers.**

.. GENERATED FROM PYTHON SOURCE LINES 55-79

.. code-block:: default


    from sklearn.svm import SVC
    from sklearn.tree import DecisionTreeClassifier
    from sklearn.gaussian_process import GaussianProcessClassifier
    from sklearn.gaussian_process.kernels import RBF

    classifiers = {
        'SPE-DT': imbens.ensemble.SelfPacedEnsembleClassifier(
            n_estimators=5,
            estimator=DecisionTreeClassifier(),
        ),
        'SPE-SVM-rbf': imbens.ensemble.SelfPacedEnsembleClassifier(
            n_estimators=5,
            estimator=SVC(kernel='rbf', probability=True),
        ),
        'SPE-GPC': imbens.ensemble.SelfPacedEnsembleClassifier(
            n_estimators=5,
            estimator=GaussianProcessClassifier(1.0 * RBF([1.0, 1.0])),
        ),
    }

    n_classifiers = len(classifiers)









.. GENERATED FROM PYTHON SOURCE LINES 80-82

Plot classification probabilities
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 82-123

.. code-block:: default


    import matplotlib.pyplot as plt

    n_features = X.shape[1]

    plt.figure(figsize=(3 * 2, n_classifiers * 2))
    plt.subplots_adjust(bottom=0.2, top=0.95)

    xx = np.linspace(3, 9, 100)
    yy = np.linspace(1, 5, 100).T
    xx, yy = np.meshgrid(xx, yy)
    Xfull = np.c_[xx.ravel(), yy.ravel()]

    for index, (name, classifier) in enumerate(classifiers.items()):
        classifier.fit(X, y)

        y_pred = classifier.predict(X)
        accuracy = sklearn.metrics.balanced_accuracy_score(y, y_pred)
        print("Balanced Accuracy (train) for %s: %0.1f%% " % (name, accuracy * 100))

        # View probabilities:
        probas = classifier.predict_proba(Xfull)
        n_classes = np.unique(y_pred).size
        for k in range(n_classes):
            plt.subplot(n_classifiers, n_classes, index * n_classes + k + 1)
            plt.title("Class %d" % k)
            if k == 0:
                plt.ylabel(name)
            imshow_handle = plt.imshow(
                probas[:, k].reshape((100, 100)), extent=(3, 9, 1, 5), origin='lower'
            )
            plt.xticks(())
            plt.yticks(())
            idx = y_pred == k
            if idx.any():
                plt.scatter(X[idx, 0], X[idx, 1], marker='o', c='w', edgecolor='k')

    ax = plt.axes([0.15, 0.04, 0.7, 0.05])
    plt.title("Probability")
    plt.colorbar(imshow_handle, cax=ax, orientation='horizontal')
    plt.show()



.. image-sg:: /auto_examples/classification/images/sphx_glr_plot_probability_001.png
   :alt: Class 0, Class 1, Class 2, Class 0, Class 1, Class 2, Class 0, Class 1, Class 2, Probability
   :srcset: /auto_examples/classification/images/sphx_glr_plot_probability_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Balanced Accuracy (train) for SPE-DT: 91.1% 
    Balanced Accuracy (train) for SPE-SVM-rbf: 77.8% 
    Balanced Accuracy (train) for SPE-GPC: 83.3% 





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  28.653 seconds)

**Estimated memory usage:**  24 MB


.. _sphx_glr_download_auto_examples_classification_plot_probability.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_probability.py <plot_probability.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_probability.ipynb <plot_probability.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
