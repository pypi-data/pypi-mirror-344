# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/python:3.10
#commands to run in the Docker container before starting each job.
variables:
  DOCKER_TLS_CERTDIR: ""
  CHILD_PIPELINE_BRANCH: $CI_DEFAULT_BRANCH
  OPHYD_DEVICES_BRANCH:
    description: ophyd_devices branch
    value: main
  BEC_WIDGETS_BRANCH:
    description: bec_widgets branch
    value: main
  CHECK_PKG_VERSIONS:
    description: Whether to run additional tests against min/max/random selection of dependencies. Set to 1 for running. 
    value: 0

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
  auto_cancel:
    on_new_commit: interruptible

include:
  - template: Security/Secret-Detection.gitlab-ci.yml
  # - project: "bec/awi_utils"
  #   file: "/templates/check-packages-job.yml"
  #   inputs:
  #     stage: test
  #     path: "bec_lib"
  #     job_name: "check_dep_bec_lib"
  # - project: "bec/awi_utils"
  #   file: "/templates/check-packages-job.yml"
  #   inputs:
  #     stage: test
  #     path: "bec_server"
  #     job_name: "check_dep_bec_server"
  # - project: "bec/awi_utils"
  #   file: "/templates/check-packages-job.yml"
  #   inputs:
  #     stage: test
  #     path: "bec_ipython_client"
  #     pytest_args: "-v,--random-order,tests/client_tests"
  #     job_name: "check_dep_ipython_client"
  - project: "bec/awi_utils"
    file: "/templates/trigger-beamline-repos.yml"
    inputs:
      bec_core_branch: $CI_COMMIT_REF_NAME
      ophyd_devices_branch: $OPHYD_DEVICES_BRANCH

# different stages in the pipeline
stages:
  - Formatter
  - test # must be called test for security/secret-detection to work
  - AdditionalTests
  - End2End
  - Build
  - Deploy

.install-bec-services-dev: &install-bec-services-dev
  - pip install -e ./pytest_bec_e2e
  - pip install -e ./bec_server[dev]
  - pip install -e ./bec_ipython_client[dev]
  - pip install -e ./bec_lib[dev]

before_script:
  - if [[ "$CI_PROJECT_PATH" != "bec/bec" ]]; then
    echo -e "\033[35;1m Using branch $CHILD_PIPELINE_BRANCH of BEC \033[0;m";
    test -d bec || git clone --branch $CHILD_PIPELINE_BRANCH https://gitlab.psi.ch/bec/bec.git; cd bec;
    fi  

formatter:
  stage: Formatter
  needs: []
  script:
    - pip install -e ./bec_lib[dev]
    - isort --check --diff --line-length=100 --profile=black --multi-line=3 --trailing-comma ./
    - black --check --diff --color --line-length=100 --skip-magic-trailing-comma ./
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'
      when: never
    - if: $CI_COMMIT_BRANCH
  interruptible: true

pylint:
  stage: Formatter
  needs: []
  script:
    - pip install pylint pylint-exit anybadge
    - mkdir ./pylint
    - pylint ./bec_server/bec_server ./bec_lib/bec_lib ./bec_ipython_client/bec_ipython_client --output-format=text | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./pylint/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'
      when: never
    - if: $CI_COMMIT_BRANCH
  interruptible: true

pylint-check:
  stage: Formatter
  needs: []
  allow_failure: true
  script:
    - pip install pylint pylint-exit anybadge
    - apt-get update
    - apt-get install -y bc  
    # Identify changed Python files
    - if [ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]; then
      TARGET_BRANCH_COMMIT_SHA=$(git rev-parse origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME);
      CHANGED_FILES=$(git diff --name-only $TARGET_BRANCH_COMMIT_SHA HEAD | grep '\.py$' || true);
      else
      CHANGED_FILES=$(git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA | grep '\.py$' || true);
      fi
    - if [ -z "$CHANGED_FILES" ]; then echo "No Python files changed."; exit 0; fi

    - echo "Changed Python files:"
      - $CHANGED_FILES
    # Run pylint only on changed files
    - mkdir ./pylint
    - pylint $CHANGED_FILES --output-format=text | tee ./pylint/pylint_changed_files.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint_changed_files.log)
    - echo "Pylint score is $PYLINT_SCORE"

    # Fail the job if the pylint score is below 9
    - if [ "$(echo "$PYLINT_SCORE < 9" | bc)" -eq 1 ]; then echo "Your pylint score is below the acceptable threshold (9)."; exit 1; fi
  artifacts:
    paths:
      - ./pylint/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'
      when: never
    - if: $CI_COMMIT_BRANCH
  interruptible: true

tests:
  stage: test
  needs: []
  script:
    - git clone --branch $OPHYD_DEVICES_BRANCH https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git
    - export OPHYD_DEVICES_PATH=$PWD/ophyd_devices
    - pip install ./ophyd_devices
    - pip install pytest pytest-random-order pytest-cov pytest-timeout
    - apt-get update
    - apt-get install -y gcc
    - apt-get install -y redis
    - *install-bec-services-dev
    - coverage run --source=./bec_server/bec_server,./bec_lib/bec_lib,./bec_ipython_client/bec_ipython_client, --omit=*/bec_server/scan_server/scan_plugins/*,*/bec_ipython_client/bec_ipython_client/plugins/*,*/bec_ipython_client/scripts/*,*/bec_lib/bec_lib/tests/* -m pytest -v --junitxml=report.xml --random-order ./bec_server/tests ./bec_ipython_client/tests/client_tests ./bec_lib/tests
    - coverage report
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  interruptible: true

tests-3.11:
  stage: AdditionalTests
  needs: []
  image: $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/python:3.11
  allow_failure: true
  script:
    - git clone --branch $OPHYD_DEVICES_BRANCH https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git
    - export OPHYD_DEVICES_PATH=$PWD/ophyd_devices
    - pip install ./ophyd_devices
    - pip install pytest pytest-random-order pytest-cov pytest-timeout
    - apt-get update
    - apt-get install -y gcc
    - apt-get install -y redis
    - *install-bec-services-dev
    - pytest -v --junitxml=report.xml --random-order ./bec_server/tests ./bec_lib/tests ./bec_ipython_client/tests/client_tests
  interruptible: true

tests-3.12:
  extends: "tests-3.11"
  stage: AdditionalTests
  image: $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/python:3.12
  allow_failure: true

end-2-end:
  stage: End2End
  needs: []
  image: $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/docker:23-dind
  services:
    - name: docker:dind
      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
  allow_failure: false
  artifacts:
    when: on_failure
    paths:
      - ./logs/*.log
    expire_in: 2 week
  before_script:

    - echo "Starting the end-2-end tests"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "production"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "pre_release"'
  script:
    - if [[ "$CI_PROJECT_PATH" != "bec/bec" ]]; then
      apk update; apk add git; echo -e "\033[35;1m Using branch $CHILD_PIPELINE_BRANCH of BEC \033[0;m";
      test -d bec || git clone --branch $CHILD_PIPELINE_BRANCH https://gitlab.psi.ch/bec/bec.git; cd bec;
      TARGET_BEC_BRANCH=$CHILD_PIPELINE_BRANCH;
      else
      TARGET_BEC_BRANCH=$CI_COMMIT_REF_NAME;
      fi  

    # build and run the tests
    - echo $OPHYD_DEVICES_BRANCH
    - echo "$CI_DEPENDENCY_PROXY_PASSWORD" | docker login $CI_DEPENDENCY_PROXY_SERVER --username $CI_DEPENDENCY_PROXY_USER --password-stdin
    - docker build -t end2end_client:test -f ./ci/Dockerfile.run_pytest --build-arg PY_VERSION=3.10 --build-arg BEC_SERVICE=bec_ipython_client --build-arg OPHYD_DEVICES_BRANCH --build-arg CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX --build-arg BEC_CORE_BRANCH=$TARGET_BEC_BRANCH  .
    - docker run --network=host --name end2end_client end2end_client:test
  after_script:
    # copy the log files to the project directory in order to be reachable by git artifacts
    - docker cp end2end_client:/code/bec/test_files/. $CI_PROJECT_DIR
  interruptible: true

# end-2-end-scibec:
#   extends: "end-2-end"
#   allow_failure: true
#   script:
#     # spin up redis, mongo and scibec
#     - docker-compose -f ./ci/docker-compose.yaml up -d
#     - apk update; apk upgrade; apk add curl; apk add git; apk add gcc

#     # get ophyd devices repo (needed for the device_server)
#     - git clone --branch $OPHYD_DEVICES_BRANCH https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git

#     # make sure that the API server is healthy and ready
#     - timeout 120 /bin/sh -c -- 'while true; do res=$(curl -X "GET" --max-time 3 "http://docker:3030/sessions"); if [ ! -z "$res" ]; then exit 0; fi; sleep 1; done;'

#     # initialize the database with the test config
#     - docker build -t init_scibec:test -f ./scibec/init_scibec/Dockerfile .
#     - docker run --network=host --name init_scibec init_scibec:test
#     - docker build -t scihub:test -f ./scihub/Dockerfile .
#     - docker run --network=host -d --name scihub scihub:test

#     # build scan_bundler, scan_server, device_server and file_writer
#     - docker build -t scan_bundler:test -f ./scan_bundler/Dockerfile .
#     - docker build -t scan_server:test -f ./scan_server/Dockerfile .
#     - docker build -t device_server:test -f ./device_server/Dockerfile .
#     - docker build -t file_writer:test -f ./file_writer/Dockerfile .

#     # run scan_bundler, scan_server, device_server and file_writer
#     - docker run --network=host -d --name device_server device_server:test
#     - docker run --network=host -d --name scan_server scan_server:test
#     - docker run --network=host -d --name scan_bundler scan_bundler:test
#     - docker run --network=host -d --name file_writer file_writer:test

#     # build and run the tests
#     - docker build -t en2end_client:test -f ./bec_ipython_client/tests/Dockerfile .
#     - docker run --network=host --name end2end_client en2end_client:test

# end-2-end-services_on_multi_hosts:
#   stage: End2End
#   when: manual
#   needs: []
#   services:
#     - redis
#   variables:
#     STORAGE_DRIVER: vfs
#   #  CI_DEBUG_SERVICES: "true"
#   image: alpine:latest
#   allow_failure: true
#   script:
#     # download buildah & podman
#     - apk add buildah
#     - apk add podman
#     # build containers
#     # /!\ build-arg is interpreted differently by podman,
#     # have to use buildah here
#     - buildah bud --network=host -t device_server_vm -f ./ci/Dockerfile.run_server --build-arg PY_VERSION=3.10 --build-arg BEC_SERVICE=device_server --build-arg OPHYD_DEVICES_BRANCH --build-arg CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX
#     - buildah bud --network=host -t scan_server_vm -f ./ci/Dockerfile.run_server --build-arg PY_VERSION=3.10 --build-arg BEC_SERVICE=scan_server --build-arg OPHYD_DEVICES_BRANCH --build-arg CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX
#     - buildah bud --network=host -t scan_bundler_vm -f ./ci/Dockerfile.run_server --build-arg PY_VERSION=3.10 --build-arg BEC_SERVICE=scan_bundler --build-arg OPHYD_DEVICES_BRANCH --build-arg CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX
#     - buildah bud --network=host -t file_writer_vm -f ./ci/Dockerfile.run_server --build-arg PY_VERSION=3.10 --build-arg BEC_SERVICE=file_writer --build-arg OPHYD_DEVICES_BRANCH --build-arg CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX
#     - buildah bud --network=host -t dap_server_vm -f ./ci/Dockerfile.run_server --build-arg PY_VERSION=3.10 --build-arg BEC_SERVICE=data_processing --build-arg OPHYD_DEVICES_BRANCH --build-arg CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX
#     - buildah bud --network=host -t scihub_vm -f ./ci/Dockerfile.run_server --build-arg PY_VERSION=3.10 --build-arg BEC_SERVICE=scihub --build-arg OPHYD_DEVICES_BRANCH --build-arg CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX
#     # default service is bec_ipython_client
#     - buildah bud --network=host -t end2end_client_test -f ./ci/Dockerfile.run_server --build-arg PY_VERSION=3.10 --build-arg CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX

#     # now for the run phase...
#     - REDIS_IP=$(cat /etc/hosts | awk '{if ($2 == "redis") print $1;}')
#     # Just checking that the IP is reachable from outside the container
#     - ping -w 2 $REDIS_IP
#     # declare env var for containers to find redis
#     - export BEC_REDIS_HOST=$REDIS_IP
#     # run servers
#     - podman run -d --network=host --env BEC_REDIS_HOST --name device_server device_server_vm bec-device-server
#     - podman run -d --network=host --env BEC_REDIS_HOST --name scan_server scan_server_vm bec-scan-server
#     - podman run -d --network=host --env BEC_REDIS_HOST --name scan_bundler scan_bundler_vm bec-scan-bundler
#     - podman run -d --network=host --env BEC_REDIS_HOST --name file_writer file_writer_vm bec-file-writer
#     - podman run -d --network=host --env BEC_REDIS_HOST --name dap dap_server_vm bec-dap
#     - podman run -d --network=host --env BEC_REDIS_HOST --name scihub scihub_vm bec-scihub
#     # start end-to-end test, using previously started servers and previously running redis instance
#     - podman run --network=host --env BEC_REDIS_HOST --name end2end_test end2end_client_test pytest --bec-redis-host $BEC_REDIS_HOST -v --random-order tests/end-2-end || true
#     # copy the log files to the project directory in order to be reachable by git artifacts
#     - podman cp device_server:/code/bec/logs/DeviceServer.log $CI_PROJECT_DIR/
#     - podman cp scan_server:/code/bec/logs/ScanServer.log $CI_PROJECT_DIR/
#     - podman cp scan_bundler:/code/bec/logs/ScanBundler.log $CI_PROJECT_DIR/
#     - podman cp file_writer:/code/bec/logs/FileWriterManager.log $CI_PROJECT_DIR/
#     - podman cp scihub:/code/bec/logs/SciHub.log $CI_PROJECT_DIR/
#     - podman cp dap:/code/bec/logs/DAPServer.log $CI_PROJECT_DIR/
#     - podman cp end2end_test:/code/bec/logs/BECClient.log $CI_PROJECT_DIR/

#   artifacts:
#     when: on_failure
#     paths:
#       - ./logs/*.log
#     expire_in: 1 week
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "schedule"'
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "pipeline"'
#     - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
#     - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "production"'

end-2-end-conda:
  stage: End2End
  needs: []
  image: continuumio/miniconda3
  allow_failure: false
  script:
    - apt-get update
    - conda config --add channels conda-forge
    - conda config --set channel_priority strict
    - conda config --set always_yes yes --set changeps1 no
    - conda create -q -n test-environment python=3.11 --channel conda-forge --override-channels
    - conda init bash
    - source ~/.bashrc
    - conda activate test-environment

    # get ophyd devices repo (needed for the device_server)
    - git clone --branch $OPHYD_DEVICES_BRANCH https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git
    - export OPHYD_DEVICES_PATH=$PWD/ophyd_devices
    - pip install ./ophyd_devices

    - source ./bin/install_bec_dev.sh -t

    - pip install ./pytest_bec_e2e
    - cd ./bec_ipython_client
    - pip install .[dev]
    - pytest --start-servers -v ./tests/end-2-end/test_scans_e2e.py::test_grid_scan

  artifacts:
    when: on_failure
    paths:
      - ./logs/*.log
    expire_in: 1 week

  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "production"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "pre_release"'
  interruptible: true

end-2-end-conda-310:
  stage: End2End
  needs: []
  image: continuumio/miniconda3
  allow_failure: false
  variables:
    PYTHON_VERSION: "3.10"
  script:
    - apt-get update
    - apt-get install -y tmux
    - conda config --add channels conda-forge
    - conda config --system --remove channels https://repo.anaconda.com/pkgs/main
    - conda config --system --remove channels https://repo.anaconda.com/pkgs/r
    - conda config --remove channels https://repo.anaconda.com/pkgs/main
    - conda config --remove channels https://repo.anaconda.com/pkgs/r
    - conda config --show-sources
    - conda config --set channel_priority strict
    - conda config --set always_yes yes --set changeps1 no
    - conda create -q -n test-environment python=$PYTHON_VERSION --channel conda-forge --override-channels
    - conda init bash
    - source ~/.bashrc
    - conda activate test-environment

    - conda install redis-server
    - redis-server --daemonize yes

    # get ophyd devices repo (needed for the device_server)
    - git clone --branch $OPHYD_DEVICES_BRANCH https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git
    - export OPHYD_DEVICES_PATH=$PWD/ophyd_devices
    - pip install ./ophyd_devices

    - *install-bec-services-dev

    - bec-server start

    - cd ./bec_ipython_client
    - pytest -v --files-path ../ --random-order ./tests/end-2-end/test_scans_e2e.py

  artifacts:
    when: on_failure
    paths:
      - ./logs/*.log
    expire_in: 1 week

  rules:
    - if: '$E2E_FULL == "1"'
  interruptible: true

end-2-end-conda-311:
  stage: End2End
  extends: "end-2-end-conda-310"
  allow_failure: false
  variables:
    PYTHON_VERSION: "3.11"

end-2-end-conda-312:
  stage: End2End
  extends: "end-2-end-conda-310"
  allow_failure: false
  variables:
    PYTHON_VERSION: "3.12"

end-2-end-conda-313:
  stage: End2End
  extends: "end-2-end-conda-310"
  allow_failure: true
  variables:
    PYTHON_VERSION: "3.13"

trigger-ophyd_devices:
  needs: []
  trigger:
    strategy: depend
    include:
      - project: bec/ophyd_devices
        ref: $OPHYD_DEVICES_BRANCH
        file: /.gitlab-ci.yml
  variables:
    BEC_CORE_BRANCH: $CI_COMMIT_REF_NAME
    CHILD_PIPELINE_BRANCH: $OPHYD_DEVICES_BRANCH
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'
      when: never
    - if: $CI_COMMIT_BRANCH
  interruptible: true

trigger-bec_widgets:
  needs: []
  trigger:
    strategy: depend
    include:
      - project: bec/bec_widgets
        ref: $BEC_WIDGETS_BRANCH
        file: /.gitlab-ci.yml
  variables:
    BEC_CORE_BRANCH: $CI_COMMIT_REF_NAME
    OPHYD_DEVICES_BRANCH: ${OPHYD_DEVICES_BRANCH}
    CHILD_PIPELINE_BRANCH: $BEC_WIDGETS_BRANCH
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'
      when: never
    - if: $CI_COMMIT_BRANCH
  interruptible: true

semver:
  stage: Build
  needs: ["tests"]
  script:
    - git config --global user.name "ci_update_bot"
    - git config --global user.email "ci_update_bot@bec.ch"
    - git checkout "$CI_COMMIT_REF_NAME"
    - git reset --hard origin/"$CI_COMMIT_REF_NAME"

    # delete all local tags
    - git tag -l | xargs git tag -d
    - git fetch --tags
    - git fetch --unshallow
    - git tag

    # build and publish
    - pip install python-semantic-release==9.* build twine
    - export GL_TOKEN=$CI_UPDATES
    - semantic-release -vv --config ./ci/semantic_release.toml version

    # check if any artifacts were created
    - if [ ! -d dist ]; then echo No release will be made; exit 0; fi
    - twine upload dist/* -u __token__ -p $CI_PYPI_TOKEN --skip-existing

  allow_failure: false
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  interruptible: true

dev-pages:
  stage: Deploy
  needs:
    - job: "formatter"
      optional: true
    - job: "pylint"
      optional: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'
      when: never
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "production"'

  script:
    - git config --global user.name "ci_update_bot"
    - git config --global user.email "ci_update_bot@bec.ch"
    # - git tag -l | xargs git tag -d
    # - git fetch --tags
    # - git tag -d development || true
    # - git push https://oauth2:$CI_DEV_DEPLOY@gitlab.psi.ch/bec/bec.git :refs/tags/development || true
    # - git tag development $CI_COMMIT_SHA
    # - git push https://oauth2:$CI_DEV_DEPLOY@gitlab.psi.ch/bec/bec.git development

    - git fetch --all
    - git branch -a | grep MR_DEV_BRANCH
    - git checkout remotes/origin/MR_DEV_BRANCH
    - git reset --hard origin/$CI_COMMIT_REF_NAME
    - git push --force -o ci.skip https://oauth2:$CI_DEV_DEPLOY@gitlab.psi.ch/bec/bec.git HEAD:refs/heads/MR_DEV_BRANCH;

    - curl -X POST -d "branches=development" -d "token=$RTD_TOKEN" https://readthedocs.org/api/v2/webhook/beamline-experiment-control/221870/
    - curl -X POST -d "branches=development" -d "token=$RTD_TOKEN_BEC" https://readthedocs.org/api/v2/webhook/bec/246899/

  interruptible: true

pages:
  stage: Deploy
  needs: ["semver"]
  variables:
    TARGET_BRANCH: $CI_COMMIT_REF_NAME
  rules:
    - if: "$CI_COMMIT_TAG != null"
      variables:
        TARGET_BRANCH: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_COMMIT_REF_NAME == "production"'
  script:
    - curl -X POST -d "branches=$CI_COMMIT_REF_NAME" -d "token=$RTD_TOKEN" https://readthedocs.org/api/v2/webhook/beamline-experiment-control/221870/
    - curl -X POST -d "branches=$CI_COMMIT_REF_NAME" -d "token=$RTD_TOKEN_BEC" https://readthedocs.org/api/v2/webhook/bec/246899/
  interruptible: true