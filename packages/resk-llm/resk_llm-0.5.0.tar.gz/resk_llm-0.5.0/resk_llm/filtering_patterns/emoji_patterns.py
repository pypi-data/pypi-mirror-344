"""
Module contenant des fonctionnalit√©s pour d√©tecter et filtrer les emojis et caract√®res Unicode sp√©ciaux.
Con√ßu pour prot√©ger contre la dissimulation de contenu malveillant via des caract√®res sp√©ciaux.
"""

import re
import unicodedata
from typing import Dict, List, Tuple, Pattern, Union, Set, Optional

# Plages Unicode pour les emojis
EMOJI_PATTERN = re.compile(
    "["
    "\U0001F600-\U0001F64F"  # √©moticons
    "\U0001F300-\U0001F5FF"  # symboles & pictogrammes
    "\U0001F680-\U0001F6FF"  # transport & symboles
    "\U0001F700-\U0001F77F"  # symboles alchimiques
    "\U0001F780-\U0001F7FF"  # symboles g√©om√©triques
    "\U0001F800-\U0001F8FF"  # symboles suppl√©mentaires
    "\U0001F900-\U0001F9FF"  # symboles suppl√©mentaires et pictogrammes
    "\U0001FA00-\U0001FA6F"  # symboles de jeu
    "\U0001FA70-\U0001FAFF"  # symboles suppl√©mentaires
    "\U00002702-\U000027B0"  # dingbats
    "\U000024C2-\U0001F251" 
    "]+"
)

# Caract√®res sp√©ciaux et homoglyphes qui peuvent √™tre utilis√©s pour l'obfuscation
HOMOGLYPHS = {
    'a': ['–∞', 'ÔΩÅ', '‚ìê', 'ùêö', 'ùëé', 'ùíÇ', 'ùì™', 'ùîû', 'ùïí', 'ùñÜ', 'ùñ∫', 'ùóÆ', 'ùò¢', 'ùôñ', 'ùöä', '…ë'],
    'b': ['b', 'ÔΩÇ', '‚ìë', 'ùêõ', 'ùëè', 'ùíÉ', 'ùì´', 'ùîü', 'ùïì', 'ùñá', 'ùñª', 'ùóØ', 'ùò£', 'ùôó', 'ùöã'],
    'c': ['—Å', 'ÔΩÉ', '‚ìí', 'ùêú', 'ùëê', 'ùíÑ', 'ùì¨', 'ùî†', 'ùïî', 'ùñà', 'ùñº', 'ùó∞', 'ùò§', 'ùôò', 'ùöå'],
    'd': ['‚Öæ', 'ÔΩÑ', '‚ìì', 'ùêù', 'ùëë', 'ùíÖ', 'ùì≠', 'ùî°', 'ùïï', 'ùñâ', 'ùñΩ', 'ùó±', 'ùò•', 'ùôô', 'ùöç'],
    'e': ['–µ', 'ÔΩÖ', '‚ìî', 'ùêû', 'ùëí', 'ùíÜ', 'ùìÆ', 'ùî¢', 'ùïñ', 'ùñä', 'ùñæ', 'ùó≤', 'ùò¶', 'ùôö', 'ùöé'],
    'f': ['ÔΩÜ', '‚ìï', 'ùêü', 'ùëì', 'ùíá', 'ùìØ', 'ùî£', 'ùïó', 'ùñã', 'ùñø', 'ùó≥', 'ùòß', 'ùôõ', 'ùöè'],
    'g': ['ÔΩá', '‚ìñ', 'ùê†', 'ùëî', 'ùíà', 'ùì∞', 'ùî§', 'ùïò', 'ùñå', 'ùóÄ', 'ùó¥', 'ùò®', 'ùôú', 'ùöê'],
    'h': ['“ª', 'ÔΩà', '‚ìó', 'ùê°', 'ùíâ', 'ùì±', 'ùî•', 'ùïô', 'ùñç', 'ùóÅ', 'ùóµ', 'ùò©', 'ùôù', 'ùöë'],
    'i': ['—ñ', 'ÔΩâ', '‚ìò', 'ùê¢', 'ùëñ', 'ùíä', 'ùì≤', 'ùî¶', 'ùïö', 'ùñé', 'ùóÇ', 'ùó∂', 'ùò™', 'ùôû', 'ùöí'],
    'j': ['—ò', 'ÔΩä', '‚ìô', 'ùê£', 'ùëó', 'ùíã', 'ùì≥', 'ùîß', 'ùïõ', 'ùñè', 'ùóÉ', 'ùó∑', 'ùò´', 'ùôü', 'ùöì'],
    'k': ['ÔΩã', '‚ìö', 'ùê§', 'ùëò', 'ùíå', 'ùì¥', 'ùî®', 'ùïú', 'ùñê', 'ùóÑ', 'ùó∏', 'ùò¨', 'ùô†', 'ùöî'],
    'l': ['‚Öº', 'ÔΩå', '‚ìõ', 'ùê•', 'ùëô', 'ùíç', 'ùìµ', 'ùî©', 'ùïù', 'ùñë', 'ùóÖ', 'ùóπ', 'ùò≠', 'ùô°', 'ùöï'],
    'm': ['ÔΩç', '‚ìú', 'ùê¶', 'ùëö', 'ùíé', 'ùì∂', 'ùî™', 'ùïû', 'ùñí', 'ùóÜ', 'ùó∫', 'ùòÆ', 'ùô¢', 'ùöñ'],
    'n': ['ÔΩé', '‚ìù', 'ùêß', 'ùëõ', 'ùíè', 'ùì∑', 'ùî´', 'ùïü', 'ùñì', 'ùóá', 'ùóª', 'ùòØ', 'ùô£', 'ùöó'],
    'o': ['–æ', 'ÔΩè', '‚ìû', 'ùê®', 'ùëú', 'ùíê', 'ùì∏', 'ùî¨', 'ùï†', 'ùñî', 'ùóà', 'ùóº', 'ùò∞', 'ùô§', 'ùöò'],
    'p': ['—Ä', 'ÔΩê', '‚ìü', 'ùê©', 'ùëù', 'ùíë', 'ùìπ', 'ùî≠', 'ùï°', 'ùñï', 'ùóâ', 'ùóΩ', 'ùò±', 'ùô•', 'ùöô'],
    'q': ['ÔΩë', '‚ì†', 'ùê™', 'ùëû', 'ùíí', 'ùì∫', 'ùîÆ', 'ùï¢', 'ùññ', 'ùóä', 'ùóæ', 'ùò≤', 'ùô¶', 'ùöö'],
    'r': ['ÔΩí', '‚ì°', 'ùê´', 'ùëü', 'ùíì', 'ùìª', 'ùîØ', 'ùï£', 'ùñó', 'ùóã', 'ùóø', 'ùò≥', 'ùôß', 'ùöõ'],
    's': ['—ï', 'ÔΩì', '‚ì¢', 'ùê¨', 'ùë†', 'ùíî', 'ùìº', 'ùî∞', 'ùï§', 'ùñò', 'ùóå', 'ùòÄ', 'ùò¥', 'ùô®', 'ùöú'],
    't': ['ùñô', 'ÔΩî', '‚ì£', 'ùê≠', 'ùë°', 'ùíï', 'ùìΩ', 'ùî±', 'ùï•', 'ùñô', 'ùóç', 'ùòÅ', 'ùòµ', 'ùô©', 'ùöù'],
    'u': ['’Ω', 'ÔΩï', '‚ì§', 'ùêÆ', 'ùë¢', 'ùíñ', 'ùìæ', 'ùî≤', 'ùï¶', 'ùñö', 'ùóé', 'ùòÇ', 'ùò∂', 'ùô™', 'ùöû'],
    'v': ['ÔΩñ', '‚ì•', 'ùêØ', 'ùë£', 'ùíó', 'ùìø', 'ùî≥', 'ùïß', 'ùñõ', 'ùóè', 'ùòÉ', 'ùò∑', 'ùô´', 'ùöü'],
    'w': ['‘ù', 'ÔΩó', '‚ì¶', 'ùê∞', 'ùë§', 'ùíò', 'ùîÄ', 'ùî¥', 'ùï®', 'ùñú', 'ùóê', 'ùòÑ', 'ùò∏', 'ùô¨', 'ùö†'],
    'x': ['—Ö', 'ÔΩò', '‚ìß', 'ùê±', 'ùë•', 'ùíô', 'ùîÅ', 'ùîµ', 'ùï©', 'ùñù', 'ùóë', 'ùòÖ', 'ùòπ', 'ùô≠', 'ùö°'],
    'y': ['—É', 'ÔΩô', '‚ì®', 'ùê≤', 'ùë¶', 'ùíö', 'ùîÇ', 'ùî∂', 'ùï™', 'ùñû', 'ùóí', 'ùòÜ', 'ùò∫', 'ùôÆ', 'ùö¢'],
    'z': ['ÔΩö', '‚ì©', 'ùê≥', 'ùëß', 'ùíõ', 'ùîÉ', 'ùî∑', 'ùï´', 'ùñü', 'ùóì', 'ùòá', 'ùòª', 'ùôØ', 'ùö£']
}

# Construire un dictionnaire invers√© pour la recherche rapide
INVERSE_HOMOGLYPHS = {}
for standard, variants in HOMOGLYPHS.items():
    for variant in variants:
        INVERSE_HOMOGLYPHS[variant] = standard

# Fonction pour d√©tecter les emojis dans un texte
def detect_emojis(text: str) -> List[str]:
    """
    D√©tecte les emojis dans un texte.
    
    Args:
        text: Texte √† analyser
        
    Returns:
        Liste des emojis trouv√©s
    """
    if not text:
        return []
    
    return EMOJI_PATTERN.findall(text)

# Fonction pour normaliser les homoglyphes (caract√®res similaires)
def normalize_homoglyphs(text: str) -> str:
    """
    Normalise les caract√®res Unicode qui ressemblent aux caract√®res ASCII standard.
    
    Args:
        text: Texte √† normaliser
        
    Returns:
        Texte normalis√©
    """
    if not text:
        return text
    
    result = ""
    for char in text:
        if char in INVERSE_HOMOGLYPHS:
            result += INVERSE_HOMOGLYPHS[char]
        else:
            result += char
    
    return result

# Fonction pour supprimer les emojis d'un texte
def remove_emojis(text: str) -> str:
    """
    Supprime tous les emojis d'un texte.
    
    Args:
        text: Texte dont il faut supprimer les emojis
        
    Returns:
        Texte sans emojis
    """
    if not text:
        return text
    
    return EMOJI_PATTERN.sub('', text)

# Fonction pour remplacer les emojis par du texte descriptif
def replace_emojis_with_description(text: str) -> str:
    """
    Remplace les emojis par [EMOJI].
    
    Args:
        text: Texte dont il faut remplacer les emojis
        
    Returns:
        Texte avec emojis remplac√©s
    """
    if not text:
        return text
    
    return EMOJI_PATTERN.sub('[EMOJI]', text)

# Fonction pour v√©rifier si un texte utilise des caract√®res inhabituels ou suspects pour l'obfuscation
def check_for_obfuscation(text: str) -> Dict[str, List[str]]:
    """
    V√©rifie si un texte utilise des caract√®res Unicode inhabituels qui pourraient indiquer 
    une tentative d'obfuscation ou de contournement des filtres.
    
    Args:
        text: Texte √† v√©rifier
        
    Returns:
        Dictionnaire avec les types d'obfuscation d√©tect√©s et les caract√®res correspondants
    """
    if not text:
        return {}
    
    results = {}
    
    # V√©rifier les emojis
    emojis = detect_emojis(text)
    if emojis:
        results["emojis"] = emojis
    
    # V√©rifier les homoglyphes
    detected_homoglyphs = []
    for char in text:
        if char in INVERSE_HOMOGLYPHS and char != INVERSE_HOMOGLYPHS[char]:
            detected_homoglyphs.append(char)
    
    if detected_homoglyphs:
        results["homoglyphs"] = detected_homoglyphs
    
    # V√©rifier les caract√®res de contr√¥le et autres caract√®res sp√©ciaux
    control_chars = []
    special_chars = []
    
    for char in text:
        cat = unicodedata.category(char)
        if cat.startswith('C'):  # Caract√®res de contr√¥le
            control_chars.append(repr(char))
        elif cat == 'Zs' and char != ' ':  # Espaces non standard
            special_chars.append(repr(char))
        elif cat.startswith('S'):  # Symboles
            if char not in emojis:  # √âviter de compter les emojis deux fois
                special_chars.append(char)
    
    if control_chars:
        results["control_chars"] = control_chars
    
    if special_chars:
        results["special_chars"] = special_chars
    
    return results

# Fonction pour sanitizer un texte de toutes les formes d'obfuscation
def sanitize_text_from_obfuscation(text: str, replace_emojis: bool = True) -> str:
    """
    Sanitize un texte en normalisant ou supprimant toutes les formes d'obfuscation.
    
    Args:
        text: Texte √† sanitizer
        replace_emojis: Si True, remplace les emojis par [EMOJI], sinon les supprime
        
    Returns:
        Texte sanitiz√©
    """
    if not text:
        return text
    
    # Normaliser les homoglyphes
    text = normalize_homoglyphs(text)
    
    # G√©rer les emojis
    if replace_emojis:
        text = replace_emojis_with_description(text)
    else:
        text = remove_emojis(text)
    
    # Normaliser les espaces et caract√®res de contr√¥le
    normalized_chars = []
    for char in text:
        cat = unicodedata.category(char)
        if cat.startswith('C'):  # Caract√®res de contr√¥le
            normalized_chars.append(' ')
        elif cat == 'Zs':  # Tous les types d'espaces deviennent des espaces standard
            normalized_chars.append(' ')
        else:
            normalized_chars.append(char)
    
    return ''.join(normalized_chars)

# Fonction pour v√©rifier si un texte contient des caract√®res de zalgo
def contains_zalgo(text: str) -> bool:
    """
    V√©rifie si un texte contient des caract√®res de zalgo (caract√®res combinants).
    
    Args:
        text: Texte √† v√©rifier
        
    Returns:
        True si le texte contient des caract√®res de zalgo, False sinon
    """
    if not text:
        return False
    
    combining_chars_count = 0
    for char in text:
        if unicodedata.combining(char) > 0:
            combining_chars_count += 1
    
    # Si plus de 5 caract√®res combinants, c'est probablement du zalgo
    return combining_chars_count > 5

# Fonction pour supprimer les caract√®res de zalgo
def remove_zalgo(text: str) -> str:
    """
    Supprime les caract√®res de zalgo (caract√®res combinants) d'un texte.
    
    Args:
        text: Texte dont il faut supprimer les caract√®res de zalgo
        
    Returns:
        Texte sans caract√®res de zalgo
    """
    if not text:
        return text
    
    return ''.join(char for char in text if unicodedata.combining(char) == 0) 