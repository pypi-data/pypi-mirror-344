[project]
name = "nudebomb"
requires-python = "<4.0,>=3.10"
authors = [{ name = "AJ Slater", email = "aj@slater.net" }]
license = { text = "GPL-3.0-only" }
dependencies = [
  "confuse<3.0.0,>=2.0.0",
  "pycountry<25.0.0,>=24.6.1",
  "python-dateutil<3.0.0,>=2.8.2",
  "ruamel-yaml<1.0.0,>=0.18.4",
  "treestamps<3.0.0,>=2.2.2",
]
version = "4.4.4"
description = "Strip unused languages from mkv files en mass"
readme = "README.md"
keywords = ["mkv", "movie", "video", "srt", "audio", "subtitles"]
classifiers = [
  "Environment :: Console",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Multimedia :: Video :: Conversion",
]

[project.urls]
Source = "https://github.com/ajslater/nudebomb"
Issues = "https://github.com/ajslater/nudebomb/issues"
homepage = "https://github.com/ajslater/nudebomb"
documentation = "https://github.com/ajslater/nudebomb"

[project.scripts]
nudebomb = "nudebomb.cli:main"

[dependency-groups]
dev = [
  "codespell<3.0.0,>=2.1.0",
  "coverage[toml]<8.0,>=7.0",
  "deepdiff>=8.4.2",
  "hatchling<2.0.0,>=1.27.0",
  "icecream>=2.1.4",
  "neovim<1.0.0,>=0.3.1",
  "pyclean<4.0.0,>=3.1.0",
  "pyright<2.0.0,>=1.1.237",
  "pytest-cov<7.0.0,>=6.0.0",
  "pytest-gitignore<2.0,>=1.3",
  "radon[toml]<7.0.0,>=6.0.1",
  "ruff<1.0.0,>=0.11.5",
  "toml-cli<1.0.0,>=0.7.0",
  "types-python-dateutil<3.0.0,>=2.8.0",
  "vulture<3.0,>=2.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["nudebomb", "tests", "NEWS.md"]

[tool.codespell]
skip = ".git,.mypy_cache,.pytest_cache,.ruff_cache,.venv,*~,./dist,./node_modules,./package-lock.json,./uv.lock,./test-results"
builtin = "clear,rare,code"
check-hidden = true
ignore-words-list = "thead"

[tool.coverage.run]
source = ["nudebomb"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".ruff_cache/*",
  ".venv/*",
  "*__pycache__*",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
]

[tool.coverage.html]
directory = "test-results/coverage"

[tool.pytest.ini_options]
addopts = """
  --junitxml=test-results/pytest/junit.xml
  -ra
  --strict-markers
  --cov
  --cov-append
  --cov-report=html
  --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".ruff_cache",
  ".venv",
  "dist",
  "package-lock.json",
  "uv.lock",
  "test-results",
  "typings",
  "vulture_whitelist.py",
]
pythonVersion = "3.10"
pythonPlatform = "All"
reportImportCycles = true
reportMisingImports = true
useLibraryCodeForTypes = true
venvPath = "."
venv = ".venv"

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.ruff_cache/*,.venv/*,__pycache__/*,dist/*,node_modules/*,test-results/*,typings/*"

[tool.ruff]
extend-exclude = ["cache", "typings"]
target-version = "py310"
[tool.ruff.lint]
extend-ignore = [
  "BLE001",  # catch bare exception
  "COM812",  # missing trailing comma
  "COM819",  # prohibit trailing comma
  "D203",    # blank line before class docstring
  "D206",    # formatted
  "D212",    # first line multi line docstring.
  "E111",    # formatted
  "E114",    # formatted
  "E117",    # over-indented
  "E501",    # 88 char line
  "ISC001",  # formatted
  "PERF203", # try block in loop
  "S101",    # assert
  "W191",    # formatted
]
extend-select = [
  "A",
  # "AIR",
  # "ANN",
  "ARG",
  "ASYNC",
  "B",
  "B9",
  "BLE",
  "C",
  "C4",
  "C90",
  "COM",
  # "CPY",
  "D",
  "DJ",
  # "DOC",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  "FA",
  # "FAST",
  "FBT",
  "FIX",
  "FLY",
  # "FURB",
  # "G",
  "I",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "LOG",
  # "PD",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  # "Q", Formatted
  "N",
  # NPY,
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TC",
  "TCH",
  # "TD",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.vulture]
exclude = [
  ".git/",
  ".mypy_cache/",
  ".pytest_cache",
  ".ruff_cache",
  ".venv",
  "*__pycache__*",
  "node_modules",
]
min_confidence = 61
sort_by_size = true
