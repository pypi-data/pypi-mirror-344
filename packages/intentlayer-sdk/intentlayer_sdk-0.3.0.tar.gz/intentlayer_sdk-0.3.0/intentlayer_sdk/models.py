"""
Data models for the IntentLayer SDK.
"""
from typing import Dict, Any, Optional, List
from pydantic import BaseModel, Field

# Note: CallEnvelope is now imported from envelope.py

class TxReceipt(BaseModel):
    """
    Transaction receipt model matching on-chain receipt fields.

    Attributes:
        transactionHash: Hash of the transaction as a hex string.
        blockNumber: Block number in which the transaction was mined.
        blockHash: Hash of the block containing the transaction.
        status: Transaction status (1 = success, 0 = failure).
        gasUsed: Amount of gas used by the transaction.
        logs: Event logs generated by the transaction.
        from_address: Address of the sender (alias 'from').
        to_address: Address of the recipient/contract (alias 'to').
    """
    transactionHash: str = Field(alias="transactionHash")
    blockNumber: int = Field(alias="blockNumber")
    blockHash: str = Field(alias="blockHash")
    status: int
    gasUsed: int = Field(alias="gasUsed")
    logs: List[Any]
    from_address: str = Field(alias="from")
    to_address: str = Field(alias="to")

    model_config = {
        "populate_by_name": True,  # allow population by field name in Pydantic v2
    }
    
    # Backward compatibility property getters
    @property
    def tx_hash(self) -> str:
        """Alias for transactionHash"""
        return self.transactionHash
        
    @property
    def block_number(self) -> int:
        """Alias for blockNumber"""
        return self.blockNumber
        
    @property
    def block_hash(self) -> str:
        """Alias for blockHash"""
        return self.blockHash
        
    @property
    def gas_used(self) -> int:
        """Alias for gasUsed"""
        return self.gasUsed