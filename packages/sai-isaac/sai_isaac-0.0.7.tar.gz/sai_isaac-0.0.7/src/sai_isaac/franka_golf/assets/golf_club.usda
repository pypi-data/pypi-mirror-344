#usda 1.0
(
    defaultPrim = "Root"
    upAxis = "Z"
)

def Xform "Root"
{
    def Xform "GolfClub" (
        apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
    )
    {
        token ui:displayGroup = "Material Graphs"
        token ui:displayName = "GolfClub"
        int ui:order = 1024
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Xform "grip_link" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
            instanceable = true
        )
        {
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.1
            bool physics:rigidBodyEnabled = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cylinder "GripCylinder" (
                apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI"]
                instanceable = true
            )
            {
                double height = 0.25
                double radius = 0.012
                uniform token axis = "Z"
                bool physics:collisionEnabled = 1
                rel material:binding = </Root/GripMaterial>
                double3 xformOp:translate = (0, 0, 0.16)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }
        }

        def Xform "head_link" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.05
            bool physics:rigidBodyEnabled = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Mesh "Cube" (
                apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.09, 0.03, 0.05)
                double3 xformOp:translate = (0, 0, 0.05)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </Root/GolfClub/head_link>
                rel physics:body1 = </Root/GolfClub/grip_link>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                bool physics:jointEnabled = 1
                point3f physics:localPos0 = (0, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def PhysicsMaterial "GripMaterial"
    {
        float physics:staticFriction = 1.8
        float physics:dynamicFriction = 1.5
        float physics:restitution = 0.0
    }
}