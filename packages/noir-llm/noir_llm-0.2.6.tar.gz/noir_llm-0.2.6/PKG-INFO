Metadata-Version: 2.4
Name: noir-llm
Version: 0.2.6
Summary: A Python package for accessing various LLM models freely
Home-page: https://github.com/noir-llm/noir
Author: Noir Team
Author-email: noir.llm.team@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.0
Requires-Dist: colorama>=0.4.4
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Noir-LLM

> **DISCLAIMER**: This package is for educational purposes only. Use at your own risk. See the [Disclaimer](#disclaimer) section for more details.

A Python package for accessing various LLM models freely and using them in your projects.

[![PyPI version](https://badge.fury.io/py/noir-llm.svg)](https://badge.fury.io/py/noir-llm)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## Features

- Access to multiple LLM models through a unified API
- Web search capabilities for supported models
- System prompt customization
- Command-line interface for interactive chat sessions
- Simple Python API for integration into your projects
- User agent rotation for bypassing rate limits

## Installation

```bash
pip install noir-llm
```

## Quick Start

### Command-Line Interface

List available models:

```bash
noir-llm list
```

Start an interactive chat session:

```bash
noir-llm chat
```

Start a chat session with a specific model:

```bash
noir-llm chat --model glm-4-32b
# or
noir-llm chat --model mistral-31-24b
# or
noir-llm chat --model gpt-3.5-turbo
# or
noir-llm chat --model claude-3-7-sonnet
```

Enable web search for the chat session:

```bash
noir-llm chat --model glm-4-32b --websearch
# or
noir-llm chat --model mistral-31-24b --websearch
```

Send a single message:

```bash
noir-llm send "What is the capital of France?" --model glm-4-32b
# or
noir-llm send "What is the capital of France?" --model llama-3.2-3b
# or
noir-llm send "What is the capital of France?" --model gpt-3.5-turbo
# or
noir-llm send "What is the capital of France?" --model claude-3-7-sonnet
```

### Python API

```python
from noir import NoirClient

# Create a client
client = NoirClient()

# List available models
models = client.get_available_models()
print(f"Available models: {models}")

# Select a model
client.select_model("glm-4-32b")
# or
# client.select_model("mistral-31-24b")
# or
# client.select_model("gpt-3.5-turbo")
# or
# client.select_model("claude-3-7-sonnet")

# Set a system prompt
client.set_system_prompt("You are a helpful assistant.")

# Send a message
response = client.send_message("What is the capital of France?")
print(f"Response: {response}")

# Enable web search
response = client.send_message("What are the latest developments in quantum computing?", websearch=True)
print(f"Response with web search: {response}")
```

## Available Models

- GLM-4-32B: A powerful language model with web search capabilities
- Z1-32B: Another powerful language model with web search capabilities
- Z1-Rumination: A model optimized for deep research and analysis
- Mistral-31-24B: A high-quality language model from Venice AI with web search capabilities
- Llama-3.2-3B: A compact but powerful model from Venice AI with web search capabilities
- GPT-3.5-Turbo: OpenAI's GPT-3.5 model with fast response times and good general capabilities
- Claude-3-7-Sonnet: Anthropic's Claude 3.7 Sonnet model with advanced reasoning capabilities

## User Agent Utilities

Noir provides utilities for rotating user agents to help bypass rate limits when making requests to model APIs:

```python
from noir.utils import get_random_user_agent, get_desktop_user_agent, get_mobile_user_agent

# Get a random user agent
user_agent = get_random_user_agent()

# Get a random desktop user agent
desktop_agent = get_desktop_user_agent()

# Get a random mobile user agent
mobile_agent = get_mobile_user_agent()

# Use with requests
import requests
session = requests.Session()
headers = {
    "User-Agent": get_random_user_agent(),
    "Accept": "text/html,application/xhtml+xml,application/xml"
}
response = session.get("https://example.com", headers=headers)
```

The user agent list is fetched from a comprehensive database of real browser user agents, ensuring a wide variety of options for rotation.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## Disclaimer

**IMPORTANT**: This package is provided for educational purposes only. Use at your own risk. The package accesses third-party APIs without official authorization, which may violate terms of service of the respective providers. The authors are not responsible for any consequences resulting from the use of this package, including but not limited to account suspensions, legal actions, or any other damages.

By using this package, you acknowledge that:
- You are using it solely for educational and research purposes
- You understand the potential risks involved
- You take full responsibility for any consequences that may arise from its use

## License

This project is licensed under the MIT License - see the LICENSE file for details.
