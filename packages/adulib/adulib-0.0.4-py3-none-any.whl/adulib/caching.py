# AUTOGENERATED! DO NOT EDIT! File to edit: ../../pts/api/.ipynb_checkpoints/caching-checkpoint.pct.py.

# %% auto 0
__all__ = ['cache', 'memoize']

# %% ../../pts/api/.ipynb_checkpoints/caching-checkpoint.pct.py 3
try:
    import diskcache
    from pathlib import Path
except ImportError as e:
    raise ImportError(f"Install adulib[{__name__.split('.')[-1]}] to use this API.") from e

from .utils import check_mutual_exclusivity

# %% ../../pts/api/.ipynb_checkpoints/caching-checkpoint.pct.py 4
cache = diskcache.Cache()

cache.memoize

# %% ../../pts/api/.ipynb_checkpoints/caching-checkpoint.pct.py 5
__caches = {}
__TEMP_CACHE = 0

# %% ../../pts/api/.ipynb_checkpoints/caching-checkpoint.pct.py 6
def memoize(cache_path=None,
            cache=None,
            temp=False,
            typed=True,
            expire=None,
            tag=None,
            ):
    
    if not check_mutual_exclusivity(cache_path, cache, temp):
        raise ValueError("One - and only one - of cache_path, cache, and temp can be provided")
    
    if cache is None:
        if cache_path is None:
            if __TEMP_CACHE in __caches:
                cache = __caches[__TEMP_CACHE]
            else:
                cache = diskcache.Cache()
                __caches[__TEMP_CACHE] = cache
        else:
            cache_path = Path(cache_path).as_posix()
            if cache_path in __caches:
                cache = __caches[cache_path]
            else:
                cache = diskcache.Cache(cache_path)
                __caches[cache_path] = cache
                
    def decorator(f):
        
        memoized_f = cache.memoize(expire=expire, tag=tag, typed=typed)(f)
        return memoized_f
    
    return decorator
