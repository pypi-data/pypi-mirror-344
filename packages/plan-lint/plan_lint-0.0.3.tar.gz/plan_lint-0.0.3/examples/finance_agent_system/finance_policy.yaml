# Financial Operations Security Policy
# Used by plan-linter to validate all agent-generated plans

# Only allow these specific tools to be used by agents
allow_tools:
  # Database access - enforcing read-only for most operations
  - db.query_ro
  - db.get_transaction_history
  - db.get_account_details
  
  # Transaction processing with strict controls
  - payments.transfer
  - payments.authorize
  - payments.verify
  
  # Analysis tools
  - analytics.summarize
  - analytics.detect_fraud
  
  # Notification tools
  - notify.customer
  - notify.internal

# Enforce bounds on critical parameters
bounds:
  # Strict limits on financial transactions
  payments.transfer.amount: [0.01, 5000.00]
  payments.authorize.amount: [0.01, 10000.00]
  
  # Limits on data retrieval to prevent excessive queries
  db.query_ro.limit: [1, 1000]
  db.get_transaction_history.days: [1, 90]
  
  # Rate limits for notifications
  notify.customer.priority: [1, 3]

# Detect potentially sensitive data in plans
deny_tokens_regex:
  # Prevent raw credential exposure
  - "API_KEY"
  - "SECRET"
  - "PASSWORD"
  - "TOKEN"
  - "AUTH"
  
  # PII/payment data patterns
  - "[0-9]{13,16}" # Credit card numbers
  - "[0-9]{9}"     # SSN pattern
  - "[0-9]{3}-[0-9]{2}-[0-9]{4}" # SSN with dashes
  
  # SQL injection patterns
  - "DROP TABLE"
  - "DELETE FROM"
  - "--"
  - "1=1"
  - "OR 1=1"
  - "';--"

# Maximum number of steps in a plan
max_steps: 15

# Risk weights for different types of violations
risk_weights:
  # Highest risk: Writing operations and credential exposure
  tool_deny: 0.7
  raw_secret: 0.8
  
  # Medium risk: Bounds violations and loops
  bound_violation: 0.5  
  loop_detected: 0.4
  
  # Lower risk but still concerning
  max_steps_exceeded: 0.3

# Risk threshold that causes failure
fail_risk_threshold: 0.6 