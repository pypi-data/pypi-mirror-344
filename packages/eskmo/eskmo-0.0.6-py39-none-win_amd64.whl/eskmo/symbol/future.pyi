from eskmo.base.mvtype import *
from eskmo.const.skcom import *
from eskmo.const.event import *
from eskmo.skcom.function import *
from _typeshed import Incomplete
from eskmo.base.extension import Extension as Extension
from eskmo.base.subscribable import SubscribableInfo as SubscribableInfo, SymbolSubscribable as SymbolSubscribable
from eskmo.skcom.order import OrderEventHandler as OrderEventHandler
from eskmo.symbol.position import FuturePosition as FuturePosition
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.misc import threadStart as threadStart, toDollar as toDollar
from eskmo.utils.tick import BaseTickCategoryRule as BaseTickCategoryRule, TickType as TickType

HANDLER_FUTURE_INFO: str
QUOTE_ZERO_VERFIED_TIMES: int
MAX_QUOTE_RESUBSCRIBE_TIMES: int

class FutureInfoHandler(Extension):
    symbolInfoClass: Incomplete
    futureDict: dict[str, self.symbolInfoClass]
    pendingFutureDict: dict[str, self.symbolInfoClass]
    futureIdxDict: dict[int, dict[str, str]]
    futureStockNos: Incomplete
    subscribeDict: Incomplete
    futureList: Incomplete
    page: Incomplete
    trigger: Incomplete
    subscribeLock: Incomplete
    createEmptyFutureInfoLock: Incomplete
    tagDict: Incomplete
    suffixSymbol: str
    marginLimitWaitingListLock: Incomplete
    requestMarginLimitWaitingList: Incomplete
    requestPnLDetailsWaitingList: Incomplete
    requestPnLSummaryWaitingList: Incomplete
    lock: Incomplete
    subscribeBest5Lock: Incomplete
    def __init__(self, trigger, defaultApi: Incomplete | None = None, page=..., symbolInfoClass: Incomplete | None = None) -> None: ...
    def initFutureStockNos(self) -> None: ...
    def getFutureStockNo(self, symbol): ...
    def requestMarginLimit(self, pid, apiName, account, tag, data, **kwargs) -> None: ...
    def requestHistoryKline(self, pid, apiName, account, tag, data, **kwargs) -> None: ...
    def addToWaitingList(self, symbolCode, pid, event) -> None: ...
    def removeFromWaitingList(self, symbolCode, event) -> None: ...
    def getPIDSubscribeInfo(self, pid, tag): ...
    def onNewSymbols(self, apitype, data) -> None: ...
    def onSkcomNewSymbols(self, quotes, page) -> None: ...
    def unsubscribeAll(self, pid, apiType, account, tags) -> None: ...
    def subscribe(self, pid, apiType, account, tag, data, *args, **kwargs) -> None: ...
    def unsubscribe(self, pid, apiType, account, tag, data, *args, **kwargs) -> None: ...
    def request(self, pid, apiType, account, tag, data, *args, **kwargs) -> None: ...
    api: Incomplete
    skcomFuture: Incomplete
    def addAPI(self, apiName, api) -> None: ...
    def getAllSymbolIndexedData(self): ...
    def requestSkcomCurrentSymbols(self, pid, api, account, tag, *args, **kwargs): ...
    def getHistoryKline(self, symbolCode, period, startTimestamp, endTimestamp): ...
    def requestSkcomHistoryKline(self, pid, account, symbolCode, period, startTimestamp, endTimestamp, minuteNumber): ...
    def requestSkcomMarginLimit(self, pid, account, symbolCode): ...
    def requestCurrentSymbols(self, pid, apiName, account, tag, *args, **kwargs) -> None: ...
    def addSymbolIdx(self, nFutureIdx, bstrMarketNo, symbolCode) -> None: ...
    def handleReplyInPendingFutureInfo(self, symbolCode, reply) -> None: ...
    def handleMITReplyInPendingFutureInfo(self, symbolCode, mitReply) -> None: ...
    def handleOCOReplyInPendingFutureInfo(self, symbolCode, ocoReply) -> None: ...
    def handleFastOCOReplyInPendingFutureInfo(self, symbolCode, fastOCOReply) -> None: ...
    def requestSymbols(self): ...
    def onNewReply(self, reply) -> None: ...

class FutureInfo(SubscribableInfo):
    api: Incomplete
    handler: FutureInfoHandler
    symbolCode: Incomplete
    quote: Incomplete
    category: Incomplete
    tickType: Incomplete
    symbolName: Incomplete
    quoteReady: bool
    quoteResubscribeCount: int
    position: Incomplete
    market: Incomplete
    quoteVerifyCount: int
    marginPurchaseAmountLimit: Incomplete
    pnlDetails: Incomplete
    pnlSummary: Incomplete
    onSubscribeBest5: bool
    best5: Incomplete
    klineLastUpdated: Incomplete
    kline: Incomplete
    prevQuoteClose: Incomplete
    quoteClose: Incomplete
    prevV: int
    bsDiff: int
    bsDiffPercent: int
    page: Incomplete
    onSubscribeQuote: bool
    realBalanceDict: Incomplete
    prevQuoteTime: Incomplete
    quoteTimeDiffStr: str
    onFirstQuoteEventLock: Incomplete
    tagList: Incomplete
    quoteEvent: Incomplete
    priceChangeEvent: Incomplete
    tickEvent: Incomplete
    bidAskEvent: Incomplete
    callEvent: Incomplete
    subscribeQuoteLock: Incomplete
    def __init__(self, handler: Incomplete | None = None, api: Incomplete | None = None, symbol: str = '', page=..., tag: str = '', name: str = '', market=...) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, val) -> None: ...
    def addQuote(self, quote) -> None: ...
    def onNewReply(self, reply) -> None: ...
    def onBalanceInit(self, reply) -> None: ...
    def onNewStrategyReply(self, reply) -> None: ...
    def onRealBalance(self, realBalanceDict) -> None: ...
    def getRealTimeInventory(self): ...
    def subscribe(self, tag, pid, data={}, *args, **kwargs): ...
    def unsubscribe(self, tag, pid): ...
    def alreadySubscribe(self, tag, targetPid) -> None: ...
    def setMarginPurchaseAmountLimit(self, limits: dict): ...
    def setPnLDetails(self, pnl: dict, pnlType: int): ...
    def setPnLSummary(self, pnl: dict, pnlType: int): ...
    def publishToWaitingList(self, waitingList, event, data) -> None: ...
    def getIndexedData(self): ...
    def getFutureInfo(self) -> None: ...
    def getBest5Pages(self): ...
    def getBest5Page(self, symbolCode): ...
    def addBest5Page(self, page, symbolCode) -> None: ...
    def removeFromBest5Pages(self, symbolCode) -> None: ...
    def getBest5NewPage(self): ...
    def callSkcomSubscribeBest5(self, pid, newPage): ...
    def callSkcomUnsubscribeBest5(self, pid): ...
    def callSkcomSubscribeQuote(self, pid, codes): ...
    def callSkcomUnsubscribeQuote(self, pid): ...
    def callSkcomSubscribeKline(self, pid, period): ...
    def subscribeBest5(self, pid): ...
    def unsubscribeMarginLimit(self, pid): ...
    def unsubscribeBest5(self, pid): ...
    def removeFromSubscribeQuotesString(self, symbolCode, pid) -> None: ...
    def getSubscribeQuotesString(self): ...
    def subscribeMarginLimit(self, pid, *args, **kwargs): ...
    def subscribeKline(self, pid, period, **kwargs): ...
    def subscribeQuote(self, pid): ...
    def unsubscribeQuote(self, pid): ...
    @staticmethod
    def SKBest5ToDict(best5): ...
    @staticmethod
    def SKFutureLongToDict(future): ...
    def publishMarginLimit(self) -> None: ...
    def publishPnLDetails(self, pnlType: int): ...
    def publishPnLSummary(self, pnlType: int): ...
    def publishBest5(self, event, best5, pid) -> None: ...
    def publishKline(self, event, kline, pid) -> None: ...
    def checkForFirstQuote(self): ...
    def checkTriggerOnFirstQuote(self, isFirstQuote) -> None: ...
    def isQuotePriceChanged(self): ...
    def isQuoteVolumeChanged(self): ...
    def resubscribeIfQuoteCloseInvalid(self) -> None: ...
    def quoteResubscribeTimeout(self): ...
    dailyVolume: Incomplete
    def OnQuoteEvent(self, quote) -> None: ...
    def forcePublishQuote(self, quote) -> None: ...
    @staticmethod
    def SKBest5ToDict(best5): ...
    @staticmethod
    def SKFutureLongToDict(future): ...
    def isQuoteVerfied(self, quote): ...
    def publishQuote(self, event, quote, pid) -> None: ...
    def publishBest5(self, event, best5, pid) -> None: ...
    def toBest5Dict(self, best5): ...
    def toTickDict(self, tick: dict): ...
    def createThreadHandler(self, tag, num) -> None: ...
    def deleteThreadHandler(self, tag) -> None: ...
    def onKlineEvent(self, kline: Incomplete | None = None, targetPid: Incomplete | None = None) -> None: ...
    tick: Incomplete
    def onTickEvent(self, tick: Incomplete | None = None, targetPid: Incomplete | None = None) -> None: ...
    def onHistoryTickEvent(self, tick: Incomplete | None = None, targetPid: Incomplete | None = None) -> None: ...
    def onBest5Event(self, best5: Incomplete | None = None, targetPid: Incomplete | None = None) -> None: ...
    def onPriceChangeEvent(self, targetPid: Incomplete | None = None) -> None: ...
    def onQuoteBAChanged(self, targetPid: Incomplete | None = None) -> None: ...
    def onBidAskEvent(self, targetPid: Incomplete | None = None) -> None: ...
    def onQuoteOnTickEvent(self) -> None: ...
    def request(self, *args, **kwargs): ...
