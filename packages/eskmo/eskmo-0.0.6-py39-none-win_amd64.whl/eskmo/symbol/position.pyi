from eskmo.const.event import *
from eskmo.const.skcom import *
from eskmo.base.mvtype import *
from _typeshed import Incomplete
from dataclasses import dataclass
from eskmo.base.extension import Extension as Extension
from eskmo.base.subscribable import SubscribableInfo as SubscribableInfo, SymbolSubscribable as SymbolSubscribable
from eskmo.base.types import RUNNER_NAME as RUNNER_NAME
from eskmo.skcom.function import SKO_CANCEL_ORDER_BY_STOCK_NO as SKO_CANCEL_ORDER_BY_STOCK_NO, SKQ_GET_STOCK_BY_INDEX_LONG as SKQ_GET_STOCK_BY_INDEX_LONG
from eskmo.skcom.recipe import SKCBOrderRecipe as SKCBOrderRecipe, SKMITOrderRecipe as SKMITOrderRecipe, SKOrderRecipe as SKOrderRecipe
from eskmo.skcom.reply import FutureReply as FutureReply, Reply as Reply, StrategyReply as StrategyReply
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.misc import isToday as isToday

HANDLER_POSITION: str
BALANCE_TYPE_STOCK: str
BALANCE_TYPE_MARGIN: str
BALANCE_TYPE_SHORT: str
BALANCE_TYPE_NAKED_SHORT: str
DEAL_TYPE_YEST_POS: str
DEAL_TYPE_PENDING_BUY: str
DEAL_TYPE_PENDING_SELL: str
DEAL_TYPE_BUY: str
DEAL_TYPE_SELL: str

class PositionInfo(SubscribableInfo):
    handler: PositionHandler
    api: Incomplete
    symbolCode: Incomplete
    symbolReady: bool
    def __init__(self, handler: Incomplete | None = None, api: Incomplete | None = None, symbolCode: str = '') -> None: ...
    def subscribe(self, tag, pid, data={}, *args, **kwargs): ...
    def unsubscribe(self, tag, pid): ...
    def alreadySubscribe(self, tag, targetPid) -> None: ...
    def request(self, tag): ...

class PositionHandler(Extension):
    cnt: Incomplete
    trigger: Incomplete
    futureOrders: Incomplete
    futureOrdersBySymbol: Incomplete
    futureBalance: Incomplete
    orders: Incomplete
    ordersBySymbol: Incomplete
    balance: Incomplete
    mitOrders: Incomplete
    mitOrdersBySymbol: Incomplete
    mitBalance: Incomplete
    ocoOrders: Incomplete
    ocoOrdersBySymbol: Incomplete
    ocoBalance: Incomplete
    positions: Incomplete
    publishReplyQueue: Incomplete
    def __init__(self, trigger, defaultApi: Incomplete | None = None) -> None: ...
    def listenPublishReply(self) -> None: ...
    def cancelAllOrders(self, runnerName, pid, data, *args, **kwargs) -> None: ...
    def filterVolumeByWhitelist(self, longBacks, shortBacks, whitelist): ...
    def calculateVolumeForCloseAll(self): ...
    def calculateTodayVolumeForCloseBySymbol(self, symbolCode): ...
    def calculateVolumeForCloseBySymbol(self, symbolCode): ...
    def getSkcomUpPrice(self, symbolCode): ...
    def getSkcomDownPrice(self, symbolCode): ...
    def sendSkcomOrder(self, runnerName, pid, order) -> None: ...
    def closeAllPositions(self, runnerName, pid, data, *args, **kwargs) -> None: ...
    def longAndShortBackOnUpDownPrice(self, runnerName, pid, longBacks: dict, shortBacks: dict): ...
    def closeTodayPositionBySymbol(self, runnerName, pid, data, *args, **kwargs) -> None: ...
    def closePositionBySymbol(self, runnerName, pid, data, *args, **kwargs) -> None: ...
    def getPIDSubscribeInfo(self, pid, tag): ...
    def onNewSymbols(self, apitype, data) -> None: ...
    def onSkcomNewSymbols(self, quotes) -> None: ...
    def subscribe(self, pid, apiType, account, tag, data, *args, **kwargs) -> None: ...
    def unsubscribeAll(self, pid, apiType, account, tags) -> None: ...
    def unsubscribe(self, pid, apiType, account, tag, data, *args, **kwargs) -> None: ...
    def request(self, pid, apiType, account, tag, data, *args, **kwargs) -> None: ...
    def requestMITOrders(self, pid, data) -> None: ...
    def requestOCOOrders(self, pid, data) -> None: ...
    def requestOrders(self, pid, data) -> None: ...
    def requestBalance(self, pid, data) -> None: ...
    def requestMITBalance(self, pid, data) -> None: ...
    def requestOCOBalance(self, pid, data) -> None: ...
    def publishOrderChangedEvent(self, tag, symbolCode, queueName, event, data) -> None: ...
    def OnMITOrderChange(self, mitOrder) -> None: ...
    def OnOCOOrderChange(self, ocoOrder) -> None: ...
    def OnFutureOrderChange(self, order) -> None: ...
    def OnOrderChange(self, order) -> None: ...
    def OnMITBalanceChange(self, symbolCode, mitBalance) -> None: ...
    def OnOCOBalanceChange(self, symbolCode, ocoBalance) -> None: ...
    def OnFutureBalanceChange(self, symbolCode, balance) -> None: ...
    def OnBalanceChange(self, symbolCode, balance) -> None: ...
    def subscribeOrders(self, pid, sybmolCode, *args, **kwargs): ...
    def subscribeFutureOrders(self, pid, symbolCode, *args, **kwargs): ...
    def subscribeMITOrders(self, pid, sybmolCode, *args, **kwargs): ...
    def subscribeOCOOrders(self, pid, sybmolCode, *args, **kwargs): ...
    def subscribeOCOBalance(self, pid, sybmolCode, *args, **kwargs): ...
    def subscribeFutureBalance(self, pid, sybmolCode, *args, **kwargs): ...
    def subscribeMITBalance(self, pid, sybmolCode, *args, **kwargs): ...
    def subscribeBalance(self, pid, sybmolCode, *args, **kwargs): ...
    def unsubscribeOrders(self, pid, sybmolCode): ...
    def unsubscribeMITOrders(self, pid, sybmolCode): ...
    def unsubscribeOCOOrders(self, pid, sybmolCode): ...
    def unsubscribeBalance(self, pid, sybmolCode): ...
    def publishEvent(self, event, order, pid) -> None: ...
    def publishReply(self, event, order, pid) -> None: ...
    api: Incomplete
    def addAPI(self, apiName, api) -> None: ...
    def initAPIInterface(self, apiName) -> None: ...

@dataclass
class PriceInfo:
    remainVolume: int = ...
    dealVolume: int = ...
    def isClear(self): ...
    def toDict(self): ...

class OrderOnPrice:
    updateOrderFn: Incomplete
    def __init__(self) -> None: ...
    def getData(self): ...
    def newReply(self, reply) -> None: ...
    def OnOrderReply(self, reply) -> None: ...
    def OnDealReply(self, reply) -> None: ...
    def OnCancelOrderReply(self, reply) -> None: ...
    def OnChangeOrdervolumeReply(self, reply) -> None: ...
    def OnChangePriceReply(self, reply) -> None: ...
    def OnChangePriceAndVolumeReply(self, reply) -> None: ...
    def OnDynamicRejectReply(self, reply) -> None: ...

class Order:
    updateOrderFn: Incomplete
    orderStatus: Incomplete
    orderPrice: Incomplete
    dealPrice: Incomplete
    originVolume: Incomplete
    cancelVolume: int
    dealVolume: int
    orderOnPrice: Incomplete
    remainVolume: Incomplete
    isClosed: bool
    remainChange: Incomplete
    dealChange: int
    def __init__(self, reply) -> None: ...
    def setAttrFromReply(self, reply) -> None: ...
    @property
    def replys(self): ...
    def updateOrder(self, reply, replyType: str = '成交') -> None: ...
    def OnOrderReply(self, reply) -> None: ...
    def OnDealReply(self, reply) -> None: ...
    def OnCancelOrderReply(self, reply) -> None: ...
    def OnChangeOrdervolumeReply(self, reply) -> None: ...
    def OnChangePriceReply(self, reply) -> None: ...
    def OnChangePriceAndVolumeReply(self, reply) -> None: ...
    def OnDynamicRejectReply(self, reply) -> None: ...
    def close(self) -> None: ...
    def dict(self): ...

class FutureOrder(Order):
    def setAttrFromReply(self, reply) -> None: ...

class OCOOrder:
    isClosed: bool
    orderStatus: Incomplete
    triggerStatus: Incomplete
    orderPrice: Incomplete
    triggerUpPrice: Incomplete
    triggerDownPrice: Incomplete
    triggerDir: Incomplete
    originVolume: Incomplete
    remainVolume: int
    cancelVolume: int
    dealVolume: int
    remainChange: int
    dealChange: int
    def __init__(self, reply) -> None: ...
    @property
    def replys(self): ...
    @staticmethod
    def getTriggerMessage(ocoReply): ...
    @staticmethod
    def getOrderStatusMessage(ocoReply): ...
    def updateOrder(self, reply) -> None: ...
    def dict(self): ...

class MITOrder:
    isClosed: bool
    orderStatus: Incomplete
    triggerStatus: Incomplete
    orderPrice: Incomplete
    triggerPrice: Incomplete
    triggerDir: Incomplete
    originVolume: Incomplete
    remainVolume: int
    cancelVolume: int
    dealVolume: int
    remainChange: int
    dealChange: int
    def __init__(self, reply) -> None: ...
    @property
    def replys(self): ...
    @staticmethod
    def getTriggerMessage(mitReply): ...
    @staticmethod
    def getOrderStatusMessage(mitReply): ...
    def updateOrder(self, reply) -> None: ...
    def dict(self): ...

INTERNAL_SMART_ORDERS: Incomplete

class AvgCost:
    volume: int
    cost: int
    avgPrice: int
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def add(self, price, volumeChange): ...

class AvgCostProxy:
    class DealData:
        price: Incomplete
        volumeChange: Incomplete
        def __init__(self, price, volumeChange) -> None: ...
    yesList: Incomplete
    newDealList: Incomplete
    isRealTime: bool
    avgCost: Incomplete
    initFinishedLock: Incomplete
    def __init__(self, avgCost=...) -> None: ...
    @property
    def avgPrice(self): ...
    def addNewDeal(self, price, volumeChange) -> None: ...
    def addYesDeal(self, price, volumeChange) -> None: ...
    def initYesFinished(self) -> None: ...

class FifoAvgCost:
    def __init__(self) -> None: ...
    def add(self, price, volumeChange) -> None: ...
    @property
    def avgPrice(self): ...

class FifoAvgCostProxy(AvgCostProxy):
    def __init__(self) -> None: ...
    def addNewDeal(self, price, volumeChange) -> None: ...

class DailyFifoAvgCostProxy:
    class DealData:
        price: Incomplete
        volumeChange: Incomplete
        def __init__(self, price, volumeChange) -> None: ...
    yesList: Incomplete
    newDealList: Incomplete
    isRealTime: bool
    initFinishedLock: Incomplete
    def __init__(self) -> None: ...
    def addNewDeal(self, price, volumeChange) -> None: ...
    def addYesDeal(self, price, volumeChange) -> None: ...
    def initYesFinished(self) -> None: ...
    def reset(self) -> None: ...
    @property
    def avgPrice(self): ...
    @property
    def realizedPnl(self): ...

class StockBalance:
    replyTradeTypeMap: Incomplete
    yesAvgCostTradeTypeMap: Incomplete
    unit: Incomplete
    data: Incomplete
    avgCosts: Incomplete
    dayTradeFifoAvg: Incomplete
    dailyFifoAvg: Incomplete
    def __init__(self, unit: int = 1) -> None: ...
    @staticmethod
    def createTradeTypeInfo(keys): ...
    def onBalanceInit(self, data) -> None: ...
    def updateBalance(self, order) -> None: ...
    def updateChange(self, order) -> None: ...
    def updateAvgCostByOrder(self, order) -> None: ...
    def updateAvgCost(self) -> None: ...
    def addYesAvgCost(self, data) -> None: ...
    def initAvgCostFinished(self) -> None: ...

class MITStockBalance:
    replyTradeTypeMap: Incomplete
    data: Incomplete
    def __init__(self) -> None: ...
    def onBalanceInit(self, data) -> None: ...
    def updateBalance(self, order) -> None: ...
    def updateChange(self, replyTradeType, buyOrSell, order) -> None: ...

class OCOStockBalance:
    replyTradeTypeMap: Incomplete
    data: Incomplete
    def __init__(self) -> None: ...
    def onBalanceInit(self, data) -> None: ...
    def updateBalance(self, order) -> None: ...
    def updateChange(self, replyTradeType, buyOrSell, order) -> None: ...

class StockPosition:
    api: Incomplete
    preBalance: Incomplete
    position: PositionHandler
    orders: dict[str, Order]
    balance: Incomplete
    failOrders: Incomplete
    dealOrders: Incomplete
    openOrders: Incomplete
    mitOrders: dict[str, MITOrder]
    mitBalance: Incomplete
    mitFailOrders: Incomplete
    mitDealOrders: Incomplete
    mitOpenOrders: Incomplete
    ocoOrders: dict[str, OCOOrder]
    ocoBalance: Incomplete
    ocoFailOrders: Incomplete
    ocoDealOrders: Incomplete
    ocoOpenOrders: Incomplete
    def __init__(self, api, unit: int = 1000) -> None: ...
    def onBalanceInit(self, data) -> None: ...
    def updateOldOrder(self, order, reply) -> None: ...
    def updateOldStrategyOrder(self, order, strategyReply) -> None: ...
    def onFastOCOReply(self, fastOCOReply) -> None: ...
    def onNewOCOReply(self, ocoReply) -> None: ...
    def onNewMITReply(self, mitReply) -> None: ...
    def onNewReply(self, reply) -> None: ...
    def addYesAvgCost(self, data) -> None: ...
    def initAvgCostFinished(self) -> None: ...

class FuturePosition:
    api: Incomplete
    preBalance: Incomplete
    position: PositionHandler
    orders: dict[str, FutureOrder]
    balance: Incomplete
    failOrders: Incomplete
    dealOrders: Incomplete
    openOrders: Incomplete
    def __init__(self, api) -> None: ...
    def onBalanceInit(self, data) -> None: ...
    def updateOldOrder(self, order, reply) -> None: ...
    def onNewReply(self, reply) -> None: ...
