from eskmo.const.event import *
from eskmo.base.mvtype import *
import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from eskmo.base.handler import APIHandler as APIHandler
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.misc import shortString as shortString

class SubscribableInfo(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def subscribe(self, tag): ...
    @abstractmethod
    def unsubscribe(self, tag): ...
    @abstractmethod
    def request(self, tag): ...
    @abstractmethod
    def alreadySubscribe(self, tag, pid): ...

class ActionExecutor:
    trigger: Incomplete
    state: Incomplete
    callbacks: Incomplete
    def __init__(self, doing, tag) -> None: ...
    def tag(self): ...
    func: Incomplete
    def setFunction(self, func) -> None: ...
    def setSuccessCallbacks(self, callbacks=[]) -> None: ...
    def setFailCallbacks(self, callbacks=[]) -> None: ...
    def setTrigger(self, trigger) -> None: ...
    def execute(self, pid, account, data={}, *args, **kwargs): ...
    def run(self, pid, account, data, *args, **kwargs) -> None: ...
    def onSuccess(self, pid, data={}, ret={}) -> None: ...
    def onFail(self, pid, data={}, ret={}) -> None: ...
    def runCallback(self, key, data, ret) -> None: ...

class SubscribeExecutor(ActionExecutor):
    def __init__(self, tag, trigger) -> None: ...

class UnsubscribeExecutor(ActionExecutor):
    def __init__(self, tag, trigger) -> None: ...

class RequestExecutor(ActionExecutor):
    def __init__(self, tag, trigger) -> None: ...

class SymbolSubscribable(ABC):
    targetDict: Incomplete
    globals: Incomplete
    api: Incomplete
    trigger: Incomplete
    executors: Incomplete
    def __init__(self, trigger, api: APIHandler = None, targetDict={}, globals: dict = {}) -> None: ...
    subscribeSpec: Incomplete
    requestSpec: Incomplete
    def initAPISubscribes(self, subscribeSpec: Incomplete | None = None, requestSpec: Incomplete | None = None) -> None: ...
    def set(self, key, value: Incomplete | None = None) -> None: ...
    def update(self, key, newDict) -> None: ...
    def pop(self, key, subKey) -> None: ...
    def hasGlobal(self, key, subKey: Incomplete | None = None): ...
    def onGlobal(self, key, code, element, action) -> None: ...
    def setGlobal(self, key, code, element) -> None: ...
    def updateGlobal(self, key, code, element) -> None: ...
    def addGlobal(self, key, code, element) -> None: ...
    def removeGlobal(self, key, code, element) -> None: ...
    def get(self, key, subKey: Incomplete | None = None): ...
    def isEmpty(self, key, subKey: Incomplete | None = None): ...
    def initExecutorGlobals(self) -> None: ...
    def setExecutorFunction(self, action, tag, func) -> None: ...
    def setExecutorSuccessCallbacks(self, action, tag, callbacks=[]) -> None: ...
    def setExecutorFailCallbacks(self, action, tag, callbacks=[]) -> None: ...
    def setExecutorAttr(self, action, tag, attr, args) -> None: ...
    def saveSymbol(self, doing, tag, data, ret) -> None: ...
    def removeSymbol(self, doing, tag, data, ret) -> None: ...
    def symbolInfoFuncContainer(self, func, account, data, *args, **kwargs): ...
    def setupRequestExecutors(self, tag, requestFunc, requestCbs=[]) -> None: ...
    def setupSubscribeExecutors(self, tag, subFunc, unsubFunc) -> None: ...
    def initExecutors(self) -> None: ...
    def addSubscriberFirst(self, queueName, symbolCode, pid) -> None: ...
    def getSubscribers(self, queueName, symbolCode): ...
    def getAllSubscribers(self, queueName): ...
    def getPIDSubscribeInfo(self, pid, tag): ...
    def subscribe(self, tag, pid, account, data, *args, **kwargs) -> None: ...
    def unsubscribe(self, tag, pid, account, data, *args, **kwargs) -> None: ...
    def request(self, tag, pid, account, data, *args, **kwargs) -> None: ...
