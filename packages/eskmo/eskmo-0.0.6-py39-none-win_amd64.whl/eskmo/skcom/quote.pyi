from eskmo.const.event import *
from eskmo.const.skcom import *
from eskmo.skcom.function import *
from eskmo.base.mvtype import *
from _typeshed import Incomplete
from eskmo.base.handler import APIEventHandler as APIEventHandler
from eskmo.skcom.handler import SkcomHandler as SkcomHandler
from eskmo.skcom.runner import IS_SKCOM_LIB_REMOVED as IS_SKCOM_LIB_REMOVED
from eskmo.symbol.kline import KLine as KLine
from eskmo.utils.datetime import parseHHMMSS as parseHHMMSS
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.misc import threadStart as threadStart

STRICT_SEQUENTIAL_QUOTE_EVENTS: Incomplete

class QuoteEventHandler(APIEventHandler):
    events: Incomplete
    api: SkcomHandler
    globals: Incomplete
    marketSet: Incomplete
    best5pages: Incomplete
    pendingSymbols: Incomplete
    pendingSymbolInfo: Incomplete
    isListening: bool
    finishedTickets: Incomplete
    startTicket: int
    finalTicket: int
    isTicketFinished: bool
    finishedTime: int
    stockListQueue: Incomplete
    quoteDict: Incomplete
    def __init__(self, api: SkcomHandler, handlerDict) -> None: ...
    def OnNotifyMarketHighLowNoWarrant(self, serialNumber, runnerName, data) -> None: ...
    def OnNotifyCommodityListDataWithTypeNo(self, serialNumber, runnerName, data) -> None: ...
    def OnNotifyOddLotSpreadDeal(self, serialNumber, runnerName, data) -> None: ...
    def OnConnection(self, serialNumber, runnerName, nKind, nCode) -> None: ...
    def onDisconnection(self, runnerName, nKind, nCode) -> None: ...
    def setDisconnectState(self, runnerName, errors) -> None: ...
    def OnNotifyQuoteLONG(self, quote) -> None: ...
    def getSymbolCodeByIdx(self, sMarketNo, nStockidx): ...
    def OnNotifyHistoryTicksLONG(self, serialNumber, runnerName, sMarketNo, nStockIdx, nPtr, lDate, lTimehms, lTimemillismicros, nBid, nAsk, nClose, nQty, nSimulate) -> None: ...
    def OnNotifyTicksLONG(self, serialNumber, runnerName, sMarketNo, nStockIdx, nPtr, lDate, lTimehms, lTimemillismicros, nBid, nAsk, nClose, nQty, nSimulate) -> None: ...
    @staticmethod
    def buildSKTick(nPtr, lDate, lTimehms, lTimemillismicros, nBid, nAsk, nClose, nQty, nSimulate): ...
    @staticmethod
    def buildSKBest5(nBestBid1, nBestBidQty1, nBestBid2, nBestBidQty2, nBestBid3, nBestBidQty3, nBestBid4, nBestBidQty4, nBestBid5, nBestBidQty5, nExtendBid, nExtendBidQty, nBestAsk1, nBestAskQty1, nBestAsk2, nBestAskQty2, nBestAsk3, nBestAskQty3, nBestAsk4, nBestAskQty4, nBestAsk5, nBestAskQty5, nExtendAsk, nExtendAskQty, nSimulate): ...
    def OnNotifyBest5LONG(self, serialNumber, runnerName, sMarketNo, nStockIdx, nBestBid1, nBestBidQty1, nBestBid2, nBestBidQty2, nBestBid3, nBestBidQty3, nBestBid4, nBestBidQty4, nBestBid5, nBestBidQty5, nExtendBid, nExtendBidQty, nBestAsk1, nBestAskQty1, nBestAsk2, nBestAskQty2, nBestAsk3, nBestAskQty3, nBestAsk4, nBestAskQty4, nBestAsk5, nBestAskQty5, nExtendAsk, nExtendAskQty, nSimulate) -> None: ...
    def OnNotifyKLineData(self, serialNumber, runnerName, bstrStockNo, bstrData) -> None: ...
    def OnNotifyMarketTot(self, serialNumber, runnerName, sMarketNo, sPrt, nTime, nTotv, nTots, nTotc) -> None: ...
    def OnNotifyMarketHighLow(self, serialNumber, runnerName, sMarketNo, sPrt, nTime, sUp, sDown, sHigh, sLow, sNoChange) -> None: ...
    def parseTickInfo(self, marketNo: int, symbol: str, tickstr: str = ''): ...
    def OnNotifyStockList(self, serialNumber, runnerName, sMarketNo, bstrStockData) -> None: ...
    def listenForStockList(self) -> None: ...
    def OnNotifyStockListCall(self, serialNumber, runnerName, sMarketNo, bstrStockData) -> None: ...
    def afterAddSymbols(self, data, ret) -> None: ...
    def addSymbols(self, sMarketNo, symbols, page) -> None: ...
    def listenSymbolReady(self, runnerName) -> None: ...
    def OnNotifyMarketBuySell(self, runnerName, sMarketNo, sPrt, nTime, nBc, nSc, nBs, nSs) -> None: ...
    def OnNotifyServerTime(self, serialNumber, runnerName, sHour, sMinute, sSecond, nTotal) -> None: ...
    def OnNotifyBoolTunelLONG(self, serialNumber, runnerName, sMarketNo, nStockIdx, bstrAVG, bstrUBT, bstrLBT) -> None: ...
    def OnNotifyMACDLONG(self, serialNumber, runnerName, sMarketNo, nStockidx, bstrMACD, bstrDIF, bstrOSC) -> None: ...
    def OnNotifyFutureTradeInfoLONG(self, serialNumber, runnerName, bstrStockNo, sMarketNo, nStockidx, nBuyTotalCount, nSellTotalCount, nBuyTotalQty, nSellTotalQty, nBuyDealTotalCount, nSellDealTotalCount) -> None: ...
    def OnNotifyStrikePrices(self, serialNumber, runnerName, bstrOptionData) -> None: ...
