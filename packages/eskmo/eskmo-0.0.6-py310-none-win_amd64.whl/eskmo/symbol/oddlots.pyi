from eskmo.base.mvtype import *
from eskmo.const.skcom import *
from eskmo.const.event import *
from eskmo.skcom.function import *
from _typeshed import Incomplete
from eskmo.base.handler import APIHandler as APIHandler
from eskmo.base.subscribable import SymbolSubscribable as SymbolSubscribable
from eskmo.skcom.handler import SkcomHandler as SkcomHandler
from eskmo.symbol.position import PositionHandler as PositionHandler, PositionInfo as PositionInfo, StockPosition as StockPosition
from eskmo.symbol.stock import StockInfo as StockInfo, StockInfoHandler as StockInfoHandler
from eskmo.utils.logger import Logger as Logger

HANDLER_ODD_LOTS_INFO: str
HANDLER_ODD_LOTS_POSITION: str
RUNNER_TAG_ODD_LOTS: int

class OddLotsInfoHandler(StockInfoHandler):
    def __init__(self, trigger, defaultApi: Incomplete | None = None, page=...) -> None: ...

class OddLotsPositionHandler(PositionHandler):
    def __init__(self, trigger, defaultApi: Incomplete | None = None) -> None: ...
    def subscribe(self, pid, apiType, account, tag, data, *args, **kwargs) -> None: ...
    def requestBalance(self, pid, data) -> None: ...
    def OnBalanceChange(self, symbolCode, balance) -> None: ...
    def OnOrderChange(self, order) -> None: ...

class OddLotsPosition(StockPosition):
    position: PositionHandler
    def __init__(self, api) -> None: ...

class OddLotsInfo(StockInfo):
    position: Incomplete
    def __init__(self, handler: Incomplete | None = None, api: Incomplete | None = None, symbol: str = '', page=..., tag: str = '', name: str = '', market=...) -> None: ...
    def onNewReply(self, reply) -> None: ...
    def getOddLotsRunnerName(self): ...
    def callSkcomSubscribeBest5(self, pid, newPage): ...
    def callSkcomUnsubscribeBest5(self, pid): ...
    def callSkcomSubscribeQuote(self, pid, codes): ...
    def callSkcomUnsubscribeQuote(self, pid): ...
