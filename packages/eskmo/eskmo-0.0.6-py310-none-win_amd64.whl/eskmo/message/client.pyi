from _typeshed import Incomplete
from eskmo.message.const import DEFAULT_TOPIC as DEFAULT_TOPIC, SOCKET_PUB as SOCKET_PUB, SOCKET_SUB as SOCKET_SUB, ZMQ_MAX as ZMQ_MAX
from eskmo.message.sender import ZMQTopicSender as ZMQTopicSender
from eskmo.message.skcom import ZMQSkcomHandlerReceiver as ZMQSkcomHandlerReceiver, ZMQSkcomRunnerReceiver as ZMQSkcomRunnerReceiver
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.port import getAvailablePort as getAvailablePort

class MessageClient:
    logger: Incomplete
    subAddress: Incomplete
    pubAddress: Incomplete
    def __init__(self, type=..., logger=..., port: Incomplete | None = None) -> None: ...
    @property
    def port(self): ...
    def initSubSocket(self, port: Incomplete | None = None) -> None: ...
    def createSocketFromPort(self, port): ...
    def initPubSocket(self, port: Incomplete | None = None) -> None: ...
    @property
    def socket(self): ...
    @property
    def queue(self): ...
    def createSender(self, topic=...): ...
    def createReceiverFromRunner(self, runner, topic=...): ...
    def createReceiverFromPort(self, port, handler, topic=...): ...
