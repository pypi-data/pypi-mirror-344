from eskmo.base.mvtype import API_COUNT as API_COUNT, API_FUNCTION as API_FUNCTION, API_TOPIC as API_TOPIC, LOG_DEBUG as LOG_DEBUG, LOG_ERROR as LOG_ERROR, LOG_FATAL as LOG_FATAL, LOG_MESSAGE as LOG_MESSAGE, LOG_TYPE as LOG_TYPE, LOG_WARNING as LOG_WARNING
from eskmo.base.types import EVENT_HANDLER_ORDER as EVENT_HANDLER_ORDER, EVENT_HANDLER_QUOTE as EVENT_HANDLER_QUOTE, EVENT_HANDLER_REPLY as EVENT_HANDLER_REPLY
from eskmo.const.skcom import SKO_ON_ALL as SKO_ON_ALL, SKQ_ON_ALL as SKQ_ON_ALL, SKR_ON_ALL as SKR_ON_ALL, SK_ON_ALL as SK_ON_ALL
from eskmo.message.const import DEFAULT_TOPIC as DEFAULT_TOPIC
from eskmo.message.receiver import ZMQTopicReceiver as ZMQTopicReceiver
from eskmo.skcom.handler import SkcomHandler as SkcomHandler
from eskmo.skcom.runner import SkcomRunner as SkcomRunner
from eskmo.utils.logger import Logger as Logger

class ZMQSkcomHandlerReceiver(ZMQTopicReceiver):
    handler: SkcomHandler
    def __init__(self, handler, topic, queue, context, socket, logger) -> None: ...
    def isValidCondition(self, data): ...
    def isPrintTopic(self, data): ...
    def onPrint(self, data) -> None: ...
    def isOnSKEvent(self, data): ...
    def onSKEvent(self, data) -> None: ...
    def runSkEvent(self, handler, event: str, data: dict): ...
    def runOnData(self, data) -> None: ...

class ZMQSkcomRunnerReceiver(ZMQTopicReceiver):
    api: SkcomRunner
    def __init__(self, runner, topic, queue, context, socket, logger) -> None: ...
    def isValidCondition(self, data): ...
    def isRunnerTopic(self, data): ...
    def runOnData(self, data) -> None: ...
    def onRunnerTopic(self, data) -> None: ...
