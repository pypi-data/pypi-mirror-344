from eskmo.const.skcom import *
from _typeshed import Incomplete
from eskmo.base.mvtype import CLIENT_ID as CLIENT_ID, ODD_LOTS as ODD_LOTS, PID as PID, STOCK as STOCK
from eskmo.utils.logger import Logger as Logger

class SKFutureOrderRecipe:
    def __init__(self, futureAccount: Incomplete | None = None, **kwargs) -> None: ...
    def copy(self): ...
    @property
    def code(self): ...
    @property
    def marketType(self): ...
    def clientId(self, val) -> None: ...
    @staticmethod
    def createOrderDict(): ...
    @staticmethod
    def isMarketOrder(order): ...
    @staticmethod
    def isValidOrder(order): ...
    @property
    def dict(self): ...
    @dict.setter
    def dict(self, newDict) -> None: ...
    def account(self, account): ...
    def symbol(self, code): ...
    def period(self, period): ...
    def intraDay(self): ...
    def appointment(self): ...
    def buysell(self, type): ...
    def buy(self): ...
    def sell(self): ...
    def price(self, price): ...
    def marketPrice(self): ...
    def rangeMarketPrice(self): ...
    def qty(self, qty): ...
    def tradeType(self, type): ...
    def rod(self): ...
    def ioc(self): ...
    def fok(self): ...
    def dayTradeType(self, type): ...
    def dayTrade(self): ...
    def noDayTrade(self): ...
    def newCloseType(self, type): ...
    def new(self): ...
    def close(self): ...
    def auto(self): ...

class SKOrderRecipe:
    def __init__(self, securityAccount: Incomplete | None = None, **kwargs) -> None: ...
    def copy(self): ...
    @property
    def code(self): ...
    @property
    def marketType(self): ...
    def clientId(self, val) -> None: ...
    @staticmethod
    def createOrderDict(): ...
    @staticmethod
    def isValidOrder(order): ...
    @staticmethod
    def isValidIntraDayOldLotOrder(order): ...
    @property
    def dict(self): ...
    @dict.setter
    def dict(self, newDict) -> None: ...
    def account(self, account): ...
    def symbol(self, code): ...
    def prime(self, prime): ...
    def listed(self): ...
    def otc(self): ...
    def esm(self): ...
    def period(self, period): ...
    def intraDay(self): ...
    def afterHours(self): ...
    def oddLot(self): ...
    def intraDayOddLot(self): ...
    def flag(self, flag): ...
    def cash(self): ...
    def margin(self): ...
    def short(self): ...
    def nakedShort(self): ...
    def buysell(self, type): ...
    def buy(self): ...
    def sell(self): ...
    def price(self, price): ...
    def marketPrice(self): ...
    def qty(self, qty): ...
    def tradeType(self, type): ...
    def rod(self): ...
    def ioc(self): ...
    def fok(self): ...
    def orderType(self, type): ...
    def market(self): ...
    def limit(self): ...

class SKOddLotOrderRecipe:
    def __init__(self, securityAccount: Incomplete | None = None, **kwargs) -> None: ...
    def copy(self): ...
    @staticmethod
    def createOrderDict(): ...
    @staticmethod
    def isValidOrder(order): ...
    @staticmethod
    def isValidIntraDayOldLotOrder(order): ...
    @property
    def dict(self): ...
    @dict.setter
    def dict(self, newDict) -> None: ...
    def account(self, account): ...
    def symbol(self, code): ...
    def buysell(self, type): ...
    def buy(self): ...
    def sell(self): ...
    def price(self, price): ...
    def qty(self, qty): ...

class SKCBOrderRecipe:
    isTriggerMap: Incomplete
    gteMap: Incomplete
    lteMap: Incomplete
    triggerValueMap: Incomplete
    def __init__(self, securityAccount: Incomplete | None = None, **kwargs) -> None: ...
    @property
    def code(self): ...
    @property
    def marketType(self): ...
    def copy(self): ...
    def getQty(self): ...
    def getSymbol(self): ...
    def clientId(self, val) -> None: ...
    @staticmethod
    def createOrderDict(): ...
    @property
    def dict(self): ...
    @dict.setter
    def dict(self, newDict) -> None: ...
    def account(self, account): ...
    def symbol(self, code): ...
    def orderType(self, type): ...
    def cash(self): ...
    def margin(self): ...
    def short(self): ...
    def nakedShort(self): ...
    def orderCond(self, condi): ...
    def rod(self): ...
    def ioc(self): ...
    def fok(self): ...
    def buysell(self, type): ...
    def buy(self): ...
    def sell(self): ...
    def qty(self, qty): ...
    def orderPriceType(self, type): ...
    def market(self): ...
    def limit(self): ...
    def price(self, price): ...
    def triggeredByMit(self, yn: bool = True): ...
    def mitTriggerPrice(self, price): ...
    def mitTriggerDir(self, dir): ...
    def mitGte(self): ...
    def mitLte(self): ...
    def triggeredByBestBid(self, yn: bool = True): ...
    def bestBidTriggerDir(self, dir): ...
    def bestBidGte(self): ...
    def bestBidLte(self): ...
    def bestBidTriggerPrice(self, price): ...
    def triggeredByBestAsk(self, yn: bool = True): ...
    def bestAskTriggerPrice(self, price): ...
    def bestAskTriggerDir(self, dir): ...
    def bestAskGte(self): ...
    def bestAskLte(self): ...
    def triggeredByTick(self, yn: bool = True): ...
    def tickTriggerDir(self, dir): ...
    def tickGte(self): ...
    def tickLte(self): ...
    def tickNum(self, ticknum): ...
    def triggeredByUpDown(self, yn: bool = True): ...
    def upDownTriggerDir(self, dir): ...
    def upDownGte(self): ...
    def upDownLte(self): ...
    def upDownPercent(self, percent): ...
    def triggeredByPreQty(self, yn: bool = True): ...
    def preQtyTriggerDir(self, dir): ...
    def preQtyGte(self): ...
    def preQtyLte(self): ...
    def preQty(self, qty): ...
    def triggeredBySumQty(self, yn: bool = True): ...
    def sumQtytriggerDir(self, dir): ...
    def sumQtyGte(self): ...
    def sumQtyLte(self): ...
    def sumQty(self, qty): ...
    def usingClearAll(self, yn: bool = True): ...
    def setClearAllTime(self, timestr): ...
    def clearOnAllCond(self, orand): ...
    def clearOnAllCondOR(self): ...
    def clearOnAllCondAND(self): ...
    def isTrigger(self, prop, yn: bool = True): ...
    def gte(self, prop): ...
    def lte(self, prop): ...
    def triggerValue(self, prop, value): ...

class SKFastOCOOrderRecipe:
    recipeName: str
    def __init__(self, securityAccount: Incomplete | None = None, **kwargs) -> None: ...
    @property
    def code(self): ...
    @property
    def marketType(self): ...
    def clientId(self, val) -> None: ...
    @staticmethod
    def createOrderDict(): ...
    @property
    def dict(self): ...
    @dict.setter
    def dict(self, newDict) -> None: ...
    def account(self, account): ...
    def symbol(self, code): ...
    def qty(self, qty): ...
    def setBasicEntry(self, buysell, orderType, priceType, orderPrice, tradeType): ...
    def setCBEntry(self, buysell, orderType, priceType, orderPrice, tradeType, andor): ...
    def entryCBFromDealPrice(self, isEnabled: bool, targetDeal: int = 0, triggerDir: int = 0): ...
    def entryCBFromBidPrice(self, isEnabled: bool, targetBid: int = 0, triggerDir: int = 0): ...
    def entryCBFromAskPrice(self, isEnabled: bool, targetAsk: int = 0, triggerDir: int = 0): ...
    def entryCBFromTotalVolume(self, isEnabled: bool, targetVolume: int = 0, triggerDir: int = 0): ...
    def entryCBFromBestBidPrice(self, isEnabled: bool, targetBestBid: int = 0, triggerDir: int = 0): ...
    def entryCBFromBestAskPrice(self, isEnabled: bool, targetBestAsk: int = 0, triggerDir: int = 0): ...
    def exitFastOCO(self, buysell, orderPrice1, orderType2, orderPrice2, tradeType2, triggerPrice2): ...
    def exitMIT(self, buysell, priceType, orderPrice, tradeType, triggerPrice, triggerDir): ...
    def exitBasic(self, buysell, priceType, orderPrice, tradeType): ...

class SKOCOOrderRecipe:
    def __init__(self, securityAccount: Incomplete | None = None, **kwargs) -> None: ...
    @property
    def code(self): ...
    @property
    def marketType(self): ...
    def copy(self): ...
    def clientId(self, val) -> None: ...
    @staticmethod
    def createOCOOrderDict(): ...
    def getSymbol(self): ...
    def getQty(self): ...
    @property
    def dict(self): ...
    @dict.setter
    def dict(self, newDict) -> None: ...
    @staticmethod
    def upDownPriceConfirm(upPrice, downPrice): ...
    def setLag(self, lag) -> None: ...
    def account(self, account): ...
    def symbol(self, code): ...
    def qty(self, qty): ...
    def gteLag(self, triggerPrice, buysell, price, orderCond, orderType, priceType): ...
    def lteLag(self, triggerPrice, buysell, price, orderCond, orderType, priceType): ...
    def price(self, lag, price): ...
    def upPrice(self, price): ...
    def downPrice(self, price): ...
    def triggerPrice(self, lag, price): ...
    def upTriggerPrice(self, price): ...
    def downTriggerPrice(self, price): ...
    def buysell(self, lag, flag): ...
    def upBuysell(self, flag): ...
    def downBuysell(self, flag): ...
    def buy(self, lag): ...
    def upBuy(self): ...
    def downBuy(self): ...
    def sell(self, lag): ...
    def upSell(self): ...
    def downSell(self): ...
    def orderCond(self, lag, flag): ...
    def upOrderCond(self, flag): ...
    def downOrderCond(self, flag): ...
    def rod(self, lag): ...
    def upRod(self): ...
    def downRod(self): ...
    def ioc(self, lag): ...
    def upIoc(self): ...
    def downIoc(self): ...
    def fok(self, lag): ...
    def upFok(self): ...
    def downFok(self): ...
    def orderType(self, lag, flag): ...
    def upOrderType(self, flag): ...
    def downOrderType(self, flag): ...
    def cash(self, lag): ...
    def upCash(self): ...
    def downCash(self): ...
    def margin(self, lag): ...
    def upMargin(self): ...
    def downMargin(self): ...
    def short(self, lag): ...
    def upShort(self): ...
    def downShort(self): ...
    def nakedShort(self, lag): ...
    def upNakedShort(self): ...
    def downNakedShort(self): ...
    def priceType(self, lag, flag): ...
    def upPriceType(self, flag): ...
    def downPriceType(self, flag): ...
    def market(self, lag): ...
    def upMarket(self): ...
    def downMarket(self): ...
    def limit(self, lag): ...
    def upLimit(self): ...
    def downLimit(self): ...

class SKMITOrderRecipe:
    def __init__(self, securityAccount: Incomplete | None = None, **kwargs) -> None: ...
    @property
    def code(self): ...
    @property
    def marketType(self): ...
    def copy(self): ...
    def clientId(self, val) -> None: ...
    @staticmethod
    def createMITOrderDict(): ...
    def getSymbol(self): ...
    def getQty(self): ...
    @property
    def dict(self): ...
    @dict.setter
    def dict(self, newDict) -> None: ...
    def account(self, account): ...
    def symbol(self, code): ...
    def triggerPrice(self, price): ...
    def triggerDir(self, dir): ...
    def gte(self): ...
    def lte(self): ...
    def orderCond(self, condi): ...
    def rod(self): ...
    def ioc(self): ...
    def fok(self): ...
    def price(self, price): ...
    def buysell(self, type): ...
    def buy(self): ...
    def sell(self): ...
    def qty(self, qty): ...
    def orderPriceType(self, type): ...
    def market(self): ...
    def limit(self): ...
    def orderType(self, type): ...
    def cash(self): ...
    def margin(self): ...
    def short(self): ...
    def nakedShort(self): ...
    def preRisk(self, isEnabled): ...
    def preRiskEnabled(self): ...
    def preRiskDisabled(self): ...
    def longAction(self, isEnabled): ...
    def longActionEnabled(self): ...
    def longActionDisabled(self): ...
    def longEndDate(self, datestr): ...
    def longEndByTriggered(self): ...
    def longEndByFulfilled(self): ...
