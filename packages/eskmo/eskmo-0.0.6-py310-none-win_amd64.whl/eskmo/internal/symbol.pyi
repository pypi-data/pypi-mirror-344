from _typeshed import Incomplete
from eskmo import api as api
from eskmo.base.interface import APIReferable as APIReferable
from eskmo.base.mvtype import BEST5 as BEST5, PID as PID, QUOTE as QUOTE, STOCK as STOCK, SYMBOL_CODE as SYMBOL_CODE
from eskmo.const.event import E_HISTORY_TICK_NOTIFY as E_HISTORY_TICK_NOTIFY, E_NONE as E_NONE, E_TICK_NOTIFY as E_TICK_NOTIFY
from eskmo.const.skcom import SKO_ORDER_LISTED_AND_OTC as SKO_ORDER_LISTED_AND_OTC
from eskmo.internal.account import StockAccount as StockAccount
from eskmo.internal.balance import StockBalance as StockBalance, StocksBalance as StocksBalance
from eskmo.internal.const import OrderAction as OrderAction, OrderFlag as OrderFlag, OrderPeriod as OrderPeriod, OrderPriceType as OrderPriceType, OrderType as OrderType
from eskmo.internal.eventdata import EventDataParser as EventDataParser
from eskmo.internal.order import MITOrder as MITOrder, MITOrders as MITOrders, SmartOrderRouter as SmartOrderRouter, StockOrder as StockOrder, StockOrders as StockOrders
from eskmo.internal.user import User as User
from eskmo.symbol.position import HANDLER_POSITION as HANDLER_POSITION, PositionHandler as PositionHandler
from eskmo.symbol.stock import HANDLER_STOCK_INFO as HANDLER_STOCK_INFO, StockInfo as InternalStockInfo, StockInfoHandler as StockInfoHandler

TICK_HISTORY_LOCK: str
TICK_HISTORY_IS_STARTED: str
TICK_HISTORY_IS_DONE: str

class Stock(APIReferable):
    smartOrder: Incomplete
    tickHistoryState: Incomplete
    def __init__(self, api: api, stockInfo: InternalStockInfo) -> None: ...
    def __getitem__(self, key): ...
    def orders(self, userId: str = None): ...
    def all_orders(self, userId: str = None): ...
    def position(self, userId: str = None): ...
    def all_positions(self, userId: str = None): ...
    def mit_orders(self, userId: str = None): ...
    def all_mit_orders(self, userId: str = None): ...
    @property
    def quote(self): ...
    @property
    def info(self): ...
    def tick_history(self, account: StockAccount = None, isAsync: bool = False): ...
    def subscribe_quote(self, account: StockAccount = None): ...
    def subscribe_tick(self, account: StockAccount = None): ...
    def subscribe_best5(self, account: StockAccount = None): ...
    def unsubscribe_quote(self, account: StockAccount = None): ...
    def unsubscribe_tick(self, account: StockAccount = None): ...
    def unsubscribe_best5(self, account: StockAccount = None): ...
    def subscribe(self, tag: str, account: StockAccount = None): ...
    def unsubscribe(self, tag: str, account: StockAccount = None): ...
    def order(self, action=..., price: Incomplete | None = None, qty: Incomplete | None = None, period=..., flag=..., price_type=..., order_type=...): ...

class Symbols:
    data: dict[frozenset, Stock]
    def __init__(self, symbolDict: dict[str, Stock]) -> None: ...
    def __getitem__(self, key): ...
    def keys(self): ...
    def values(self): ...

class Stocks(Symbols):
    def orders(self, userId: str = None): ...
    def position(self, userId: str = None): ...
