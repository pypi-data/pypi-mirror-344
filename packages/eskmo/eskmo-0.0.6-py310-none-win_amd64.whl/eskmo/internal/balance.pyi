from _typeshed import Incomplete
from dataclasses import dataclass, field
from datetime import datetime
from eskmo.base.interface import APIReferable as APIReferable, UserReferable as UserReferable
from eskmo.const.event import E_PNL_NOTIFY_FINISHED as E_PNL_NOTIFY_FINISHED, E_PNL_SUMMARY_NOTIFY as E_PNL_SUMMARY_NOTIFY, E_SKCOM_EXECUTE_FAIL as E_SKCOM_EXECUTE_FAIL
from eskmo.const.skcom import API_SKCOM as API_SKCOM, SKO_FUNC_DETAILS as SKO_FUNC_DETAILS, SKO_FUNC_SUMMARY as SKO_FUNC_SUMMARY, SKO_FUNC_SUMMARY_BY_STOCK_NO as SKO_FUNC_SUMMARY_BY_STOCK_NO, SKO_FUNC_TOTAL_INVESTMENT as SKO_FUNC_TOTAL_INVESTMENT, SKO_PNL as SKO_PNL, SKO_PNL_DAY_TRADE as SKO_PNL_DAY_TRADE, SKO_PNL_FORMAT_SUMMARY as SKO_PNL_FORMAT_SUMMARY, SKO_PNL_QUERY_BOOK_NO as SKO_PNL_QUERY_BOOK_NO, SKO_PNL_QUERY_END_DATE as SKO_PNL_QUERY_END_DATE, SKO_PNL_QUERY_SEQ_NO as SKO_PNL_QUERY_SEQ_NO, SKO_PNL_QUERY_START_DATE as SKO_PNL_QUERY_START_DATE, SKO_PNL_QUERY_STOCK_NO as SKO_PNL_QUERY_STOCK_NO, SKO_PNL_QUERY_TRADE_TYPE as SKO_PNL_QUERY_TRADE_TYPE, SKO_PNL_REALIZED as SKO_PNL_REALIZED, SKO_PNL_TYPE as SKO_PNL_TYPE, SKO_PNL_TYPES as SKO_PNL_TYPES, SKO_PNL_UNREALIZED as SKO_PNL_UNREALIZED, SK_PNL_SUMMARY_SYMBOL_CODE as SK_PNL_SUMMARY_SYMBOL_CODE
from eskmo.internal.user import User as User
from eskmo.skcom.function import SKO_GET_PROFIT_LOSS_GW_REPORT as SKO_GET_PROFIT_LOSS_GW_REPORT
from eskmo.skcom.handler import SkcomHandler as SkcomHandler
from eskmo.symbol.position import BALANCE_TYPE_MARGIN as BALANCE_TYPE_MARGIN, BALANCE_TYPE_NAKED_SHORT as BALANCE_TYPE_NAKED_SHORT, BALANCE_TYPE_SHORT as BALANCE_TYPE_SHORT, BALANCE_TYPE_STOCK as BALANCE_TYPE_STOCK, StockBalance as InternalStockBalance
from eskmo.symbol.stock import HANDLER_STOCK_INFO as HANDLER_STOCK_INFO, StockInfo as StockInfo
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.updatable import Updatable as Updatable

class StockBalance(Updatable, APIReferable):
    def __init__(self, user: User, balance: InternalStockBalance) -> None: ...
    def update(self, balance: InternalStockBalance): ...
    def __getitem__(self, key): ...
    @property
    def all(self): ...
    @property
    def stock(self): ...
    @property
    def margin(self): ...
    @property
    def short(self): ...
    @property
    def daytrade_short(self): ...

class StocksBalance(APIReferable):
    def __init__(self, user: User) -> None: ...
    def add(self, symbol: str, balance: StockBalance): ...
    def __getitem__(self, key): ...

@dataclass
class PnL:
    unrealized: dict[str, dict] = field(default_factory=dict)
    realized: dict[str, dict] = field(default_factory=dict)
    daytrade: dict[str, dict] = field(default_factory=dict)
    def update(self, type: int, data: dict): ...
    def __dict__(self): ...

class PnLUpdater:
    balance: Incomplete
    handler: SkcomHandler
    def __init__(self, balance: AccountBalance) -> None: ...
    def wait(self) -> None: ...
    def start(self) -> None: ...

class RealizedPnLUpdater(PnLUpdater):
    def update_summary(self, start: datetime = ..., end: datetime = ...): ...
    def update_details(self, symbol: str = None, trade_type: int = None, start: datetime = None, book_no: str = '', seq_no: str = ''): ...
    def update_summary_by_symbol(self, symbol: str, start: datetime, end: datetime): ...

class UnrealizedPnLUpdater(PnLUpdater):
    def update_summary(self) -> None: ...
    def update_details(self, symbol: str, tradeType: int): ...

class DayTradePnLUpdater(PnLUpdater):
    def update_summary(self) -> None: ...
    def update_details(self, symbol: str): ...

class AccountBalance(Updatable, UserReferable):
    realized: RealizedPnLUpdater
    unrealized: UnrealizedPnLUpdater
    daytrade: DayTradePnLUpdater
    isUpdating: bool
    updateQueue: Incomplete
    def __init__(self, user: User, acconutId: str = '') -> None: ...
    def start(self) -> None: ...
    def updateSummary(self, pnlType: int, balance: dict = None): ...
    def updateDetails(self, pnlType: int, balance: dict = None): ...
    @property
    def stocks(self): ...
    @property
    def summary(self): ...
    @property
    def details(self): ...
    def update(self, type: int = ..., format: int = ..., isAsync: bool = False): ...
    def runUpdate(self, pnlType: int = ..., pnlFormat: int = ..., isAsync: bool = False): ...
    def __getitem__(self, key): ...
