from eskmo.base.client import Client as Client
from eskmo.client.console import ConsoleClient as ConsoleClient
from eskmo.client.localgrpc import LocalgRPCClient as LocalgRPCClient
from eskmo.client.localzmq import LocalZMQClient as LocalZMQClient
from eskmo.const.errors import AccountTagExistsError as AccountTagExistsError
from eskmo.const.event import E_API_TESTING_FAIL as E_API_TESTING_FAIL, E_API_TESTING_SUCCESS as E_API_TESTING_SUCCESS, E_LOGIN_FAIL as E_LOGIN_FAIL, E_LOGIN_PROGRESS_NOTIFY as E_LOGIN_PROGRESS_NOTIFY, E_LOGIN_SUCCESS as E_LOGIN_SUCCESS
from eskmo.const.skcom import API_SKCOM as API_SKCOM
from eskmo.internal.const import APIMode as APIMode, EskmoConst as EskmoConst
from eskmo.internal.event import EskmoEvent as EskmoEvent
from eskmo.internal.symbol import Stocks as Stocks
from eskmo.internal.user import User as User
from eskmo.message.const import THREAD_ZMQ_PREFIX as THREAD_ZMQ_PREFIX
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.misc import TESTING as TESTING
from eskmo.utils.process import killAllProcesses as killAllProcesses
from itertools import count
from typing import Callable

class api:
    const = EskmoConst
    logger: Logger
    event: EskmoEvent
    stocks: Stocks
    user: User
    users: dict[str, User]
    cnt: count
    stop: bool
    proxy: bool
    def __new__(cls): ...
    @staticmethod
    def testing(): ...
    @staticmethod
    def exit() -> None: ...
    @staticmethod
    def find_user_by_id(userId): ...
    @staticmethod
    def find_user_by_account_id(accountId): ...
    @staticmethod
    def find_user_account_id(userId: str = None, accountId: str = None): ...
    @staticmethod
    def createClient(mode, config): ...
    @staticmethod
    def login(userId: str = '', password: str = '', tag: str = None) -> User: ...
    @staticmethod
    def create_user(tag: str): ...
    @staticmethod
    def add_user(tag: str, user: User): ...
    @staticmethod
    def bind_events(user: User): ...
    @staticmethod
    def init_subscribe(user: User) -> None: ...
    @staticmethod
    def init_accounts_and_symbols(user: User) -> None: ...
    @staticmethod
    def on(event, callback) -> None: ...
    @staticmethod
    def on_subscribe(*args, **kwargs) -> None: ...
    @staticmethod
    def get_all_users(): ...
    @property
    def config(self): ...
    @config.setter
    def config(self, val) -> None: ...
    @staticmethod
    def run(mode: APIMode, config: dict, func: Callable, *args: tuple, **kwargs: dict) -> None: ...
    @staticmethod
    def main(mode: APIMode, config: dict, func: Callable, *args: tuple, **kwargs: dict) -> None: ...
    @staticmethod
    def start(func: Callable) -> Callable: ...
    @staticmethod
    def once(func: Callable) -> Callable: ...
    @staticmethod
    def init() -> None: ...
    @staticmethod
    def keepalive() -> None: ...
    @staticmethod
    def mode(mode=..., **config): ...
    @staticmethod
    def subscribe(market, tag, *args, **kwargs) -> None: ...
