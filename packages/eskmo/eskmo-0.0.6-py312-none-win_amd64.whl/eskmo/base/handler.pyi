from eskmo.base.mvtype import *
from eskmo.const.event import *
from eskmo.base.types import *
import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from eskmo.base.connection import RunnerEmitConnection as RunnerEmitConnection, RunnerLoggingConnection as RunnerLoggingConnection
from eskmo.base.mvqueue import mvQueue as mvQueue, mvSimpleQueue as mvSimpleQueue
from eskmo.base.runner import APICreator as APICreator
from eskmo.base.store import Store as Store
from eskmo.config.skcom import SK_API_TIMEOUT_SEC as SK_API_TIMEOUT_SEC
from eskmo.connection.base import mvConnection as mvConnection
from eskmo.message.client import MessageClient as MessageClient
from eskmo.message.const import SOCKET_NAME_MAIN_PROCESS_RECV as SOCKET_NAME_MAIN_PROCESS_RECV, SOCKET_PUB as SOCKET_PUB, SOCKET_SUB as SOCKET_SUB, THREAD_ZMQ_PREFIX as THREAD_ZMQ_PREFIX
from eskmo.message.sender import ZMQTopicSender as ZMQTopicSender
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.misc import hashId as hashId, renameThread as renameThread, threadStart as threadStart
from eskmo.utils.thread import ThreadHandler as ThreadHandler

class APIEventHandler:
    ready: bool
    events: Incomplete
    strictlySequentialEvents: Incomplete
    def __init__(self, events=[], queues={}, strictlySequentialEvents=[], name: str = 'APIEvent') -> None: ...
    def start(self) -> None: ...
    @property
    def queues(self): ...
    @queues.setter
    def queues(self, val) -> None: ...
    def run(self, event, args) -> None: ...
    def setReady(self) -> None: ...
    def setNotReady(self) -> None: ...

class APIHandler(ABC, metaclass=abc.ABCMeta):
    runnerClass: Incomplete
    defaultRunnerName: Incomplete
    initialized: bool
    isRunnerStarted: bool
    isFirstLogin: bool
    loginSuccess: Incomplete
    isDisconnected: bool
    disconnectedLock: Incomplete
    stores: Incomplete
    callbackInfoStores: Incomplete
    handlerDict: Incomplete
    eventHandlers: Incomplete
    processes: Incomplete
    pipes: Incomplete
    isPrintDisabled: bool
    pendingLogoutRunner: Incomplete
    readyMessageQueueRunners: Incomplete
    reConnectionQueue: Incomplete
    disconnectionQueue: Incomplete
    def __init__(self, name, runnerClass, handlerDict={}, events=[], conns=[], queues={}, processConn: Incomplete | None = None) -> None: ...
    def getRunnerSender(self, runnerName: Incomplete | None = None): ...
    def setAllEventHandlerReady(self) -> None: ...
    def setAllEventHandlerNotReady(self) -> None: ...
    def accounts(self): ...
    @property
    def globals(self): ...
    @globals.setter
    def globals(self, val) -> None: ...
    def conns(self): ...
    @property
    def queues(self): ...
    def isAccountSuccessLogin(self, account): ...
    def initBindings(self, processes=[], pipes=[]) -> None: ...
    def trigger(self, pid, event, data={}) -> None: ...
    def triggerError(self, fromPid, event, errors) -> None: ...
    def publish(self, conn, event, data, pid) -> None: ...
    @queues.setter
    def queues(self, val) -> None: ...
    def name(self): ...
    def addTask(self, func, *args, **kwargs) -> None: ...
    def leave(self, err=..., runnerName: Incomplete | None = None) -> None: ...
    def buildRunnerDict(self, creator, sender): ...
    def addRunner(self, creator, sender) -> None: ...
    def createRunners(self, fromPid=..., connections: int = 1): ...
    def onNoWaitEvent(self, event) -> None: ...
    def onEvent(self, event) -> None: ...
    def reconnectOnLoginFailed(self, event) -> None: ...
    def reconnectOnReconnectFailed(self, event) -> None: ...
    def reconnectOnNewDisconnect(self, event) -> None: ...
    def reConnection(self, event) -> None: ...
    def reConnectionCall(self, event) -> None: ...
    def getRunnerName(self, runnerName: Incomplete | None = None): ...
    def removeRunners(self, runnerName: Incomplete | None = None) -> None: ...
    def startRunnerProcess(self, runnerInfo) -> None: ...
    def startRunner(self, fromPid=..., runnerName: Incomplete | None = None): ...
    def startMultiRunner(self, fromPid=..., connectionNum: int = 1): ...
    def newRunner(self, fromPid=...): ...
    @abstractmethod
    def getSubscribeSpec(self): ...
    @abstractmethod
    def getRequestSpec(self): ...
    def setProcessConnection(self, conn) -> None: ...
    def bindEventHandler(self, handler, name) -> None: ...
    def addSymbolsToHandlers(self, apitype, symbolData) -> None: ...
    def initConnection(self) -> None: ...
    def initQueues(self) -> None: ...
    def getAPITypeAndAccount(self, runnerName): ...
    def getRunnerInfo(self, runnerName): ...
    def getRunnerCountByAccount(self, account): ...
    def getRunnerNameByAccount(self, account: Incomplete | None = None, tag: int = 0): ...
    def call(self, runnerName, fromPid, apiFunc, *args, **kwargs): ...
    def waitForMessageQueueReady(self, runnerName: Incomplete | None = None) -> None: ...
    def runnerCall(self, func, args: dict, runnerName: Incomplete | None = None): ...
    def setAPIAccount(self, account, password, runnerName: Incomplete | None = None) -> None: ...
    def getAPIAccount(self, runnerName: Incomplete | None = None): ...
    @abstractmethod
    def resetGlobals(self, runnerName): ...
    def reLogin(self, account, password, runnerTag: int = 0, oldRunnerName: Incomplete | None = None) -> None: ...
    def login(self, pid, account, password, proxy: bool = False, runnerName: Incomplete | None = None) -> None: ...
    def multiLogin(self, pid, account, password, proxy: bool = False, connectionNum: int = 2, runnerNames=[]) -> None: ...
    def loginCall(self, account, password, proxy: bool = False, runnerTag: Incomplete | None = None, runnerName: Incomplete | None = None) -> None: ...
    def apiCall(self, fromPid, runnerName, func, *args, **kwargs): ...
    def apiCallNoWait(self, fromPid, runnerName, func, callbackInfo, *args, **kwargs): ...
    def apiBatchCall(self, tasks, runnerName: Incomplete | None = None): ...
    def apiBatchCallNoWait(self, tasks, callbackInfo, runnerName: Incomplete | None = None) -> None: ...
    def onCallback(self, callbackId, func: str = '', warningEverySec: int = 1): ...
    def forcedLogoutAfterSec(self, runnerName: Incomplete | None = None, waitSec: int = 1) -> None: ...
    def logout(self, runnerName: Incomplete | None = None) -> None: ...
    def onGeneralDisconnection(self, data=..., runnerName: Incomplete | None = None) -> None: ...
    lastDisconnectionTime: Incomplete
    def handleGeneralDisconnection(self) -> None: ...
    def handleReconnection(self) -> None: ...
    def listenForDisconnection(self) -> None: ...
    def onGeneralDisconnectionCall(self, data=..., runnerName: Incomplete | None = None) -> None: ...
    @abstractmethod
    def request(self, fromPid, account, tag): ...
