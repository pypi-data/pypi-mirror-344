from _typeshed import Incomplete
from abc import ABC
from eskmo.base.mvtype import OPENED_PROCESSES as OPENED_PROCESSES
from eskmo.utils.logger import Logger as Logger

class Store(ABC):
    globals: Incomplete
    readOnlyKeys: Incomplete
    def __init__(self, globalDict={}) -> None: ...
    def set(self, key, value: Incomplete | None = None) -> None: ...
    def hasGlobal(self, key, subKey: Incomplete | None = None): ...
    def update(self, key, newDict) -> None: ...
    def pop(self, key, subKey) -> None: ...
    def onGlobal(self, key, code, element, action) -> None: ...
    def setGlobal(self, key, code, element) -> None: ...
    def updateGlobal(self, key, code, element) -> None: ...
    def addGlobal(self, key, code, element) -> None: ...
    def removeGlobal(self, key, code, element) -> None: ...
    def get(self, key, subKey: Incomplete | None = None): ...
    def isEmpty(self, key, subKey: Incomplete | None = None): ...
    def initProcessGlobals(self) -> None: ...
    def register(self, pid, id) -> None: ...
    def deregister(self, pid) -> None: ...
