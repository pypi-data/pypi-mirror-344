from eskmo.base.mvtype import *
from _typeshed import Incomplete
from abc import ABC
from eskmo.utils.misc import threadStart as threadStart

class ThreadHandler(ABC):
    cnt: Incomplete
    events: Incomplete
    queueMaxsize: Incomplete
    workersNum: Incomplete
    taskQueue: Incomplete
    eventQueues: Incomplete
    threads: Incomplete
    runningThreads: Incomplete
    queueClass: Incomplete
    def __init__(self, workersNum: int = 10, events=[], queueMaxSize: Incomplete | None = None, isMultiProcess: bool = False, name: str = 'Untitled') -> None: ...
    @property
    def queues(self): ...
    @queues.setter
    def queues(self, newVal) -> None: ...
    def getRunningThreads(self): ...
    def setThreadRunning(self) -> None: ...
    def setThreadFinished(self) -> None: ...
    def addTask(self, func, *args, **kwargs) -> None: ...
    def doTask(self, num: Incomplete | None = None, allNum: Incomplete | None = None) -> None: ...
    def initEventQueues(self) -> None: ...
    def listen(self, name) -> None: ...
    def start(self) -> None: ...
    def initWorkerListener(self) -> None: ...
    def initTaskListener(self) -> None: ...

class SingleThreadHandler(ThreadHandler):
    def __init__(self, name: Incomplete | None = None) -> None: ...
