from abc import ABC
from eskmo.base.mvqueue import mvQueue as mvQueue
from eskmo.base.mvtype import EVENT as EVENT, EVENT_DATA as EVENT_DATA
from eskmo.const.event import E_LOGIN_SUCCESS as E_LOGIN_SUCCESS, E_NONE as E_NONE
from eskmo.internal.eventdata import EventDataParser as EventDataParser
from eskmo.message.const import THREAD_ZMQ_PREFIX as THREAD_ZMQ_PREFIX
from eskmo.utils.misc import hashId as hashId, isSubset as isSubset, renameThread as renameThread, threadStart as threadStart
from eskmo.utils.thread import ThreadHandler as ThreadHandler

class Listenable(ABC):
    def initListenable(self, queues: list[mvQueue], threads: int = 30): ...
    def wait(self, events=[], data={}, timeout: int = 300) -> None: ...
    def checkForWait(self, data) -> None: ...
    def listen(self, name) -> None: ...
    def on(self, event=..., callback=...) -> None: ...
    def removeFromOn(self, event, fn) -> None: ...
