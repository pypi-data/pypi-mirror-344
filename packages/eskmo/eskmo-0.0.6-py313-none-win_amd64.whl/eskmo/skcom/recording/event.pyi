from eskmo.const.skcom import *
from eskmo.skcom.function import *
from _typeshed import Incomplete
from eskmo.skcom.event import SKCenterLibEvents as SKCenterLibEvents, SKOrderLibEvents as SKOrderLibEvents, SKQuoteLibEvents as SKQuoteLibEvents, SKReplyLibEvents as SKReplyLibEvents
from eskmo.skcom.recording.recorder import SKRecorder as SKRecorder

class RecordableSKOrderLibEvents(SKOrderLibEvents):
    recorder: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def OnAccount(self, *args, **kwargs) -> None: ...
    def OnAsyncOrder(self, *args, **kwargs) -> None: ...
    def OnRealBalanceReport(self, *args, **kwargs) -> None: ...
    def OnOpenInterest(self, *args, **kwargs) -> None: ...
    def OnStopLossReport(self, *args, **kwargs) -> None: ...
    def OnOverseaFuture(self, *args, **kwargs) -> None: ...
    def OnOverseaOption(self, *args, **kwargs) -> None: ...
    def OnFutureRights(self, *args, **kwargs) -> None: ...
    def OnOverSeaFutureRight(self, *args, **kwargs) -> None: ...
    def OnMarginPurchaseAmountLimit(self, *args, **kwargs) -> None: ...
    def OnBalanceQuery(self, *args, **kwargs) -> None: ...
    def OnTSSmartStrategyReport(self, *args, **kwargs) -> None: ...
    def OnAsyncOrderOLID(self, *args, **kwargs) -> None: ...
    def OnProfitLossGWReport(self, *args, **kwargs) -> None: ...
    def OnOverseaFutureOpenInterest(self, *args, **kwargs) -> None: ...
    def OnOverseaFutureOpenInterestGW(self, *args, **kwargs) -> None: ...
    def OnTelnetTest(self, *args, **kwargs) -> None: ...
    def OnProxyStatus(self, *args, **kwargs) -> None: ...
    def OnProxyOrder(self, *args, **kwargs) -> None: ...

class RecordableSKReplyLibEvents(SKReplyLibEvents):
    recorder: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def OnConnect(self, *args, **kwargs) -> None: ...
    def OnDisconnect(self, *args, **kwargs) -> None: ...
    def OnComplete(self, *args, **kwargs) -> None: ...
    def OnReplyMessage(self, bstrUserID, bstrMessages): ...
    def OnReplyClear(self, *args, **kwargs) -> None: ...
    def OnNewData(self, *args, **kwargs) -> None: ...
    def OnSolaceReplyDisconnect(self, *args, **kwargs) -> None: ...
    def OnSolaceReplyConnection(self, *args, **kwargs) -> None: ...
    def OnReplyClearMessage(self, *args, **kwargs) -> None: ...
    def OnStrategyData(self, *args, **kwargs) -> None: ...

class RecordableSKQuoteLibEvents(SKQuoteLibEvents):
    recorder: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def OnConnection(self, *args, **kwargs) -> None: ...
    def OnNotifyQuoteLONG(self, *args, **kwargs) -> None: ...
    def OnNotifyHistoryTicksLONG(self, *args, **kwargs) -> None: ...
    def OnNotifyTicksLONG(self, *args, **kwargs) -> None: ...
    def OnNotifyBest5LONG(self, *args, **kwargs) -> None: ...
    def OnNotifyKLineData(self, *args, **kwargs) -> None: ...
    def OnNotifyMarketTot(self, *args, **kwargs) -> None: ...
    def OnNotifyMarketHighLow(self, *args, **kwargs) -> None: ...
    def OnNotifyStockList(self, *args, **kwargs) -> None: ...
    def OnNotifyMarketBuySell(self, *args, **kwargs) -> None: ...
    def OnNotifyServerTime(self, *args, **kwargs) -> None: ...
    def OnNotifyBoolTunelLONG(self, *args, **kwargs) -> None: ...
    def OnNotifyMACDLONG(self, *args, **kwargs) -> None: ...
    def OnNotifyFutureTradeInfoLONG(self, *args, **kwargs) -> None: ...
    def OnNotifyStrikePrices(self, *args, **kwargs) -> None: ...

class RecordableSKCenterLibEvents(SKCenterLibEvents):
    recorder: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def OnTimer(self, *args, **kwargs) -> None: ...
    def OnShowAgreement(self, *args, **kwargs) -> None: ...
