from eskmo.config.skcom import *
from eskmo.const.event import *
from eskmo.const.skcom import *
from eskmo.skcom.function import *
from eskmo.skcom.mapping import *
from eskmo.base.mvtype import *
from _typeshed import Incomplete
from eskmo.base.runner import APIRunner as APIRunner
from eskmo.base.types import API_FROM_PID as API_FROM_PID, RUNNER_TAG as RUNNER_TAG
from eskmo.config.release import APP_PRODUCT_KEY as APP_PRODUCT_KEY
from eskmo.const.skcom import API_SKCOM as API_SKCOM
from eskmo.skcom.event import SKCenterLibEvents as SKCenterLibEvents, SKOrderLibEvents as SKOrderLibEvents, SKQuoteLibEvents as SKQuoteLibEvents, SKReplyLibEvents as SKReplyLibEvents
from eskmo.skcom.recording.event import RecordableSKCenterLibEvents as RecordableSKCenterLibEvents, RecordableSKOrderLibEvents as RecordableSKOrderLibEvents, RecordableSKQuoteLibEvents as RecordableSKQuoteLibEvents, RecordableSKReplyLibEvents as RecordableSKReplyLibEvents
from eskmo.symbol.stock import RUNNER_TAG_STOCK as RUNNER_TAG_STOCK
from eskmo.utils.appverify import decrypt as decrypt, loadAppVerifyKey as loadAppVerifyKey, validate as validate
from eskmo.utils.config import Config as Config
from eskmo.utils.misc import TESTING as TESTING, hashId as hashId

SK_LOGIN_RETRY_TIMES: int
SK_POKE_TIMES: int
IS_SKCOM_LIB_REMOVED: str
IS_RECORDING: Incomplete
IS_APP_VERFIY: Incomplete

class SkcomRunner(APIRunner):
    initLock: Incomplete
    lib: Incomplete
    proxy: bool
    globals: Incomplete
    loginStats: Incomplete
    def initGlobals(self) -> None: ...
    def apitype(self): ...
    def clearComtypesCache(self) -> None: ...
    def deleteCacheFolder(self, folderPath) -> None: ...
    comtypes: Incomplete
    client: Incomplete
    def initComtypes(self): ...
    def getAllAccounts(self): ...
    def checkMarketWithAccount(self, target): ...
    def initSkcomGlobals(self) -> None: ...
    def installSKCOM(self) -> None: ...
    def initDllModules(self) -> None: ...
    sk: Incomplete
    def importSkcom(self) -> None: ...
    skC: Incomplete
    SKCenterEvent: Incomplete
    SKCenterEventHandler: Incomplete
    def initSKCenterLib(self) -> None: ...
    skR: Incomplete
    SKReplyEvent: Incomplete
    SKReplyLibEventHandler: Incomplete
    def initSKReplyLib(self) -> None: ...
    skO: Incomplete
    SKOrderEvent: Incomplete
    SKOrderLibEventHandler: Incomplete
    def initSKOrderLib(self) -> None: ...
    skQ: Incomplete
    SKQuoteEvent: Incomplete
    SKQuoteLibEventHandler: Incomplete
    def initSKQuoteLib(self) -> None: ...
    def initSkcom(self) -> None: ...
    def callCheck(self, func): ...
    def func(self, func, *args, **kwargs): ...
    def call(self, func, *args, **kwargs): ...
    def libcall(self, returnId, func, *args, **kwargs): ...
    def libwait(self, returnId): ...
    def callAndSuccess(self, func, *args): ...
    sysInformations: Incomplete
    def setDefaultSysInformations(self) -> None: ...
    relogin: bool
    def leaveOnLogin(self, errMsg, mncode: Incomplete | None = None) -> None: ...
    def loginToServer(self): ...
    def emit(self, event, data={}, fromPid: Incomplete | None = None) -> None: ...
    account: Incomplete
    password: Incomplete
    isMainRunner: Incomplete
    def login(self, data) -> None: ...
    def verifyAppKey(self): ...
    def verifySKCOMVersion(self): ...
    def skLogin(self) -> None: ...
    def logout(self, data) -> None: ...
    def batchcall(self, data) -> None: ...
    def initLoginReady(self) -> None: ...
    def apicall(self, data) -> None: ...
    def keepPokeAPI(self) -> None: ...
    def qucikPokeAPIOnce(self) -> None: ...
    def getAccountDict(self, accountDataStr): ...
    def addAccount(self, accountData) -> None: ...
    def pokeAPI(self) -> None: ...
    def emitCheck(self, event): ...
