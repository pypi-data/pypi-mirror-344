from eskmo.base.mvtype import *
from eskmo.const.event import *
from eskmo.base.types import *
import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from eskmo.const.skcom import MNCODE as MNCODE
from eskmo.message.client import MessageClient as MessageClient
from eskmo.message.const import SOCKET_NAME_MAIN_PROCESS_RECV as SOCKET_NAME_MAIN_PROCESS_RECV, SOCKET_PUB as SOCKET_PUB, SOCKET_SUB as SOCKET_SUB
from eskmo.utils.logger import Logger as Logger
from eskmo.utils.misc import TESTING as TESTING, hashId as hashId, renameThread as renameThread, threadStart as threadStart
from eskmo.utils.process import getAllCores as getAllCores
from eskmo.utils.thread import SingleThreadHandler as SingleThreadHandler

ctx: Incomplete

class APIRunner(ABC, metaclass=abc.ABCMeta):
    name: Incomplete
    relogin: bool
    receiver: Incomplete
    senders: Incomplete
    isMainRunner: bool
    account: str
    isPrintDisabled: bool
    runnerTag: Incomplete
    def __init__(self, name=..., fromPid=..., receiver: Incomplete | None = None, senders: Incomplete | None = None, queues={}) -> None: ...
    @abstractmethod
    def apitype(self): ...
    def fromPid(self): ...
    @property
    def queues(self): ...
    @queues.setter
    def queues(self, val) -> None: ...
    def disablePrint(self) -> None: ...
    def apiListen(self) -> None: ...
    def runOnZMQ(self, payload) -> None: ...
    def ZMQListen(self) -> None: ...
    def start(self, port) -> None: ...
    def initZMQ(self, port) -> None: ...
    def send(self, senderName, payload) -> None: ...
    def leave(self, err: Incomplete | None = None, isReLogin: bool = True, mncode: Incomplete | None = None) -> None: ...
    def emit(self, event, data={}, fromPid: Incomplete | None = None): ...
    def print(self, msg, logType=...) -> None: ...
    def sendCall(self, data) -> None: ...
    def sendOnEvent(self, event, data) -> None: ...
    def debug(self, msg) -> None: ...
    def info(self, msg) -> None: ...
    def warning(self, msg) -> None: ...
    def error(self, msg) -> None: ...
    def fatal(self, msg) -> None: ...
    @abstractmethod
    def login(self, data): ...
    @abstractmethod
    def apicall(self, data): ...
    @abstractmethod
    def logout(self, data): ...

class APICreator:
    runnerClass: Incomplete
    senders: Incomplete
    port: Incomplete
    receiver: Incomplete
    def __init__(self, runnerClass, fromPid=..., name: str = '', runnerId=..., receiver: Incomplete | None = None, senders={}, queues={}, port: int = 5555, cores=...) -> None: ...
    @property
    def fromPid(self): ...
    @property
    def queues(self): ...
    def runnerName(self): ...
    @staticmethod
    def run(runnerClass, fromPid, name, receiver, senders, port, qlist) -> None: ...
    def startRunner(self): ...
    def join(self) -> None: ...
