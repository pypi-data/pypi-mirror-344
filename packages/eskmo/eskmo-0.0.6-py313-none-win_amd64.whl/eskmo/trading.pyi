from eskmo.base.mvtype import *
from eskmo.const.event import *
from _typeshed import Incomplete
from abc import ABC
from eskmo.skcom.handler import API_SKCOM as API_SKCOM, SkcomHandler as SkcomHandler
from eskmo.symbol.future import FutureInfoHandler as FutureInfoHandler, HANDLER_FUTURE_INFO as HANDLER_FUTURE_INFO
from eskmo.symbol.oddlots import HANDLER_ODD_LOTS_INFO as HANDLER_ODD_LOTS_INFO, HANDLER_ODD_LOTS_POSITION as HANDLER_ODD_LOTS_POSITION, OddLotsInfoHandler as OddLotsInfoHandler, OddLotsPositionHandler as OddLotsPositionHandler
from eskmo.symbol.position import HANDLER_POSITION as HANDLER_POSITION, PositionHandler as PositionHandler
from eskmo.symbol.stock import HANDLER_STOCK_INFO as HANDLER_STOCK_INFO, StockInfoHandler as StockInfoHandler
from eskmo.utils.logger import Logger as Logger

API_BROKER: str

class APIBase(ABC):
    name: str
    globals: dict
    catchers: dict
    handlers: dict
    loginAllSuccess: bool
    readOnlyKeys: list
    apiReadOnlyKeys: list[str]
    connections: dict
    def __init__(self, name: str = 'UnknownAPI', globals={}, readOnlyKeys=[]) -> None: ...
    def initProcessGlobals(self) -> None: ...
    def register(self, pid, id) -> None: ...
    def deregister(self, pid) -> None: ...
    def setConnection(self, conn) -> None: ...
    def trigger(self, pid, event=..., data={}) -> None: ...
    def publish(self, conn, event, data, pid) -> None: ...

class TradingAPI(APIBase):
    apis: Incomplete
    def __init__(self, apis: Incomplete | None = None, defaultApi: Incomplete | None = None, isReplay: bool = False) -> None: ...
    handlers: Incomplete
    subscribeMap: Incomplete
    def defaultAPIs(self, isReplay: bool = False): ...
    api: Incomplete
    def setDefaultAPI(self, name) -> None: ...
    def getAPI(self, apiName): ...
    def getAccountBalance(self, apiName=...): ...
    def apicall(self, pid, api, account, func, *args, **kwargs): ...
    def apiOrderCall(self, pid, api, account, action, *args, **kwargs): ...
    def apiPositionCall(self, pid, api, account, action, *args, **kwargs): ...
    def accounts(self, pid) -> None: ...
    def login(self, pid, apiName, *args, **kwargs): ...
    def multiLogin(self, pid, apiName, *args, **kwargs): ...
    def logout(self, pid, apiName, *args, **kwargs): ...
    def getSubscribeHandler(self, targetTag, targetMarket): ...
    def subscribe(self, pid, api, account, market, tag, *args, **kwargs) -> None: ...
    def getPIDSubscribeInfo(self, pid): ...
    def getAPIName(self, api): ...
    def unsubscribeAll(self, pid) -> None: ...
    def unsubscribe(self, pid, api, account, market, tag, *args, **kwargs) -> None: ...
    def request(self, pid, api, account, market, tag, *args, **kwargs) -> None: ...
