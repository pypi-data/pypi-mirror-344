from eskmo.const.event import *
from abc import ABC
from eskmo.base.mvtype import BEST5 as BEST5, MARKET as MARKET, PID as PID, QUOTE as QUOTE, STOCK as STOCK, SYMBOL as SYMBOL, SYMBOL_CODE as SYMBOL_CODE
from eskmo.internal.api import api as api
from eskmo.internal.eventdata import DictableResult as DictableResult
from eskmo.utils.logger import Logger as Logger
from typing import Callable

class Event(ABC):
    api: api
    pid: int
    @staticmethod
    def init_api(api: api): ...
    @staticmethod
    def on_filter(data: DictableResult, func: Callable, filter: dict = {}): ...
    @staticmethod
    def on_event(event: str, func: Callable, filter: dict = {}): ...
    @staticmethod
    def on_log(level: str = ..., atFunc: Callable = None): ...
    @staticmethod
    def on(event: str, filter: dict = {}, atFunc: Callable = None): ...
    @staticmethod
    def on_events(events: list[str], filter: dict = {}): ...
    @staticmethod
    def subscribe(*args, **kwargs) -> None: ...
    @staticmethod
    def on_event_with_markets_symbols(event, func, symbols: set = ..., markets: set = ..., tag: str = ...): ...
    @staticmethod
    def wrapper_with_symbols_markets(event: str, symbol: str = None, market: str = ..., tag: str = ..., atFunc: Callable = None): ...
    @staticmethod
    def parse_symbols_markets(symbol: str = None, market: str = ...): ...
    @staticmethod
    def getAtFunc(*args): ...

class QuoteEvent(Event):
    @staticmethod
    def price_changed(*args, symbol: str = None, market: str = ...): ...
    @staticmethod
    def bidask_changed(*args, symbol: str = None, market: str = ...): ...
    @staticmethod
    def tick_changed(*args, symbol: str = None, market: str = ...): ...
    @staticmethod
    def subscribe_start(*args): ...
    @staticmethod
    def subscribe_fail(*args): ...
    @staticmethod
    def subscribe_success(*args): ...
    @staticmethod
    def unsubscribe_start(*args): ...
    @staticmethod
    def unsubscribe_fail(*args): ...
    @staticmethod
    def unsubscribe_success(*args): ...

class TickEvent(Event):
    @staticmethod
    def notify(*args, symbol: str = None, market: str = ...): ...
    @staticmethod
    def history_notify(*args, symbol: str = None, market: str = ...): ...
    @staticmethod
    def subscribe_start(*args): ...
    @staticmethod
    def subscribe_fail(*args): ...
    @staticmethod
    def subscribe_success(*args): ...
    @staticmethod
    def unsubscribe_start(*args): ...
    @staticmethod
    def unsubscribe_fail(*args): ...
    @staticmethod
    def unsubscribe_success(*args): ...

class Best5Event(Event):
    @staticmethod
    def notify(*args, symbol: str = None, market: str = ...): ...
    @staticmethod
    def subscribe_start(*args): ...
    @staticmethod
    def subscribe_fail(*args): ...
    @staticmethod
    def subscribe_success(*args): ...
    @staticmethod
    def unsubscribe_start(*args): ...
    @staticmethod
    def unsubscribe_fail(*args): ...
    @staticmethod
    def unsubscribe_success(*args): ...

class APIEvent(Event):
    @staticmethod
    def execute_error(*args): ...

class LogEvent(Event):
    @staticmethod
    def debug(*args): ...
    @staticmethod
    def info(*args): ...
    @staticmethod
    def warning(*args): ...
    @staticmethod
    def error(*args): ...
    @staticmethod
    def fatal(*args): ...

class OrderEvent(Event):
    @staticmethod
    def send_start(*args): ...
    @staticmethod
    def send_fail(*args): ...
    @staticmethod
    def send_success(*args): ...
    @staticmethod
    def placed_success(*args): ...
    @staticmethod
    def placed_fail(*args): ...
    @staticmethod
    def cancel_fail(*args): ...
    @staticmethod
    def notify(*args, symbol: str = ..., market: str = ...): ...

class MITOrderEvent:
    @staticmethod
    def send_start(*args): ...
    @staticmethod
    def send_fail(*args): ...
    @staticmethod
    def send_success(*args): ...
    @staticmethod
    def placed_success(*args): ...
    @staticmethod
    def placed_fail(*args): ...
    @staticmethod
    def cancel_fail(*args): ...
    @staticmethod
    def notify(*args): ...

class UserEvent:
    @staticmethod
    def login_start(*args): ...
    @staticmethod
    def login_success(*args): ...
    @staticmethod
    def login_progress_notify(*args): ...
    @staticmethod
    def login_fail(*args): ...

class SymbolEvent:
    @staticmethod
    def margin_limit(*args): ...

class PnLEvent:
    @staticmethod
    def unrealized_summary(*args): ...
    @staticmethod
    def unrealized_details(*args): ...
    @staticmethod
    def realized_summary(*args): ...
    @staticmethod
    def realized_details(*args): ...
    @staticmethod
    def realized_summary_by_symbol(*args): ...
    @staticmethod
    def daytrade_summary(*args): ...
    @staticmethod
    def daytrade_details(*args): ...
    @staticmethod
    def update_finished(*args): ...

class EskmoEvent:
    api: APIEvent
    log: LogEvent
    user: UserEvent
    symbol: SymbolEvent
    order: OrderEvent
    mit_order: MITOrderEvent
    quote: QuoteEvent
    tick: TickEvent
    best5: Best5Event
    pnl: PnLEvent
    @staticmethod
    def init_api(api: api): ...
