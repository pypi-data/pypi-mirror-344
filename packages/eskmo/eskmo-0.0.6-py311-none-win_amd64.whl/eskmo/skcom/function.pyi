from eskmo.const.skcom import *
from _typeshed import Incomplete
from eskmo.base.mvtype import API_CALLBACK_INFO_ID as API_CALLBACK_INFO_ID, API_FUNCTION as API_FUNCTION, LOG_INFO as LOG_INFO, ODD_LOTS as ODD_LOTS, ORDER_BUY as ORDER_BUY, ORDER_SELL as ORDER_SELL, STOCK as STOCK, THREAD_ZMQ_PREFIX as THREAD_ZMQ_PREFIX
from eskmo.const.event import E_ERRORS as E_ERRORS, E_SKCOM_EXECUTE_FAIL as E_SKCOM_EXECUTE_FAIL, SKCOM_EXEC_PHASE as SKCOM_EXEC_PHASE, SKCOM_EXEC_PHASE_AFTER_EXEC as SKCOM_EXEC_PHASE_AFTER_EXEC, SKCOM_EXEC_PHASE_BEFORE_EXEC as SKCOM_EXEC_PHASE_BEFORE_EXEC, SKCOM_EXEC_PHASE_EXEC as SKCOM_EXEC_PHASE_EXEC
from eskmo.skcom.proxy import SKProxyStockAlterOrder as SKProxyStockAlterOrder
from eskmo.skcom.runner import SkcomRunner as SkcomRunner
from eskmo.utils.config import Config as Config
from eskmo.utils.misc import renameThread as renameThread, threadStart as threadStart

SK_CENTER: str
SK_QUOTE: str
SK_ORDER: str
SK_REPLY: str
SK_QUOTELIB_PREFIX: str
SK_ORDERLIB_PREFIX: str
SK_CENTERLIB_PREFIX: str
SK_REPLYLIB_PREFIX: str
SK_INTERFACE_CENTER: str
SK_INTERFACE_REPLY: str
SK_INTERFACE_ORDER: str
SK_INTERFACE_QUOTE: str
SK_INTERFACES: Incomplete
SKC_SET_LOG_PATH: str
SKC_LOGIN: str
SKC_GET_RETURN_CODE_MESSAGE: str
SKC_SET_DEBUGER: str
SKC_RESET_SERVER: str
SKC_GET_LAST_LOG_INFO: str
SKC_SET_AUTHORITY: str
SKC_LOGIN_SET_QUOTE: str
SKC_GET_SK_API_VERSION_AND_BIT: str
SKC_GENERATE_KEY_CERT: str
SKC_FUNCTION_ALL: Incomplete
SKO_INITIALIZE: str
SKO_GET_USER_ACCOUNT: str
SKO_READ_CERT_BY_ID: str
SKO_SET_MAX_QTY: str
SKO_MAX_COUNT: str
SKO_SEND_STOCK_ORDER: str
SKO_SEND_FUTURE_ORDER_CLR: str
SKO_SEND_OPTION_ORDER: str
SKO_SEND_OVER_SEA_FUTURE_ORDER: str
SKO_SEND_OVER_SEA_OPTION_ORDER: str
SKO_SEND_FUTURE_STOP_LOSS_ORDER: str
SKO_SEND_MOVING_STOP_LOSS_ORDER: str
SKO_SEND_OPTION_STOP_LOSS_ORDER: str
SKO_SEND_FUTURE_OCO_ORDER: str
SKO_SEND_FOREIGN_STOCK_ORDER: str
SKO_DECREASE_ORDER_BY_SEQ_NO: str
SKO_OVER_SEA_DECREASE_ORDER_BY_SEQ_NO: str
SKO_CANCEL_ORDER_BY_SEQ_NO: str
SKO_CANCEL_ORDER_BY_STOCK_NO: str
SKO_CORRECT_PRICE_BY_SEQ_NO: str
SKO_CORRECT_PRICE_BY_BOOK_NO: str
SKO_SEND_OVER_SEA_FUTURE_SPREAD_ORDER: str
SKO_GET_REAL_BALANCE_REPORT: str
SKO_GET_OVER_SEA_FUTURE_OPEN_INTEREST: str
SKO_GET_STOP_LOSS_REPORT: str
SKO_GET_OVERSEA_FUTURES: str
SKO_GET_OVERSEA_OPTIONS: str
SKO_UNLOCK_ORDER: str
SKO_OVER_SEA_CANCEL_ORDER_BY_SEQ_NO: str
SKO_OVER_SEA_CANCEL_ORDER_BY_BOOK_NO: str
SKO_GET_LOGIN_TYPE: str
SKO_GET_SPEEDY_TYPE: str
SKO_LOAD_OS_COMMODITY: str
SKO_LOAD_OO_COMMODITY: str
SKO_GET_FUTURE_RIGHTS: str
SKO_GET_REQUEST_OVER_SEA_FUTURE_RIGHT: str
SKO_GET_MARGIN_PURCHASE_AMOUNT_LIMIT: str
SKO_GET_BALANCE_QUERY: str
SKO_SEND_FUTURE_MIT_ORDER: str
SKO_SEND_OPTION_MIT_ORDER: str
SKO_SEND_DUPLEX_ORDER: str
SKO_ADD_SGX_API_ORDER_SOCKET: str
SKO_CANCEL_ORDER_BY_BOOK_NO: str
SKO_TX_OFFSET: str
SKO_ASSEMBLE_OPTIONS: str
SKO_DISASSEMBLE_OPTIONS: str
SKO_COVER_ALL_PRODUCT: str
SKO_WITH_DRAW: str
SKO_SEND_STOCK_STRATEGY_DAY_TRADE: str
SKO_SEND_STOCK_STRATEGY_CLEAR: str
SKO_GET_TS_SMART_STRATEGY_REPORT: str
SKO_CANCEL_TS_STRATEGY_ORDER: str
SKO_OVER_SEA_CORRECT_PRICE_BY_BOOK_NO: str
SKO_OVER_SEA_CORRECT_PRICE_SPREAD_BY_BOOK_NO: str
SKO_OVER_SEAL_OPTION_CORRECT_PRICE_BY_BOOK_NO: str
SKO_SEND_OVER_SEA_FUTURE_ORDER_OLID: str
SKO_SEND_OVER_SEA_FUTURE_SPREAD_ORDER_OLID: str
SKO_OVER_SEA_CORRECT_PRICE_BY_SGX_API_SEQ_NO: str
SKO_SEND_STOCK_STRATEGY_MIT: str
SKO_SEND_STOCK_STRATEGY_OCO: str
SKO_GET_PROFIT_LOSS_GW_REPORT: str
SKO_SEND_STOCK_STRATEGY_MIOC: str
SKO_SEND_STOCK_STRATEGY_MST: str
SKO_SEND_STOCK_STRATEGY_CB: str
SKO_GET_OVER_SEA_FUTURE_OPEN_INTEREST_GW: str
SKO_PINGAND_TRACERT_TEST: str
SKO_SEND_STOCK_ODD_LOT_ORDER: str
SKO_SEND_TF_OFFSET: str
SKO_LOG_UPLOAD: str
SKO_TELNET_TEST: str
SKO_CANCEL_TS_STRATEGY_ORDER_V1: str
SKO_SEND_FUTURE_STP_V1_ORDER: str
SKO_SEND_FUTURE_MST_V1_ORDER: str
SKO_SEND_FUTURE_MIT_V1_ORDER: str
SKO_SEND_FUTURE_OCO_V1_ORDER: str
SKO_CANCEL_TF_STRATEGY_ORDER_V1: str
SKO_CANCEL_FOREIGN_STOCK_ORDER: str
SKO_GET_OPEN_INTEREST_GW: str
SKO_INITIAL_PROXY_BY_ID: str
SKO_SEND_STOCK_PROXY_ORDER: str
SKO_SEND_STOCK_PROXY_ALTER: str
SKO_SEND_FUTURE_PROXY_ORDER_CLR: str
SKO_SEND_FUTURE_PROXY_ALTER: str
SKO_SEND_OPTION_PROXY_ORDER: str
SKO_SEND_DUPLEX_PROXY_ORDER: str
SKO_SEND_OPTION_PROXY_ALTER: str
SKO_SEND_OVERSEA_FUTURE_PROXY_ORDER: str
SKO_SEND_OVERSEA_OPTION_PROXY_ORDER: str
SKO_SEND_OVERSEA_FUTURE_PROXY_ALTER: str
SKO_SEND_FOREIGN_STOCK_PROXY_ORDER: str
SKO_SEND_FOREIGN_STOCK_PROXY_CANCEL: str
SKO_SEND_OVERSEA_FUTURE_SPREAD_PROXY_ORDER: str
SKO_PROXY_DISCONNECT_BY_ID: str
SKO_PROXY_RECONNECT_BY_ID: str
SKO_SEND_STOCK_STRATEGY_FTL_DAY_TRADE: str
SKO_GET_AVG_COST: str
SKO_CANCEL_ORDER_BY_STOCK_NO_ADVANCE: str
SK_CANCEL_ORDER_TYPE_BUY: int
SK_CANCEL_ORDER_TYPE_SELL: int
SK_CANCEL_ORDER_TYPE_MAPS: Incomplete
SKO_FUNCTION_ORDER_OPERATIONS: Incomplete
SKO_FUNCTION_SEND_CANCE_ORDER_OPERATIONS: Incomplete
SKO_FUNCTION_ALL: Incomplete
SKQ_REQUEST_KLINE_NEW_VERSION: int
SKQ_REQUEST_KLINE_OLD_VERSION: int
SKQ_REQUEST_KLINE_SESSION_ALL: int
SKQ_REQUEST_KLINE_SESSION_AM: int
SKQ_REQUEST_STOCKS: str
SKQ_LEAVE_MONITOR: str
SKQ_REQUEST_TICKS: str
SKQ_REQUEST_KLINE: str
SKQ_REQUEST_SERVER_TIME: str
SKQ_REQUEST_SERVER_TIME_SUCCESS: int
SKQ_GET_MARKET_BUY_SELL: str
SKQ_REQUEST_MACD: str
SKQ_REQUEST_BOOL_TUNEL: str
SKQ_REQUEST_FUTURE_TRADE_INFO: str
SKQ_DELTA: str
SKQ_GAMMA: str
SKQ_THETA: str
SKQ_VEGA: str
SKQ_RHO: str
SKQ_GET_STRIKE_PRICES: str
SKQ_REQUEST_KLINE_AM: str
SKQ_REQUEST_STOCK_LIST: str
SKQ_REQUEST_LIVE_TICK: str
SKQ_IS_CONNECTED: str
SKQ_GET_MARKET_PRICE_TS: str
SKQ_CANCEL_REQUEST_STOCKS: str
SKQ_CANCEL_REQUEST_TICKS: str
SKQ_GET_QUOTE_STATUS: str
SKQ_REQUEST_KLINE_AM_BY_DATE: str
SKQ_ENTER_MONITOR_LONG: str
SKQ_GET_STOCK_BY_INDEX_LONG: str
SKQ_GET_STOCK_BY_NO_LONG: str
SKQ_GET_TICK_LONG: str
SKQ_GET_BEST5_LONG: str
SKQ_GET_MACD_LONG: str
SKQ_GET_BOOL_TUNEL_LONG: str
SKQ_REQUEST_STOCKS_BY_MARKET_NO: str
SKQ_GET_STOCK_BY_MARKET_AND_NO: str
SKQUOTE_REQUEST_TICKS_WITH_MARKET_NO: str
SKR_CONNECT_BY_ID: str
IS_MODE_SANDBOX: Incomplete
SK_EXCHANGE_LISTED: int
SK_EXCHANGE_OTC: int
SK_EXCHANGE_FUTURE: int
SK_EXCHANGE_OPTION: int
SK_EXCHANGE_ESM: int
SK_EXCHANGE_INTRADAY_ODDLOTS_LISTED: int
SK_EXCHANGE_INTRADAY_ODDLOTS_OTC: int
SK_EXCHANGE_FUTURE_CUSTOM: int
SK_EXCHANGE_OPTION_CUSTOM: int
SK_STOCK_ODDLOTS_MAP: Incomplete
SK_EXCHANGES_STOCK: Incomplete
SK_EXCHANGE_LIST: Incomplete

def matchPrefix(main_str, pattern_str): ...
def getLibName(func): ...
def isSkSuccess(status): ...
def isOrderOperations(skfunc): ...
def isSendCancelOrderOperations(skfunc): ...

SK_ADD_SKSTOCKLONG_FUNCTIONS: Incomplete
SK_CONCURRENT_FUNCTIONS: Incomplete
API_VERSION_UNINITIALIZED: str
API_BIT_UNINITIALIZED: str

class SkcomCaller:
    api: SkcomRunner
    threads: Incomplete
    tasks: Incomplete
    returns: Incomplete
    disabled: bool
    printQueue: Incomplete
    version: Incomplete
    bit: Incomplete
    def __init__(self, api: SkcomRunner, threads: int = 1) -> None: ...
    def listenForPrint(self) -> None: ...
    def start(self) -> None: ...
    def getProxyOrderTypeFromOrderDict(self, orderDict): ...
    def toStockProxyAlter(self, orderDict): ...
    def toStockProxyOrder(self, orderDict): ...
    def toFutureOrder(self, orderDict: dict): ...
    def toStockOrder(self, orderDict): ...
    def toSkAvgCostQuery(self, query): ...
    def toIntraDayOddLotStockOrder(self, orderDict): ...
    @staticmethod
    def getOrderStr(orderDict, key): ...
    @staticmethod
    def getOrderInt(orderDict, key): ...
    def toOCOStockOrder(self, d): ...
    def toMITStockOrder(self, orderDict): ...
    def toStockFastOCOOrder(self, orderDict): ...
    def toCBStockOrder(self, orderDict): ...
    def afterExecute(self, skfunc, mncode, isAfterExecuted, ret, *args, **kwargs): ...
    def listen(self) -> None: ...
    def disable(self) -> None: ...
    def isDisabled(self): ...
    def enable(self) -> None: ...
    def prepareArgs(self, skfunc, args): ...
    def execute(self, skfunc, *args, **kwargs): ...
    def printToMainProcess(self, text, level=...) -> None: ...
    def wait(self, returnId): ...
    def call(self, returnId, skfunc, *args, **kwargs): ...
