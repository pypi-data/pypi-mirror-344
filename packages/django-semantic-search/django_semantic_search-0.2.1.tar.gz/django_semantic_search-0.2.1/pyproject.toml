[tool.poetry]
name = "django-semantic-search"
version = "0.2.1"
description = "Bringing semantic search to Django. Integrates seamlessly with Django ORM."
authors = ["Kacper ≈Åukawski <lukawski.kacper@gmail.com>"]
license = "Apache-2.0"
readme = "README.md"
packages = [
    { include = "django_semantic_search", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.10"
django = ">=5.0"
qdrant-client = "^1.11.1"
sentence-transformers = { version = "^4.1.0", optional = true }
torch = [
  {version = "^2.0.0", markers = "sys_platform == 'darwin'", source = "pypi", optional = true},
  {version = "^2.0.0", markers = "sys_platform != 'darwin'", source = "pytorch_cpu", optional = true}
]
openai = { version = "^1.0.0", optional = true }
fastembed = { version = "^0.6.1", optional = true }

[tool.poetry.extras]
qdrant = ["qdrant-client"]
sentence-transformers = ["sentence-transformers", "torch"]
openai = ["openai"]
fastembed = ["fastembed"]
all = ["qdrant-client", "sentence-transformers", "torch", "openai", "fastembed"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"
ruff = "^0.6.2"
pytest = "^8.3.2"
mkdocs = "^1.6.1"
mkdocstrings-python = "^1.11.1"
mkdocs-material = {extras = ["imaging"], version = "^9.5.34"}

[[tool.poetry.source]]
name = "pytorch_cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.pytest.ini_options]
minversion = "7.1"
pythonpath = [
    "src/"
]
testpaths = [
    "tests/"
]

[tool.ruff]
lint.typing-modules = ["cibuildwheel.typing"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
