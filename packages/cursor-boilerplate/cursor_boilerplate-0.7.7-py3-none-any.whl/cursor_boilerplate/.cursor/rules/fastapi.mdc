---
description: 
globs: 
alwaysApply: false
---
# FastAPI 프로젝트 규칙

## 1. 개발 환경
- Python 3.13 사용
- 패키지 관리 도구로 `uv` 사용
  - `pyproject.toml`을 통한 의존성 관리
  - `uv.lock` 파일을 통한 버전 고정
- FastAPI 프레임워크 사용
  - 내장 Swagger UI 사용 (OpenAPI 문서 자동 생성)

## 2. 프로젝트 구조
```
project/
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── api/
│   │   ├── __init__.py
│   │   └── v1/
│   │       ├── __init__.py
│   │       └── endpoints/
│   ├── core/
│   │   ├── __init__.py
│   │   ├── config.py
│   │   └── security.py
│   └── models/
│       ├── __init__.py
│       └── schemas.py
├── tests/
├── pyproject.toml
├── uv.lock
└── README.md
```

## 3. API 개발 규칙
- 모든 API 엔드포인트는 `app/api/v1/endpoints/` 디렉토리에 위치
- 각 엔드포인트 파일은 단일 리소스에 대한 CRUD 작업을 포함
- Pydantic 모델을 사용하여 요청/응답 스키마 정의
- OpenAPI 문서를 위한 상세한 docstring 작성

## 4. 설정 관리
- 환경 변수를 통한 설정 관리
- `app/core/config.py`에서 모든 설정값 관리
- 개발/테스트/운영 환경별 설정 분리

## 5. 보안
- JWT 기반 인증 사용
- 비밀번호 해싱
- CORS 설정
- 요청 속도 제한

## 6. 테스트
- pytest를 사용한 테스트 작성
- 각 API 엔드포인트에 대한 테스트 포함
- 비동기 테스트 지원

## 7. 문서화
- FastAPI의 자동 문서화 기능 활용
- 각 엔드포인트에 대한 상세한 설명 추가
- 예시 요청/응답 포함
description: 
globs: 
alwaysApply: false
---
